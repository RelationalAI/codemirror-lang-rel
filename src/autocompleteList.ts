export const autocompleteList = [
  { label: "Any", type: "type" },
  { label: "AutoNumber", type: "type" },
  { label: "Boolean", type: "type" },
  { label: "Char", type: "type" },
  { label: "Day", type: "type" },
  { label: "Date", type: "type" },
  { label: "DateTime", type: "type" },
  { label: "Year", type: "type" },
  { label: "Month", type: "type" },
  { label: "Week", type: "type" },
  { label: "Hour", type: "type" },
  { label: "Minute", type: "type" },
  { label: "Second", type: "type" },
  { label: "Millisecond", type: "type" },
  { label: "Microsecond", type: "type" },
  { label: "Nanosecond", type: "type" },
  { label: "Entity", type: "type" },
  { label: "Int", type: "type" },
  { label: "Number", type: "type" },
  { label: "Missing", type: "type" },
  { label: "Floating", type: "type" },
  { label: "UnsignedInt", type: "type" },
  { label: "SignedInt", type: "type" },
  { label: "Rational", type: "type" },
  { label: "FixedDecimal", type: "type" },
  { label: "Hash", type: "type" },
  { label: "FilePos", type: "type" },
  { label: "String", type: "type" },
  { label: "def", type: "keyword" },
  { label: "output", type: "interface" },
  { label: "insert", type: "interface" },
  { label: "delete", type: "interface" },
  { label: "export", type: "interface" },
  { label: "from", type: "keyword" },
  { label: "if", type: "keyword" },
  { label: "iff", type: "keyword" },
  { label: "then", type: "keyword" },
  { label: "else", type: "keyword" },
  { label: "end", type: "keyword" },
  { label: "exists", type: "keyword" },
  { label: "where", type: "keyword" },
  { label: "with", type: "keyword" },
  { label: "select", type: "keyword" },
  { label: "implies", type: "keyword" },
  { label: "use", type: "keyword" },
  { label: "forall", type: "keyword" },
  { label: "in", type: "keyword" },
  { label: "ic", type: "keyword" },
  { label: "not", type: "keyword" },
  { label: "and", type: "keyword" },
  { label: "or", type: "keyword" },
  { label: "xor", type: "keyword" },
  { label: "union", type: "keyword" },
  { label: "_flatten", type: "function" },
  { label: "abelian_group", type: "function" },
  { label: "abs", type: "function" },
  { label: "absorption_laws", type: "function" },
  { label: "acos", type: "function" },
  { label: "acosh", type: "function" },
  { label: "acot", type: "function" },
  { label: "add", type: "function" },
  { label: "antisymmetric", type: "function" },
  { label: "approximate_abelian_group", type: "function" },
  { label: "approximate_commutative_monoid", type: "function" },
  { label: "approximate_group", type: "function" },
  { label: "approximate_monoid", type: "function" },
  { label: "approximate_ring", type: "function" },
  { label: "approximate_semiring", type: "function" },
  { label: "approximately_associative", type: "function" },
  { label: "approximately_commutative", type: "function" },
  { label: "approximately_distributive", type: "function" },
  { label: "approximately_has_inverse", type: "function" },
  { label: "approximately_left_distributive", type: "function" },
  { label: "approximately_right_distributive", type: "function" },
  { label: "approximately_zero_annihilation", type: "function" },
  { label: "argmax", type: "function" },
  { label: "argmin", type: "function" },
  { label: "arity", type: "function" },
  { label: "asin", type: "function" },
  { label: "asinh", type: "function" },
  { label: "associative", type: "function" },
  { label: "atan", type: "function" },
  { label: "atanh", type: "function" },
  { label: "auto_number", type: "function" },
  { label: "binary_operator", type: "function" },
  { label: "binary_relation", type: "function" },
  { label: "binary_relation_substitution_laws", type: "function" },
  { label: "bitwise_and", type: "function" },
  { label: "bitwise_left_shift", type: "function" },
  { label: "bitwise_not", type: "function" },
  { label: "bitwise_or", type: "function" },
  { label: "bitwise_right_shift", type: "function" },
  { label: "bitwise_unsigned_right_shift", type: "function" },
  { label: "bitwise_xor", type: "function" },
  { label: "boolean_and", type: "function" },
  { label: "boolean_false", type: "function" },
  { label: "boolean_not", type: "function" },
  { label: "boolean_or", type: "function" },
  { label: "boolean_true", type: "function" },
  { label: "bottom", type: "function" },
  { label: "bounded_lattice", type: "function" },
  { label: "bounded_semilattice", type: "function" },
  { label: "byte", type: "function" },
  { label: "capture_group_by_index", type: "function" },
  { label: "capture_group_by_name", type: "function" },
  { label: "cart", type: "function" },
  { label: "cbrt", type: "function" },
  { label: "ceil", type: "function" },
  { label: "char", type: "function" },
  { label: "clamp", type: "function" },
  { label: "commutative", type: "function" },
  { label: "commutative_monoid", type: "function" },
  { label: "comparable", type: "function" },
  { label: "complement", type: "function" },
  { label: "concat", type: "function" },
  { label: "cos", type: "function" },
  { label: "cosh", type: "function" },
  { label: "cot", type: "function" },
  { label: "count", type: "function" },
  { label: "date_add", type: "function" },
  { label: "date_day", type: "function" },
  { label: "date_dayname", type: "function" },
  { label: "date_dayofquarter", type: "function" },
  { label: "date_dayofweek", type: "function" },
  { label: "date_dayofweekofmonth", type: "function" },
  { label: "date_dayofyear", type: "function" },
  { label: "date_daysinmonth", type: "function" },
  { label: "date_isleapyear", type: "function" },
  { label: "date_month", type: "function" },
  { label: "date_monthname", type: "function" },
  { label: "date_quarterofyear", type: "function" },
  { label: "date_subtract", type: "function" },
  { label: "date_week", type: "function" },
  { label: "date_year", type: "function" },
  { label: "dates_period_days", type: "function" },
  { label: "datetime_add", type: "function" },
  { label: "datetime_day", type: "function" },
  { label: "datetime_day_", type: "function" },
  { label: "datetime_dayname", type: "function" },
  { label: "datetime_dayofquarter", type: "function" },
  { label: "datetime_dayofweek", type: "function" },
  { label: "datetime_dayofweekofmonth", type: "function" },
  { label: "datetime_dayofyear", type: "function" },
  { label: "datetime_daysinmonth", type: "function" },
  { label: "datetime_hour", type: "function" },
  { label: "datetime_hour_", type: "function" },
  { label: "datetime_isleapyear", type: "function" },
  { label: "datetime_minute", type: "function" },
  { label: "datetime_minute_", type: "function" },
  { label: "datetime_month", type: "function" },
  { label: "datetime_month_", type: "function" },
  { label: "datetime_monthname", type: "function" },
  { label: "datetime_now", type: "function" },
  { label: "datetime_quarterofyear", type: "function" },
  { label: "datetime_second", type: "function" },
  { label: "datetime_subtract", type: "function" },
  { label: "datetime_to_nanoseconds", type: "function" },
  { label: "datetime_week", type: "function" },
  { label: "datetime_week_", type: "function" },
  { label: "datetime_year", type: "function" },
  { label: "datetime_year_", type: "function" },
  { label: "datetimes_period_milliseconds", type: "function" },
  { label: "decimal", type: "function" },
  { label: "decimal_bit_length", type: "function" },
  { label: "decimal_int_convert", type: "function" },
  { label: "decimal_precision", type: "function" },
  { label: "decode_base", type: "function" },
  { label: "default_value", type: "function" },
  { label: "deg", type: "function" },
  { label: "denominator", type: "function" },
  { label: "describe", type: "function" },
  { label: "diff", type: "function" },
  { label: "disjoint", type: "function" },
  { label: "distributive", type: "function" },
  { label: "divide", type: "function" },
  { label: "docstring", type: "function" },
  { label: "domain", type: "function" },
  { label: "dot_join", type: "function" },
  { label: "double_metaphone", type: "function" },
  { label: "empty", type: "function" },
  { label: "encode_base", type: "function" },
  { label: "epoch_milliseconds", type: "function" },
  { label: "eq", type: "function" },
  { label: "equal", type: "function" },
  { label: "equivalence_relation", type: "function" },
  { label: "erf", type: "function" },
  { label: "erfinv", type: "function" },
  { label: "escape_regex_metachars", type: "function" },
  { label: "export_csv", type: "function" },
  { label: "export_json", type: "function" },
  { label: "factorial", type: "function" },
  { label: "filepos", type: "function" },
  { label: "filepos_value", type: "function" },
  { label: "first", type: "function" },
  { label: "float", type: "function" },
  { label: "float_int_convert", type: "function" },
  { label: "floor", type: "function" },
  { label: "floor_divide", type: "function" },
  { label: "floor_to_int", type: "function" },
  { label: "format_date", type: "function" },
  { label: "format_datetime", type: "function" },
  { label: "formula_card_est", type: "function" },
  { label: "frequency", type: "function" },
  { label: "function", type: "function" },
  { label: "geometric_mean", type: "function" },
  { label: "glm_generic", type: "function" },
  { label: "glm_linear_regression", type: "function" },
  { label: "glm_logistic_regression", type: "function" },
  { label: "glm_predict", type: "function" },
  { label: "glm_probit_regression", type: "function" },
  { label: "graphviz", type: "function" },
  { label: "group", type: "function" },
  { label: "gt", type: "function" },
  { label: "gt_eq", type: "function" },
  { label: "harmonic_mean", type: "function" },
  { label: "has_identity", type: "function" },
  { label: "has_left_identity", type: "function" },
  { label: "has_left_zero", type: "function" },
  { label: "has_maximal_element", type: "function" },
  { label: "has_minimal_element", type: "function" },
  { label: "has_right_identity", type: "function" },
  { label: "has_right_zero", type: "function" },
  { label: "hash", type: "function" },
  { label: "hash_value_uint", type: "function" },
  { label: "haversine", type: "function" },
  { label: "help", type: "function" },
  { label: "html", type: "function" },
  { label: "ic", type: "function" },
  { label: "idempotent", type: "function" },
  { label: "identity", type: "function" },
  { label: "int", type: "function" },
  { label: "int_float_convert", type: "function" },
  { label: "int_spread_by_even", type: "function" },
  { label: "int_spread_by_ratio", type: "function" },
  { label: "intersect", type: "function" },
  { label: "irreflexive", type: "function" },
  { label: "is_", type: "function" },
  { label: "jacobian", type: "function" },
  { label: "join_bounded_lattice", type: "function" },
  { label: "last", type: "function" },
  { label: "lattice", type: "function" },
  { label: "left_distributive", type: "function" },
  { label: "left_identity", type: "function" },
  { label: "left_override", type: "function" },
  { label: "left_zero", type: "function" },
  { label: "levenshtein", type: "function" },
  { label: "like_match", type: "function" },
  { label: "linear_regression", type: "function" },
  { label: "linear_regression_objective", type: "function" },
  { label: "linear_regression_predict", type: "function" },
  { label: "lined_csv", type: "function" },
  { label: "load_csv", type: "function" },
  { label: "load_csv_row_wise", type: "function" },
  { label: "load_json", type: "function" },
  { label: "log", type: "function" },
  { label: "log_card_est", type: "function" },
  { label: "lowercase", type: "function" },
  { label: "lr_random_initial_point", type: "function" },
  { label: "lt", type: "function" },
  { label: "lt_eq", type: "function" },
  { label: "mae", type: "function" },
  { label: "markdown", type: "function" },
  { label: "max", type: "function" },
  { label: "max_k", type: "function" },
  { label: "maximal_element", type: "function" },
  { label: "maximum", type: "function" },
  { label: "mean", type: "function" },
  { label: "mean_normalization", type: "function" },
  { label: "median", type: "function" },
  { label: "meet_bounded_lattice", type: "function" },
  { label: "metaphone", type: "function" },
  { label: "min", type: "function" },
  { label: "min_k", type: "function" },
  { label: "min_max_normalization", type: "function" },
  { label: "minimal_element", type: "function" },
  { label: "minimize_initial_point", type: "function" },
  { label: "minimum", type: "function" },
  { label: "missing", type: "function" },
  { label: "mlpack_adaboost", type: "function" },
  { label: "mlpack_adaboost_predict", type: "function" },
  { label: "mlpack_approx_kfn", type: "function" },
  { label: "mlpack_approx_kfn_build", type: "function" },
  { label: "mlpack_dbscan", type: "function" },
  { label: "mlpack_decision_tree", type: "function" },
  { label: "mlpack_decision_tree_predict", type: "function" },
  { label: "mlpack_det", type: "function" },
  { label: "mlpack_det_build", type: "function" },
  { label: "mlpack_emst", type: "function" },
  { label: "mlpack_fastmks", type: "function" },
  { label: "mlpack_fastmks_build", type: "function" },
  { label: "mlpack_gmm_generate", type: "function" },
  { label: "mlpack_gmm_probability", type: "function" },
  { label: "mlpack_gmm_train", type: "function" },
  { label: "mlpack_hoeffding_tree", type: "function" },
  { label: "mlpack_hoeffding_tree_predict", type: "function" },
  { label: "mlpack_kernel_pca", type: "function" },
  { label: "mlpack_kfn", type: "function" },
  { label: "mlpack_kfn_build", type: "function" },
  { label: "mlpack_kmeans", type: "function" },
  { label: "mlpack_kmeans_centroids", type: "function" },
  { label: "mlpack_knn", type: "function" },
  { label: "mlpack_knn_build", type: "function" },
  { label: "mlpack_krann", type: "function" },
  { label: "mlpack_krann_build", type: "function" },
  { label: "mlpack_lars", type: "function" },
  { label: "mlpack_lars_predict", type: "function" },
  { label: "mlpack_linear_regression", type: "function" },
  { label: "mlpack_linear_regression_predict", type: "function" },
  { label: "mlpack_linear_svm", type: "function" },
  { label: "mlpack_linear_svm_predict", type: "function" },
  { label: "mlpack_logistic_regression", type: "function" },
  { label: "mlpack_logistic_regression_predict", type: "function" },
  { label: "mlpack_lsh", type: "function" },
  { label: "mlpack_lsh_build", type: "function" },
  { label: "mlpack_mean_shift", type: "function" },
  { label: "mlpack_nbc", type: "function" },
  { label: "mlpack_nbc_predict", type: "function" },
  { label: "mlpack_nmf", type: "function" },
  { label: "mlpack_pca", type: "function" },
  { label: "mlpack_perceptron", type: "function" },
  { label: "mlpack_perceptron_predict", type: "function" },
  { label: "mlpack_preprocess_split", type: "function" },
  { label: "mlpack_radical", type: "function" },
  { label: "mlpack_random_forest", type: "function" },
  { label: "mlpack_random_forest_predict", type: "function" },
  { label: "mlpack_softmax_regression", type: "function" },
  { label: "mlpack_softmax_regression_predict", type: "function" },
  { label: "mode", type: "function" },
  { label: "modulo", type: "function" },
  { label: "monoid", type: "function" },
  { label: "mse", type: "function" },
  { label: "multiply", type: "function" },
  { label: "murmurhash", type: "function" },
  { label: "nanoseconds_to_datetime", type: "function" },
  { label: "natural_exp", type: "function" },
  { label: "natural_log", type: "function" },
  { label: "neq", type: "function" },
  { label: "not", type: "function" },
  { label: "nullary_relation", type: "function" },
  { label: "num_bytes", type: "function" },
  { label: "num_chars", type: "function" },
  { label: "numerator", type: "function" },
  { label: "pack", type: "function" },
  { label: "parse_date", type: "function" },
  { label: "parse_datetime", type: "function" },
  { label: "parse_decimal", type: "function" },
  { label: "parse_float", type: "function" },
  { label: "parse_int", type: "function" },
  { label: "parse_json", type: "function" },
  { label: "parse_uuid", type: "function" },
  { label: "partial_order", type: "function" },
  { label: "partial_order_and_bounded_lattice", type: "function" },
  { label: "partial_order_and_join_bounded_lattice", type: "function" },
  { label: "partial_order_and_lattice", type: "function" },
  { label: "partial_order_and_meet_bounded_lattice", type: "function" },
  { label: "pattern_match", type: "function" },
  { label: "percentile", type: "function" },
  { label: "percentile_nearest", type: "function" },
  { label: "period_add", type: "function" },
  { label: "period_day_to_int", type: "function" },
  { label: "period_max", type: "function" },
  { label: "period_min", type: "function" },
  { label: "pi_float", type: "function" },
  { label: "pivot", type: "function" },
  { label: "pop_standard_deviation", type: "function" },
  { label: "pop_variance", type: "function" },
  { label: "pop_zscore_normalization", type: "function" },
  { label: "power", type: "function" },
  { label: "prefix_join", type: "function" },
  { label: "preorder", type: "function" },
  { label: "product", type: "function" },
  { label: "proper_subset", type: "function" },
  { label: "proper_superset", type: "function" },
  { label: "rad", type: "function" },
  { label: "random_mersenne_twister", type: "function" },
  { label: "random_threefry_float", type: "function" },
  { label: "random_threefry_uint", type: "function" },
  { label: "random_uint", type: "function" },
  { label: "range", type: "function" },
  { label: "rational", type: "function" },
  { label: "rational_convert", type: "function" },
  { label: "reflexive", type: "function" },
  { label: "regex_compile", type: "function" },
  { label: "regex_match", type: "function" },
  { label: "regex_match_all", type: "function" },
  { label: "rel", type: "function" },
  { label: "relname_string", type: "function" },
  { label: "remainder", type: "function" },
  { label: "reverse_sort", type: "function" },
  { label: "right_distributive", type: "function" },
  { label: "right_identity", type: "function" },
  { label: "right_override", type: "function" },
  { label: "right_zero", type: "function" },
  { label: "ring", type: "function" },
  { label: "rmse", type: "function" },
  { label: "round", type: "function" },
  { label: "sample_standard_deviation", type: "function" },
  { label: "sample_variance", type: "function" },
  { label: "sample_zscore_normalization", type: "function" },
  { label: "second", type: "function" },
  { label: "semilattice", type: "function" },
  { label: "semiring", type: "function" },
  { label: "sign", type: "function" },
  { label: "sin", type: "function" },
  { label: "sinh", type: "function" },
  { label: "sort", type: "function" },
  { label: "soundex", type: "function" },
  { label: "spread", type: "function" },
  { label: "sqrt", type: "function" },
  { label: "squared", type: "function" },
  { label: "squared_deviation", type: "function" },
  { label: "strict_partial_order", type: "function" },
  { label: "strict_total_order", type: "function" },
  { label: "string", type: "function" },
  { label: "string_join", type: "function" },
  { label: "string_length", type: "function" },
  { label: "string_replace", type: "function" },
  { label: "string_replace_multiple", type: "function" },
  { label: "string_split", type: "function" },
  { label: "string_trim", type: "function" },
  { label: "subset", type: "function" },
  { label: "substring", type: "function" },
  { label: "substring_bytes", type: "function" },
  { label: "subtract", type: "function" },
  { label: "suffix_join", type: "function" },
  { label: "sum", type: "function" },
  { label: "sum_int", type: "function" },
  { label: "superset", type: "function" },
  { label: "svg", type: "function" },
  { label: "symmetric", type: "function" },
  { label: "table", type: "function" },
  { label: "tan", type: "function" },
  { label: "tanh", type: "function" },
  { label: "ternary_relation", type: "function" },
  { label: "top", type: "function" },
  { label: "total", type: "function" },
  { label: "total_order", type: "function" },
  { label: "transitive", type: "function" },
  { label: "transpose", type: "function" },
  { label: "trunc", type: "function" },
  { label: "trunc_divide", type: "function" },
  { label: "trunc_to_int", type: "function" },
  { label: "uint", type: "function" },
  { label: "unary_operator", type: "function" },
  { label: "unary_relation", type: "function" },
  { label: "unary_relation_substitution_laws", type: "function" },
  { label: "union", type: "function" },
  { label: "unit_normalization", type: "function" },
  { label: "unix_epoch", type: "function" },
  { label: "unpack", type: "function" },
  { label: "uppercase", type: "function" },
  { label: "uuid_string", type: "function" },
  { label: "vega", type: "function" },
  { label: "vegalite", type: "function" },
  { label: "vegalite_utils", type: "function" },
  { label: "view_json", type: "function" },
  { label: "weighted_mean", type: "function" },
  { label: "xgboost_classifier", type: "function" },
  { label: "xgboost_classifier_predict", type: "function" },
  { label: "xgboost_classifier_probabilities", type: "function" },
  { label: "xgboost_feature_importances", type: "function" },
  { label: "xgboost_regressor", type: "function" },
  { label: "xgboost_regressor_predict", type: "function" },
  { label: "zero_annihilation", type: "function" },
  { label: "zero_of_operator", type: "function" },
  { label: "zip", type: "function" },
  { label: "registered", type: "variable", info: "Registered Sign / Registered Trade Mark Sign", apply: "®" },
  { label: "degree", type: "variable", info: "Degree Sign", apply: "°" },
  { label: "pm", type: "variable", info: "Plus-Minus Sign / Plus-Or-Minus Sign", apply: "±" },
  { label: "\\^2", info: "Superscript Two / Superscript Digit Two", apply:	"²"},
  { label: "\\^3", info: "Superscript Three / Superscript Digit Three", apply:	"³"},
  { label: "\\^1", info: "Superscript One / Superscript Digit One", apply:	"¹"},
  { label: "\\1/4", type: "variable", info: "Vulgar Fraction One Quarter / Fraction One Quarter", apply: "¼" },
  { label: "\\1/2", type: "variable", info: "Vulgar Fraction One Half / Fraction One Half", apply: "½" },
  { label: "\\3/4", type: "variable", info: "Vulgar Fraction Three Quarters / Fraction Three Quarters", apply: "¾" },
  { label: "\\questiondown", type: "variable", info: "Inverted Question Mark", apply: "¿" },
  { label: "\\times", type: "variable", info: "Multiplication Sign", apply: "×" },
  { label: "\\div", type: "variable", info: "Division Sign", apply: "÷" },
  { label: "\\Alpha", type: "variable", info: "Greek Capital Letter Alpha", apply: "Α" },
  { label: "\\Beta", type: "variable", info: "Greek Capital Letter Beta", apply: "Β" },
  { label: "\\Gamma", type: "variable", info: "Greek Capital Letter Gamma", apply: "Γ" },
  { label: "\\Delta", type: "variable", info: "Greek Capital Letter Delta", apply: "Δ" },
  { label: "\\Epsilon", type: "variable", info: "Greek Capital Letter Epsilon", apply: "Ε" },
  { label: "\\Zeta", type: "variable", info: "Greek Capital Letter Zeta", apply: "Ζ" },
  { label: "\\Eta", type: "variable", info: "Greek Capital Letter Eta", apply: "Η" },
  { label: "\\Theta", type: "variable", info: "Greek Capital Letter Theta", apply: "Θ" },
  { label: "\\Iota", type: "variable", info: "Greek Capital Letter Iota", apply: "Ι" },
  { label: "\\Kappa", type: "variable", info: "Greek Capital Letter Kappa", apply: "Κ" },
  { label: "\\Lambda", type: "variable", info: "Greek Capital Letter Lamda / Greek Capital Letter Lambda", apply: "Λ" },
  { label: "\\upMu", type: "variable", info: "Greek Capital Letter Mu", apply: "Μ" },
  { label: "\\upNu", type: "variable", info: "Greek Capital Letter Nu", apply: "Ν" },
  { label: "\\Xi", type: "variable", info: "Greek Capital Letter Xi", apply: "Ξ" },
  { label: "\\upOmicron", type: "variable", info: "Greek Capital Letter Omicron", apply: "Ο" },
  { label: "\\Pi", type: "variable", info: "Greek Capital Letter Pi", apply: "Π" },
  { label: "\\Rho", type: "variable", info: "Greek Capital Letter Rho", apply: "Ρ" },
  { label: "\\Sigma", type: "variable", info: "Greek Capital Letter Sigma", apply: "Σ" },
  { label: "\\Tau", type: "variable", info: "Greek Capital Letter Tau", apply: "Τ" },
  { label: "\\Upsilon", type: "variable", info: "Greek Capital Letter Upsilon", apply: "Υ" },
  { label: "\\Phi", type: "variable", info: "Greek Capital Letter Phi", apply: "Φ" },
  { label: "\\Chi", type: "variable", info: "Greek Capital Letter Chi", apply: "Χ" },
  { label: "\\Psi", type: "variable", info: "Greek Capital Letter Psi", apply: "Ψ" },
  { label: "\\Omega", type: "variable", info: "Greek Capital Letter Omega", apply: "Ω" },
  { label: "\\alpha", type: "variable", info: "Greek Small Letter Alpha", apply: "α" },
  { label: "\\beta", type: "variable", info: "Greek Small Letter Beta", apply: "β" },
  { label: "\\gamma", type: "variable", info: "Greek Small Letter Gamma", apply: "γ" },
  { label: "\\delta", type: "variable", info: "Greek Small Letter Delta", apply: "δ" },
  { label: "\\varepsilon", type: "variable", info: "Greek Small Letter Epsilon", apply: "ε" },
  { label: "\\zeta", type: "variable", info: "Greek Small Letter Zeta", apply: "ζ" },
  { label: "\\eta", type: "variable", info: "Greek Small Letter Eta", apply: "η" },
  { label: "\\theta", type: "variable", info: "Greek Small Letter Theta", apply: "θ" },
  { label: "\\iota", type: "variable", info: "Greek Small Letter Iota", apply: "ι" },
  { label: "\\kappa", type: "variable", info: "Greek Small Letter Kappa", apply: "κ" },
  { label: "\\lambda", type: "variable", info: "Greek Small Letter Lamda / Greek Small Letter Lambda", apply: "λ" },
  { label: "\\mu", type: "variable", info: "Greek Small Letter Mu", apply: "μ" },
  { label: "\\nu", type: "variable", info: "Greek Small Letter Nu", apply: "ν" },
  { label: "\\xi", type: "variable", info: "Greek Small Letter Xi", apply: "ξ" },
  { label: "\\upomicron", type: "variable", info: "Greek Small Letter Omicron", apply: "ο" },
  { label: "\\pi", type: "variable", info: "Greek Small Letter Pi", apply: "π" },
  { label: "\\rho", type: "variable", info: "Greek Small Letter Rho", apply: "ρ" },
  { label: "\\varsigma", type: "variable", info: "Greek Small Letter Final Sigma", apply: "ς" },
  { label: "\\sigma", type: "variable", info: "Greek Small Letter Sigma", apply: "σ" },
  { label: "\\tau", type: "variable", info: "Greek Small Letter Tau", apply: "τ" },
  { label: "\\upsilon", type: "variable", info: "Greek Small Letter Upsilon", apply: "υ" },
  { label: "\\varphi", type: "variable", info: "Greek Small Letter Phi", apply: "φ" },
  { label: "\\chi", type: "variable", info: "Greek Small Letter Chi", apply: "χ" },
  { label: "\\psi", type: "variable", info: "Greek Small Letter Psi", apply: "ψ" },
  { label: "\\omega", type: "variable", info: "Greek Small Letter Omega", apply: "ω" },
  { label: "\\upvarbeta", type: "variable", info: "Greek Beta Symbol / Greek Small Letter Curled Beta", apply: "ϐ" },
  { label: "\\vartheta", type: "variable", info: "Greek Theta Symbol / Greek Small Letter Script Theta", apply: "ϑ" },
  { label: "\\phi", type: "variable", info: "Greek Phi Symbol / Greek Small Letter Script Phi", apply: "ϕ" },
  { label: "\\varpi", type: "variable", info: "Greek Pi Symbol / Greek Small Letter Omega Pi", apply: "ϖ" },
  { label: "\\upoldKoppa", type: "variable", info: "Greek Letter Archaic Koppa", apply: "Ϙ" },
  { label: "\\upoldkoppa", type: "variable", info: "Greek Small Letter Archaic Koppa", apply: "ϙ" },
  { label: "\\Stigma", type: "variable", info: "Greek Letter Stigma / Greek Capital Letter Stigma", apply: "Ϛ" },
  { label: "\\upstigma", type: "variable", info: "Greek Small Letter Stigma", apply: "ϛ" },
  { label: "\\Digamma", type: "variable", info: "Greek Letter Digamma / Greek Capital Letter Digamma", apply: "Ϝ" },
  { label: "\\digamma", type: "variable", info: "Greek Small Letter Digamma", apply: "ϝ" },
  { label: "\\Koppa", type: "variable", info: "Greek Letter Koppa / Greek Capital Letter Koppa", apply: "Ϟ" },
  { label: "\\upkoppa", type: "variable", info: "Greek Small Letter Koppa", apply: "ϟ" },
  { label: "\\Sampi", type: "variable", info: "Greek Letter Sampi / Greek Capital Letter Sampi", apply: "Ϡ" },
  { label: "\\upsampi", type: "variable", info: "Greek Small Letter Sampi", apply: "ϡ" },
  { label: "\\varkappa", type: "variable", info: "Greek Kappa Symbol / Greek Small Letter Script Kappa", apply: "ϰ" },
  { label: "\\varrho", type: "variable", info: "Greek Rho Symbol / Greek Small Letter Tailed Rho", apply: "ϱ" },
  { label: "\\varTheta", type: "variable", info: "Greek Capital Theta Symbol", apply: "ϴ" },
  { label: "\\epsilon", type: "variable", info: "Greek Lunate Epsilon Symbol", apply: "ϵ" },
  { label: "\\backepsilon", type: "variable", info: "Greek Reversed Lunate Epsilon Symbol", apply: "϶" },
  { label: "\\^0",	info: "Superscript Zero / Superscript Digit Zero",	apply: "⁰"},
  { label: "\\^i",	info: "Superscript Latin Small Letter I",	apply: "ⁱ"},
  { label: "\\^4",	info: "Superscript Four / Superscript Digit Four",	apply: "⁴"},
  { label: "\\^5",	info: "Superscript Five / Superscript Digit Five",	apply: "⁵"},
  { label: "\\^6",	info: "Superscript Six / Superscript Digit Six",	apply: "⁶"},
  { label: "\\^7",	info: "Superscript Seven / Superscript Digit Seven",	apply: "⁷"},
  { label: "\\^8",	info: "Superscript Eight / Superscript Digit Eight",	apply: "⁸"},
  { label: "\\^9",	info: "Superscript Nine / Superscript Digit Nine",	apply: "⁹"},
  { label: "\\^+",	info: "Superscript Plus Sign",	apply: "⁺"},
  { label: "\\^-",	info: "Superscript Minus / Superscript Hyphen-Minus",	apply: "⁻"},
  { label: "\\^=",	info: "Superscript Equals Sign",	apply: "⁼"},
  { label: "\\^(",	info: "Superscript Left Parenthesis / Superscript Opening Parenthesis",	apply: "⁽"},
  { label: "\\^)",	info: "Superscript Right Parenthesis / Superscript Closing Parenthesis",	apply: "⁾"},
  { label: "\\^n",	info: "Superscript Latin Small Letter N",	apply: "ⁿ"},
  { label: "\\_0", type: "variable", info: "Subscript Zero / Subscript Digit Zero", apply: "₀" },
  { label: "\\_1", type: "variable", info: "Subscript One / Subscript Digit One", apply: "₁" },
  { label: "\\_2", type: "variable", info: "Subscript Two / Subscript Digit Two", apply: "₂" },
  { label: "\\_3", type: "variable", info: "Subscript Three / Subscript Digit Three", apply: "₃" },
  { label: "\\_4", type: "variable", info: "Subscript Four / Subscript Digit Four", apply: "₄" },
  { label: "\\_5", type: "variable", info: "Subscript Five / Subscript Digit Five", apply: "₅" },
  { label: "\\_6", type: "variable", info: "Subscript Six / Subscript Digit Six", apply: "₆" },
  { label: "\\_7", type: "variable", info: "Subscript Seven / Subscript Digit Seven", apply: "₇" },
  { label: "\\_8", type: "variable", info: "Subscript Eight / Subscript Digit Eight", apply: "₈" },
  { label: "\\_9", type: "variable", info: "Subscript Nine / Subscript Digit Nine", apply: "₉" },
  { label: "\\forall", type: "variable", info: "For All", apply: "∀" },
  { label: "\\complement", type: "variable", info: "Complement", apply: "∁" },
  { label: "\\partial", type: "variable", info: "Partial Differential", apply: "∂" },
  { label: "\\exists", type: "variable", info: "There Exists", apply: "∃" },
  { label: "\\nexists", type: "variable", info: "There Does Not Exist", apply: "∄" },
  { label: "\\emptyset", type: "variable", info: "Empty Set", apply: "∅" },
  { label: "\\increment", type: "variable", info: "Increment", apply: "∆" },
  { label: "\\nabla", type: "variable", info: "Nabla", apply: "∇" },
  { label: "\\in", type: "variable", info: "Element Of", apply: "∈" },
  { label: "\\notin", type: "variable", info: "Not An Element Of", apply: "∉" },
  { label: "\\sqrt", type: "variable", info: "Square Root", apply: "√" },
  { label: "\\cbrt", type: "variable", info: "Cube Root", apply: "∛" },
  { label: "\\fourthroot", type: "variable", info: "Fourth Root", apply: "∜" },
  { label: "\\propto", type: "variable", info: "Proportional To", apply: "∝" },
  { label: "\\infty", type: "variable", info: "Infinity", apply: "∞" },
  { label: "\\cap", type: "variable", info: "Intersection", apply: "∩" },
  { label: "\\cup", type: "variable", info: "Union", apply: "∪" },
  { label: "\\therefore", type: "variable", info: "Therefore", apply: "∴" },
  { label: "\\because", type: "variable", info: "Because", apply: "∵" },
  { label: "\\leq", type: "variable", info: "Less-Than Or Equal To / Less Than Or Equal To", apply: "≤" },
  { label: "\\geq", type: "variable", info: "Greater-Than Or Equal To / Greater Than Or Equal To", apply: "≥" },
  { label: "\\subset", type: "variable", info: "Subset Of", apply: "⊂" },
  { label: "\\supset", type: "variable", info: "Superset Of", apply: "⊃" },
  { label: "\\nsubset", type: "variable", info: "Not A Subset Of", apply: "⊄" },
  { label: "\\nsupset", type: "variable", info: "Not A Superset Of", apply: "⊅" },
  { label: "\\subseteq", type: "variable", info: "Subset Of Or Equal To", apply: "⊆" },
  { label: "\\supseteq", type: "variable", info: "Superset Of Or Equal To", apply: "⊇" },
  { label: "\\nsubseteq", type: "variable", info: "Neither A Subset Of Nor Equal To", apply: "⊈" },
  { label: "\\nsupseteq", type: "variable", info: "Neither A Superset Of Nor Equal To", apply: "⊉" },
  { label: "\\bowtie", type: "variable", info: "Bowtie", apply: "⋈" },
  { label: "\\ltimes", type: "variable", info: "Left Normal Factor Semidirect Product", apply: "⋉" },
  { label: "\\rtimes", type: "variable", info: "Right Normal Factor Semidirect Product", apply: "⋊" },
  { label: "\\vdots", type: "variable", info: "Vertical Ellipsis", apply: "⋮" },
  { label: "\\cdots", type: "variable", info: "Midline Horizontal Ellipsis", apply: "⋯" },
  { label: "\\adots", type: "variable", info: "Up Right Diagonal Ellipsis", apply: "⋰" },
  { label: "\\ddots", type: "variable", info: "Down Right Diagonal Ellipsis", apply: "⋱" }
];
