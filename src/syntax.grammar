@detectDelim

@top Rel { declaration+ | Annotation* expression }

@skip { spaces | newLine | LineComment | BlockComment }

@precedence {
    dotJoin @left,
    appl @left,
    power @right,
    unary,
    param @left,
    mul @left,
    add @left,
    product @left,
    union @left,
    compL @left,
    compR @right,
    not,
    quant,
    and @left,
    or @left,
    impliesR @right,
    impliesL @left,
    restrict @left,
    override @left,
    iff @right,
    xor @right,
    bind @left,
    abstract @left,
    parenOp,
    annot
}

declaration[@isGroup=Declaration]
    { DefinitionDeclaration
    | BoundDeclaration
    | ValueTypeDeclaration
    | EntityTypeDeclaration
    | ConstraintDeclaration
    | ModuleDeclaration
    | NamespaceDeclaration
    | WithUseDeclaration
    }

/*
 * Docstring Statement
 */

// Not ideal since RawStringSequence takes precedence over
// DocstringLiteral/MultilineDocstringLiteral and reversing the
// precedence won't catch Raw String

// TODO use local tokens for all strings or define an external tokenizer
// see https://lezer.codemirror.net/docs/guide/#local-token-groups

Docstring
    { xkw<"doc"> DocstringLiteral
    | xkw<"doc"> MultilineDocstringLiteral
    | xkw<"doc"> RawStringSequence
    }

/*
 * Annotation Statement
 */

AnnotationKeyword { "@" BasicId }

AnnotationParams { commaSep1<baseLiteral> }

Annotation { AnnotationKeyword ( !annot "(" AnnotationParams ")" )? }

/*
 * Declarations
 */

DefinitionDeclaration {
    Docstring? Annotation* kw<"def"> LhsId formalsBracket* formalsParen? ( "=" expression | "{" expression "}" )
}

BoundDeclaration {
    Docstring? Annotation* kw<"bound"> LhsId formalsBracket* formalsParen? ( "=" expression | "{" expression "}" )?
}

ValueTypeDeclaration {
    Docstring? Annotation* kw<"value"> kw<"type"> LhsId ( formalsBracket* formalsParen? ( "=" expression | "{" expression "}" ) )?
}

EntityTypeDeclaration {
    Docstring? Annotation* kw<"entity"> kw<"type"> LhsId ( formalsBracket* formalsParen? ( "=" expression | "{" expression "}" ) )?
}

ConstraintDeclaration {
    Docstring? Annotation* kw<"ic"> LhsId? formalsBracket* formalsParen? ( "=" expression | "{" expression "}" )
}

ModuleDeclaration {
    Docstring? Annotation* kw<"module"> LhsId formalsBracket* declaration* kw<"end">
}

NamespaceDeclaration {
    Docstring? Annotation* kw<"namespace"> LhsId formalsBracket* declaration* kw<"end">
}

WithUseDeclaration {
    kw<"with"> expression kw<"use"> ("..." | commaSep1<Alias>)
}

id { BasicId | ConstructorId | kw<"value"> | kw<"entity"> | kw<"type"> }

ParenOpId { "(" Operator !parenOp ")" }

LhsId
    { id
    | ParenOpId
    | QualifiedName
    | emphasisKeyword
    | kw<"implies">
    | kw<"iff">
    | kw<"xor">
    }

AliasId { ( id | Operator ) }

Alias { ( id | Operator ) ( kw<"as"> AliasId )? }

QualifiedNameId
    { emphasisKeyword
    | BasicId ~idConflict
    | ConstructorId
    | ParenOpId ~parenOpConflict
    | QualifiedKeyword
    }

// Keywords have to be hardcoded here since they are specialized
// in the grammar to avoid using them as identifiers, except for the case of QualifiedNameId
QualifiedKeyword
    { kw<"def">
    | kw<"bound">
    | kw<"ic">
    | kw<"module">
    | kw<"end">
    | kw<"use">
    | kw<"as">
    | kw<"then">
    | kw<"else">
    | kw<"forall">
    | kw<"and">
    | kw<"or">
    | kw<"implies">
    | kw<"iff">
    | kw<"xor">
    | kw<"where">
    | kw<"for">
    | kw<"from">
    | kw<"value">
    | kw<"entity">
    | kw<"type">
    }

QualifiedName { QualifiedNameId QualifiedNameElem+ }

emphasisKeyword[@dynamicPrecedence=1]
    { emp<"output">
    | emp<"insert">
    | emp<"delete">
    | emp<"abort">
    | emp<"export">
    }

/*
 * Literals
 */

@external tokens rawString from "./tokenizers.js" {
  RawStringSequence
}

RawStringLiteral {
    xkw<"raw"> RawStringSequence
}

interpolation
    { InterpolationId
    | InterpolationExpression
    }

InterpolationExpression { "%(" expression ")" }

InterpolationLiteral {
    quote1 staticStringPart? interpolation (staticStringPart | interpolation)* quote1
}

InterpolationMultilineLiteral {
    quote3 staticMultilineStringPart? interpolation (staticMultilineStringPart | interpolation)* quote3
}

baseLiteral
    { IntLiteral
    | FloatLiteral
    | RelnameLiteral
    | RelnameStringLiteral
    | RelnameMultilineStringLiteral
    | StaticStringLiteral
    | StaticMultilineStringLiteral
    | CharLiteral
    | DateLiteral
    | DateTimeLiteral
    | RawStringLiteral
    }

literal
    { baseLiteral
    | BooleanLiteral
    | SpecializeIntLiteral
    | InterpolationLiteral
    | InterpolationMultilineLiteral
    }

/*
 * Expressions
 */

BasicExpression
    { id "..."? ~idConflict
    | "_"
    | QualifiedName
    | ParenOpId ~parenOpConflict

    // literal
    | literal ~literalConflict

    // specialize
    | "#(" expression ")"

    | PartialApplicationExpression
    | ApplicationExpression

    // math expressions
    | BasicExpression !dotJoin op<"."> BasicExpression
    | BasicExpression !power op<"^"> BasicExpression
    | !unary op<"-"> BasicExpression
    | BasicExpression !mul op<"/"> BasicExpression
    | BasicExpression !mul op<"%"> BasicExpression
    | BasicExpression !mul op<"*"> BasicExpression
    | BasicExpression !mul op<"÷"> BasicExpression
    | BasicExpression !mul op<"×"> BasicExpression
    | BasicExpression !mul op<"⊗"> BasicExpression
    | BasicExpression !mul op<"⊙"> BasicExpression
    | BasicExpression !add op<"+"> BasicExpression
    | BasicExpression !add op<"-"> BasicExpression
    | BasicExpression !add op<"∩"> BasicExpression
    | BasicExpression !add op<"⊕"> BasicExpression
    | BasicExpression !union op<"∪"> BasicExpression
    | BasicExpression !add op<"⊓"> BasicExpression
    | BasicExpression !union op<"⊔"> BasicExpression
    | BasicExpression !compL op<"="> BasicExpression
    | BasicExpression !compL op<"!="> BasicExpression
    | BasicExpression !compL op<"≈"> BasicExpression
    | BasicExpression !compL op<"∼"> BasicExpression
    | BasicExpression !compR op<"→"> BasicExpression
    | BasicExpression !compL op<"←"> BasicExpression
    | BasicExpression !compL op<"≼"> BasicExpression
    | BasicExpression !compL op<"≽"> BasicExpression
    | BasicExpression !compL op<"≺"> BasicExpression
    | BasicExpression !compL op<"≻"> BasicExpression
    | BasicExpression !compL op<"≠"> BasicExpression
    | BasicExpression !compL op<"<"> BasicExpression
    | BasicExpression !compL op<">"> BasicExpression
    | BasicExpression !compL op<"<="> BasicExpression
    | BasicExpression !compL op<"≤"> BasicExpression
    | BasicExpression !compL op<">="> BasicExpression
    | BasicExpression !compL op<"≥"> BasicExpression
    | BasicExpression !compL op<"⊆"> BasicExpression
    | BasicExpression !compL op<"⊇"> BasicExpression
    | BasicExpression !compL op<"⊂"> BasicExpression
    | BasicExpression !compL op<"⊃"> BasicExpression

    | kw<"if"> expression kw<"then"> expression kw<"else"> expression kw<"end">
    | ( kw<"forall"> | "∀" ) "(" Bindings ":" expression ")"

    | BoundedExpression

    // logic expressions
    | !quant (kw<"exists"> | "∃") BasicExpression
    | !quant (kw<"exists"> | "∃") LogicalAbstractExpression
    | !not ( kw<"not"> | op<"¬"> ) BasicExpression
    | BasicExpression !and ( kw<"and"> | op<"∧"> ) BasicExpression
    | BasicExpression !or ( kw<"or"> | op<"∨"> ) BasicExpression
    | BasicExpression !impliesR ( kw<"implies"> | op<"⇒"> ) BasicExpression
    | BasicExpression !impliesL op<"⇐"> BasicExpression

    // restrict expression
    | BasicExpression !restrict ( op<"<:"> | op<":>"> ) BasicExpression

    // override expression
    | BasicExpression !override ( op<"<++"> | op<"++>"> ) BasicExpression
}

/* Application expressions are defined explicitly to highlight
 * the BasicId in these expressions.
 */
PartialApplicationExpression
    { BasicExpression !appl "[" NocommaParam? "]"
    | BasicExpression !appl "[" commaSep2<BasicParam> "]"
    }

ApplicationExpression
    { BasicExpression !appl "(" NocommaParam? ")"
    | BasicExpression !appl "(" commaSep2<BasicParam> ")"
    }

BoundedExpression
    { "(" expression? ( "," | ";" )? ")"
    | "{" expression? ( "," | ";" )? "}"
    }

Bindings
    { Formals ( !bind kw<"where"> nonAbstractExpression )?
    | "(" Bindings ")"
    }

AbstractExpression
    { Bindings !abstract ":" expression
    | expression !abstract ( kw<"for"> | "|" | kw<"from">) Bindings
    }

LogicalAbstractExpression
    { Bindings !abstract ":" BasicExpression
    | Bindings !abstract ":" LogicalAbstractExpression
    | BasicExpression !abstract ( kw<"for"> | "|" | kw<"from">) Bindings
    | LogicalAbstractExpression !abstract ( kw<"for"> | "|" | kw<"from">) Bindings
    }

nonAbstractExpression
    { BasicExpression
    | IffXorExpression
        { expression !iff ( kw<"iff"> | op<"≡"> | op<"⇔"> ) expression
        | expression !xor ( kw<"xor"> | op<"≢"> | op<"⇎"> | op<"⊻"> ) expression
        }
    | UnionExpression { expression !union ";" expression }
    | ProductExpression { expression !product "," expression }
    }

expression
    { nonAbstractExpression
    | AbstractExpression }

nocommaExpression
    { BasicExpression
    | NocommaUnionExpression { nocommaExpression !union ";" nocommaExpression }
    | NocommaAbstractExpression
        { Bindings !abstract ":" nocommaExpression
        | nocommaExpression !abstract ( kw<"for"> | "|" | kw<"from">) Bindings
        }
    }

BasicParam { Operator ~operatorConflict | BasicExpression }

NocommaParam { Operator ~operatorConflict | nocommaExpression }

Formal
    { literal ~literalConflict
    | Operator ~operatorConflict
    | (id "..."? ~idConflict ) (( kw<"in"> | op<"∈"> ) BasicExpression)?
    }

Formals { Formal ( !param "," Formal )* }

formalsBracket { "[" Formals? "]" }

formalsParen { "(" Formals? ")" }

@tokens {
    spaces[@export] { $[\u0009 \u000b\u00a0\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]+ }
    newLine[@export] { $[\r\n\u2028\u2029] }

    idCharSingle {
        $[a-zA-Zα-ωΑ-Ω]
    }
    idCharInit {
        $[a-zA-Zα-ωΑ-Ω_]
    }
    idChar {
        $[a-zA-Zα-ωΑ-Ω_0-9]
    }
    basicIdentifier { idCharSingle | idCharInit idChar+ }
    BasicId { basicIdentifier }
    ConstructorId { "^" basicIdentifier }

    Operator
        { "."
        | "^"
        | "/"
        | "%"
        | "*"
        | "÷"
        | "×"
        | "⊗"
        | "⊙"
        | "-"
        | "+"
        | "⊕"
        | "∩"
        | "∪"
        | "⊔"
        | "⊓"
        | "="
        | "!="
        | "≈"
        | "∼"
        | "≠"
        | "<"
        | ">"
        | "<="
        | "≤"
        | ">="
        | "≥"
        | "∈"
        | "⊆"
        | "⊇"
        | "⊂"
        | "⊃"
        | "≼"
        | "≽"
        | "≺"
        | "≻"
        | "¬"
        | "∧"
        | "∨"
        | "→"
        | "←"
        | "⇒"
        | "⇐"
        | "≡"
        | "⇔"
        | "⊻"
        | "≢"
        | "⇎"
        | "<:"
        | ":>"
        | "<++"
        | "++>"
        | "++"
        }

    decimalLiteral { $[0-9]+ }
    octalLiteral { "0o" $[0-7]+ }
    hexadecimalLiteral { "0x" $[0-9A-Fa-f]+ }
    IntLiteral { decimalLiteral | octalLiteral | hexadecimalLiteral }
    SpecializeIntLiteral { "#" IntLiteral }

    exponent { $[eE] $[+-]? decimalLiteral }
    floatLiteral1 { decimalLiteral "." decimalLiteral? exponent? }
    floatLiteral2 { decimalLiteral exponent }
    floatLiteral3 { "." decimalLiteral exponent? }
    FloatLiteral { floatLiteral1 | floatLiteral2 | floatLiteral3 }

    DateLiteral { $[0-9] $[0-9] $[0-9] $[0-9] "-" $[0-9] $[0-9] "-" $[0-9] $[0-9] }
    hourMinuteDigits { $[0-9] $[0-9] ":" $[0-9] $[0-9] }
    timeDigits { $[0-9] $[0-9] ":" $[0-9] $[0-9] ":" $[0-9] $[0-9] }
    timezone { "Z" | $[+-]? hourMinuteDigits }
    DateTimeLiteral { DateLiteral "T" timeDigits timezone }

    BooleanLiteral { "true" | "false" }

    EscapeChar
        { '\\' ('\\'
            | '%'
            | $['"abefnrtv0-7]
            | $[0-7]$[0-7]
            | $[0123]$[0-7]$[0-7]
            | 'x' $[0-9a-fA-F]$[0-9a-fA-F]
            | 'u' $[0-9a-fA-F]$[0-9a-fA-F]$[0-9a-fA-F]$[0-9a-fA-F]
            | 'U' $[0-9a-fA-F]$[0-9a-fA-F]$[0-9a-fA-F]$[0-9a-fA-F]$[0-9a-fA-F]$[0-9a-fA-F]$[0-9a-fA-F]$[0-9a-fA-F]
            )
        }
    staticChar { !["\r\n\\%] }
    multiStaticChar { !["\\%] }

    staticSequence { staticChar | EscapeChar }
    multiStaticSequence { '"'? '"'? ( multiStaticChar | EscapeChar ) }
    StaticStringLiteral { '"' staticSequence* '"' }
    StaticMultilineStringLiteral { '"""' multiStaticSequence* '"""' }

    staticStringPart { staticSequence+ }
    staticMultilineStringPart { multiStaticSequence+ }

    DocstringLiteral { quote1 (!["\r\n\\] | EscapeChar)* quote1 }
    MultilineDocstringLiteral {
        quote3 ( quote1? quote1? (!["\\] | EscapeChar))* quote3
    }

    RelnameLiteral { ( ":" "^"? (basicIdentifier | "_") | ":[]" ) }
    RelnameStringLiteral { ":" StaticStringLiteral }
    RelnameMultilineStringLiteral { ":" StaticMultilineStringLiteral }

    QualifiedNameElem { ":" (BasicId | ConstructorId) | ":(" Operator ")" }
    InterpolationId { "%" basicIdentifier }

    quote1 { '"' }
    quote3 { '"""' }

    CharLiteral { "'" ( !['\\] | EscapeChar ) "'" }

    LineComment { "//" ![\n]* }
    BlockComment { "/*" ( ![*] | "*"+ ![/*] )* "*"+ "/" }

    @precedence { spaces newLine staticStringPart BlockComment LineComment DocstringLiteral }
    @precedence { spaces newLine staticMultilineStringPart BlockComment LineComment MultilineDocstringLiteral }
    @precedence { DateTimeLiteral DateLiteral FloatLiteral IntLiteral }
    @precedence { BooleanLiteral BasicId }
    @precedence { ConstructorId Operator }
    @precedence { FloatLiteral Operator }
    @precedence { "..." Operator ":" }
    @precedence { QualifiedNameElem ":" }
    @precedence { RelnameLiteral ":" }
    @precedence { BasicId "_" }
    @precedence { LineComment Operator }
    @precedence { MultilineDocstringLiteral DocstringLiteral }

}

kw<term> { @specialize[@name=Keyword]<BasicId, term> }

xkw<term> { @extend[@name=Keyword]<BasicId, term> }

emp<term> { @extend[@name=Emphasis]<BasicId, term> }

op<oper> { @extend[@name=OperatorKeyword]<Operator, oper> }

commaSep1<rule> { rule ( !param "," rule )* }

commaSep2<rule> { rule !param "," rule ( !param "," rule )* }
