/*
  Description: Very limitted Lezer (https://lezer.codemirror.net/) format Rel parser for Code Mirror 6
  Supports only limitted sets of Rel features and it is a placeholder for a full featured lezer Rel parser
*/

@precedence {
  cond,
  trail,
  power @right,
  union @left,
  prefix,
  times @left,
  plus @left,
  shift @left,
  bitand @left,
  xor @left,
  bitor @left,
  compare @left,
  and @left,
  or @left
}

@top Rel { (statement)+ }

@skip { space | LineComment | BlockComment | StringLiteral }

@skip {} {
  MultilineBlockComment { blockCommentBoundry textBlockContent* blockCommentEndBoundry }
}

@skip {} {
  MultilineStringLiteral { textBlockBoundry textBlockContent* textBlockBoundry }
}

@skip {} {
  MultilineRawStringLiteral { rawTextBlockBoundry textBlockContent* rawTextBlockBoundry }
}

statement {
  InlineStatement { "@" kw<"inline"> VariableName? } |
  InlineFunction { "@" kw<"function"> VariableName? } |
  InStatement { kw<"in"> VariableName | kw<"in"> VariableName kw<"where"> statement } |
  IfStatement { kw<"if"> Body (kw<"then"> Body)* elseClause? kw<"end"> } |
  IffStatement { kw<"iff"> statement } |
  NotStatement { kw<"not"> statement } |
  XorStatement { kw<"xor"> statement } |
  AndOrStatement { kw<"and"> statement | kw<"or"> statement } |
  FromStatement { kw<"from"> MultipleArguments } |
  ModuleStatement { kw<"module"> VariableName Body kw<"end"> } |
  ForallStatement { kw<"forall"> statement ( statement ) } |
  ForEachStatement { kw<"foreach"> "[" MultipleArguments "]" } |
  ForInStatement { kw<"for"> VariableName kw<"in"> VariableName } |
  ImpliesStatement { kw<"implies"> statement } |
  DefineStatement { kw<"def"> VariableName? } |
  ImportDefinitionStatement { kw<"def"> kw<"abort"> statement } |
  ExportDefinitionStatement { kw<"def"> kw<"export"> statement } |
  ConfigDefinitionStatement { kw<"def"> kw<"config"> statement } |
  DeleteDefinitionStatement { kw<"def"> kw<"delete"> statement } |
  InsertDefinitionStatement { kw<"def"> kw<"insert"> statement } |
  OutputDefinitionStatement { kw<"def"> kw<"output"> statement } |
  WithUseStatement { kw<"with"> VariableName kw<"use"> MultipleArguments } |
  ConstraintStatement { kw<"ic"> VariableName "=" | kw<"ic"> VariableName "{" VariableName "}" } |
  RawStringLiteral { LineStart kw<"raw"> MultilineRawStringLiteral } |
  DocStringLiteral { LineStart kw<"doc"> MultilineStringLiteral } |
  EntityStatement { kw<"entity"> VariableName } |
  EntityTypeStatement { kw<"entity"> kw<"type"> VariableName } |
  ValueTypeStatement { kw<"value"> kw<"type"> VariableName } |
  ExpressionStatement { expression } |
  ParenStatement { ("("|"[") MultipleArguments ("]"|")") } |
  TypeStatement { type }
}

expression[@isGroup=Expression] {
  Number |
  boolean |
  Operator |
  DateLiteral |
  DatetimeLiteral |
  MultilineBlockComment |
  MultilineStringLiteral |
  MultilineRawStringLiteral |
  RelnameLiteral |
  RelnameStringLiteral |
  ValueTypeLiteral
}

type[@isGroup=Type] {
  IntType { kw<"Int"> VariableName? } |
  StringType { kw<"String"> VariableName? } |
  AnyType { kw<"Any"> VariableName? } |
  NumberType { kw<"Number"> VariableName? } |
  CharType { kw<"Char"> VariableName? } |
  MissingType { kw<"Missing"> VariableName? } |
  FloatingType { kw<"Floating"> VariableName? } |
  UnsignedIntType { kw<"UnsignedInt"> VariableName? } |
  SignedIntType { kw<"SignedInt"> VariableName? } |
  RationalType { kw<"Rational"> VariableName? } |
  FixedDecimalType { kw<"FixedDecimal"> VariableName? } |
  RelNameType { kw<"RelName"> VariableName? } |
  EntityType { kw<"Entity"> VariableName? } |
  AutoNumberType { kw<"AutoNumber"> VariableName? } |
  HashType { kw<"Hash"> VariableName? } |
  FilePosType { kw<"FilePos"> VariableName? } |
  DateType { kw<"Date"> VariableName? } |
  DateTimeType { kw<"DateTime"> VariableName? } |
  YearType { kw<"Year"> VariableName? } |
  MonthType { kw<"Month"> VariableName? } |
  WeekType { kw<"Week"> VariableName? } |
  DayType { kw<"Day"> VariableName? } |
  HourType { kw<"Hour"> VariableName? } |
  MinuteType { kw<"Minute"> VariableName? } |
  SecondType { kw<"Second"> VariableName? } |
  MillisecondType { kw<"Millisecond"> VariableName? } |
  MicrosecondType { kw<"Microsecond"> VariableName? } |
  NanosecondType { kw<"Nanosecond"> VariableName? }
}

VariableName { identifier }

elseClause { kw<"else"> Body }

boolean { @specialize[@name=BooleanLiteral]<identifier, "true" | "false"> }

Body { statement+ }

EmptyRelation {
  "{}"
}

RelArgument {
  VariableName | RelnameLiteral | EmptyRelation
}

MultipleArguments { RelArgument (("," | ";") RelArgument)+ }

kw<term> { @specialize[@name={term}]<identifier, term> }

@tokens {
  space {
    $[ \t\n\r]+
  }
  id_char_single {
    $[a-zA-Zα-ωΑ-Ω]
  }
  id_char_init {
    $[a-zA-Zα-ωΑ-Ω_]
  }
  id_char {
    $[a-zA-Zα-ωΑ-Ω_0-9]
  }
  escape_sequence {
    '\\' ('\\' |
    $[abefnrtv0-7] |
    $[0-7]$[0-7] |
    $[0123]$[0-7]$[0-7] |
    'x' $[0-9a-fA-F]$[0-9a-fA-F] |
    'u' $[0-9a-fA-F]$[0-9a-fA-F]$[0-9a-fA-F]$[0-9a-fA-F] |
    'U' $[0-9a-fA-F]$[0-9a-fA-F]$[0-9a-fA-F]$[0-9a-fA-F]$[0-9a-fA-F]$[0-9a-fA-F]$[0-9a-fA-F]$[0-9a-fA-F])
  }
  string_literal {
    '"' ( $[^"\r\n\\] | escape_sequence)* '"'
  }
  decimal_digit {
    $[0-9]
  }
  decimal_literal {
    decimal_digit+
  }
  octal_digit {
    $[0-7]
  }
  octal_literal {
    '0o' octal_digit+
  }
  hex_digit {
    $[0-9A-Fa-f]
  }
  hex_literal {
    '0x' hex_digit+
  }
  exponent {
    $[eE] $[+-]? decimal_literal
  }
  float_literal_1 {
    decimal_literal '.' decimal_literal? exponent
  }
  float_literal_2 {
    decimal_literal exponent
  }
  float_literal_3 {
    '.' decimal_literal exponent?
  }
  two_digits {
    $[0-9]$[0-9]
  }
  time_digits {
    two_digits ':' two_digits ':' two_digits
  }
  time_zone {
    'Z' | $[+-]? two_digits ':' two_digits
  }
  identifier {
    id_char_single | id_char_init id_char+
  }
  RelnameLiteral {
    (':' id_char_init id_char* | ':[]')
  }
  RelnameStringLiteral {
    ':' string_literal
  }
  StringLiteral {
    '"' (![\\\n"] | "\\" _)* '"'? |
    "'" (![\\\n'] | "\\" _)* "'"?
  }
  DateLiteral {
    $[0-9]$[0-9]$[0-9]$[0-9]'-'$[0-9]$[0-9]'-'$[0-9]$[0-9]
  }
  DatetimeLiteral {
    DateLiteral 'T' time_digits time_zone
  }

  textBlockBoundry { '"""' }
  rawTextBlockBoundry { '"'('""')*!["] }
  textBlockContent { "\n" | !["\n] textBlockContent? | '"' textBlockQuote | space }
  textBlockQuote { !["\n] textBlockContent | "\n" | '"' textBlockQuote2 }
  textBlockQuote2 { !["\n] textBlockContent | "\n" }

  Number {
    decimal_literal | octal_literal | hex_literal | float_literal_1 | float_literal_2 | float_literal_3
  }

  ValueTypeLiteral {
    '^' identifier
  }

  LineStart {
    $[^]
  }

  LineComment { "//" ![\n]* }
  BlockComment { "/*" blockCommentRest }

  blockCommentBoundry { '/*' }
  blockCommentEndBoundry { '/*' }
  blockCommentRest { ![*] blockCommentRest | "*" blockCommentAfterStar }
  blockCommentAfterStar { "/" | "*" blockCommentAfterStar | ![/*] blockCommentRest }

  Operator {
    ( "and" | "or" | "∈" | "." | "..." | "^" | "/" | "%" | "*" | "÷" | "×" | "⊗" | "⊙" | "-" | "+" | "⊕" | "∩" | "∪" | "⊔" | "⊓" | "=" | "!=" | "≈" | "∼" | "≠" | "<" | ">" | "<=" | "≤" | ">=" | "≥" | "⊆" | "⊇" | "⊂" | "⊃" | "≼" | "≽" | "≺" | "≻" | "¬" | "∧" | "∨" | "→" | "←" | "⇒" | "⇐" | "≡" | "⇔" | "⊻" | "≢" | "⇎" | "<:" | ":>" | "<++" | "++>")
  }

  @precedence { textBlockBoundry, textBlockContent, StringLiteral }
  @precedence { rawTextBlockBoundry, textBlockContent, StringLiteral}
  @precedence { BlockComment, LineComment, Number, identifier, ValueTypeLiteral, Operator, LineStart }
  @precedence { BlockComment, LineComment, DatetimeLiteral, DateLiteral, Number }
  @precedence { blockCommentBoundry, rawTextBlockBoundry, textBlockBoundry, textBlockContent, blockCommentEndBoundry, StringLiteral }


  // ParenOperator {
  //   '(' Operator ')'
  // }
  // qualified_name {
  //   Identifier | ParenOperator
  // }
  // QualifiedName {
  //   qualified_name (':' qualified_name)+
  // }
}

@detectDelim
