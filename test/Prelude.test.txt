# Annotations

@inline
@function
@static
@inline
@ondemand
def a = 1

==>

Rel(
    DefinitionDeclaration(
        Annotation(AnnotationKeyword(BasicId)),
        Annotation(AnnotationKeyword(BasicId)),
        Annotation(AnnotationKeyword(BasicId)),
        Annotation(AnnotationKeyword(BasicId)),
        Annotation(AnnotationKeyword(BasicId)),
        Keyword,
        LhsId(BasicId),
        Expression(
            IffXorExpression(
                UnionExpression(
                    ProductExpression(
                        BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))

# DocStrings


doc"A single-line docstring"
def a = 1

doc"""
    A multi-line docstring with escape sequence \\ \n
"""
def a = 1

doc"""""
    A multi-line raw docstring """ \ """
"""""
def a = 1

doc"""""
    Another multi-line raw docstring """ \ """
"""""
def a = 1

==>

Rel(
    DefinitionDeclaration(
        Docstring(Keyword, RawStringSequence), Keyword, LhsId(BasicId), Expression(
            IffXorExpression(
                UnionExpression(
                    ProductExpression(
                        BasicExpression(Literal(BaseLiteral(IntLiteral)))))))),
    DefinitionDeclaration(
        Docstring(Keyword, RawStringSequence), Keyword, LhsId(BasicId), Expression(
            IffXorExpression(
                UnionExpression(
                    ProductExpression(
                        BasicExpression(Literal(BaseLiteral(IntLiteral)))))))),
    DefinitionDeclaration(
        Docstring(Keyword, RawStringSequence), Keyword, LhsId(BasicId), Expression(
            IffXorExpression(
                UnionExpression(
                    ProductExpression(
                        BasicExpression(Literal(BaseLiteral(IntLiteral)))))))),
    DefinitionDeclaration(
        Docstring(Keyword, RawStringSequence), Keyword, LhsId(BasicId), Expression(
            IffXorExpression(
                UnionExpression(
                    ProductExpression(
                        BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))
