# Module Declaration

module store def a = 1 end

==>

Rel(
    ModuleDeclaration(
        Keyword, LhsId(BasicId), DefinitionDeclaration(
            Keyword, LhsId(BasicId), Expression(
                UnionExpression(
                    JoinExpression(
                        OverrideExpression(
                            RestrictExpression(
                                LogicalExpression(
                                    BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))),
        Keyword))

# Value-Type Declaration

value type Distance = Float

==>

Rel(
    ValueTypeDeclaration(
        Keyword, Keyword, LhsId(BasicId), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(BasicId)))))))))

# Entity-Type Declaration

entity type Professional = String, String

==>

Rel(
    EntityTypeDeclaration(
        Keyword, Keyword, LhsId(BasicId), Expression(
            UnionExpression(
                JoinExpression(
                    JoinExpression(
                        OverrideExpression(
                            RestrictExpression(
                                LogicalExpression(
                                    BasicExpression(BasicId))))),
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(BasicId)))))))))

# Constraint Declaration

ic() {
    student âŠ† person
    // Can also be written as `subset(student, person)`.
}

==>

Rel(
    ConstraintDeclaration(
        Keyword, FormalParamsParen, Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(
                                    BasicExpression(BasicId),
                                    OperatorKeyword,
                                    BasicExpression(BasicId)))))))),
        LineComment))

# Bound Declaration

bound R = Int

==>

Rel(
    BoundDeclaration(
        Keyword, LhsId(BasicId), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(BasicId)))))))))



# With-Use Declaration

with mod use a, b, c

==>

Rel(
    WithUseDeclaration(
        Keyword,
        Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(BasicExpression(BasicId))))))),
        Keyword,
        Alias(BasicId),
        Alias(BasicId),
        Alias(BasicId)))
