# Module Declaration

module store def a = 1 end

==>

Rel(
    ModuleDeclaration(
        Keyword,
        LhsId(BasicId),
        DefinitionDeclaration(
            Keyword,
            LhsId(BasicId),
            BasicExpression(IntLiteral)),
        Keyword))

# Namespace Declaration

namespace store def a = 1 end

==>

Rel(
    NamespaceDeclaration(
        Keyword,
        LhsId(BasicId),
        DefinitionDeclaration(
            Keyword,
            LhsId(BasicId),
            BasicExpression(IntLiteral)),
        Keyword))

# Value-Type Declaration

value type Distance = Float

==>

Rel(
    ValueTypeDeclaration(
        Keyword,
        Keyword,
        LhsId(BasicId),
        BasicExpression(BasicId)))

# Entity-Type Declaration

entity type Professional = String, String

==>

Rel(
    EntityTypeDeclaration(
        Keyword,
        Keyword,
        LhsId(BasicId),
        ProductExpression(
            BasicExpression(BasicId),
            BasicExpression(BasicId))))

# Constraint Declaration

ic() {
    student âŠ† person
    // Can also be written as `subset(student, person)`.
}

==>

Rel(
    ConstraintDeclaration(
        Keyword,
        BasicExpression(
            BasicExpression(BasicId),
            OperatorKeyword,
            BasicExpression(BasicId)),
        LineComment))

# Bound Declaration

bound R = Int

==>

Rel(
    BoundDeclaration(
        Keyword,
        LhsId(BasicId),
        BasicExpression(BasicId)))

# With-Use Declaration

with mod use a, b, c

==>

Rel(
    WithUseDeclaration(
        Keyword,
        BasicExpression(BasicId),
        Keyword,
        Alias(BasicId),
        Alias(BasicId),
        Alias(BasicId)))
