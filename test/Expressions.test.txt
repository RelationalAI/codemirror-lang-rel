# Single Expression

@inline
@static(1, :rel)
{
    1 + 2;
    2023-07-01;
    2023-07-01T00:00:00Z
}

==>

Rel(
    Annotation(AnnotationKeyword(BasicId)),
    Annotation(
        AnnotationKeyword(BasicId),
        AnnotationParams(IntLiteral,RelnameLiteral)),
    BasicExpression(
        BoundedExpression(
            UnionExpression(
                UnionExpression(
                    BasicExpression(
                        BasicExpression(IntLiteral),
                        OperatorKeyword,
                        BasicExpression(IntLiteral)),
                    BasicExpression(DateLiteral)),
                BasicExpression(DateTimeLiteral)))))


# Interpolation
def output = """
    %(
        string_join["\n", {
            """
                def n[x] = %(
                    x + 1
                )
            """
        }]
    )

"""

def a = "%b"

==>

Rel(
    DefinitionDeclaration(
        Keyword,
        LhsId(Emphasis),
        BasicExpression(
            InterpolationMultilineLiteral(
                InterpolationExpression(
                    BasicExpression(
                        PartialApplicationExpression(
                            BasicExpression(BasicId),
                            BasicParam(BasicExpression(StaticStringLiteral)),
                            BasicParam(BasicExpression(
                                BoundedExpression(
                                    BasicExpression(
                                        InterpolationMultilineLiteral(
                                            InterpolationExpression(
                                                BasicExpression(
                                                    BasicExpression(BasicId),
                                                    OperatorKeyword,
                                                    BasicExpression(IntLiteral)))))))))))))),
    DefinitionDeclaration(
        Keyword,
        LhsId(BasicId),
        BasicExpression(InterpolationLiteral(InterpolationId))))

# Empty Expression

def a = {}
def b = {;}
def c = {,}

==>

Rel(
    DefinitionDeclaration(
        Keyword,
        LhsId(BasicId),
        BasicExpression(BoundedExpression)),
    DefinitionDeclaration(
        Keyword,
        LhsId(BasicId),
        BasicExpression(BoundedExpression)),
    DefinitionDeclaration(
        Keyword,
        LhsId(BasicId),
        BasicExpression(BoundedExpression)))

# Expression with Trailing Comma/Semicolon

def G = create_graph[{(:weight, W)}, {(:is_weighted,);}]

==>

Rel(
    DefinitionDeclaration(
        Keyword,
        LhsId(BasicId),
        BasicExpression(
            PartialApplicationExpression(
                BasicExpression(BasicId),
                BasicParam(
                    BasicExpression(
                        BoundedExpression(
                            BasicExpression(
                                BoundedExpression(
                                    ProductExpression(
                                        BasicExpression(RelnameLiteral),
                                        BasicExpression(BasicId))))))),
                BasicParam(
                    BasicExpression(
                        BoundedExpression(
                            BasicExpression(
                                BoundedExpression(
                                    BasicExpression(RelnameLiteral))))))))))
