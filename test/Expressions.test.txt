# Single Expression

@inline
@static(1, :rel)
{
    1 + 2;
    2023-07-01;
    2023-07-01T00:00:00Z
}

==>

Rel(
    Annotation(AnnotationKeyword(BasicId)),
    Annotation(
        AnnotationKeyword(BasicId),
        AnnotationParams(BaseLiteral(IntLiteral), BaseLiteral(RelnameLiteral))
    ),
    Expression(
        IffXorExpression(
            UnionExpression(
                ProductExpression(
                    BasicExpression(
                        BoundedExpression(
                            Expression(
                                IffXorExpression(
                                    UnionExpression(
                                        UnionExpression(
                                            UnionExpression(
                                                ProductExpression(
                                                    BasicExpression(
                                                        BasicExpression(Literal(BaseLiteral(IntLiteral))),
                                                        OperatorKeyword,
                                                        BasicExpression(Literal(BaseLiteral(IntLiteral)))))),
                                            ProductExpression(
                                                BasicExpression(Literal(BaseLiteral(DateLiteral))))),
                                        ProductExpression(
                                            BasicExpression(Literal(BaseLiteral(DateTimeLiteral))))))))))))))


# Interpolation
def output = """
    %(
        string_join["\n", {
            """
                def n[x] = %(
                    x + 1
                )
            """
        }]
    )

"""

def a = "%b"

==>

Rel(
    DefinitionDeclaration(
        Keyword,LhsId(Emphasis),Expression(IffXorExpression(UnionExpression(ProductExpression(BasicExpression(Literal(
            InterpolationMultilineLiteral(Interpolation(InterpolationExpression(
                Expression(
                    IffXorExpression(
                        UnionExpression(
                            ProductExpression(
                                BasicExpression(
                                    PartialApplicationExpression(
                                        BasicExpression(BasicId),
                                        BasicParam(BasicExpression(Literal(BaseLiteral(StaticStringLiteral)))),
                                        BasicParam(BasicExpression(BoundedExpression(
                                            Expression(IffXorExpression(UnionExpression(ProductExpression(BasicExpression(Literal(
                                                InterpolationMultilineLiteral(Interpolation(InterpolationExpression(
                                                    Expression(
                                                        IffXorExpression(
                                                            UnionExpression(
                                                                ProductExpression(
                                                                    BasicExpression(
                                                                        BasicExpression(BasicId),
                                                                        OperatorKeyword,
                                                                        BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))))))))))))))))))))))))))))),
    DefinitionDeclaration(
        Keyword,LhsId(BasicId),Expression(
            IffXorExpression(
                UnionExpression(
                    ProductExpression(
                        BasicExpression(Literal(InterpolationLiteral(Interpolation(InterpolationId))))))))))

# Empty Expression

def a = {}
def b = {;}
def c = {,}

==>

Rel(
    DefinitionDeclaration(
        Keyword,LhsId(BasicId),Expression(
            IffXorExpression(
                UnionExpression(
                    ProductExpression(
                        BasicExpression(BoundedExpression)))))),
    DefinitionDeclaration(
        Keyword,LhsId(BasicId),Expression(
            IffXorExpression(
                UnionExpression(
                    ProductExpression(
                        BasicExpression(BoundedExpression)))))),
    DefinitionDeclaration(
        Keyword,LhsId(BasicId),Expression(
            IffXorExpression(
                UnionExpression(
                    ProductExpression(
                        BasicExpression(BoundedExpression)))))))

# Expression with Trailing Comma/Semicolon

def G = create_graph[{(:weight, W)}, {(:is_weighted,);}]

==>

Rel(
    DefinitionDeclaration(
        Keyword,LhsId(BasicId),Expression(IffXorExpression(UnionExpression(ProductExpression(BasicExpression(
            PartialApplicationExpression(
                BasicExpression(BasicId),
                BasicParam(
                    BasicExpression(
                        BoundedExpression(Expression(IffXorExpression(UnionExpression(ProductExpression(
                            BasicExpression(
                                BoundedExpression(Expression(IffXorExpression(UnionExpression(
                                    ProductExpression(
                                        ProductExpression(BasicExpression(Literal(BaseLiteral(RelnameLiteral)))),
                                        BasicExpression(BasicId)))))))))))))),
                BasicParam(
                    BasicExpression(
                        BoundedExpression(Expression(IffXorExpression(UnionExpression(
                            UnionExpression(
                                ProductExpression(
                                    BasicExpression(
                                        BoundedExpression(Expression(IffXorExpression(UnionExpression(
                                            ProductExpression(
                                                ProductExpression(
                                                    BasicExpression(Literal(BaseLiteral(RelnameLiteral))))))))))))))))))))))))))
