# Emphasis Keywords

def output = A
def insert = B
def delete = C
def abort = D
def export = E


==>

Rel(
    DefinitionDeclaration(
        Keyword,
        LhsId(Emphasis),
        BasicExpression(BasicId)),
    DefinitionDeclaration(
        Keyword,
        LhsId(Emphasis),
        BasicExpression(BasicId)),
    DefinitionDeclaration(
        Keyword,
        LhsId(Emphasis),
        BasicExpression(BasicId)),
    DefinitionDeclaration(
        Keyword,
        LhsId(Emphasis),
        BasicExpression(BasicId)),
    DefinitionDeclaration(
        Keyword,
        LhsId(Emphasis),
        BasicExpression(BasicId)))

# Constructors

def ^b = ^B[1, 2]

==>

Rel(
    DefinitionDeclaration(
        Keyword,
        LhsId(ConstructorId),
        BasicExpression(
            PartialApplicationExpression(
                BasicExpression(ConstructorId),
                V1BasicActual(BasicExpression(IntLiteral)),
                V1BasicActual(BasicExpression(IntLiteral))))))


# Extended Keywords

module a
    def doc = 1
    def value = 2
    def entity = 3
    def type = 4
    def raw = 5
    def implies = 6
    def iff = 7
    def xor = 8
end

==>

Rel(
    ModuleDeclaration(
        Keyword,
        LhsId(BasicId),
        DefinitionDeclaration(
            Keyword,
            LhsId(BasicId),
            BasicExpression(IntLiteral)),
        DefinitionDeclaration(
            Keyword,
            LhsId(Keyword),
            BasicExpression(IntLiteral)),
        DefinitionDeclaration(
            Keyword,
            LhsId(Keyword),
            BasicExpression(IntLiteral)),
        DefinitionDeclaration(
            Keyword,
            LhsId(Keyword),
            BasicExpression(IntLiteral)),
        DefinitionDeclaration(
            Keyword,
            LhsId(BasicId),
            BasicExpression(IntLiteral)),
        DefinitionDeclaration(
            Keyword,
            Keyword,
            BasicExpression(IntLiteral)),
        DefinitionDeclaration(
            Keyword,
            Keyword,
            BasicExpression(IntLiteral)),
        DefinitionDeclaration(
            Keyword,
            Keyword,
            BasicExpression(IntLiteral)),
        Keyword))

# Qualified Names

def output:abc = 1
def test:abc = 2
def (+):abc = 3
def ^Constructor:abc = 4
def module:abc = 5
def rel:^Constructor = 6

==>

Rel(
    DefinitionDeclaration(
        Keyword,
        LhsId(QualifiedName(QualifiedNameId(Emphasis),QualifiedNameElem)),
        BasicExpression(IntLiteral)),
    DefinitionDeclaration(
        Keyword,
        LhsId(QualifiedName(QualifiedNameId(BasicId),QualifiedNameElem)),
        BasicExpression(IntLiteral)),
    DefinitionDeclaration(
        Keyword,
        LhsId(QualifiedName(QualifiedNameId(ParenOpId(Operator)),QualifiedNameElem)),
        BasicExpression(IntLiteral)),
    DefinitionDeclaration(
        Keyword,
        LhsId(QualifiedName(QualifiedNameId(ConstructorId),QualifiedNameElem)),
        BasicExpression(IntLiteral)),
    DefinitionDeclaration(
        Keyword,
        LhsId(QualifiedName(QualifiedNameId(QualifiedKeyword(Keyword)),QualifiedNameElem)),
        BasicExpression(IntLiteral)),
    DefinitionDeclaration(
        Keyword,
        LhsId(QualifiedName(QualifiedNameId(BasicId),QualifiedNameElem)),
        BasicExpression(IntLiteral)))
