# Emphasis Keywords

def output = A
def insert = B
def delete = C
def abort = D
def export = E


==>

Rel(
    DefinitionDeclaration(
        Keyword, LhsId(Emphasis), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(BasicId)))))))),
    DefinitionDeclaration(
        Keyword, LhsId(Emphasis), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(BasicId)))))))),
    DefinitionDeclaration(
        Keyword, LhsId(Emphasis), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(BasicId)))))))),
    DefinitionDeclaration(
        Keyword, LhsId(Emphasis), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(BasicId)))))))),

    DefinitionDeclaration(
        Keyword, LhsId(Emphasis), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(BasicId)))))))))

# Constructors

def ^b = ^B[1, 2]

==>

Rel(
    DefinitionDeclaration(
        Keyword,
        LhsId(ConstructorId),
        Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(
                                    PartialApplicationExpression(
                                        BasicExpression(ConstructorId),
                                        LogicalParam(
                                            LogicalExpression(
                                                BasicExpression(Literal(BaseLiteral(IntLiteral))))),
                                        LogicalParam(
                                            LogicalExpression(
                                                BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))))))))


# Extended Keywords

module a
    def doc = 1
    def value = 2
    def entity = 3
    def type = 4
    def raw = 5
    def implies = 6
    def iff = 7
    def xor = 8
end

==>

Rel(
    ModuleDeclaration(
        Keyword,
        LhsId(BasicId),
        DefinitionDeclaration(
            Keyword,
            LhsId(BasicId),
            Expression(
                UnionExpression(
                    JoinExpression(
                        OverrideExpression(
                            RestrictExpression(
                                LogicalExpression(
                                    BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))),
        DefinitionDeclaration(
            Keyword,
            LhsId(Keyword),
            Expression(
                UnionExpression(
                    JoinExpression(
                        OverrideExpression(
                            RestrictExpression(
                                LogicalExpression(
                                    BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))),
        DefinitionDeclaration(
            Keyword,
            LhsId(Keyword),
            Expression(
                UnionExpression(
                    JoinExpression(
                        OverrideExpression(
                            RestrictExpression(
                                LogicalExpression(
                                    BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))),
        DefinitionDeclaration(
            Keyword,
            LhsId(Keyword),
            Expression(
                UnionExpression(
                    JoinExpression(
                        OverrideExpression(
                            RestrictExpression(
                                LogicalExpression(
                                    BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))),
        DefinitionDeclaration(
            Keyword,
            LhsId(BasicId),
            Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))),
        DefinitionDeclaration(
                    Keyword,
                    LhsId(Keyword),
                    Expression(
                        UnionExpression(
                            JoinExpression(
                                OverrideExpression(
                                    RestrictExpression(
                                        LogicalExpression(
                                            BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))),
        DefinitionDeclaration(
                    Keyword,
                    LhsId(Keyword),
                    Expression(
                        UnionExpression(
                            JoinExpression(
                                OverrideExpression(
                                    RestrictExpression(
                                        LogicalExpression(
                                            BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))),
        DefinitionDeclaration(
                    Keyword,
                    LhsId(Keyword),
                    Expression(
                        UnionExpression(
                            JoinExpression(
                                OverrideExpression(
                                    RestrictExpression(
                                        LogicalExpression(
                                            BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))),
        Keyword))

# Qualified Names

def output:abc = 1
def test:abc = 2
def (+):abc = 3
def ^Constructor:abc = 4
def module:abc = 5
def rel:^Constructor = 6

==>

Rel(
    DefinitionDeclaration(
        Keyword,
        LhsId(QualifiedName(QualifiedNameId(Emphasis),QualifiedNameElem)),
        Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))),
    DefinitionDeclaration(
        Keyword,
        LhsId(QualifiedName(QualifiedNameId(BasicId),QualifiedNameElem)),
        Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))),
    DefinitionDeclaration(
        Keyword,
        LhsId(QualifiedName(QualifiedNameId(ParenOpId(Operator)),QualifiedNameElem)),
        Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))),
    DefinitionDeclaration(
        Keyword,
        LhsId(QualifiedName(QualifiedNameId(ConstructorId),QualifiedNameElem)),
        Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))),
    DefinitionDeclaration(
        Keyword,
        LhsId(QualifiedName(QualifiedNameId(QualifiedKeyword(Keyword)),QualifiedNameElem)),
        Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))),
    DefinitionDeclaration(
        Keyword,
        LhsId(QualifiedName(QualifiedNameId(BasicId),QualifiedNameElem)),
        Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))))
