# Numbers

def a = 101,
01010101001,
0x1ABCDEFabcdef,
0o7632157312,
1e+3

==>

Rel(
    DefinitionDeclaration(
        Keyword,
        LhsId(BasicId),
        ProductExpression(
            ProductExpression(
                ProductExpression(
                    ProductExpression(
                        BasicExpression(IntLiteral),
                        BasicExpression(IntLiteral)),
                    BasicExpression(IntLiteral)),
                BasicExpression(IntLiteral)),
            BasicExpression(FloatLiteral))))


# Booleans

def a = true
def b = false

==>

Rel(
    DefinitionDeclaration(
        Keyword,
        LhsId(BasicId),
        BasicExpression(BooleanLiteral)),
    DefinitionDeclaration(
        Keyword,
        LhsId(BasicId),
        BasicExpression(BooleanLiteral)))


# Strings & Char


def a = "A string with \"double\" and 'single' quotes"
def b = """A Multi-line string
New line // with a comment in a string
"""
def c = 'A'
def d = raw"""""""
A raw string with "quotes" & """Multi-line quotes""" \\ Slashes
"""""""
def e = raw"""""""""""
A raw string with 11 quotes
"""""""""""
def f = raw""

==>

Rel(
    DefinitionDeclaration(
        Keyword,
        LhsId(BasicId),
        BasicExpression(StaticStringLiteral)),
    DefinitionDeclaration(
        Keyword,
        LhsId(BasicId),
        BasicExpression(StaticMultilineStringLiteral)),
    DefinitionDeclaration(
        Keyword,
        LhsId(BasicId),
        BasicExpression(CharLiteral)),
    DefinitionDeclaration(
        Keyword,
        LhsId(BasicId),
        BasicExpression(RawStringLiteral(Keyword,RawStringSequence))),
    DefinitionDeclaration(
        Keyword,
        LhsId(BasicId),
        BasicExpression(RawStringLiteral(Keyword,RawStringSequence))),
    DefinitionDeclaration(
        Keyword,
        LhsId(BasicId),
        BasicExpression(RawStringLiteral(Keyword,RawStringSequence))))


# Relnames

def a = :test
def b = :[]
def c = :"A string relname literal"

==>

Rel(
    DefinitionDeclaration(
        Keyword,
        LhsId(BasicId),
        BasicExpression(RelnameLiteral)),
    DefinitionDeclaration(
        Keyword,
        LhsId(BasicId),
        BasicExpression(RelnameLiteral)),
    DefinitionDeclaration(
        Keyword,
        LhsId(BasicId),
        BasicExpression(RelnameStringLiteral)))
