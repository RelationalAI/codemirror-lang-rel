# Numbers

def a = 101,
01010101001,
0x1ABCDEFabcdef,
0o7632157312,
1e+3

==>

Rel(
    DefinitionStatement(
        Keyword, LhsId(BasicId), Expression(
            UnionExpression(
                JoinExpression(
                    JoinExpression(
                        JoinExpression(
                            JoinExpression(
                                JoinExpression(
                                    OverrideExpression(
                                        RestrictExpression(
                                            LogicalExpression(
                                                BasicExpression(Literal(BaseLiteral(IntLiteral))))))),
                                OverrideExpression(
                                    RestrictExpression(
                                        LogicalExpression(
                                            BasicExpression(Literal(BaseLiteral(IntLiteral))))))),
                            OverrideExpression(
                                RestrictExpression(
                                    LogicalExpression(
                                        BasicExpression(Literal(BaseLiteral(IntLiteral))))))),
                        OverrideExpression(
                            RestrictExpression(
                                LogicalExpression(
                                    BasicExpression(Literal(BaseLiteral(IntLiteral))))))),
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(Literal(BaseLiteral(FloatLiteral)))))))))))


# Booleans

def a = true
def b = false

==>

Rel(
    DefinitionStatement(
        Keyword, LhsId(BasicId), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(Literal(BooleanLiteral))))))))),
    DefinitionStatement(
        Keyword, LhsId(BasicId), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(Literal(BooleanLiteral))))))))))


# Strings & Char


def a = "A string with \"double\" and 'single' quotes"
def b = """A Multi-line string
New line
"""
def c = 'A'
def d = raw"""""""
A raw string with "quotes" & """Multi-line quotes""" \\ Slashes
"""""""
def e = raw"""""""""""
A raw string with 11 quotes
"""""""""""
def f = raw""

==>

Rel(
    DefinitionStatement(
        Keyword, LhsId(BasicId), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(Literal(BaseLiteral(StaticStringLiteral)))))))))),
    DefinitionStatement(
        Keyword, LhsId(BasicId), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(Literal(BaseLiteral(StaticMultilineStringLiteral)))))))))),
    DefinitionStatement(
        Keyword, LhsId(BasicId), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(Literal(BaseLiteral(CharLiteral)))))))))),
    DefinitionStatement(
        Keyword, LhsId(BasicId), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(
                                    Literal(
                                        BaseLiteral(RawStringLiteral(Keyword, RawStringSequence))))))))))),
    DefinitionStatement(
        Keyword, LhsId(BasicId), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(
                                    Literal(
                                        BaseLiteral(RawStringLiteral(Keyword, RawStringSequence))))))))))),
    DefinitionStatement(
            Keyword, LhsId(BasicId), Expression(
                UnionExpression(
                    JoinExpression(
                        OverrideExpression(
                            RestrictExpression(
                                LogicalExpression(
                                    BasicExpression(
                                        Literal(
                                            BaseLiteral(RawStringLiteral(Keyword, RawStringSequence))))))))))))


# Relnames

def a = :test
def b = :[]
def c = :"A string relname literal"

==>

Rel(
    DefinitionStatement(
        Keyword, LhsId(BasicId), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(Literal(BaseLiteral(RelnameLiteral)))))))))),
    DefinitionStatement(
        Keyword, LhsId(BasicId), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(Literal(BaseLiteral(RelnameLiteral)))))))))),
    DefinitionStatement(
        Keyword, LhsId(BasicId), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(Literal(BaseLiteral(RelnameStringLiteral)))))))))))

# Annotations

@inline
@function
@static
@inline
@ondemand
def a = 1

==>

Rel(
    DefinitionStatement(
        Annotation(AnnotationKeyword),
        Annotation(AnnotationKeyword),
        Annotation(AnnotationKeyword),
        Annotation(AnnotationKeyword),
        Annotation(AnnotationKeyword),
        Keyword,
        LhsId(BasicId),
        Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))))


# Emphasis Keywords

def output = A
def insert = B
def delete = C
def abort = D
def export = E


==>

Rel(
    DefinitionStatement(
        Keyword, LhsId(Emphasis), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(BasicId)))))))),
    DefinitionStatement(
        Keyword, LhsId(Emphasis), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(BasicId)))))))),
    DefinitionStatement(
        Keyword, LhsId(Emphasis), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(BasicId)))))))),
    DefinitionStatement(
        Keyword, LhsId(Emphasis), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(BasicId)))))))),

    DefinitionStatement(
        Keyword, LhsId(Emphasis), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(BasicId)))))))))


# Module Statement

module store def a = 1 end

==>

Rel(
    ModuleStatement(
        Keyword, LhsId(BasicId), DefinitionStatement(
            Keyword, LhsId(BasicId), Expression(
                UnionExpression(
                    JoinExpression(
                        OverrideExpression(
                            RestrictExpression(
                                LogicalExpression(
                                    BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))),
        Keyword))

# Value-Type Statement

value type Distance = Float

==>

Rel(
    ValueTypeStatement(
        Keyword, Keyword, LhsId(BasicId), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(BasicId)))))))))

# Entity-Type Statement

entity type Professional = String, String

==>

Rel(
    EntityTypeStatement(
        Keyword, Keyword, LhsId(BasicId), Expression(
            UnionExpression(
                JoinExpression(
                    JoinExpression(
                        OverrideExpression(
                            RestrictExpression(
                                LogicalExpression(
                                    BasicExpression(BasicId))))),
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(BasicId)))))))))

# Constraint Statement

ic() {
    student ⊆ person
    // Can also be written as `subset(student, person)`.
}

==>

Rel(
    ConstraintStatement(
        Keyword, FormalParamsParen, Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(
                                    BasicExpression(BasicId),
                                    OperatorKeyword,
                                    BasicExpression(BasicId)))))))),
        LineComment))

# Bound Statement

bound R = Int

==>

Rel(
    BoundStatement(
        Keyword, LhsId(BasicId), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(BasicId)))))))))



# DocStrings


doc"A single-line docstring"
def a = 1

doc"""
    A multi-line docstring with escape sequence \\ \n
"""
def a = 1

doc"""""
    A multi-line raw docstring """ \ """
"""""
def a = 1

doc"""""
    Another multi-line raw docstring """ \ """
"""""
def a = 1

==>

Rel(
    DefinitionStatement(
        Docstring(Keyword, RawStringSequence), Keyword, LhsId(BasicId), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))),
    DefinitionStatement(
        Docstring(Keyword, RawStringSequence), Keyword, LhsId(BasicId), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))),
    DefinitionStatement(
        Docstring(Keyword, RawStringSequence), Keyword, LhsId(BasicId), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))),
    DefinitionStatement(
        Docstring(Keyword, RawStringSequence), Keyword, LhsId(BasicId), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))))

# Comments
// A single-line comment
/****
    // A multi-line comment
*****/
def a = 1

==>

Rel(
    LineComment,
    BlockComment,
    DefinitionStatement(
        Keyword, LhsId(BasicId), Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))))

# Interpolation
def output = """
    %(
        string_join["\n", {
            """
                def n[x] = %(
                    x + 1
                )
            """
        }]
    )

"""

def a = "%b"

==>

Rel(
    DefinitionStatement(
        Keyword,
        LhsId(Emphasis),
        Expression(UnionExpression(JoinExpression(OverrideExpression(RestrictExpression(LogicalExpression(
            BasicExpression(Literal(InterpolationMultilineLiteral(Interpolation(InterpolationExpression(
                Expression(UnionExpression(JoinExpression(OverrideExpression(RestrictExpression(LogicalExpression(
                    BasicExpression(PartialApplicationExpression(
                        BasicExpression(BasicId),
                        LogicalParam(LogicalExpression(BasicExpression(Literal(BaseLiteral(StaticStringLiteral))))),
                        LogicalParam(LogicalExpression(BasicExpression(BoundedExpression(
                            Expression(UnionExpression(JoinExpression(OverrideExpression(RestrictExpression(LogicalExpression(
                                BasicExpression(Literal(InterpolationMultilineLiteral(Interpolation(InterpolationExpression(
                                    Expression(UnionExpression(JoinExpression(OverrideExpression(RestrictExpression(LogicalExpression(
                                        BasicExpression(
                                            BasicExpression(BasicId),
                                            OperatorKeyword,
                                            BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))))
                                ))))
                            ))))))
                        ))))
                    ))
                ))))))
            )))))
        ))))))
    ),
    DefinitionStatement(
        Keyword,
        LhsId(BasicId),
        Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(
                                    Literal(InterpolationLiteral(Interpolation(InterpolationId)))))))))))
)

# Constructors

def ^b = ^B[1, 2]

==>

Rel(
    DefinitionStatement(
        Keyword,
        LhsId(ConstructorId),
        Expression(
            UnionExpression(
                JoinExpression(
                    OverrideExpression(
                        RestrictExpression(
                            LogicalExpression(
                                BasicExpression(
                                    PartialApplicationExpression(
                                        BasicExpression(ConstructorId),
                                        LogicalParam(
                                            LogicalExpression(
                                                BasicExpression(Literal(BaseLiteral(IntLiteral))))),
                                        LogicalParam(
                                            LogicalExpression(
                                                BasicExpression(Literal(BaseLiteral(IntLiteral)))))))))))))))

# Expression

@inline
@static(1, :rel)
{
    1 + 2;
    2023-07-01;
    2023-07-01T00:00:00Z
}

==>

Rel(
    Annotation(AnnotationKeyword),
    Annotation(
        AnnotationKeyword,
        AnnotationParams(BaseLiteral(IntLiteral), BaseLiteral(RelnameLiteral))
    ),
    Expression(
        UnionExpression(
            JoinExpression(
                OverrideExpression(
                    RestrictExpression(
                        LogicalExpression(
                            BasicExpression(
                                BoundedExpression(
                                    Expression(
                                        UnionExpression(
                                            UnionExpression(
                                                UnionExpression(
                                                    JoinExpression(
                                                        OverrideExpression(
                                                            RestrictExpression(
                                                                LogicalExpression(
                                                                    BasicExpression(
                                                                        BasicExpression(Literal(BaseLiteral(IntLiteral))),
                                                                        OperatorKeyword,
                                                                        BasicExpression(Literal(BaseLiteral(IntLiteral))))))))),
                                                JoinExpression(
                                                    OverrideExpression(
                                                        RestrictExpression(
                                                            LogicalExpression(
                                                                BasicExpression(Literal(BaseLiteral(DateLiteral)))))))),
                                            JoinExpression(
                                                OverrideExpression(
                                                    RestrictExpression(
                                                        LogicalExpression(
                                                            BasicExpression(Literal(BaseLiteral(DateTimeLiteral))))))))))))))))))


