import { LRParser } from '@lezer/lr';
import { LRLanguage, foldNodeProp, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@lezer/highlight';
import { completeFromList } from '@codemirror/autocomplete';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_BasicId = {__proto__:null,doc:14, function:23, inline:25, ondemand:27, outline:29, static:31, raw:58, def:62, Any:66, String:68, Int:70, Number:72, Char:74, Missing:76, Float:78, Floating:80, UnsignedInt:82, UInt:84, SignedInt:86, Rational:88, FixedDecimal:90, RelName:92, Entity:94, AutoNumber:96, Hash:98, FilePos:100, Date:102, DateTime:104, Year:106, Month:108, Week:110, Day:112, Hour:114, Minute:116, Second:118, Millisecond:120, Microsecond:122, Nanosecond:124, Boolean:126, type:128, entity:130, value:132, output:143, insert:145, delete:147, abort:149, export:151, where:202, for:204, from:206, if:286, then:288, else:290, end:292, forall:294, exists:296, and:300, or:304, implies:308, not:314, iff:318, xor:324, in:344, ic:356, module:360, with:364, use:366, as:370};
const spec_Operator = {__proto__:null,".":189, "^":213, "-":215, "/":217, "%":219, "*":221, "÷":223, "×":225, "⊗":227, "⊙":229, "+":231, "∩":233, "⊕":235, "∪":237, "⊓":239, "⊔":241, "=":243, "!=":245, "≈":247, "∼":249, "→":251, "←":253, "≼":255, "≽":257, "≺":259, "≻":261, "≠":263, "<":265, ">":267, "<=":269, "≤":271, ">=":273, "≥":275, "⊆":277, "⊇":279, "⊂":281, "⊃":283, "∧":303, "∨":307, "⇒":311, "⇐":313, "¬":317, "≡":321, "⇔":323, "≢":327, "⇎":329, "⊻":331, "<:":333, ":>":335, "<++":337, "++>":339, "∈":347};
const parser = LRParser.deserialize({
  version: 14,
  states: "!EjO`QPOOOzQPO'#CfOOQO'#G`'#G`O!]QPO'#GROOQO'#Gq'#GqOOQO'#G_'#G_Q`QPOOO!qQPO'#CaO!yQPO'#C`O!]QPO'#GRO%lQPO'#GRO%qQPO'#GSO(lQPO'#GTO!yQPO'#GVO(vQQO'#GXO-ZQPO,59QOOQO'#Gs'#GsOOQO-E:^-E:^O!yQPO,58zO-rQPO,5<mO-wQPO,5<nO-|QPO,5<oO!yQPO,5<qOOQO-E:]-E:]OOQO,58{,58{O/RQPO'#HSO/]QQO'#DqO/bQPO'#DtO0cQPO'#DsOOQO'#C|'#C|OOQO'#HT'#HTOOQO'#HS'#HSOOQO'#HU'#HUO0hQPO,58zO0vQPO,5<mO!yQPO,5<mO!yQPO,5<nO4jQQO'#GQO8PQQO'#D{OOQO'#Gg'#GgO8WQPO,5<oO(vQQO,5<oO(vQQO,5<oO8^QPO,5<oO8WQPO,5<oO8fQPO,5<qO8pQSO'#CpOOQO'#Cp'#CpOOQO'#Cm'#CmO9RQQO'#HSO=tQQO'#F`OOQO'#Dt'#DtOGkQQO'#DtOGrQQO'#E]OLVQPO'#EdON}QQO'#EZO!#lQQO'#F`O!)]QQO'#E[OOQO'#E['#E[O!#yQQO'#E[O!)jQPO'#E[O(vQQO'#EZO!+VQQO'#EYO!,qQQO'#EXO!.YQQO'#EWO!/`QPO'#EVO!0mQPO'#EUO!1wQPO'#F|OOQO'#EU'#EUO!1|QWO'#ERO!2XQ`O'#F}OOQO'#EO'#EOOOQO'#D}'#D}O!2dQPO'#D|O!2rQWO'#CxO!3QQQO'#E[O(vQQO'#E[O!7UQQO'#EZO!7fQPO,5<sO!7kQQO1G.lO!8]QPO1G.fO!yQPO1G2XO!yQPO1G2YO!8kQPO1G2ZO(vQQO1G2ZO(vQQO1G2ZO!8qQPO1G2ZO!8kQPO1G2ZO!8yQPO1G2]O!9TQPO,5:]O!9YQPO'#GfO!:]QPO,5:_O!8]QPO1G.fO!:gQQO'#GQO(vQQO1G.fO(vQQO1G.fO!8cQPO1G.fO!yQPO1G.fO!:nQPO1G2XO!:sQPO1G2YO!:xQPO1G2ZO!yQPO1G2]O!;SQPO1G2XO!<QQPO1G2YO!=OQPO,5:]O!>nQQO'#D}OOQO,5<l,5<lO!@ZQPO,5<lOOQO,5:g,5:gO!@`QPO,5:gOOQO-E:e-E:eOOQO1G2Z1G2ZO!@eQPO1G2ZO!8yQPO1G2]O!@jQPO1G2]OOQO1G2]1G2]OOQO,59[,59[O!@qQSO,59[OOQO,59],59]OOQO,59_,59_O!@yQPO,5;OOOQO,5;z,5;zO!ARQPO,5;zO!AWQPO,5;zO!AcQQO,5:_O!ExQPO,5:wO!E}QQO,5;OO!IqQQO,5:yO!MkQQO,5;TO!3QQQO,5:vO!3QQQO,5:vO!3QQQO,5:vO!3QQQO,5:vO!3QQQO,5:vO!3QQQO,5:vO##eQPO,5;zO##jQPO,5;zO#)XQQO,5:vO#)cQQO,5:iO#,yQQO,5:vO#-QQPO'#FgOOQO,5:u,5:uO!7UQQO,5:uO!7UQQO,5:uO!7UQQO,5:uO!7UQQO,5:uO!7UQQO,5:uO!7UQQO,5:tO!7UQQO,5:sO!7UQQO,5:rO!7UQQO,5:qO#,yQQO,5<hO(vQQO,5<hO#-VQSO'#ETOOQO'#ES'#ESOGrQQO'#ESO#-[QWO,5:mO!2PQPO,5:mO#-jQ`O,5<iO!2PQPO,5<iO4qQQO'#GkO#-xQPO,5:hO#.WQpO'#CzO#.`QpO'#CzO#.kQpO'#CzO#.yQpO'#CzOOQO,59d,59dO=tQQO'#F`O#4RQQO,5:vO#4iQQO'#E[O#4sQPO,5:vO#7[QQO1G2_O#7cQPO'#GuOOQO'#Cl'#ClO#7kQPO7+$WO#7pQPO7+$QO(vQQO7+$QO(vQQO7+$QO#7vQPO7+$QO#8OQPO7+'sO#8|QPO7+'tO(vQQO7+'uO(vQQO7+'uO#9zQPO7+'uOOQO7+'u7+'uO#:SQPO7+'uO#:XQPO7+'uO#:gQPO7+'wO#:qQPO7+'wOOQO7+'w7+'wOOQO1G/w1G/wOOQO'#Dz'#DzOOQO,5=Q,5=QOOQO-E:d-E:dOOQO7+$Q7+$QO#:xQPO7+$QO#7pQPO7+$QO!yQPO7+'sO!yQPO7+'tO#:XQPO7+'uO#:gQPO7+'wO#:}QPO7+'sO(vQQO7+'sO(vQQO7+'sO#;TQPO7+'sO#;]QPO7+'tO(vQQO7+'tO(vQQO7+'tO#;cQPO7+'tO#<{QQO,5:iOOQO1G2W1G2WOOQO1G0R1G0ROOQO1G.v1G.vOOQO1G0j1G0jOOQO1G1f1G1fO#>eQPO1G1fOOQO1G0c1G0cO#?hQQO1G0jO#?rQQO'#EbO#@^QPO'#EaO#@rQPO'#EcOOQO'#Ea'#EaO#@wQPO'#E`OOQO'#E`'#E`O#A]QQO'#EhO#AgQPO'#H`OOQO1G0e1G0eO#AlQPO1G0eOOQO1G0o1G0oO#AqQPO1G0oOOQO1G0b1G0bO#FjQQO1G0bO#GTQQO1G0bO#LqQQO1G0bO#L{QQO1G0bO#MVQQO1G0bO$ wQPO1G1fO#)cQQO1G0TO$$iQQO1G0TO#,yQQO'#EdO$&OQPO1G0bO!7UQQO,5<RP#,yQQO,5<ROOQO1G0a1G0aO$(dQQO1G0aO$*}QQO1G0aO$+_QQO1G0aO$-YQQO1G0aO$/ZQQO1G0`O$1_QQO1G0_O$2vQQO1G0^O$3|QPO1G0]OOQO1G2S1G2SOOQO,5:o,5:oO$5ZQPO,5:nOOQO'#Gi'#GiO$5`QWO1G0XOOQO1G0X1G0XO$5`QWO1G0XOOQO'#Gj'#GjO$5nQ`O1G2TOOQO1G2T1G2TO$5nQ`O1G2TOOQO,5=V,5=VOOQO-E:i-E:iOOQO'#Ga'#GaO$5|QpO,59fOOQO,59f,59fOOQO'#Gb'#GbO$6UQpO,59fOOQO'#Gc'#GcO$6aQpO,59fOOQO'#Gd'#GdO$6oQpO,59fOOQO,5:v,5:vO(vQQO1G0bO$7QQPO'#G[O$7xQPO'#HgOOQO7+'y7+'yO!7kQQO'#GeO$8mQPO,5=aOOQO<<Gr<<GrO(vQQO<<GlO(vQQO<<GlO$8uQPO<<GlOOQO<<Gl<<GlO$8}QPO<<GlO$9SQPO<<K_O(vQQO<<K_O(vQQO<<K_O$9YQPO<<K_O$9bQPO<<K`O(vQQO<<K`O(vQQO<<K`O$9hQPO<<K`OOQO<<Ka<<KaO$9pQPO<<KaO(vQQO<<KaO(vQQO<<KaO$9uQPO<<KaO$9}QPO<<KcOOQO<<Kc<<KcO$:UQPO<<GlO$:dQPO<<K_O$;bQPO<<K`O$<`QPO<<KaO$<nQPO<<KcOOQO<<K_<<K_O$<xQPO<<K_OOQO<<K`<<K`O$<}QPO<<K`OOQO7+'Q7+'QO$>TQQO,5:uO$>eQQO,5:|O#,yQQO,5:}O$>uQQO,5:}O$BlQQO,5=zOOQO7+&P7+&POOQO7+&Z7+&ZO$CPQQO7+%oO!@|QPO,5;OOGrQQO7+%|O$DfQQO1G1mP$FUQQO'#EdOOQO1G1m1G1mO$GjQQO'#D|OOQO1G0Y1G0YOOQO-E:g-E:gOOQO7+%s7+%sO$IPQWO7+%sOOQO-E:h-E:hOOQO7+'o7+'oO$I_Q`O7+'oOOQO-E:_-E:_OOQO1G/Q1G/QOOQO-E:`-E:`OOQO-E:a-E:aOOQO-E:b-E:bO$ImQPO7+%|O$LRQQO,5<vO#4xQQO'#GlO$LYQPO,5>ROOQO,5=P,5=POOQO-E:c-E:cOOQOAN=WAN=WO$L}QPOAN=WO(vQQOAN=WO(vQQOAN=WO(vQQOAN@yO(vQQOAN@yO$MSQPOAN@yOOQOAN@yAN@yO$M[QPOAN@yO(vQQOAN@zO(vQQOAN@zO$MaQPOAN@zOOQOAN@zAN@zO$MiQPOAN@zOOQOAN@{AN@{O$MnQPOAN@{O(vQQOAN@{O(vQQOAN@{OOQOAN@}AN@}O$MsQPOAN=WO$M{QPOAN@yO$NZQPOAN@zO$NiQPOAN@{O$NqQPOAN@}O$NxQQO1G0hOOQO1G0i1G0iOOQO'#Eh'#EhO%!bQQO'#EhO%!lQPO1G3fO%!tQPO<<IhO%$WQQO,5:hOOQO<<I_<<I_OOQO<<KZ<<KZO(vQQO<<IhOOQO'#G^'#G^OOQO1G2b1G2bOOQO,5=W,5=WOOQO-E:j-E:jOOQOG22rG22rO%%mQPOG22rOOQOG26eG26eO%%rQPOG26eO(vQQOG26eO(vQQOG26eOOQOG26fG26fO%%wQPOG26fO(vQQOG26fO(vQQOG26fOOQOG26gG26gO%%|QPOG26gO(vQQOG22rO(vQQOG22rO%&RQPOG26eO%&ZQPOG26fO(vQQOG26gO(vQQOG26gOOQOG26iG26iO$BlQQO'#GhO%&cQPO7+)QOOQOAN?SAN?SO%&kQPOAN?SOOQOLD(^LD(^OOQOLD,PLD,PO%&pQPOLD,POOQOLD,QLD,QO%&uQPOLD,QOOQOLD,RLD,RO%&zQPOLD(^O(vQQOLD,PO(vQQOLD,PO(vQQOLD,QO(vQQOLD,QO%'PQPOLD,ROOQO,5=S,5=SOOQO-E:f-E:fOOQOG24nG24nOOQO!$( k!$( kOOQO!$( l!$( lOOQO!$'Kx!$'KxO%'UQPO!$( kO%'ZQPO!$( lOOQO!$( m!$( mOOQO!)9EV!)9EVOOQO!)9EW!)9EWO0cQPO'#DsO%'`QQO'#HSO%/pQQO'#DtO%/}QQO'#E[O%5qQQO'#E[O%:`QQO'#E[O%0WQQO'#E[O%0eQQO'#E[O%6OQQO'#E[OGrQQO'#EZO$>uQQO'#EZO$>uQQO'#EZO%:mQQO'#EZO(vQQO'#EZO%:mQQO'#EZOGrQQO'#EZO#)cQQO'#E[O%>dQQO'#EZO$>eQQO'#EZO%>tQQO'#EZO!E}QQO'#EZO$BoQQO'#EZO%?UQQO'#EZO%BxQQO'#EZO%>tQQO,5;OP$>eQQO,5;OP!7UQQO,5;OP%>dQQO,5;OO$BoQQO,5;OO%BxQQO,5;OP%?UQQO,5;OO#)cQQO,5:vO#)cQQO,5:vO#)cQQO,5:vO#)cQQO,5:vO#)cQQO,5:vO#)cQQO,5:vO%G^QQO,5:vO##uQQO,5:vO%GeQQO,5:vO!3QQQO,5:iO%>dQQO,5:uO$>eQQO,5:uO%>tQQO,5:uO!E}QQO,5:uO$BoQQO,5:uO%?UQQO,5:uO%BxQQO,5:uO%>dQQO,5:uO$>eQQO,5:uO%>tQQO,5:uO!E}QQO,5:uO$BoQQO,5:uO%?UQQO,5:uO%BxQQO,5:uO%>dQQO,5:uO$>eQQO,5:uO%>tQQO,5:uO!E}QQO,5:uO$BoQQO,5:uO%?UQQO,5:uO%BxQQO,5:uO%>dQQO,5:uO$>eQQO,5:uO%>tQQO,5:uO!E}QQO,5:uO$BoQQO,5:uO%?UQQO,5:uO%BxQQO,5:uO%>dQQO,5:uO$>eQQO,5:uO%>tQQO,5:uO!E}QQO,5:uO$BoQQO,5:uO%?UQQO,5:uO%BxQQO,5:uO%>dQQO,5:tO$>eQQO,5:tO%>dQQO,5:sO$>eQQO,5:sO%>dQQO,5:rO%>dQQO,5:qOGrQQO,5<hO%G{QQO,5:vO%L}QQO1G0jP%M}QQO1G0jP%N}QQO1G0jP&!{QQO1G0jO&#oQQO1G0jO&$}QQO1G0jP&&YQQO1G0jO&&mQQO'#EhO&*xQQO1G0bO&+cQQO1G0bO&/tQQO1G0bO&0OQQO1G0bO&0YQQO1G0bO!3QQQO1G0TO&1oQQO1G0TO%>dQQO,5<RO$>eQQO,5<RO%>tQQO,5<RO!E}QQO,5<RO$BoQQO,5<RO%?UQQO,5<RO%BxQQO,5<RO&5tQQO1G0aO&6RQQO1G0aO&8SQQO1G0aO&9bQQO1G0aO&:jQQO1G0aO&:zQQO1G0aO&;_QQO1G0aO&<|QQO1G0aO&=^QQO1G0aO&>aQQO1G0aO&?iQQO1G0aO&@wQQO1G0aO&BYQQO1G0aO&CeQQO1G0aO&CuQQO1G0aO&DVQQO1G0aO&F|QQO1G0aO&G^QQO1G0aO&GnQQO1G0aO&HOQQO1G0aO&H`QQO1G0aO&HpQQO1G0aO&IdQQO1G0aO&JgQQO1G0aO&JwQQO1G0aO&KRQQO1G0aO&KcQQO1G0aO&KvQQO1G0aO&LTQQO1G0`O&MuQQO1G0`O&NiQQO1G0_O&NvQQO1G0_O' hQQO1G0^O' uQPO1G0]O'!ZQQO,5=zO'!nQQO7+%oO'%`QQO1G1mO'&SQQO1G1mO''rQQO1G1mO')rQQO1G1mO')|QQO1G1mO'*^QQO1G1mO'*qQQO1G1mP',iQQO'#EdP',sQQO'#EdO'.RQQO'#EdO'0VQQO'#EdO'1bQQO'#EdP'1oQQO'#EdO'2PQQO'#EdO'2ZQQO'#EhO'!ZQQO'#GhO'2eQPO7+)QO',zQPO'#EdO'2mQPO'#EdO'2{QPO'#EdO'3ZQQO'#EZO'4jQQO'#EYO'5^QQO'#EYO'6QQQO'#EXO'6_QQO'#EXO'7PQQO'#EWO'7^QPO'#EVO'7rQPO'#EUO'8WQPO'#F|O'8]QQO'#D}O'8mQPO'#FgO'8rQPO'#FgO'8wQPO'#FgO'8|QPO'#FgO'9RQPO'#FgO'9WQPO'#FgO'9]QPO'#FgO#,yQQO,5<hO#,yQQO,5<hO4qQQO'#GkO%!yQPO,5:hO'9bQQO,5:iO'9oQPO'#H`P#,yQQO,5<RP#,yQQO,5<RO#,yQQO,5<RO#,yQQO,5<RO#,yQQO,5<RP#,yQQO,5<RO#,yQQO,5<RO':xQQO,5:uO';]QQO,5:uO'<fQQO,5:uO'<yQQO'#D|O'=TQPO1G3fO'=]QQO,5:hO'>pQPO'#EUO'?UQPO'#D|O(vQQO,5<hO'@cQPO'#EUO'@tQPO'#F|OGrQQO,5<hO'@yQPO'#F|",
  stateData: "'Ab~O%cOS%dOSPOSQOS~OVVOoWO!cZO!dYO$x[O$z]O$|^O%fPO~OZ`O[`O]`O^`O_`O~OobO!cdO!dcO$xeO$zfO%fPO~OWhOXhO~OUiOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!ipO!jpO!kpO!lpO!mpO%hjO~O!bsO~O!btO~OUiOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!ipO!jpO!kpO!lpO!mpO%huO%zvO~O&TzO&YyO~P%vOU!ROb!QOc!QOf!QOh!QOi!QOj!QOk!QOm!lOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f!jO!ipO!jpO!kpO!lpO!mpO!s!iO!t!iO#_!mO$T!nO$X!^O$Y!_O$c!oO$d!oO%h!SO%j!OO%m![O%n!PO%o!gO%q!hO&P!VO&T!YO&V!^O&W!_O~O%h!qOoYa!cYa!dYa$xYa$zYa%fYa~O!b!sO~O!b!tO~O&T!wO&Y!vO~P%vO%h%vX%j!hX%z%vXV%vXo%vX!c%vX!d%vX$W%vX$x%vX$z%vX$|%vX%f%vX%a%vX~O&T%vX&Y%vX~P.WO!f!{O~O%hpX%j!hX%zpX&TpX&YpXVpXopX!cpX!dpX$WpX$xpX$zpX$|pX%fpX%apX~O%j!|O~O%h#PO%zvO&T#RO&Y#QO~Oo#TO!c#VO!d#UO$x#WO$z#XO%fPO~OUoOb!QOc!QOf!QOh!QOi!QOj!QOk!QOm!lOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!s!iO!t!iO%j!OO%n!PO%o!gO%q!hO%u#^O~O!f#[O~P1[OUoOb!QOc!QOf!QOh!QOi!QOj!QOk!QOm!lOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f!jO!s!iO!t!iO%j!OO%n!PO%o!gO%q!hO~O%y#`O~P4qO%h#PO%zvO&T!wO&Y!vO~O$W#gO%zvO~P`Of#jOh#kO%k#iO%l#hO%m#hO~O#Q%vX#X%vX#Y%vX#Z%vX#^%vX#_%vX#`%vX#a%vX#b%vX#c%vX#d%vX#e%vX#f%vX#g%vX#h%vX#i%vX#j%vX#k%vX#l%vX#m%vX#n%vX#o%vX#p%vX#q%vX#r%vX#s%vX#t%vX#u%vX#v%vX#w%vX#x%vX#y%vX#z%vX#{%vX#|%vX#}%vX$O%vX$P%vX$Q%vX$R%vX$[%vX$]%vX$^%vX$_%vX$`%vX$a%vX$b%vX$e%vX$f%vX$g%vX$h%vX$i%vX$j%vX$k%vX$l%vX$m%vX$n%vX$o%vX$r%vX$s%vX$}%vX%j%vX%t%vX&O%vX&Q%vX&R%vX&U%vX%u%vX$U%vX%y%vX$V%vX~P.WOU!ROb!QOc!QOf!QOh!QOi!QOj!QOk!QOm!lOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f#[O!ipO!jpO!kpO!lpO!mpO!s!iO!t!iO#_!mO$T!nO$X!^O$Y*gO$c*oO$d*oO%h!SO%j!OO%m![O%n!PO%o!gO%q!hO%t#nO%u#mO&P!VO&Q#nO&T!YO&V!^O&W*gO~O#Q#OX#Y#OX#Z#OX#^#OX#_#OX#`#OX#a#OX#b#OX#c#OX#d#OX#e#OX#f#OX#g#OX#h#OX#i#OX#j#OX#k#OX#l#OX#m#OX#n#OX#o#OX#p#OX#q#OX#r#OX#s#OX#t#OX#u#OX#v#OX#w#OX#x#OX#y#OX#z#OX#{#OX#|#OX#}#OX$O#OX$P#OX$Q#OX$R#OX$[#OX$]#OX$^#OX$_#OX$`#OX$a#OX$b#OX$e#OX$f#OX$g#OX$h#OX$i#OX$j#OX$k#OX$l#OX$m#OX$n#OX$o#OX$}#OX%h#OX%t#OX%z#OX&Q#OX&R#OXV#OXo#OX!c#OX!d#OX$x#OX$z#OX$|#OX%a#OX%f#OX&U#OX%u#OX$U#OX%y#OX$W#OX$V#OX#X#OX~O%j!hX~PBbOU!ROb!QOc!QOf!QOh!QOi!QOj!QOk!QOm!lOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f!jO!ipO!jpO!kpO!lpO!mpO!s!iO!t!iO#_!mO$T!nO$X!^O$Y*gO$c*oO$d*oO%h!SO%j!OO%m![O%n!PO%o!gO%q!hO&P!VO&T!YO&V!^O&W*gO~O#X#rO%j#WX%u#WX~O#Q#uO#^#vO#_#wO#`#vO#a#vO#b#vO#c#vO#d#vO#e#vO#f#vO#g#wO#h#wO#i#wO#j#xO#k#wO#l#xO#m#yO#n#yO#o#yO#p#yO#q#zO#r#yO#s#yO#t#yO#u#yO#v#yO#w#yO#x#yO#y#yO#z#yO#{#yO#|#yO#}#yO$O#yO$P#yO$Q#yO$R#yO%h#tO%z#sO~O#Y!}X#Z!}X$[!}X$]!}X$^!}X$_!}X$`!}X$a!}X$b!}X$e!}X$f!}X$g!}X$h!}X$i!}X$j!}X$k!}X$l!}X$m!}X$n!}X$o!}X$}!}X%t!}X&Q!}X&R!}XV!}Xo!}X!c!}X!d!}X$x!}X$z!}X$|!}X%a!}X%f!}X&U!}X%u!}X$U!}X%y!}X$W!}X$V!}X~PLbO%t#{O&Q#{O&U#mO~P(vO#Q#OX#X!qX#Y#OX#Z#OX#^#OX#_#OX#`#OX#a#OX#b#OX#c#OX#d#OX#e#OX#f#OX#g#OX#h#OX#i#OX#j#OX#k#OX#l#OX#m#OX#n#OX#o#OX#p#OX#q#OX#r#OX#s#OX#t#OX#u#OX#v#OX#w#OX#x#OX#y#OX#z#OX#{#OX#|#OX#}#OX$O#OX$P#OX$Q#OX$R#OX$[#OX$]#OX$^#OX$_#OX$`#OX$a#OX$b#OX$e#OX$f#OX$g#OX$h#OX$i#OX$j#OX$k#OX$l#OX$m#OX$n#OX$o#OX$}#OX%h#OX%j!qX%t!qX%t#OX%z#OX&Q#OX&R#OXV#OXo#OX!c#OX!d#OX$x#OX$z#OX$|#OX%a#OX%f#OX&U#OX%u!qX%u#OX$U#OX%y#OX$W#OX$V#OX~O$r$OO$s$OO&O#}O~P!#yO%h$PO~O$[$SO$]$SO$^$TO$_$TO$`$UO$a$UO$b$UO$e$VO$f$VO$g$VO$h$WO$i$WO$j$WO$k$WO#Y!|X#Z!|X$l!|X$m!|X$n!|X$o!|X&Q!|X&R!|X~O$}!|X%t!|XV!|Xo!|X!c!|X!d!|X$x!|X$z!|X$|!|X%a!|X%f!|X&U!|X$U!|X$W!|X$V!|X~P!)oO#Y!{X#Z!{X$n!{X$o!{X%t!{X&Q!{X&R!{X~O$l$XO$m$XO$}!{XV!{Xo!{X!c!{X!d!{X$x!{X$z!{X$|!{X%a!{X%f!{X&U!{X$U!{X$W!{X$V!{X~P!,YO#Y!zX#Z!zX%t!zX&Q!zX&R!zX~O$n$YO$o$YO$}!zXV!zXo!zX!c!zX!d!zX$x!zX$z!zX$|!zX%a!zX%f!zX&U!zX$U!zX$W!zX$V!zX~P!-wO%t$ZO#Y!yX#Z!yX$}!yX&Q!yX&R!yXV!yXo!yX!c!yX!d!yX$x!yX$z!yX$|!yX%a!yX%f!yX&U!yX$U!yX$W!yX$V!yX~O#Y$]O#Z$]O&Q$[O&R$]O$}!xXV!xXo!xX!c!xX!d!xX$x!xX$z!xX$|!xX%a!xX%f!xX&U!xX$U!xX$W!xX$V!xX~O%j$^O~O%{$cO%|$_O%}$aO~O%|$_O%}$aO&X$eO~O%t$fO#X!pX%j!pX%u!pX~O%o$hO%q$iO%r$jO%s$kO~OU*_Ob!QOc!QOf!QOh!QOi!QOj!QOk!QOm!lOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!ipO!jpO!kpO!lpO!mpO!s!iO!t!iO#_!mO$T!nO$X!^O%h$mO%j!OO%m![O%n!PO%o!gO%q!hO&P!VO&T!YO&V!^O~O$Y!_O$c!oO$d!oO&W!_O~P!3QO$}$qO~Ob!QOc!QOf!QOh!QOi!QOj!QOk!QOm!lO%j!OO%n!PO~O%h#PO%zvO&T$wO&Y$vO~O%h#PO%zvO&T$|O&Y${O~O$W%TO%zvO~P`O%u%UO~OU%VO%hjO~O%j!|O%h!ga%z!gaV!gao!ga!c!ga!d!ga$W!ga$x!ga$z!ga$|!ga%f!ga%a!ga~O&T!ga&Y!ga~P!9bO!f!jO~P1[O!b%]O~O!b%^O~O&T$|O&Y${O~P%vO%h#PO%zvO&T%cO&Y%bOV$uio$ui!c$ui!d$ui$x$ui$z$ui$|$ui%a$ui%f$ui$W$ui~O%h#PO%zvO&T%gO&Y%fOV$vio$vi!c$vi!d$vi$x$vi$z$vi$|$vi%a$vi%f$vi$W$vi~O%u%UO%t!qX#X!qX%j!qX~O%t!qX%u!qX#X!qX#Y!qX#Z!qX$[!qX$]!qX$^!qX$_!qX$`!qX$a!qX$b!qX$e!qX$f!qX$g!qX$h!qX$i!qX$j!qX$k!qX&R!qX~O$r+WO$s+WO&O%iO%y!qX$}!qXV!qXo!qX!c!qX!d!qX$x!qX$z!qX$|!qX%a!qX%f!qX&U!qX&Q!qX$l!qX$m!qX$n!qX$o!qX$U!qX$W!qX$V!qX~P!=^O%u%jO~O%y%kO~O&U%OO~O$W%TO~P`O%l%lO%m%lO~O%j,SO%u%mO~O%u%nO~O%t%oO%u%nO&Q%oO~O#Q!ga#Y!ga#Z!ga#^!ga#_!ga#`!ga#a!ga#b!ga#c!ga#d!ga#e!ga#f!ga#g!ga#h!ga#i!ga#j!ga#k!ga#l!ga#m!ga#n!ga#o!ga#p!ga#q!ga#r!ga#s!ga#t!ga#u!ga#v!ga#w!ga#x!ga#y!ga#z!ga#{!ga#|!ga#}!ga$O!ga$P!ga$Q!ga$R!ga$[!ga$]!ga$^!ga$_!ga$`!ga$a!ga$b!ga$e!ga$f!ga$g!ga$h!ga$i!ga$j!ga$k!ga$l!ga$m!ga$n!ga$o!ga$}!ga%t!ga&Q!ga&R!ga&U!ga%u!ga$U!ga%y!ga#X!ga$V!ga~P!9bO%u%pO~OU!ROqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!ipO!jpO!kpO!lpO!mpO!s!iO!t!iO#_*nO$T!nO$X!^O$Y*jO$c*rO$d*rO%h$mO%m![O%o!gO%q!hO&P!VO&T!YO&V!^O&W*jO~P!7kOU!ROqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f%vO!ipO!jpO!kpO!lpO!mpO!s!iO!t!iO#_!mO$T!nO$X!^O$Y!_O$c!oO$d!oO%h!SO%m![O%o!gO%q!hO%y%zO&P!VO&T!YO&V!^O&W!_O~P!7kOU!ROqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f%vO!ipO!jpO!kpO!lpO!mpO!s!iO!t!iO#_!mO$T!nO$X!^O$Y*gO$c*oO$d*oO%h!SO%m![O%o!gO%q!hO%u%|O&P!VO&T!YO&V!^O&W*gO~P!7kO&U%nO~O%t&UO&Q&UO&U%nO~O$r&VO$s&VO#Q#Oa#X!qa#Y#Oa#Z#Oa#^#Oa#_#Oa#`#Oa#a#Oa#b#Oa#c#Oa#d#Oa#e#Oa#f#Oa#g#Oa#h#Oa#i#Oa#j#Oa#k#Oa#l#Oa#m#Oa#n#Oa#o#Oa#p#Oa#q#Oa#r#Oa#s#Oa#t#Oa#u#Oa#v#Oa#w#Oa#x#Oa#y#Oa#z#Oa#{#Oa#|#Oa#}#Oa$O#Oa$P#Oa$Q#Oa$R#Oa$[#Oa$]#Oa$^#Oa$_#Oa$`#Oa$a#Oa$b#Oa$e#Oa$f#Oa$g#Oa$h#Oa$i#Oa$j#Oa$k#Oa$l#Oa$m#Oa$n#Oa$o#Oa$}#Oa%h#Oa%j!qa%t!qa%z#Oa&Q#Oa&R#OaV#Oao#Oa!c#Oa!d#Oa$x#Oa$z#Oa$|#Oa%a#Oa%f#Oa&U#Oa%u#Oa$U#Oa%y#Oa$W#Oa$V#Oa~O%t#Oa%u!qa~P##uOU!ROqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!ipO!jpO!kpO!lpO!mpO!s!iO!t!iO#_*nO$T!nO$X!^O%h$mO%m![O%o!gO%q!hO&P!VO&T!YO&V!^O~P!7kO%h&XO~P4qO%j&ZO~O%l&gO~O%o&kO%{&iO%|$_O%}$aO~O%q&oO%|$_O%}$aO&X&mO~O%t$fO#X!pa%j!pa%u!pa~O%o&uO%p&sO~O%o&vO%p&vO%q&uO~O%o&xO%p&xO%q&xO%r&uO~O%o&zO%p&zO%q&zO%r&zO%s&uO~O#Y#Oa#Z#Oa#_#Oa#`#Oa#a#Oa#b#Oa#c#Oa#d#Oa#e#Oa#f#Oa#g#Oa#h#Oa#i#Oa#j#Oa#k#Oa#l#Oa#m#Oa#n#Oa#o#Oa#p#Oa#q#Oa#r#Oa#s#Oa#t#Oa#u#Oa#v#Oa#w#Oa#x#Oa#y#Oa#z#Oa#{#Oa#|#Oa#}#Oa$O#Oa$P#Oa$Q#Oa$R#Oa$[#Oa$]#Oa$^#Oa$_#Oa$`#Oa$a#Oa$b#Oa$e#Oa$f#Oa$g#Oa$h#Oa$i#Oa$j#Oa$k#Oa$l#Oa$m#Oa$n#Oa$o#Oa$}#Oa&Q#Oa&R#OaV#Oao#Oa!c#Oa!d#Oa$x#Oa$z#Oa$|#Oa%a#Oa%f#Oa&U#Oa%u#Oa$U#Oa%y#Oa$W#Oa$V#Oa~O#Q#uO#^#vO%h#tO%z#sO%t#Oa#X#Oa~P#/[O&O&|O%j#OX~PBbO$U&}O~OUoOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f'OO~O&O'QO~P#4xO%t'RO%u%iX~O%u'TO~O%h#PO%zvO&T'VO&Y'UO~O%h#PO%zvO&T']O&Y'[OV$uqo$uq!c$uq!d$uq$x$uq$z$uq$|$uq%a$uq%f$uq$W$uq~O%h#PO%zvO&T'aO&Y'`OV$vqo$vq!c$vq!d$vq$x$vq$z$vq$|$vq%a$vq%f$vq$W$vq~O&T'fO&Y'eO~O&U'cO~O%h#PO%zvO&T'fO&Y'eO~O$W'iO%zvO~P`O$W'iO~P`O&U'XO~O%h#PO%zvO&T']O&Y'[O~O%h#PO%zvO&T'aO&Y'`O~O%t!qa%u!qa#X!qa#Y!qa#Z!qa$[!qa$]!qa$^!qa$_!qa$`!qa$a!qa$b!qa$e!qa$f!qa$g!qa$h!qa$i!qa$j!qa$k!qa&R!qa~O$r,cO$s,cO%y!qa$}!qaV!qao!qa!c!qa!d!qa$x!qa$z!qa$|!qa%a!qa%f!qa&U!qa&Q!qa$l!qa$m!qa$n!qa$o!qa$U!qa$W!qa$V!qa~P#;kO%u'sO~O$[+[O$]+[O$^+cO$_+cO$`+jO$a+jO$b+jO$e+qO$f+qO$g+qO$h+xO$i+xO$j+xO$k+xO~O%j#Wi%u#Wi~P#>jO$n,PO$o,PO#Y#UX#Z#UX%y#UX&Q#UX&R#UX%u#UX~O#Y'vO#Z'vO&Q'uO&R'vO%y#TX%u#TX~O%j'wO~O#X!qX%j!qX%t!qX%t#[X%y#SX%u#SX~O%t#[X%y!|X~P!)oO%t'xO~O%y'yO~O%u'zO~O#Q#uO#^#vO%h#tO%z#sO#Y#Oi#Z#Oi#_#Oi#g#Oi#h#Oi#i#Oi#j#Oi#k#Oi#l#Oi#m#Oi#n#Oi#o#Oi#p#Oi#q#Oi#r#Oi#s#Oi#t#Oi#u#Oi#v#Oi#w#Oi#x#Oi#y#Oi#z#Oi#{#Oi#|#Oi#}#Oi$O#Oi$P#Oi$Q#Oi$R#Oi$[#Oi$]#Oi$^#Oi$_#Oi$`#Oi$a#Oi$b#Oi$e#Oi$f#Oi$g#Oi$h#Oi$i#Oi$j#Oi$k#Oi$l#Oi$m#Oi$n#Oi$o#Oi$}#Oi%t#Oi&Q#Oi&R#OiV#Oio#Oi!c#Oi!d#Oi$x#Oi$z#Oi$|#Oi%a#Oi%f#Oi&U#Oi%u#Oi$U#Oi%y#Oi$W#Oi$V#Oi#X#Oi~O#`#Oi#a#Oi#b#Oi#c#Oi#d#Oi#e#Oi#f#Oi~P#AvO#`#vO#a#vO#b#vO#c#vO#d#vO#e#vO#f#vO~P#AvO#Q#uO#^#vO#_#wO#`#vO#a#vO#b#vO#c#vO#d#vO#e#vO#f#vO#g#wO#h#wO#i#wO#k#wO%h#tO%z#sO#Y#Oi#Z#Oi#m#Oi#n#Oi#o#Oi#p#Oi#q#Oi#r#Oi#s#Oi#t#Oi#u#Oi#v#Oi#w#Oi#x#Oi#y#Oi#z#Oi#{#Oi#|#Oi#}#Oi$O#Oi$P#Oi$Q#Oi$R#Oi$[#Oi$]#Oi$^#Oi$_#Oi$`#Oi$a#Oi$b#Oi$e#Oi$f#Oi$g#Oi$h#Oi$i#Oi$j#Oi$k#Oi$l#Oi$m#Oi$n#Oi$o#Oi$}#Oi%t#Oi&Q#Oi&R#OiV#Oio#Oi!c#Oi!d#Oi$x#Oi$z#Oi$|#Oi%a#Oi%f#Oi&U#Oi%u#Oi$U#Oi%y#Oi$W#Oi$V#Oi#X#Oi~O#j#Oi#l#Oi~P#GnO#j#xO#l#xO~P#GnO#Y#Oi#Z#Oi$[#Oi$]#Oi$^#Oi$_#Oi$`#Oi$a#Oi$b#Oi$e#Oi$f#Oi$g#Oi$h#Oi$i#Oi$j#Oi$k#Oi$l#Oi$m#Oi$n#Oi$o#Oi$}#Oi%t#Oi&Q#Oi&R#OiV#Oio#Oi!c#Oi!d#Oi$x#Oi$z#Oi$|#Oi%a#Oi%f#Oi&U#Oi%u#Oi$U#Oi%y#Oi$W#Oi$V#Oi#X#Oi~PLbO&U'sO~O#Q*}O#^+OO#_+PO#`+OO#a+OO#b+OO#c+OO#d+OO#e+OO#f+OO#g+PO#h+PO#i+PO#j+QO#k+PO#l+QO#m+RO#n+RO#o+RO#p+RO#q+SO#r+RO#s+RO#t+RO#u+RO#v+RO#w+RO#x+RO#y+RO#z+RO#{+RO#|+RO#}+RO$O+RO$P+RO$Q+RO$R+RO%h#tO%z#sO~O#X!qi%j!qi%t!qi%u!qi$[!qi$]!qi$^!qi$_!qi$`!qi$a!qi$b!qi$e!qi$f!qi$g!qi$h!qi$i!qi$j!qi$k!qi#Y!qi#Z!qi&R!qi~P$ |O%j'}O~O#Y!}i#Z!}i$^!}i$_!}i$`!}i$a!}i$b!}i$e!}i$f!}i$g!}i$h!}i$i!}i$j!}i$k!}i$l!}i$m!}i$n!}i$o!}i$}!}i&Q!}i&R!}iV!}io!}i!c!}i!d!}i$x!}i$z!}i$|!}i%a!}i%f!}i&U!}i$U!}i%y!}i$W!}i$V!}i~O$[$SO$]$SO%t!}i~P$&TO$[$SO$]$SO$^$TO$_$TO$`$UO$a$UO#Y!}i#Z!}i$h!}i$i!}i$j!}i$k!}i$l!}i$m!}i$n!}i$o!}i$}!}i%t!}i&Q!}i&R!}iV!}io!}i!c!}i!d!}i$x!}i$z!}i$|!}i%a!}i%f!}i&U!}i$U!}i%y!}i$W!}i$V!}i~O$b!}i$e!}i$f!}i$g!}i~P$(qO$b$UO$e$VO$f$VO$g$VO~P$(qO#Y!}i#Z!}i$l!}i$m!}i$n!}i$o!}i$}!}i&Q!}i&R!}iV!}io!}i!c!}i!d!}i$x!}i$z!}i$|!}i%a!}i%f!}i&U!}i$U!}i%y!}i$W!}i$V!}i~O$[$SO$]$SO$^$TO$_$TO$`$UO$a$UO$b$UO$e$VO$f$VO$g$VO$h$WO$i$WO$j$WO$k$WO%t!}i~P$+oO$[$SO$]$SO$^$TO$_$TO$`$UO$a$UO$b$UO$e$VO$f$VO$g$VO$h$WO$i$WO$j$WO$k$WO~O#Y!|i#Z!|i$l!|i$m!|i$n!|i$o!|i$}!|i%t!|i&Q!|i&R!|iV!|io!|i!c!|i!d!|i$x!|i$z!|i$|!|i%a!|i%f!|i&U!|i$U!|i$W!|i$V!|i~P$.]O#Y!{i#Z!{i$n!{i$o!{i%t!{i&Q!{i&R!{i~O$l$XO$m$XO$}!{iV!{io!{i!c!{i!d!{i$x!{i$z!{i$|!{i%a!{i%f!{i&U!{i$U!{i$W!{i$V!{i~P$0vO#Y!zi#Z!zi%t!zi&Q!zi&R!zi~O$n$YO$o$YO$}!ziV!zio!zi!c!zi!d!zi$x!zi$z!zi$|!zi%a!zi%f!zi&U!zi$U!zi$W!zi$V!zi~P$2eO%t$ZO#Y!yi#Z!yi$}!yi&Q!yi&R!yiV!yio!yi!c!yi!d!yi$x!yi$z!yi$|!yi%a!yi%f!yi&U!yi$U!yi$W!yi$V!yi~O%u(SO~O%o(UO%{&iO%|$_O%}$aO~O%q(XO%|$_O%}$aO&X&mO~O%o([O%p&sO~O%o&vO%p&vO%q([O~O%o&xO%p&xO%q&xO%r([O~O%o&zO%p&zO%q&zO%r&zO%s([O~O%P(aOV%OXo%OX!c%OX!d%OX$x%OX$z%OX$|%OX%a%OX%f%OX%t%OX$W%OX~O%t(bOV&ZXo&ZX!c&ZX!d&ZX$x&ZX$z&ZX$|&ZX%a&ZX%f&ZX$W&ZX~O%t'RO%u%ia~O&T(iO&Y(hO~O&U(fO~O%h#PO%zvO&T(kO&Y(jO~O%h#PO%zvO&T(pO&Y(oO~O&U(tO~O&T(wO&Y(vO~O$W(xO~P`O%h#PO%zvO&T(iO&Y(hO~O%h#PO%zvO&T(kO&Y(jOV$uyo$uy!c$uy!d$uy$x$uy$z$uy$|$uy%a$uy%f$uy$W$uy~O%h#PO%zvO&T(pO&Y(oOV$vyo$vy!c$vy!d$vy$x$vy$z$vy$|$vy%a$vy%f$vy$W$vy~O%h#PO%zvO&T(wO&Y(vO~O$W(xO%zvO~P`O&U(mO~O&U(rO~O$[!}a$]!}a$^!}a$_!}a$`!}a$a!}a$b!}a$e!}a$f!}a$g!}a$h!}a$i!}a$j!}a$k!}a%u!}a~O#Y.bO#Z.bO&R.bO%j!}a~P$=SO$Y*hO$c*pO$d*pO&W*hO~P!3QOU!ROqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f!jO!ipO!jpO!kpO!lpO!mpO!s!iO!t!iO#_!mO$T!nO$X!^O$Y*hO$c*pO$d*pO%h!SO%m![O%o!gO%q!hO&P!VO&T!YO&V!^O&W*hO~P!7kO!f)QO$Y*kO$c*sO$d*sO&W*kO~P!3QO#X!qq%j!qq%t!qq%u!qq$[!qq$]!qq$^!qq$_!qq$`!qq$a!qq$b!qq$e!qq$f!qq$g!qq$h!qq$i!qq$j!qq$k!qq#Y!qq#Z!qq&R!qq~P$ |O#Y$Zi#Z$Zi$l$Zi$m$Zi$n$Zi$o$Zi$}$Zi%t$Zi&Q$Zi&R$ZiV$Zio$Zi!c$Zi!d$Zi$x$Zi$z$Zi$|$Zi%a$Zi%f$Zi&U$Zi$U$Zi%y$Zi$W$Zi$V$Zi~P$.]O#X*xO~Q#WX#X!pX#Y!pX#Z!pX$[!pX$]!pX$^!pX$_!pX$`!pX$a!pX$b!pX$e!pX$f!pX$g!pX$h!pX$i!pX$j!pX$k!pX&R!pX%u!pX~O%t.ZO$l!pX$m!pX$n!pX$o!pX$}!pX&Q!pXV!pXo!pX!c!pX!d!pX$x!pX$z!pX$|!pX%a!pX%f!pX&U!pX$U!pX%y!pX$W!pX$V!pX~P$F]O%o)VO%{&iO%|$_O%}$aO~O%q)WO%|$_O%}$aO&X&mO~O$V)XO~OUoOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO~O!f)YO~P$IrO%t(bOV&Zao&Za!c&Za!d&Za$x&Za$z&Za$|&Za%a&Za%f&Za$W&Za~O&U)^O~O&T)cO&Y)bO~O&U)`O~O&T)gO&Y)fO~O&U)dO~O&U)hO~O&T)kO&Y)jO~O%h#PO%zvO&T)cO&Y)bO~O%h#PO%zvO&T)gO&Y)fO~O&T)oO&Y)nO~O$W)pO~P`O$n,PO$o,PO#Y#Ui#Z#Ui%y#Ui&Q#Ui&R#Ui%u#Ui~O$[+]O$]+]O$^+dO$_+dO$`+kO$a+kO$b+kO$e+rO$f+rO$g+rO$h+yO$i+yO$j+yO$k+yO~O%t#[X%y#[X~P% dO%t)qO%y&Si~O%u)sO~O%t.ZO#X!pa$}!pa&Q!paV!pao!pa!c!pa!d!pa$x!pa$z!pa$|!pa%a!pa%f!pa&U!pa%u!pa$U!pa%y!pa$W!pa$V!pa~O#Y!pa#Z!pa$[!pa$]!pa$^!pa$_!pa$`!pa$a!pa$b!pa$e!pa$f!pa$g!pa$h!pa$i!pa$j!pa$k!pa$l!pa$m!pa$n!pa$o!pa&R!pa~P%!yO&U)uO~O&U)vO~O&U)xO~O&U)zO~O&T)}O&Y)|O~O&T*PO&Y*OO~O%t)qO%y&Sq~O$W*TO~O&U*UO~O&U*VO~O&U*WO~O&U*ZO~O&U*[O~O&U*]O~O#Q%vX#Y%vX#Z%vX#^%vX#_%vX#`%vX#a%vX#b%vX#c%vX#d%vX#e%vX#f%vX#g%vX#h%vX#i%vX#j%vX#k%vX#l%vX#m%vX#n%vX#o%vX#p%vX#q%vX#r%vX#s%vX#t%vX#u%vX#v%vX#w%vX#x%vX#y%vX#z%vX#{%vX#|%vX#}%vX$O%vX$P%vX$Q%vX$R%vX$[%vX$]%vX$^%vX$_%vX$`%vX$a%vX$b%vX$e%vX$f%vX$g%vX$h%vX$i%vX$j%vX$k%vX$l%vX$m%vX$n%vX$o%vX$}%vX%t%vX&O%vX&Q%vX&R%vX&U%vX%u%vX$U%vX%y%vX#X%vX$V%vX~P.WO#Q#OX#^#OX#_#OX#`#OX#a#OX#b#OX#c#OX#d#OX#e#OX#f#OX#g#OX#h#OX#i#OX#j#OX#k#OX#l#OX#m#OX#n#OX#o#OX#p#OX#q#OX#r#OX#s#OX#t#OX#u#OX#v#OX#w#OX#x#OX#y#OX#z#OX#{#OX#|#OX#}#OX$O#OX$P#OX$Q#OX$R#OX$[#OX$]#OX$^#OX$_#OX$`#OX$a#OX$b#OX$e#OX$f#OX$g#OX$h#OX$i#OX$j#OX$k#OX%h#OX%j#OX%z#OX%u#OX#Y#OX#Z#OX&R#OX~O%j!hX#X#OX%t#OX~P%+xO$r$OO$s$OO&O+TO#X!qX%j!qX%t!qX~P%+xO#Q#OX#X!qX#Y#OX#Z#OX#^#OX#_#OX#`#OX#a#OX#b#OX#c#OX#d#OX#e#OX#f#OX#g#OX#h#OX#i#OX#j#OX#k#OX#l#OX#m#OX#n#OX#o#OX#p#OX#q#OX#r#OX#s#OX#t#OX#u#OX#v#OX#w#OX#x#OX#y#OX#z#OX#{#OX#|#OX#}#OX$O#OX$P#OX$Q#OX$R#OX$[#OX$]#OX$^#OX$_#OX$`#OX$a#OX$b#OX$e#OX$f#OX$g#OX$h#OX$i#OX$j#OX$k#OX$l#OX$m#OX$n#OX$o#OX%h#OX%j!qX%t!qX%y#OX%z#OX&Q#OX&R#OX%u#OX$}#OXV#OXo#OX!c#OX!d#OX$x#OX$z#OX$|#OX%a#OX%f#OX&U#OX$U#OX$W#OX$V#OX~O$r$OO$s$OO&O+UO~P%0eO#Q#OX#X!qX#Y#OX#Z#OX#^#OX#_#OX#`#OX#a#OX#b#OX#c#OX#d#OX#e#OX#f#OX#g#OX#h#OX#i#OX#j#OX#k#OX#l#OX#m#OX#n#OX#o#OX#p#OX#q#OX#r#OX#s#OX#t#OX#u#OX#v#OX#w#OX#x#OX#y#OX#z#OX#{#OX#|#OX#}#OX$O#OX$P#OX$Q#OX$R#OX$[#OX$]#OX$^#OX$_#OX$`#OX$a#OX$b#OX$e#OX$f#OX$g#OX$h#OX$i#OX$j#OX$k#OX$l#OX$m#OX$n#OX$o#OX%h#OX%j!qX%t!qX%t#OX%u#OX%z#OX&Q#OX&R#OX~O$r$OO$s$OO&O+VO~P%6OOU!ROqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f!jO!ipO!jpO!kpO!lpO!mpO!s!iO!t!iO#_*nO$T!nO$X!^O$Y*lO$c*tO$d*tO%h!SO%m![O%o!gO%q!hO&P!VO&T!YO&V!^O&W*lO~P!7kO$Y*gO$c*oO$d*oO&W*gO~P!3QO$Y*iO$c*qO$d*qO&W*iO~P!3QOU!ROqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!ipO!jpO!kpO!lpO!mpO!s!iO!t!iO#_*nO$T!nO$X!^O$Y*lO$c*tO$d*tO%h$mO%m![O%o!gO%q!hO&P!VO&T!YO&V!^O&W*lO~P!7kO$Y*mO$c*uO$d*uO&W*mO~P!3QO$r&VO$s&VO#Q#Oa#X!qa#Y#Oa#Z#Oa#^#Oa#_#Oa#`#Oa#a#Oa#b#Oa#c#Oa#d#Oa#e#Oa#f#Oa#g#Oa#h#Oa#i#Oa#j#Oa#k#Oa#l#Oa#m#Oa#n#Oa#o#Oa#p#Oa#q#Oa#r#Oa#s#Oa#t#Oa#u#Oa#v#Oa#w#Oa#x#Oa#y#Oa#z#Oa#{#Oa#|#Oa#}#Oa$O#Oa$P#Oa$Q#Oa$R#Oa$[#Oa$]#Oa$^#Oa$_#Oa$`#Oa$a#Oa$b#Oa$e#Oa$f#Oa$g#Oa$h#Oa$i#Oa$j#Oa$k#Oa%h#Oa%j!qa%t!qa%z#Oa&R#Oa%u#Oa~O%j#Oa~P%CYO$l#Oa$m#Oa$n#Oa$o#Oa%t#Oa&Q#Oa~P%CYO#Q*}O#^+OO%h#tO%z#sO#_#Oa#`#Oa#a#Oa#b#Oa#c#Oa#d#Oa#e#Oa#f#Oa#g#Oa#h#Oa#i#Oa#j#Oa#k#Oa#l#Oa#m#Oa#n#Oa#o#Oa#p#Oa#q#Oa#r#Oa#s#Oa#t#Oa#u#Oa#v#Oa#w#Oa#x#Oa#y#Oa#z#Oa#{#Oa#|#Oa#}#Oa$O#Oa$P#Oa$Q#Oa$R#Oa$[#Oa$]#Oa$^#Oa$_#Oa$`#Oa$a#Oa$b#Oa$e#Oa$f#Oa$g#Oa$h#Oa$i#Oa$j#Oa$k#Oa%j#Oa#X#Oa%t#Oa%u#Oa#Y#Oa#Z#Oa&R#Oa~O$}#WiV#Wio#Wi!c#Wi!d#Wi$x#Wi$z#Wi$|#Wi%a#Wi%f#Wi&U#Wi%u#Wi$U#Wi%y#Wi$W#Wi$V#Wi~O$[+ZO$]+ZO$^+bO$_+bO$`+iO$a+iO$b+iO$e+pO$f+pO$g+pO$h+wO$i+wO$j+wO$k+wO~P%KyO$[+YO$]+YO$^+aO$_+aO$`+hO$a+hO$b+hO$e+oO$f+oO$g+oO$h+vO$i+vO$j+vO$k+vO~Q#Wi$[$SO$]$SO$^$TO$_$TO$`$UO$a$UO$b$UO$e$VO$f$VO$g$VO$h$WO$i$WO$j$WO$k$WO~Q#Wi$[+XO$]+XO$^+`O$_+`O$`+gO$a+gO$b+gO$e+nO$f+nO$g+nO$h+uO$i+uO$j+uO$k+uO~O#Y#Wi#Z#Wi$l#Wi$m#Wi$n#Wi$o#Wi%t#Wi%u#Wi&Q#Wi&R#Wi~P& }O%t#Wi&Q#Wi&U#Wi%y#Wi~P% dO$[+_O$]+_O$^+fO$_+fO$`+mO$a+mO$b+mO$e+tO$f+tO$g+tO$h+{O$i+{O$j+{O$k+{O~O%t#Wi%u#Wi&Q#Wi~P&$PO$[+^O$]+^O$^+eO$_+eO$`+lO$a+lO$b+lO$e+sO$f+sO$g+sO$h+zO$i+zO$j+zO$k+zO~O#Y#Wi#Z#Wi%j#Wi&R#Wi%u#Wi~P&%[O#Y!|X#Z!|X$l!|X$m!|X$n!|X$o!|X%t#[X%u!|X&Q!|X&R!|X~P& }O#Q*}O#^+OO%h#tO%z#sO#_#Oi#g#Oi#h#Oi#i#Oi#j#Oi#k#Oi#l#Oi#m#Oi#n#Oi#o#Oi#p#Oi#q#Oi#r#Oi#s#Oi#t#Oi#u#Oi#v#Oi#w#Oi#x#Oi#y#Oi#z#Oi#{#Oi#|#Oi#}#Oi$O#Oi$P#Oi$Q#Oi$R#Oi$[#Oi$]#Oi$^#Oi$_#Oi$`#Oi$a#Oi$b#Oi$e#Oi$f#Oi$g#Oi$h#Oi$i#Oi$j#Oi$k#Oi%j#Oi#X#Oi%t#Oi%u#Oi#Y#Oi#Z#Oi&R#Oi~O#`#Oi#a#Oi#b#Oi#c#Oi#d#Oi#e#Oi#f#Oi~P&'aO#`+OO#a+OO#b+OO#c+OO#d+OO#e+OO#f+OO~P&'aO#Q*}O#^+OO#_+PO#`+OO#a+OO#b+OO#c+OO#d+OO#e+OO#f+OO#g+PO#h+PO#i+PO#k+PO%h#tO%z#sO#m#Oi#n#Oi#o#Oi#p#Oi#q#Oi#r#Oi#s#Oi#t#Oi#u#Oi#v#Oi#w#Oi#x#Oi#y#Oi#z#Oi#{#Oi#|#Oi#}#Oi$O#Oi$P#Oi$Q#Oi$R#Oi$[#Oi$]#Oi$^#Oi$_#Oi$`#Oi$a#Oi$b#Oi$e#Oi$f#Oi$g#Oi$h#Oi$i#Oi$j#Oi$k#Oi%j#Oi#X#Oi%t#Oi%u#Oi#Y#Oi#Z#Oi&R#Oi~O#j#Oi#l#Oi~P&+|O#j+QO#l+QO~P&+|O$[#Oi$]#Oi$^#Oi$_#Oi$`#Oi$a#Oi$b#Oi$e#Oi$f#Oi$g#Oi$h#Oi$i#Oi$j#Oi$k#Oi%j#Oi#X#Oi%t#Oi%u#Oi#Y#Oi#Z#Oi&R#Oi~P$ |O%t!qi%u!qi%y!qi#X!qi$}!qiV!qio!qi!c!qi!d!qi$x!qi$z!qi$|!qi%a!qi%f!qi&U!qi&Q!qi#Y!qi#Z!qi$[!qi$]!qi$^!qi$_!qi$`!qi$a!qi$b!qi$e!qi$f!qi$g!qi$h!qi$i!qi$j!qi$k!qi$l!qi$m!qi$n!qi$o!qi&R!qi$U!qi$W!qi$V!qi~PLbO#Y!}i#Z!}i$^!}i$_!}i$`!}i$a!}i$b!}i$e!}i$f!}i$g!}i$h!}i$i!}i$j!}i$k!}i$l!}i$m!}i$n!}i$o!}i%u!}i&Q!}i&R!}i~O$[+XO$]+XO%t!}i~P&4aO$[+YO$]+YO%u!}i~P$&TO$[+ZO$]+ZO$b!}i$e!}i$f!}i$g!}i$h!}i$i!}i$j!}i$k!}i$}!}iV!}io!}i!c!}i!d!}i$x!}i$z!}i$|!}i%a!}i%f!}i&U!}i%u!}i$U!}i%y!}i$W!}i$V!}i~O$^!}i$_!}i$`!}i$a!}i~P&6`O$^!}i$_!}i$`!}i$a!}i$b!}i$e!}i$f!}i$g!}i$h!}i$i!}i$j!}i$k!}i%j!}i%u!}i~O$[+[O$]+[O~P&8dO$^!}i$_!}i$`!}i$a!}i$b!}i$e!}i$f!}i$g!}i$h!}i$i!}i$j!}i$k!}i%t!}i&Q!}i~O$[+]O$]+]O%y!}i&U!}i~P&9lO$[+^O$]+^O#Y!}i#Z!}i&R!}i~P&8dO$[+_O$]+_O%u!}i~P&9lO$[+XO$]+XO$^+`O$_+`O$`+gO$a+gO#Y!}i#Z!}i$h!}i$i!}i$j!}i$k!}i$l!}i$m!}i$n!}i$o!}i%t!}i%u!}i&Q!}i&R!}i~O$b!}i$e!}i$f!}i$g!}i~P&;lO$[+YO$]+YO$^+aO$_+aO$`+hO$a+hO$b!}i$e!}i$f!}i$g!}i$h!}i$i!}i$j!}i$k!}i%u!}i~P$+oO$^+bO$_+bO$`+iO$a+iO~P&6`O$[+[O$]+[O$^+cO$_+cO$`+jO$a+jO$h!}i$i!}i$j!}i$k!}i%j!}i%u!}i~O$b!}i$e!}i$f!}i$g!}i~P&>qO$[+]O$]+]O$^+dO$_+dO$`+kO$a+kO$h!}i$i!}i$j!}i$k!}i%t!}i%y!}i&Q!}i&U!}i~O$b!}i$e!}i$f!}i$g!}i~P&?yO$[+^O$]+^O$^+eO$_+eO$`+lO$a+lO#Y!}i#Z!}i$h!}i$i!}i$j!}i$k!}i%j!}i&R!}i%u!}i~O$b!}i$e!}i$f!}i$g!}i~P&AXO$[+_O$]+_O$^+fO$_+fO$`+mO$a+mO$h!}i$i!}i$j!}i$k!}i%t!}i%u!}i&Q!}i~O$b!}i$e!}i$f!}i$g!}i~P&BjO$b+gO$e+nO$f+nO$g+nO~P&;lO$[+YO$]+YO$^+aO$_+aO$`+hO$a+hO$b+hO$e+oO$f+oO$g+oO$h!}i$i!}i$j!}i$k!}i%u!}i~P$+oO$[+ZO$]+ZO$^+bO$_+bO$`+iO$a+iO$b+iO$e+pO$f+pO$g+pO$}!}iV!}io!}i!c!}i!d!}i$x!}i$z!}i$|!}i%a!}i%f!}i&U!}i%u!}i$U!}i%y!}i$W!}i$V!}i~O$h!}i$i!}i$j!}i$k!}i~P&EYO$b+jO$e+qO$f+qO$g+qO~P&>qO$b+kO$e+rO$f+rO$g+rO~P&?yO$b+lO$e+sO$f+sO$g+sO~P&AXO$b+mO$e+tO$f+tO$g+tO~P&BjO#Y!}i#Z!}i$l!}i$m!}i$n!}i$o!}i%t!}i%u!}i&Q!}i&R!}i~P& }O$[+YO$]+YO$^+aO$_+aO$`+hO$a+hO$b+hO$e+oO$f+oO$g+oO$h+vO$i+vO$j+vO$k+vO%u!}i~P$+oO$h+wO$i+wO$j+wO$k+wO~P&EYO%j!}i%u!}i~P#>jO%t!}i%y!}i&Q!}i&U!}i~P% dO#Y!}i#Z!}i%j!}i&R!}i%u!}i~P&%[O%t!}i%u!}i&Q!}i~P&$PO#Y!|i#Z!|i$l!|i$m!|i$n!|i$o!|i%t!|i%u!|i&Q!|i&R!|i~P& }O$[+YO$]+YO$^+aO$_+aO$`+hO$a+hO$b+hO$e+oO$f+oO$g+oO$h+vO$i+vO$j+vO$k+vO~O#Y!|i#Z!|i$l!|i$m!|i$n!|i$o!|i%y!|i&Q!|i&R!|i%u!|i~P&LwO$l+|O$m+|O%u!{i~P$0vO$l+}O$m+}O#Y!{i#Z!{i$n!{i$o!{i%y!{i&Q!{i&R!{i%u!{i~O$n,OO$o,OO%u!zi~P$2eO%t,QO#Y!yi#Z!yi%u!yi&Q!yi&R!yi~O!f)QO$Y*mO$c*uO$d*uO&W*mO~P!3QO%t!qq%u!qq%y!qq#X!qq$}!qqV!qqo!qq!c!qq!d!qq$x!qq$z!qq$|!qq%a!qq%f!qq&U!qq&Q!qq#Y!qq#Z!qq$[!qq$]!qq$^!qq$_!qq$`!qq$a!qq$b!qq$e!qq$f!qq$g!qq$h!qq$i!qq$j!qq$k!qq$l!qq$m!qq$n!qq$o!qq&R!qq$U!qq$W!qq$V!qq~PLbO#Y$Zi#Z$Zi$l$Zi$m$Zi$n$Zi$o$Zi%t$Zi%u$Zi&Q$Zi&R$Zi~P& }O#Y$Zi#Z$Zi$l$Zi$m$Zi$n$Zi$o$Zi%y$Zi&Q$Zi&R$Zi%u$Zi$}$ZiV$Zio$Zi!c$Zi!d$Zi$x$Zi$z$Zi$|$Zi%a$Zi%f$Zi&U$Zi$U$Zi$W$Zi$V$Zi~P&LwO$[+ZO$]+ZO$^+bO$_+bO$`+iO$a+iO$b+iO$e+pO$f+pO$g+pO$h+wO$i+wO$j+wO$k+wO$}$ZiV$Zio$Zi!c$Zi!d$Zi$x$Zi$z$Zi$|$Zi%a$Zi%f$Zi&U$Zi%u$Zi$U$Zi%y$Zi$W$Zi$V$Zi~O%j$Zi%u$Zi~P#>jO%t$Zi%y$Zi&Q$Zi&U$Zi~P% dO#Y$Zi#Z$Zi%j$Zi&R$Zi%u$Zi~P&%[O%t$Zi%u$Zi&Q$Zi~P&$PO#Y#WX#Z#WX$[#WX$]#WX$^#WX$_#WX$`#WX$a#WX$b#WX$e#WX$f#WX$g#WX$h#WX$i#WX$j#WX$k#WX$l#WX$m#WX$n#WX$o#WX%u#WX&Q#WX&R#WX~O#X*yO%t#WX~P'+OO#X*wO~Q#WX#X*vO$}#WXV#WXo#WX!c#WX!d#WX$x#WX$z#WX$|#WX%a#WX%f#WX&U#WX%u#WX$U#WX%y#WX$W#WX$V#WX~O$[#WX$]#WX$^#WX$_#WX$`#WX$a#WX$b#WX$e#WX$f#WX$g#WX$h#WX$i#WX$j#WX$k#WX~P',zO$[#WX$]#WX$^#WX$_#WX$`#WX$a#WX$b#WX$e#WX$f#WX$g#WX$h#WX$i#WX$j#WX$k#WX%j#WX%u#WX~O#X#rO~P'/RO$[#WX$]#WX$^#WX$_#WX$`#WX$a#WX$b#WX$e#WX$f#WX$g#WX$h#WX$i#WX$j#WX$k#WX%t#WX&Q#WX~O#X*zO%y#WX&U#WX~P'0^O#X*|O#Y#WX#Z#WX&R#WX~P'/RO#X*{O%u#WX~P'0^O%t#[X%u#[X~P&$PO%t-qO%u&Sq~O#X*zO%t#WX&Q#WX&U#WX~O#X*{O%t#WX%u#WX&Q#WX~O$[!}X$]!}X$^!}X$_!}X$`!}X$a!}X$b!}X$e!}X$f!}X$g!}X$h!}X$i!}X$j!}X$k!}X%j!}X%u!}X#Y!}X#Z!}X&R!}X~P$ |O#Y!|X#Z!|X$l!|X$m!|X$n!|X$o!|X%t!|X%u!|X&Q!|X&R!|X~P& }O#Y!|X#Z!|X$l!|X$m!|X$n!|X$o!|X%y!|X&Q!|X&R!|X%u!|X~P&LwO$l+|O$m+|O%u!{X~P!,YO$l+}O$m+}O#Y!{X#Z!{X$n!{X$o!{X%y!{X&Q!{X&R!{X%u!{X~O$n,OO$o,OO%u!zX~P!-wO%t,QO#Y!yX#Z!yX%u!yX&Q!yX&R!yX~O#Y.XO#Z.XO&Q,RO&R.XO%t!xX%u!xX~O%j.qO~O$r$OO$s$OO&O.]O%j!qX~P!=^O%j,eO~O%j,fO~O%j,gO~O%j,hO~O%j,iO~O%j,jO~O%j,kO~O$r&VO$s&VO%j!qa~P#;kO%t-`O~O$[!}a$]!}a$^!}a$_!}a$`!}a$a!}a$b!}a$e!}a$f!}a$g!}a$h!}a$i!}a$j!}a$k!}a%y!}a&U!}a~O#Y.cO#Z.cO&R.cO%t!}a&Q!}a~P'9tO#Y.aO#Z.aO&R.aO$}!}aV!}ao!}a!c!}a!d!}a$x!}a$z!}a$|!}a%a!}a%f!}a%u!}a$U!}a$W!}a$V!}a~P'9tO#Y.eO#Z.eO&R.eO%t!}a&Q!}a~P$=SO%t$fO%j!pX~P$F]O%t-qO%u&Si~O%t$fO#X!pa$[!pa$]!pa$^!pa$_!pa$`!pa$a!pa$b!pa$e!pa$f!pa$g!pa$h!pa$i!pa$j!pa$k!pa%j!pa%u!pa#Y!pa#Z!pa&R!pa~O#Y.YO#Z.YO&Q$[O&R.YO%t!xX&U!xX~O%t.ZO%u!pX%y!pX#X!pX$}!pXV!pXo!pX!c!pX!d!pX$x!pX$z!pX$|!pX%a!pX%f!pX&U!pX&Q!pX$U!pX$W!pX$V!pX~O#Y$]O#Z$]O&Q,RO&R$]O%u!xX~O%j.nO~O%j,SO~O%p%l&O!sU%mXW&Xkj%{cbc!f%j~",
  goto: "!Iy&[PPPP&]&kPPPP&yPPPPP'['_PP+f+fP+fPPPP+fP/iP/lPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP0kP4o8nPPPPP<m<p=f?zBOPPFZJ[JtKSNj! |!#b!%Q!&s!,q5QP5Q!1T!1Z!1b!1g!1lPPP!4X5QPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP5QPPPPPP!4iPPPPPPPPPPPPPPPPPPPP!4sFZPP!6P&]&]&]P&]P&]PP!7aP!7g!7j!8S!8i!8o!8u!8{!9R!9X!9c!:y!;T!;_!;i!;{PPPP!<RP!<aP!<dPPPPPPPPPPPP!<g!A^!EwPPPPPPPPP!1TPPPPPP!IviSOU}!z#e#f%R%S%`'h'n(}iXOU}!z#e#f%R%S%`'h'n(}oQORUXr}!z#e#f%R%S%`'h'n(}R$t!q(|!i^uvyz!S!V!Y!_!m!n!o!v!w#P#Q#R#r#s#t#u#v#w#x#y#z$O$P$S$T$U$V$W$X$Y$Z$[$]$^$a$f$m$v$w${$|%b%c%f%g&V&X&Z&[&}'U'V'[']'`'a'e'f'u'v'w'x'}(h(i(j(k(o(p(v(w)X)b)c)f)g)j)k)n)o)q)|)}*O*P*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+Q+R+S+W+X+Y+Z+[+]+^+_+`+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,c,e,f,g,h,i,j,k-`-q.X.Y.Z._.`.a.b.c.d.e.n.qQ$r!qR(d'R)R!Q^uvyz!S!V!Y!_!m!n!o!q!v!w#P#Q#R#r#s#t#u#v#w#x#y#z$O$P$S$T$U$V$W$X$Y$Z$[$]$^$a$f$m$v$w${$|%b%c%f%g&V&X&Z&[&}'R'U'V'[']'`'a'e'f'u'v'w'x'}(h(i(j(k(o(p(v(w)X)b)c)f)g)j)k)n)o)q)|)}*O*P*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+Q+R+S+W+X+Y+Z+[+]+^+_+`+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,c,e,f,g,h,i,j,k-`-q.X.Y.Z._.`.a.b.c.d.e.n.qR$l!lQqWQ|[Q}]Q!rbQ!yeQ!zfQ#YsQ#ZtQ$y!sQ$z!tQ%[#TQ%_#WQ%`#XQ'k%]R'l%^nkW[]befst!s!t#T#W#X%]%^&|!U^yz!S!V!Y!_!m!n!o!v!w#Q#R#s#t#u#v#w#x#y#z$S$T$U$V$W$X$Y$Z$[$^$a$m$v$w${$|%b%c%f%g&Z&}'U'V'[']'`'a'e'f'u'w'x'}(h(i(j(k(o(p(v(w)X)b)c)f)g)j)k)n)o)q)|)}*O*P*g*h*i*k*m*o*p*q*s*u*v*w*x*y*z*{+W+X+Y+Z+]+_+`+a+b+d+f+g+h+i+k+m+n+o+p+r+t+u+v+w+y+{+|+},O,P,Q,R,S,c,e,f,g,i,k-`-q.n.qQ%V!|!X*`#r$O&V*j*l*n*r*t*|*}+O+P+Q+R+S+[+^+c+e+j+l+q+s+x+z,h,jnmW[]befst!s!t#T#W#X%]%^(V![^yz!S!V!Y!_!m!n!o!v!w#Q#R#r#s#t#u#v#w#x#y#z$O$S$T$U$V$W$X$Y$Z$[$^$a$m$v$w${$|%b%c%f%g&V&Z&}'U'V'[']'`'a'e'f'u'w'x'}(h(i(j(k(o(p(v(w)X)b)c)f)g)j)k)n)o)q)|)}*O*P*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+Q+R+S+W+X+Y+Z+[+]+^+_+`+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,c,e,f,g,h,i,j,k-`-q.n.qnlW[]befst!s!t#T#W#X%]%^(V*^^yz!S!V!Y!_!m!n!o!v!w#Q#R#r#s#t#u#v#w#x#y#z$O$S$T$U$V$W$X$Y$Z$[$^$a$m$v$w${$|%b%c%f%g&V&Z&}'U'V'[']'`'a'e'f'u'w'x'}(h(i(j(k(o(p(v(w)X)b)c)f)g)j)k)n)o)q)|)}*O*P*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+Q+R+S+W+X+Y+Z+[+]+^+_+`+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,c,e,f,g,h,i,j,k-`-q.n.qR%W!|!gw[eqx|}!r!u!y!z#O#W#Y#Z#e$u$y$z%Q%R%[%_%`%a%e'Z'_'j'k'l'm'n(z({#|!W^yz!S!V!Y!_!n!v!w#Q#R#s#t$P$^$a$m$v$w${$|%b%c%f%g&}'U'V'[']'`'a'e'f'w'}(h(i(j(k(o(p(v(w)X)b)c)f)g)j)k)n)o)|)}*O*P*g*h*i*j*k*l*m,S.n.qS#_u#PQ#avQ(P&[Q-i._Q-j.`Q-k.aQ-l.bQ-m.cQ-n.dQ-o.eU-s$]&X'vQ-t.YR-u.X#|!k^yz!S!V!Y!_!n!v!w#Q#R#s#t$P$^$a$m$v$w${$|%b%c%f%g&}'U'V'[']'`'a'e'f'w'}(h(i(j(k(o(p(v(w)X)b)c)f)g)j)k)n)o)|)}*O*P*g*h*i*j*k*l*m,S.n.qS&q$f.Z[(R&[._.`.a.c.eS.i.b.da.muv#P$]&X'v.X.Y%Y![!m!o#r#u#v#w#x#y#z$O$S$T$U$V$W$X$Y$Z$[&V&Z'u'x)q*n*o*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+Q+R+S+W+X+Y+Z+[+]+^+_+`+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,c,e,f,g,h,i,j,k-`-q#^!]^yz!S!Y!_!n!v!w#Q#R#s$^$v$w${$|%b%c%f%g&}'U'V'[']'`'a'e'f(h(i(j(k(o(p(v(w)X)b)c)f)g)j)k)n)o)|)}*O*P*k.nv!juv#P$P$]$f&X&['v.X.Y.Z._.`.a.b.c.d.eS*d*j*lU*e'w*h*ic*f!V#t$a$m'}*g*m,S.q(}!i^uvyz!S!V!Y!_!m!n!o!v!w#P#Q#R#r#s#t#u#v#w#x#y#z$O$P$S$T$U$V$W$X$Y$Z$[$]$^$a$f$m$v$w${$|%b%c%f%g&V&X&Z&[&}'U'V'[']'`'a'e'f'u'v'w'x'}(h(i(j(k(o(p(v(w)X)b)c)f)g)j)k)n)o)q)|)}*O*P*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+Q+R+S+W+X+Y+Z+[+]+^+_+`+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,c,e,f,g,h,i,j,k-`-q.X.Y.Z._.`.a.b.c.d.e.n.qQ$b!gQ$d!hW&i$b&j&l(VQ&l$cW&m$d&n&p(YR&p$ei$`!g!h$b$c$d$e&j&l&n&p(V(YQ!p^Q#cyQ#dzS#o!S$mQ#q!VQ#|!YQ$p!nQ%O!vQ%P!wQ%Y#QQ%Z#RW&f$^,S.n.qQ&h$aQ'X$vQ'Y$wQ'c${Q'd$|Q'o%bQ'p%cQ'q%fQ'r%gQ(`&}Q(f'UQ(g'VQ(m'[Q(n']Q(r'`Q(s'aQ(t'eQ(u'fQ)T'}Q)^(hQ)_(iQ)`(jQ)a(kQ)d(oQ)e(pQ)h(vQ)i(wQ)t)XQ)u)jQ)v)bQ)w)cQ)x)fQ)y)gQ)z)nQ){)kQ*Q)oQ*U)|Q*V*OQ*X)}R*Y*P#Q!d^yz!n!v!w#Q#R$^$v$w${$|%b%c%f%g&}'U'V'[']'`'a'e'f(h(i(j(k(o(p(v(w)X)b)c)f)g)j)k)n)o)|)}*O*PU-}!S$m,SS.l!Y.nX.o!V$a'}.q#U!c^yz!Y!n!v!w#Q#R$^$v$w${$|%b%c%f%g&}'U'V'[']'`'a'e'f(h(i(j(k(o(p(v(w)X)b)c)f)g)j)k)n)o)|)}*O*P.nQ&e$[Q-_,R_-|!S!V$a$m'},S.q#W!b^yz!Y!n!v!w#Q#R$[$^$v$w${$|%b%c%f%g&}'U'V'[']'`'a'e'f(h(i(j(k(o(p(v(w)X)b)c)f)g)j)k)n)o)|)}*O*P.nU%r#s#t'wQ&d$ZQ)O'uQ-^,Qa-{!S!V$a$m'},R,S.q#Y!a^yz!Y!n!v!w#Q#R$Z$[$^$v$w${$|%b%c%f%g&}'U'V'[']'`'a'e'f(h(i(j(k(o(p(v(w)X)b)c)f)g)j)k)n)o)|)}*O*P.nQ&c$YQ-[,OQ-],Pb-y!S!V$a$m'},Q,R,S.qX-z#s#t'u'w#[!`^yz!Y!n!v!w#Q#R$Y$Z$[$^$v$w${$|%b%c%f%g&}'U'V'[']'`'a'e'f(h(i(j(k(o(p(v(w)X)b)c)f)g)j)k)n)o)|)}*O*P.nh$R!_!o*g*h*l*o*p*q*r*s*t*uQ%q#rQ%x#s`&]$S+X+Y+Z+[+]+^+_Q&^$TQ&_$UQ&`$VQ&a$WQ&b$XQ't*jQ(O&ZS)R'x)qQ,U*vQ,V*wQ,W*xQ,X*yQ,Y*zQ,Z*{Q,[*|Q,]#tQ,l+`Q,m+aQ,n+bQ,o+cQ,p+dQ,q+eQ,r+fQ,s+gQ,t+hQ,u+iQ,v+jQ,w+kQ,x+lQ,y+mQ,z+nQ,{+oQ,|+pQ,}+qQ-O+rQ-P+sQ-Q+tQ-R+uQ-S+vQ-T+wQ-U+xQ-V+yQ-W+zQ-X+{Q-Y+|Q-Z+}Q-b,eQ-c,fQ-d,gQ-e,hQ-f,iQ-g,jQ-h,kS-p-`-qd-w!S!V$a$m'},O,Q,R,S.qU-x'u'w,PQ.f*kQ.g*iR.h*m&j!X^yz!S!V!Y!_!n!o!v!w#Q#R#s#t$S$T$U$V$W$X$Y$Z$[$^$a$m$v$w${$|%b%c%f%g&Z&}'U'V'[']'`'a'e'f'u'w'x'}(h(i(j(k(o(p(v(w)X)b)c)f)g)j)k)n)o)q)|)}*O*P*g*h*i*k*m*o*p*q*s*u*v*w*x*y*z*{+X+Y+Z+]+_+`+a+b+d+f+g+h+i+k+m+n+o+p+r+t+u+v+w+y+{+|+},O,P,Q,R,S,e,f,g,i,k-`-q.n.qQ$n!mS&O#u*}Q&P#vQ&Q#wQ&R#xQ&S#yQ&T#zQ&W$OQ'{&VQ,T*nQ,^+OQ,_+PQ,`+QQ,a+RQ,b+SQ,d+WQ-a,cu-v#r*j*l*r*t*|+[+^+c+e+j+l+q+s+x+z,h,jQ%{#sR%}#tS%w#s#tR)P'wV%s#s#t'wV%u#s#t'w#Q!e^yz!n!v!w#Q#R$^$v$w${$|%b%c%f%g&}'U'V'[']'`'a'e'f(h(i(j(k(o(p(v(w)X)b)c)f)g)j)k)n)o)|)}*O*PQ#l!SQ$Q!_U%t#s#t'wQ&Y$PU&f$].X.YQ'|&X`(Q&[._.`.a.b.c.d.eQ)P'vW.O!V$a'}.qQ.Q*gQ.R*hQ.S*iQ.T*jQ.U*kQ.V*lQ.W*mS.p!Y.nT.r$m,SQ%y#sQ)S'xS*R)q-qQ.^#tR.j-`a$R!_*g*h*i*j*k*l*m#e!f^yz!S!V!Y!n!v!w#Q#R$^$a$m$v$w${$|%b%c%f%g&}'U'V'[']'`'a'e'f'}(h(i(j(k(o(p(v(w)X)b)c)f)g)j)k)n)o)|)}*O*P,S.n.qQ{[U!xex|Q#SqS$x!r#OU$}!u!y#WQ%d#YQ%h#ZS'W$u%[S'^$y%aS'b$z%eS'g%Q%_S(l'Z'kS(q'_'lQ(y'jQ(|'mQ)l(zR)m({Q'P$qR)[(bR)Z(aQUOYgU#f%S'h(}Q#f}S%S!z#eS'h%R%`R(}'nhROU}!z#e#f%R%S%`'h'n(}SaRrRrXQ&t$hR(Z&tQ&w$iR(]&wQ&y$jR(^&yQ&{$kR(_&{Q'S$rR(e'SQ!}lQ#p*^T%X!}#pQx[S!ue|Q#Oqp#bx!u#O#e$u%Q%R%a%e'Z'_'j'm'n(z({Q#e}Q$u!rS%Q!y#WQ%R!zQ%a#YQ%e#ZQ'Z$yQ'_$zQ'j%[Q'm%_Q'n%`Q(z'kR({'lQ)r)SS*S)r-rR-r.jQ&j$bS(T&j(VR(V&lQ&n$dS(W&n(YR(Y&pQ$g!kW&r$g)U.[.kQ)U(RQ.[.mR.k.iQ(c'PR)](ciTOU}!z#e#f%R%S%`'h'n(}R_PR$s!qnmW[]befst!s!t#T#W#X%]%^#^!Z^yz!S!Y!_!n!v!w#Q#R#s$^$v$w${$|%b%c%f%g&}'U'V'[']'`'a'e'f(h(i(j(k(o(p(v(w)X)b)c)f)g)j)k)n)o)|)}*O*P*k.nn#]uv#P$]&X&['v.X.Y.Z._.`.a.c.e%Y$o!m!o#r#u#v#w#x#y#z$O$S$T$U$V$W$X$Y$Z$[&V&Z'u'x)q*n*o*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+Q+R+S+W+X+Y+Z+[+]+^+_+`+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,c,e,f,g,h,i,j,k-`-qS'O$q(bQ)Y(aS*a*j*lU*b'w*h*ib*c!V#t$a$m'}*g*m,S.qX.P$P$f.b.dniW[]befst!s!t#T#W#X%]%^|ouv#P$P$]$f$q&X&['v(a(b.X.Y.Z._.`.a.b.c.d.e%O!R^yz!S!V!Y!_!n!v!w#Q#R#r#s#t$O$^$a$m$v$w${$|%b%c%f%g&V&}'U'V'[']'`'a'e'f'w'}(h(i(j(k(o(p(v(w)X)b)c)f)g)j)k)n)o)|)}*O*P*g*h*i*j*k*l*m*n*r*t*|*}+O+P+Q+R+S+[+^+c+e+j+l+q+s+x+z,S,h,j.n.q$V*_!m!o#u#v#w#x#y#z$S$T$U$V$W$X$Y$Z$[&Z'u'x)q*o*p*q*s*u*v*w*x*y*z*{+W+X+Y+Z+]+_+`+a+b+d+f+g+h+i+k+m+n+o+p+r+t+u+v+w+y+{+|+},O,P,Q,R,c,e,f,g,i,k-`-qnkW[]befst!s!t#T#W#X%]%^(V!T^yz!S!V!Y!_!m!n!o!v!w#Q#R#r#s#t#u#v#w#x#y#z$O$S$T$U$V$W$X$Y$Z$[$^$a$m$v$w${$|%b%c%f%g&V&Z&}'U'V'[']'`'a'e'f'u'w'x'}(h(i(j(k(o(p(v(w)X)b)c)f)g)j)k)n)o)q)|)}*O*P*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+Q+R+S+W+X+Y+Z+[+]+^+_+`+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,c,e,f,g,h,i,j,k-`-q.n.qR'Q$q",
  nodeNames: "⚠ LineComment BlockComment Rel DefinitionStatement Docstring BasicId Keyword DocstringLiteral MultilineDocstringLiteral Attribute AttributeKeyword AttributeKeyword AttributeKeyword AttributeKeyword AttributeKeyword AttributeParams BaseLiteral IntLiteral FloatLiteral RelnameLiteral RelnameStringLiteral StaticStringLiteral RelnameMultilineStringLiteral StaticMultilineStringLiteral CharLiteral DateLiteral DateTimeLiteral RawStringLiteral Keyword RawStringSequence Keyword LhsId Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Keyword Keyword Keyword ParenOpId Operator QualifiedName QualifiedNameId Emphasis Emphasis Emphasis Emphasis Emphasis QualifiedNameElem FormalParamsBracket FormalParams FormalParam Literal BooleanLiteral SpecializeIntLiteral InterpolationLiteral Interpolation InterpolationId Expression UnionExpression JoinExpression OverrideExpression RestrictExpression LogicalExpression BasicExpression SpecializeExpression OperatorKeyword PartialApplicationExpression NocommaParam NocommaExpression NocommaUnionExpression NocommaAbstractExpression Bindings Keyword Keyword Keyword LogicalParam ApplicationExpression OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword BoundedExpression Keyword Keyword Keyword Keyword Keyword Keyword LogicalAbstractExpression Keyword OperatorKeyword Keyword OperatorKeyword Keyword OperatorKeyword OperatorKeyword Keyword OperatorKeyword Keyword OperatorKeyword OperatorKeyword Keyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword AbstractExpression InterpolationMultilineLiteral Keyword OperatorKeyword FormalParamsParen ValueTypeStatement EntityTypeStatement ConstraintStatement Keyword ModuleStatement Keyword UseStatement Keyword Keyword Alias Keyword AliasId",
  maxTerm: 241,
  nodeProps: [
    ["group", -6,4,175,176,177,179,181,"Declaration"]
  ],
  skippedNodes: [0,1,2],
  repeatNodeCount: 14,
  tokenData: "%:w~R#vOX)iXY6kYZ:oZ[6k[])i]^:o^p)ipq6kqr;[rs=Sst!*vtu)iuv!3cvw)iwx!3txy!>Xyz!?Sz{!?}{|!@x|}!Bv}!O!?}!O!P!Cq!P!Q!KO!Q!R#NV!R![$?p![!]$AT!]!^$Cz!^!_$Du!_!`$GP!`!a$G|!a!b)i!b!c$H}!c!}$Ix!}#O$M[#O#P$NV#P#Q% j#Q#R%!e#R#S%'[#S#T)i#T#Y$Ix#Y#Z%({#Z#h$Ix#h#i%1w#i#o$Ix#o#p%5g#p#q%6b#q#r%7]#r$f)i$f$g6k$g$r)i$r$s!?}$s%o)i%o%p!?}%p&a)i&a&b!?}&b4w)i4w5b$Ix5b5i)i5i6S$Ix6S#BY)i#BY#BZ6k#BZ$IS)i$IS$I_6k$I_$I|)i$I|$I}%8W$I}$JO%8W$JO$JT)i$JT$JU6k$JU$KV)i$KV$KW6k$KW%#t)i%#t%#u!?}%#u%#v)i%#v%#w!?}%#w%%U)i%%U%%V!?}%%V%%W)i%%W%%X!?}%%X%%Y)i%%Y%%Z!?}%%Z%%[)i%%[%%]!?}%%]%&Y)i%&Y%&Z%9R%&Z%&])i%&]%&^%9|%&^%&b)i%&b%&c!?}%&c%'R)i%'R%'S!?}%'S%'T!?}%'T%'U!?}%'U%'V!?}%'V%'h)i%'h%'i!?}%'i%'t)i%'t%'u!?}%'u%(^)i%(^%(_!?}%(_%(`!?}%(`%(a!?}%(a%(b)i%(b%(c!?}%(c%(d!?}%(d%(x)i%(x%(y!?}%(y%(z!?}%(z%({!?}%({%(|!?}%(|%)Q)i%)Q%)R!?}%)R%)S!?}%)S%)U)i%)U%)V!?}%)V%)W!?}%)W%)c)i%)c%)d!?}%)d%)e!?}%)e%)f!?}%)f%)g)i%)g%)h!?}%)h%)i)i%)i%)j!?}%)j%*])i%*]%*^!?}%*^&FU)i&FU&FV6k&FV?HT)i?HT?HU6k?HU~)i!Y)rY%pp&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bh*iY&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b`+^U&X`Or+Xrs+psu+Xv#O+X#O#P,i#P~+X`+sUOr+Xrs,Vsu+Xv#O+X#O#P,i#P~+X`,YTOr+Xsu+Xv#O+X#O#P,i#P~+X`,ldrs+Xuv+Xwx+X!Q!R-z!R!S-z!S!T-z!T!U-z!U!Y.i!w!x/W#O#P+X#T#U+X#U#V+X#X#Y+X#Y#Z+X#b#c+X#f#g+X#h#i+X#i#j0Y#j#k+X#l#m0r`.PW&X`Or+Xrs+psu+Xv!Q+X!Q!Y.i!Y#O+X#O#P,i#P~+X`.nW&X`Or+Xrs+psu+Xv!Q+X!Q!Y+X!Y#O+X#O#P,i#P~+X`/ZR!Q![/d!c!i/d#T#Z/d`/gR!Q![/p!c!i/p#T#Z/p`/sR!Q![/|!c!i/|#T#Z/|`0PR!Q![0Y!c!i0Y#T#Z0Y`0]R!Q![0f!c!i0f#T#Z0f`0iR!Q![0r!c!i0r#T#Z0r`0uR!Q![1O!c!i1O#T#Z1O`1RR!Q![+X!c!i+X#T#Z+Xh1_drs*buv*bwx*b!Q!R2m!R!S2m!S!T2m!T!U2m!U!Y3j!w!x4g#O#P*b#T#U*b#U#V*b#X#Y*b#Y#Z*b#b#c*b#f#g*b#h#i*b#i#j5i#j#k*b#l#m6Rh2t[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y3j!Y#O*b#O#P1[#P~*bh3q[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y*b!Y#O*b#O#P1[#P~*bh4jR!Q![4s!c!i4s#T#Z4sh4vR!Q![5P!c!i5P#T#Z5Ph5SR!Q![5]!c!i5]#T#Z5]h5`R!Q![5i!c!i5i#T#Z5ih5lR!Q![5u!c!i5u#T#Z5uh5xR!Q![6R!c!i6R#T#Z6Rh6UR!Q![6_!c!i6_#T#Z6_h6bR!Q![*b!c!i*b#T#Z*b~6vl%pp%c~&X`%{WOX*bXY8nYZ+XZ[8n[]*b]^+X^p*bpq8nqr*brs+psu*bv#O*b#O#P1[#P$f*b$f$g8n$g#BY*b#BY#BZ8n#BZ$IS*b$IS$I_8n$I_$JT*b$JT$JU8n$JU$KV*b$KV$KW8n$KW&FU*b&FU&FV8n&FV?HT*b?HT?HU8n?HU~*b~8wl%c~&X`%{WOX*bXY8nYZ+XZ[8n[]*b]^+X^p*bpq8nqr*brs+psu*bv#O*b#O#P1[#P$f*b$f$g8n$g#BY*b#BY#BZ8n#BZ$IS*b$IS$I_8n$I_$JT*b$JT$JU8n$JU$KV*b$KV$KW8n$KW&FU*b&FU&FV8n&FV?HT*b?HT?HU8n?HU~*b~:xU%pp%d~&X`Or+Xrs+psu+Xv#O+X#O#P,i#P~+X![;e[%pp&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!_*b!_!`<Z!`#O*b#O#P1[#P~*bj<dY&X`%{W!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!a=XZ%ozOY=zYZ+XZ]=z]^+X^r=zrsJQsu=zuv?]v#O=z#O#PDo#P~=zg>PZ&X`OY=zYZ+XZ]=z]^+X^r=zrs>rsu=zuv?]v#O=z#O#PDo#P~=zg>yUfUWPOr+Xrs,Vsu+Xv#O+X#O#P,i#P~+XP?`VOY?]Z]?]^r?]rs?us#O?]#O#P?z#P~?]P?zOWPP?}drs?]uv?]wx?]!Q!RA]!R!SA]!S!TA]!T!UA]!U!YA{!w!xBk#O#P?]#T#U?]#U#V?]#X#Y?]#Y#Z?]#b#c?]#f#g?]#h#i?]#i#jCm#j#k?]#l#mDVPA`XOY?]Z]?]^r?]rs?us!Q?]!Q!YA{!Y#O?]#O#P?z#P~?]PBOXOY?]Z]?]^r?]rs?us!Q?]!Q!Y?]!Y#O?]#O#P?z#P~?]PBnR!Q![Bw!c!iBw#T#ZBwPBzR!Q![CT!c!iCT#T#ZCTPCWR!Q![Ca!c!iCa#T#ZCaPCdR!Q![Cm!c!iCm#T#ZCmPCpR!Q![Cy!c!iCy#T#ZCyPC|R!Q![DV!c!iDV#T#ZDVPDYR!Q![Dc!c!iDc#T#ZDcPDfR!Q![?]!c!i?]#T#Z?]gDrdrs=zuv=zwx=z!Q!RFQ!R!SFQ!S!TFQ!T!UFQ!U!YGO!w!xG|#O#P=z#T#U=z#U#V=z#X#Y=z#Y#Z=z#b#c=z#f#g=z#h#i=z#i#jIO#j#k=z#l#mIhgFV]&X`OY=zYZ+XZ]=z]^+X^r=zrs>rsu=zuv?]v!Q=z!Q!YGO!Y#O=z#O#PDo#P~=zgGT]&X`OY=zYZ+XZ]=z]^+X^r=zrs>rsu=zuv?]v!Q=z!Q!Y=z!Y#O=z#O#PDo#P~=zgHPR!Q![HY!c!iHY#T#ZHYgH]R!Q![Hf!c!iHf#T#ZHfgHiR!Q![Hr!c!iHr#T#ZHrgHuR!Q![IO!c!iIO#T#ZIOgIRR!Q![I[!c!iI[#T#ZI[gI_R!Q![Ih!c!iIh#T#ZIhgIkR!Q![It!c!iIt#T#ZItgIwR!Q![=z!c!i=z#T#Z=z!aJXUfUWPOr+XrsJksu+Xv#O+X#O#P,i#P~+X!aJpV%q![OrKVrs!)csuKVuvLxv#OKV#O#P!$n#P~KVVKYVOrKVrsKosuKVuvLxv#OKV#O#P!$n#P~KVVKrVOrKVrsLXsuKVuvLxv#OKV#O#P!$n#P~KVVL[VOrKVrsLqsuKVuvLxv#OKV#O#P!$n#P~KVVLxOhUXPPL{TOrLxrsM[s#OLx#O#PNV#P~LxPM_TOrLxrsMns#OLx#O#PNV#P~LxPMqTOrLxrsNQs#OLx#O#PNV#P~LxPNVOXPPNYdrsLxuvLxwxLx!Q!R! h!R!S! h!S!T! h!T!U! h!U!Y!!Q!w!x!!j#O#PLx#T#ULx#U#VLx#X#YLx#Y#ZLx#b#cLx#f#gLx#h#iLx#i#j!#l#j#kLx#l#m!$UP! kVOrLxrsM[s!QLx!Q!Y!!Q!Y#OLx#O#PNV#P~LxP!!TVOrLxrsM[s!QLx!Q!YLx!Y#OLx#O#PNV#P~LxP!!mR!Q![!!v!c!i!!v#T#Z!!vP!!yR!Q![!#S!c!i!#S#T#Z!#SP!#VR!Q![!#`!c!i!#`#T#Z!#`P!#cR!Q![!#l!c!i!#l#T#Z!#lP!#oR!Q![!#x!c!i!#x#T#Z!#xP!#{R!Q![!$U!c!i!$U#T#Z!$UP!$XR!Q![!$b!c!i!$b#T#Z!$bP!$eR!Q![Lx!c!iLx#T#ZLxV!$qdrsKVuvKVwxKV!Q!R!&P!R!S!&P!S!T!&P!T!U!&P!U!Y!&o!w!x!'_#O#PKV#T#UKV#U#VKV#X#YKV#Y#ZKV#b#cKV#f#gKV#h#iKV#i#j!(a#j#kKV#l#m!(yV!&SXOrKVrsKosuKVuvLxv!QKV!Q!Y!&o!Y#OKV#O#P!$n#P~KVV!&rXOrKVrsKosuKVuvLxv!QKV!Q!YKV!Y#OKV#O#P!$n#P~KVV!'bR!Q![!'k!c!i!'k#T#Z!'kV!'nR!Q![!'w!c!i!'w#T#Z!'wV!'zR!Q![!(T!c!i!(T#T#Z!(TV!(WR!Q![!(a!c!i!(a#T#Z!(aV!(dR!Q![!(m!c!i!(m#T#Z!(mV!(pR!Q![!(y!c!i!(y#T#Z!(yV!(|R!Q![!)V!c!i!)V#T#Z!)VV!)YR!Q![KV!c!iKV#T#ZKV!P!)fVOrKVrs!){suKVuvLxv#OKV#O#P!$n#P~KV!P!*QV%rxOrKVrs!*gsuKVuvLxv#OKV#O#P!$n#P~KV!P!*nPhUXPrs!*qx!*vO%sx![!+P_%pp&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bvx*bxy!,Oy!Q*b!Q!R!,w!R![!.S![#O*b#O#P1[#P~*bj!,XY&PQ&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bj!-Q`!tQ&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!.S![#O*b#O#P1[#P#c*b#c#d!/R#d#l*b#l#m!0}#m~*bj!.][!tQ&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!.S![#O*b#O#P1[#P~*bj!/Y[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y!0O!Y#O*b#O#P1[#P~*bj!0X[!tQ&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y!0O!Y#O*b#O#P1[#P~*bj!1U`&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!2W![!c*b!c!i!2W!i#O*b#O#P1[#P#T*b#T#Z!2W#Z~*bj!2a`!tQ&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!2W![!c*b!c!i!2W!i#O*b#O#P1[#P#T*b#T#Z!2W#Z~*b!]!3lP%|i%pp!fQxy!3oi!3tO%}i![!3}]%pp&X`%{WOY!4vYZ!6lZ]!4v]^!6l^r!4vrs!7tsu!4vuv!8avw!4vwx*bx#O!4v#O#P!8l#P~!4vj!4}[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bvw*bwx!5sx#O*b#O#P1[#P~*bj!5|YiQ&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bb!6qW&X`Or+Xrs+psu+Xvw+Xwx!7Zx#O+X#O#P,i#P~+Xb!7bUiQ&X`Or+Xrs+psu+Xv#O+X#O#P,i#P~+Xb!7wWOr+Xrs,Vsu+Xvw+Xwx!7Zx#O+X#O#P,i#P~+XQ!8dPwx!8gQ!8lOiQj!8odrs!4vuv!4vwx!4v!Q!R!9}!R!S!9}!S!T!9}!T!U!9}!U!Y!;Q!w!x!<T#O#P!4v#T#U!4v#U#V!4v#X#Y!4v#Y#Z!4v#b#c!4v#f#g!4v#h#i!4v#i#j!=V#j#k!4v#l#m!=oj!:U^&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bvw*bwx!5sx!Q*b!Q!Y!;Q!Y#O*b#O#P1[#P~*bj!;X^&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bvw*bwx!5sx!Q*b!Q!Y!4v!Y#O*b#O#P1[#P~*bj!<WR!Q![!<a!c!i!<a#T#Z!<aj!<dR!Q![!<m!c!i!<m#T#Z!<mj!<pR!Q![!<y!c!i!<y#T#Z!<yj!<|R!Q![!=V!c!i!=V#T#Z!=Vj!=YR!Q![!=c!c!i!=c#T#Z!=cj!=fR!Q![!=o!c!i!=o#T#Z!=oj!=rR!Q![!={!c!i!={#T#Z!={j!>OR!Q![!4v!c!i!4v#T#Z!4v!]!>dY%hR%pp&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!]!?_Y%uR%pp&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b![!@YY%pp&X`%{W!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b![!AT[%pp&X`%{W!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|!Ay|#O*b#O#P1[#P~*bj!BQ[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!`*b!`!a<Z!a#O*b#O#P1[#P~*b!]!CRY%tR%pp&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b![!C|^%pp&X`%{W!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!Dx!P!Q*b!Q![!Fn![#O*b#O#P1[#P~*bj!EP[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!Eu!P#O*b#O#P1[#P~*bj!FOY&OQ&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bj!Fw`&X`%{WcQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!Fn![!g*b!g!h!Gy!h#O*b#O#P1[#P#X*b#X#Y!Gy#Y~*bj!HQ`&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|!IS|}*b}!O!IS!O!Q*b!Q![!JP![#O*b#O#P1[#P~*bj!IZ[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!JP![#O*b#O#P1[#P~*bj!JY[&X`%{WcQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!JP![#O*b#O#P1[#P~*b~!KZ^%pp&X`%{W!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bvz*bz{!LV{!P*b!P!Q#8^!Q#O*b#O#P1[#P~*b~!L^]&X`%{WOY!LVYZ!MVZ]!LV]^!MV^r!LVrs!Mwsu!LVuv# Vvz!LVz{#,g{#O!LV#O#P#.f#P~!LV~!M[X&X`Or!MVrs!Mwsu!MVuv# Vvz!MVz{# z{#O!MV#O#P##]#P~!MV~!MzXOr!MVrs!Ngsu!MVuv# Vvz!MVz{# z{#O!MV#O#P##]#P~!MV~!NjXOr!MVrs# Vsu!MVuv# Vvz!MVz{# z{#O!MV#O#P##]#P~!MV~# YROz# Vz{# c{~# V~# fTOz# Vz{# c{!P# V!P!Q# u!Q~# V~# zOQ~~#!PZ&X`Or!MVrs!Mwsu!MVuv# Vvz!MVz{# z{!P!MV!P!Q#!r!Q#O!MV#O#P##]#P~!MV~#!yUQ~&X`Or+Xrs+psu+Xv#O+X#O#P,i#P~+X~##`sOr# Vrs!MVsu# Vuv!MVvw# Vwx!MVxz# Vz{# c{!Q# V!Q!R#%m!R!S#%m!S!T#%m!T!U#%m!U!Y#&e!Y!w# V!w!x#']!x#O# V#O#P!MV#P#T# V#T#U!MV#U#V!MV#V#X# V#X#Y!MV#Y#Z!MV#Z#b# V#b#c!MV#c#f# V#f#g!MV#g#h# V#h#i!MV#i#j#)y#j#k!MV#k#l# V#l#m#+X#m~# V~#%rZ&X`Or!MVrs!Mwsu!MVuv# Vvz!MVz{# z{!Q!MV!Q!Y#&e!Y#O!MV#O#P##]#P~!MV~#&jZ&X`Or!MVrs!Mwsu!MVuv# Vvz!MVz{# z{!Q!MV!Q!Y!MV!Y#O!MV#O#P##]#P~!MV~#'`XOz# Vz{# c{!Q# V!Q![#'{![!c# V!c!i#'{!i#T# V#T#Z#'{#Z~# V~#(OXOz# Vz{# c{!Q# V!Q![#(k![!c# V!c!i#(k!i#T# V#T#Z#(k#Z~# V~#(nXOz# Vz{# c{!Q# V!Q![#)Z![!c# V!c!i#)Z!i#T# V#T#Z#)Z#Z~# V~#)^XOz# Vz{# c{!Q# V!Q![#)y![!c# V!c!i#)y!i#T# V#T#Z#)y#Z~# V~#)|XOz# Vz{# c{!Q# V!Q![#*i![!c# V!c!i#*i!i#T# V#T#Z#*i#Z~# V~#*lXOz# Vz{# c{!Q# V!Q![#+X![!c# V!c!i#+X!i#T# V#T#Z#+X#Z~# V~#+[XOz# Vz{# c{!Q# V!Q![#+w![!c# V!c!i#+w!i#T# V#T#Z#+w#Z~# V~#+zXOz# Vz{# c{!Q# V!Q![!MV![!c# V!c!i!MV!i#T# V#T#Z!MV#Z~# V~#,n_&X`%{WOY!LVYZ!MVZ]!LV]^!MV^r!LVrs!Mwsu!LVuv# Vvz!LVz{#,g{!P!LV!P!Q#-m!Q#O!LV#O#P#.f#P~!LV~#-vYQ~&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b~#.isOr# Vrs!LVsu# Vuv!LVvw# Vwx!LVxz# Vz{# c{!Q# V!Q!R#0v!R!S#0v!S!T#0v!T!U#0v!U!Y#1|!Y!w# V!w!x#3S!x#O# V#O#P!LV#P#T# V#T#U!LV#U#V!LV#V#X# V#X#Y!LV#Y#Z!LV#Z#b# V#b#c!LV#c#f# V#f#g!LV#g#h# V#h#i!LV#i#j#5p#j#k!LV#k#l# V#l#m#7O#m~# V~#0}_&X`%{WOY!LVYZ!MVZ]!LV]^!MV^r!LVrs!Mwsu!LVuv# Vvz!LVz{#,g{!Q!LV!Q!Y#1|!Y#O!LV#O#P#.f#P~!LV~#2T_&X`%{WOY!LVYZ!MVZ]!LV]^!MV^r!LVrs!Mwsu!LVuv# Vvz!LVz{#,g{!Q!LV!Q!Y!LV!Y#O!LV#O#P#.f#P~!LV~#3VXOz# Vz{# c{!Q# V!Q![#3r![!c# V!c!i#3r!i#T# V#T#Z#3r#Z~# V~#3uXOz# Vz{# c{!Q# V!Q![#4b![!c# V!c!i#4b!i#T# V#T#Z#4b#Z~# V~#4eXOz# Vz{# c{!Q# V!Q![#5Q![!c# V!c!i#5Q!i#T# V#T#Z#5Q#Z~# V~#5TXOz# Vz{# c{!Q# V!Q![#5p![!c# V!c!i#5p!i#T# V#T#Z#5p#Z~# V~#5sXOz# Vz{# c{!Q# V!Q![#6`![!c# V!c!i#6`!i#T# V#T#Z#6`#Z~# V~#6cXOz# Vz{# c{!Q# V!Q![#7O![!c# V!c!i#7O!i#T# V#T#Z#7O#Z~# V~#7RXOz# Vz{# c{!Q# V!Q![#7n![!c# V!c!i#7n!i#T# V#T#Z#7n#Z~# V~#7qXOz# Vz{# c{!Q# V!Q![!LV![!c# V!c!i!LV!i#T# V#T#Z!LV#Z~# V~#8gZP~&X`%{WOY#8^YZ+XZ]#8^]^#9Y^r#8^rs#9|su#8^uv#;`v#O#8^#O#P#Dp#P~#8^~#9aXP~&X`OY#9YYZ+XZr#9Yrs#9|su#9Yuv#;`v#O#9Y#O#P#;k#P~#9Y~#:RXP~OY#9YYZ+XZr#9Yrs#:nsu#9Yuv#;`v#O#9Y#O#P#;k#P~#9Y~#:sXP~OY#9YYZ+XZr#9Yrs#;`su#9Yuv#;`v#O#9Y#O#P#;k#P~#9Y~#;eQP~OY#;`Z~#;`~#;prP~OY#;`Zr#;`rs#9Ysu#;`uv#9Yvw#;`wx#9Yx!Q#;`!Q!R#=z!R!S#=z!S!T#=z!T!U#=z!U!Y#>t!Y!w#;`!w!x#?n!x#O#;`#O#P#9Y#P#T#;`#T#U#9Y#U#V#9Y#V#X#;`#X#Y#9Y#Y#Z#9Y#Z#b#;`#b#c#9Y#c#f#;`#f#g#9Y#g#h#;`#h#i#9Y#i#j#BW#j#k#9Y#k#l#;`#l#m#Cd#m~#;`~#>RZP~&X`OY#9YYZ+XZr#9Yrs#9|su#9Yuv#;`v!Q#9Y!Q!Y#>t!Y#O#9Y#O#P#;k#P~#9Y~#>{ZP~&X`OY#9YYZ+XZr#9Yrs#9|su#9Yuv#;`v!Q#9Y!Q!Y#9Y!Y#O#9Y#O#P#;k#P~#9Y~#?sWP~OY#;`Z!Q#;`!Q![#@]![!c#;`!c!i#@]!i#T#;`#T#Z#@]#Z~#;`~#@bWP~OY#;`Z!Q#;`!Q![#@z![!c#;`!c!i#@z!i#T#;`#T#Z#@z#Z~#;`~#APWP~OY#;`Z!Q#;`!Q![#Ai![!c#;`!c!i#Ai!i#T#;`#T#Z#Ai#Z~#;`~#AnWP~OY#;`Z!Q#;`!Q![#BW![!c#;`!c!i#BW!i#T#;`#T#Z#BW#Z~#;`~#B]WP~OY#;`Z!Q#;`!Q![#Bu![!c#;`!c!i#Bu!i#T#;`#T#Z#Bu#Z~#;`~#BzWP~OY#;`Z!Q#;`!Q![#Cd![!c#;`!c!i#Cd!i#T#;`#T#Z#Cd#Z~#;`~#CiWP~OY#;`Z!Q#;`!Q![#DR![!c#;`!c!i#DR!i#T#;`#T#Z#DR#Z~#;`~#DWWP~OY#;`Z!Q#;`!Q![#9Y![!c#;`!c!i#9Y!i#T#;`#T#Z#9Y#Z~#;`~#DurP~OY#;`Zr#;`rs#8^su#;`uv#8^vw#;`wx#8^x!Q#;`!Q!R#GP!R!S#GP!S!T#GP!T!U#GP!U!Y#HR!Y!w#;`!w!x#IT!x#O#;`#O#P#8^#P#T#;`#T#U#8^#U#V#8^#V#X#;`#X#Y#8^#Y#Z#8^#Z#b#;`#b#c#8^#c#f#;`#f#g#8^#g#h#;`#h#i#8^#i#j#Km#j#k#8^#k#l#;`#l#m#Ly#m~#;`~#GY]P~&X`%{WOY#8^YZ+XZ]#8^]^#9Y^r#8^rs#9|su#8^uv#;`v!Q#8^!Q!Y#HR!Y#O#8^#O#P#Dp#P~#8^~#H[]P~&X`%{WOY#8^YZ+XZ]#8^]^#9Y^r#8^rs#9|su#8^uv#;`v!Q#8^!Q!Y#8^!Y#O#8^#O#P#Dp#P~#8^~#IYWP~OY#;`Z!Q#;`!Q![#Ir![!c#;`!c!i#Ir!i#T#;`#T#Z#Ir#Z~#;`~#IwWP~OY#;`Z!Q#;`!Q![#Ja![!c#;`!c!i#Ja!i#T#;`#T#Z#Ja#Z~#;`~#JfWP~OY#;`Z!Q#;`!Q![#KO![!c#;`!c!i#KO!i#T#;`#T#Z#KO#Z~#;`~#KTWP~OY#;`Z!Q#;`!Q![#Km![!c#;`!c!i#Km!i#T#;`#T#Z#Km#Z~#;`~#KrWP~OY#;`Z!Q#;`!Q![#L[![!c#;`!c!i#L[!i#T#;`#T#Z#L[#Z~#;`~#LaWP~OY#;`Z!Q#;`!Q![#Ly![!c#;`!c!i#Ly!i#T#;`#T#Z#Ly#Z~#;`~#MOWP~OY#;`Z!Q#;`!Q![#Mh![!c#;`!c!i#Mh!i#T#;`#T#Z#Mh#Z~#;`~#MmWP~OY#;`Z!Q#;`!Q![#8^![!c#;`!c!i#8^!i#T#;`#T#Z#8^#Z~#;`![#Nbf%pp&X`%{WbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!Fn!P!Q*b!Q![$ v![!g*b!g!h!Gy!h#O*b#O#P1[#P#X*b#X#Y!Gy#Y#c*b#c#d$;`#d#l*b#l#m$=[#m~*bj$!Pb&X`%{WbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!Fn!P!Q*b!Q![$#X![!g*b!g!h!Gy!h#O*b#O#P1[#P#X*b#X#Y!Gy#Y~*bj$#bb&X`%{WbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!Fn!P!Q*b!Q![$$j![!g*b!g!h!Gy!h#O*b#O#P1[#P#X*b#X#Y!Gy#Y~*bj$$sc&X`%{WbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv}*b}!O$&O!O!P!Fn!P!Q*b!Q![$9}![!g*b!g!h!Gy!h#O*b#O#P1[#P#X*b#X#Y!Gy#Y~*bj$&V[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$&{![#O*b#O#P1[#P~*bj$'S[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$'x![#O*b#O#P1[#P~*bj$(P[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv}*b}!O$(u!O#O*b#O#P1[#P~*bj$(|[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$)r![#O*b#O#P1[#P~*bj$)y[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$*o![#O*b#O#P1[#P~*bj$*x[&X`jQ%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!v*b!v!w$+n!w#O*b#O#P1[#P~*bj$+u[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$,k![#O*b#O#P1[#P~*bj$,r[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$-h![#O*b#O#P1[#P~*bj$-o[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv![*b![!]$.e!]#O*b#O#P1[#P~*bj$.l[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$/b![#O*b#O#P1[#P~*bj$/i[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$0_![#O*b#O#P1[#P~*bj$0f[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv![*b![!]$1[!]#O*b#O#P1[#P~*bj$1c[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$2X![#O*b#O#P1[#P~*bj$2`[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$3U![#O*b#O#P1[#P~*bj$3]b&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|$4e|}*b}!O$4e!O!Q*b!Q![$5b![!|*b!|!}$9U!}#O*b#O#P1[#P~*bj$4l[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$5b![#O*b#O#P1[#P~*bj$5i[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$6_![#O*b#O#P1[#P~*bj$6f[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv![*b![!]$7[!]#O*b#O#P1[#P~*bj$7c[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$8X![#O*b#O#P1[#P~*bj$8`[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$9U![#O*b#O#P1[#P~*bj$9_Y&X`kQ%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bj$:Wb&X`%{WbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!Fn!P!Q*b!Q![$9}![!g*b!g!h!Gy!h#O*b#O#P1[#P#X*b#X#Y!Gy#Y~*bj$;g[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y$<]!Y#O*b#O#P1[#P~*bj$<f[&X`%{WbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y$<]!Y#O*b#O#P1[#P~*bj$=c`&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$>e![!c*b!c!i$>e!i#O*b#O#P1[#P#T*b#T#Z$>e#Z~*bj$>n`&X`%{WbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$>e![!c*b!c!i$>e!i#O*b#O#P1[#P#T*b#T#Z$>e#Z~*b![$?{b%pp&X`%{WbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!Fn!P!Q*b!Q![$ v![!g*b!g!h!Gy!h#O*b#O#P1[#P#X*b#X#Y!Gy#Y~*b!]$A`]%pp&X`%{W%jROY*bYZ+XZ]*b]^+X^r*brs+psu*bv!`*b!`!a<Z!a!}*b!}#O$BX#O#P1[#P~*bj$B`Z&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P#Q$CR#Q~*bj$C[Y%nQ&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!]$DVY&QR%pp&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b![$EQ`%pp&X`%{W!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|$FS|![*b![!]<Z!]!_*b!_!`<Z!`#O*b#O#P1[#P~*bj$FZ[&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|<Z|#O*b#O#P1[#P~*b!]$G^Y&YP%pp&X`%{W!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b![$HX[%pp&X`%{W!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!_*b!_!`<Z!`#O*b#O#P1[#P~*b!]$IYY%fR%pp&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!a$JVf%pp%lSUR&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$Kk![!c*b!c!}$Kk!}#O*b#O#P1[#P#R*b#R#S$Kk#S#T*b#T#o$Kk#o4w*b4w5b$Kk5b5i*b5i6S$Kk6S~*bo$Kvf%lSUR&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$Kk![!c*b!c!}$Kk!}#O*b#O#P1[#P#R*b#R#S$Kk#S#T*b#T#o$Kk#o4w*b4w5b$Kk5b5i*b5i6S$Kk6S~*b!]$MgY%zR%pp&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!Y$N[d%pprs*buv*bwx*b!Q!R2m!R!S2m!S!T2m!T!U2m!U!Y3j!w!x4g#O#P*b#T#U*b#U#V*b#X#Y*b#Y#Z*b#b#c*b#f#g*b#h#i*b#i#j5i#j#k*b#l#m6R!]% uY%yR%pp&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!a%!rd%kS%pp&X`%{W!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!c*b!c!}%$Q!}#O*b#O#P1[#P#R*b#R#S%%o#S#T*b#T#o%$Q#o4w*b4w5b%$Q5b5i*b5i6S%$Q6S~*bk%$ZfUR&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%$Q![!c*b!c!}%$Q!}#O*b#O#P1[#P#R*b#R#S%$Q#S#T*b#T#o%$Q#o4w*b4w5b%$Q5b5i*b5i6S%$Q6S~*bk%%vf&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%$Q![!c*b!c!}%$Q!}#O*b#O#P1[#P#R*b#R#S%$Q#S#T*b#T#o%$Q#o4w*b4w5b%$Q5b5i*b5i6S%$Q6S~*b!a%'gf%pp%mU&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$Kk![!c*b!c!}$Kk!}#O*b#O#P1[#P#R*b#R#S$Kk#S#T*b#T#o$Kk#o4w*b4w5b$Kk5b5i*b5i6S$Kk6S~*b!a%)Yg%pp%lSUR&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$Kk![!c*b!c!}$Kk!}#O*b#O#P1[#P#R*b#R#S$Kk#S#T*b#T#U%*q#U#o$Kk#o4w*b4w5b$Kk5b5i*b5i6S$Kk6S~*bo%*|h%lSUR&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$Kk![!c*b!c!}$Kk!}#O*b#O#P1[#P#R*b#R#S$Kk#S#T*b#T#`$Kk#`#a%,h#a#o$Kk#o4w*b4w5b$Kk5b5i*b5i6S$Kk6S~*bo%,sh%lSUR&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$Kk![!c*b!c!}$Kk!}#O*b#O#P1[#P#R*b#R#S$Kk#S#T*b#T#g$Kk#g#h%._#h#o$Kk#o4w*b4w5b$Kk5b5i*b5i6S$Kk6S~*bo%.jh%lSUR&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$Kk![!c*b!c!}$Kk!}#O*b#O#P1[#P#R*b#R#S$Kk#S#T*b#T#X$Kk#X#Y%0U#Y#o$Kk#o4w*b4w5b$Kk5b5i*b5i6S$Kk6S~*bo%0cf%lS!sQUR&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$Kk![!c*b!c!}$Kk!}#O*b#O#P1[#P#R*b#R#S$Kk#S#T*b#T#o$Kk#o4w*b4w5b$Kk5b5i*b5i6S$Kk6S~*b!a%2Uh%pp%lSUR&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$Kk![!c*b!c!}$Kk!}#O*b#O#P1[#P#R*b#R#S$Kk#S#T*b#T#f$Kk#f#g%3p#g#o$Kk#o4w*b4w5b$Kk5b5i*b5i6S$Kk6S~*bo%3{h%lSUR&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$Kk![!c*b!c!}$Kk!}#O*b#O#P1[#P#R*b#R#S$Kk#S#T*b#T#i$Kk#i#j%._#j#o$Kk#o4w*b4w5b$Kk5b5i*b5i6S$Kk6S~*b!]%5rY&TR%pp&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!]%6mY&RR%pp&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!]%7hY&UR%pp&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b~%8cY%pp%d~&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b![%9^Y&VQ%pp&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b![%:XY&WQ%pp&X`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b",
  tokenizers: [0, 1, 2, 3, 4, 5],
  topRules: {"Rel":[0,3]},
  dynamicPrecedences: {"224":1},
  specialized: [{term: 6, get: value => spec_BasicId[value] || -1},{term: 68, get: value => spec_Operator[value] || -1}],
  tokenPrec: 14168
});

const autocompleteList = [
    { label: "Any", type: "type" },
    { label: "AutoNumber", type: "type" },
    { label: "Boolean", type: "type" },
    { label: "Char", type: "type" },
    { label: "Day", type: "type" },
    { label: "Date", type: "type" },
    { label: "DateTime", type: "type" },
    { label: "Year", type: "type" },
    { label: "Month", type: "type" },
    { label: "Week", type: "type" },
    { label: "Hour", type: "type" },
    { label: "Minute", type: "type" },
    { label: "Second", type: "type" },
    { label: "Millisecond", type: "type" },
    { label: "Microsecond", type: "type" },
    { label: "Nanosecond", type: "type" },
    { label: "Entity", type: "type" },
    { label: "Int", type: "type" },
    { label: "Number", type: "type" },
    { label: "Missing", type: "type" },
    { label: "Floating", type: "type" },
    { label: "UnsignedInt", type: "type" },
    { label: "SignedInt", type: "type" },
    { label: "Rational", type: "type" },
    { label: "FixedDecimal", type: "type" },
    { label: "Hash", type: "type" },
    { label: "FilePos", type: "type" },
    { label: "String", type: "type" },
    { label: "def", type: "keyword" },
    { label: "output", type: "interface" },
    { label: "insert", type: "interface" },
    { label: "delete", type: "interface" },
    { label: "export", type: "interface" },
    { label: "from", type: "keyword" },
    { label: "if", type: "keyword" },
    { label: "iff", type: "keyword" },
    { label: "then", type: "keyword" },
    { label: "else", type: "keyword" },
    { label: "end", type: "keyword" },
    { label: "exists", type: "keyword" },
    { label: "where", type: "keyword" },
    { label: "with", type: "keyword" },
    { label: "select", type: "keyword" },
    { label: "implies", type: "keyword" },
    { label: "use", type: "keyword" },
    { label: "forall", type: "keyword" },
    { label: "in", type: "keyword" },
    { label: "ic", type: "keyword" },
    { label: "not", type: "keyword" },
    { label: "and", type: "keyword" },
    { label: "or", type: "keyword" },
    { label: "xor", type: "keyword" },
    { label: "union", type: "keyword" },
    { label: "_flatten", type: "function" },
    { label: "abelian_group", type: "function" },
    { label: "abs", type: "function" },
    { label: "absorption_laws", type: "function" },
    { label: "acos", type: "function" },
    { label: "acosh", type: "function" },
    { label: "acot", type: "function" },
    { label: "add", type: "function" },
    { label: "antisymmetric", type: "function" },
    { label: "approximate_abelian_group", type: "function" },
    { label: "approximate_commutative_monoid", type: "function" },
    { label: "approximate_group", type: "function" },
    { label: "approximate_monoid", type: "function" },
    { label: "approximate_ring", type: "function" },
    { label: "approximate_semiring", type: "function" },
    { label: "approximately_associative", type: "function" },
    { label: "approximately_commutative", type: "function" },
    { label: "approximately_distributive", type: "function" },
    { label: "approximately_has_inverse", type: "function" },
    { label: "approximately_left_distributive", type: "function" },
    { label: "approximately_right_distributive", type: "function" },
    { label: "approximately_zero_annihilation", type: "function" },
    { label: "argmax", type: "function" },
    { label: "argmin", type: "function" },
    { label: "arity", type: "function" },
    { label: "asin", type: "function" },
    { label: "asinh", type: "function" },
    { label: "associative", type: "function" },
    { label: "atan", type: "function" },
    { label: "atanh", type: "function" },
    { label: "auto_number", type: "function" },
    { label: "binary_operator", type: "function" },
    { label: "binary_relation", type: "function" },
    { label: "binary_relation_substitution_laws", type: "function" },
    { label: "bitwise_and", type: "function" },
    { label: "bitwise_left_shift", type: "function" },
    { label: "bitwise_not", type: "function" },
    { label: "bitwise_or", type: "function" },
    { label: "bitwise_right_shift", type: "function" },
    { label: "bitwise_unsigned_right_shift", type: "function" },
    { label: "bitwise_xor", type: "function" },
    { label: "boolean_and", type: "function" },
    { label: "boolean_false", type: "function" },
    { label: "boolean_not", type: "function" },
    { label: "boolean_or", type: "function" },
    { label: "boolean_true", type: "function" },
    { label: "bottom", type: "function" },
    { label: "bounded_lattice", type: "function" },
    { label: "bounded_semilattice", type: "function" },
    { label: "byte", type: "function" },
    { label: "capture_group_by_index", type: "function" },
    { label: "capture_group_by_name", type: "function" },
    { label: "cart", type: "function" },
    { label: "cbrt", type: "function" },
    { label: "ceil", type: "function" },
    { label: "char", type: "function" },
    { label: "clamp", type: "function" },
    { label: "commutative", type: "function" },
    { label: "commutative_monoid", type: "function" },
    { label: "comparable", type: "function" },
    { label: "complement", type: "function" },
    { label: "concat", type: "function" },
    { label: "cos", type: "function" },
    { label: "cosh", type: "function" },
    { label: "cot", type: "function" },
    { label: "count", type: "function" },
    { label: "date_add", type: "function" },
    { label: "date_day", type: "function" },
    { label: "date_dayname", type: "function" },
    { label: "date_dayofquarter", type: "function" },
    { label: "date_dayofweek", type: "function" },
    { label: "date_dayofweekofmonth", type: "function" },
    { label: "date_dayofyear", type: "function" },
    { label: "date_daysinmonth", type: "function" },
    { label: "date_isleapyear", type: "function" },
    { label: "date_month", type: "function" },
    { label: "date_monthname", type: "function" },
    { label: "date_quarterofyear", type: "function" },
    { label: "date_subtract", type: "function" },
    { label: "date_week", type: "function" },
    { label: "date_year", type: "function" },
    { label: "dates_period_days", type: "function" },
    { label: "datetime_add", type: "function" },
    { label: "datetime_day", type: "function" },
    { label: "datetime_day_", type: "function" },
    { label: "datetime_dayname", type: "function" },
    { label: "datetime_dayofquarter", type: "function" },
    { label: "datetime_dayofweek", type: "function" },
    { label: "datetime_dayofweekofmonth", type: "function" },
    { label: "datetime_dayofyear", type: "function" },
    { label: "datetime_daysinmonth", type: "function" },
    { label: "datetime_hour", type: "function" },
    { label: "datetime_hour_", type: "function" },
    { label: "datetime_isleapyear", type: "function" },
    { label: "datetime_minute", type: "function" },
    { label: "datetime_minute_", type: "function" },
    { label: "datetime_month", type: "function" },
    { label: "datetime_month_", type: "function" },
    { label: "datetime_monthname", type: "function" },
    { label: "datetime_now", type: "function" },
    { label: "datetime_quarterofyear", type: "function" },
    { label: "datetime_second", type: "function" },
    { label: "datetime_subtract", type: "function" },
    { label: "datetime_to_nanoseconds", type: "function" },
    { label: "datetime_week", type: "function" },
    { label: "datetime_week_", type: "function" },
    { label: "datetime_year", type: "function" },
    { label: "datetime_year_", type: "function" },
    { label: "datetimes_period_milliseconds", type: "function" },
    { label: "decimal", type: "function" },
    { label: "decimal_bit_length", type: "function" },
    { label: "decimal_int_convert", type: "function" },
    { label: "decimal_precision", type: "function" },
    { label: "decode_base", type: "function" },
    { label: "default_value", type: "function" },
    { label: "deg", type: "function" },
    { label: "denominator", type: "function" },
    { label: "describe", type: "function" },
    { label: "diff", type: "function" },
    { label: "disjoint", type: "function" },
    { label: "distributive", type: "function" },
    { label: "divide", type: "function" },
    { label: "docstring", type: "function" },
    { label: "domain", type: "function" },
    { label: "dot_join", type: "function" },
    { label: "double_metaphone", type: "function" },
    { label: "empty", type: "function" },
    { label: "encode_base", type: "function" },
    { label: "epoch_milliseconds", type: "function" },
    { label: "eq", type: "function" },
    { label: "equal", type: "function" },
    { label: "equivalence_relation", type: "function" },
    { label: "erf", type: "function" },
    { label: "erfinv", type: "function" },
    { label: "escape_regex_metachars", type: "function" },
    { label: "export_csv", type: "function" },
    { label: "export_json", type: "function" },
    { label: "factorial", type: "function" },
    { label: "filepos", type: "function" },
    { label: "filepos_value", type: "function" },
    { label: "first", type: "function" },
    { label: "float", type: "function" },
    { label: "float_int_convert", type: "function" },
    { label: "floor", type: "function" },
    { label: "floor_divide", type: "function" },
    { label: "floor_to_int", type: "function" },
    { label: "format_date", type: "function" },
    { label: "format_datetime", type: "function" },
    { label: "formula_card_est", type: "function" },
    { label: "frequency", type: "function" },
    { label: "function", type: "function" },
    { label: "geometric_mean", type: "function" },
    { label: "glm_generic", type: "function" },
    { label: "glm_linear_regression", type: "function" },
    { label: "glm_logistic_regression", type: "function" },
    { label: "glm_predict", type: "function" },
    { label: "glm_probit_regression", type: "function" },
    { label: "graphviz", type: "function" },
    { label: "group", type: "function" },
    { label: "gt", type: "function" },
    { label: "gt_eq", type: "function" },
    { label: "harmonic_mean", type: "function" },
    { label: "has_identity", type: "function" },
    { label: "has_left_identity", type: "function" },
    { label: "has_left_zero", type: "function" },
    { label: "has_maximal_element", type: "function" },
    { label: "has_minimal_element", type: "function" },
    { label: "has_right_identity", type: "function" },
    { label: "has_right_zero", type: "function" },
    { label: "hash", type: "function" },
    { label: "hash_value_uint", type: "function" },
    { label: "haversine", type: "function" },
    { label: "help", type: "function" },
    { label: "html", type: "function" },
    { label: "ic", type: "function" },
    { label: "idempotent", type: "function" },
    { label: "identity", type: "function" },
    { label: "int", type: "function" },
    { label: "int_float_convert", type: "function" },
    { label: "int_spread_by_even", type: "function" },
    { label: "int_spread_by_ratio", type: "function" },
    { label: "intersect", type: "function" },
    { label: "irreflexive", type: "function" },
    { label: "is_", type: "function" },
    { label: "jacobian", type: "function" },
    { label: "join_bounded_lattice", type: "function" },
    { label: "last", type: "function" },
    { label: "lattice", type: "function" },
    { label: "left_distributive", type: "function" },
    { label: "left_identity", type: "function" },
    { label: "left_override", type: "function" },
    { label: "left_zero", type: "function" },
    { label: "levenshtein", type: "function" },
    { label: "like_match", type: "function" },
    { label: "linear_regression", type: "function" },
    { label: "linear_regression_objective", type: "function" },
    { label: "linear_regression_predict", type: "function" },
    { label: "lined_csv", type: "function" },
    { label: "load_csv", type: "function" },
    { label: "load_csv_row_wise", type: "function" },
    { label: "load_json", type: "function" },
    { label: "log", type: "function" },
    { label: "log_card_est", type: "function" },
    { label: "lowercase", type: "function" },
    { label: "lr_random_initial_point", type: "function" },
    { label: "lt", type: "function" },
    { label: "lt_eq", type: "function" },
    { label: "mae", type: "function" },
    { label: "markdown", type: "function" },
    { label: "max", type: "function" },
    { label: "max_k", type: "function" },
    { label: "maximal_element", type: "function" },
    { label: "maximum", type: "function" },
    { label: "mean", type: "function" },
    { label: "mean_normalization", type: "function" },
    { label: "median", type: "function" },
    { label: "meet_bounded_lattice", type: "function" },
    { label: "metaphone", type: "function" },
    { label: "min", type: "function" },
    { label: "min_k", type: "function" },
    { label: "min_max_normalization", type: "function" },
    { label: "minimal_element", type: "function" },
    { label: "minimize_initial_point", type: "function" },
    { label: "minimum", type: "function" },
    { label: "missing", type: "function" },
    { label: "mlpack_adaboost", type: "function" },
    { label: "mlpack_adaboost_predict", type: "function" },
    { label: "mlpack_approx_kfn", type: "function" },
    { label: "mlpack_approx_kfn_build", type: "function" },
    { label: "mlpack_dbscan", type: "function" },
    { label: "mlpack_decision_tree", type: "function" },
    { label: "mlpack_decision_tree_predict", type: "function" },
    { label: "mlpack_det", type: "function" },
    { label: "mlpack_det_build", type: "function" },
    { label: "mlpack_emst", type: "function" },
    { label: "mlpack_fastmks", type: "function" },
    { label: "mlpack_fastmks_build", type: "function" },
    { label: "mlpack_gmm_generate", type: "function" },
    { label: "mlpack_gmm_probability", type: "function" },
    { label: "mlpack_gmm_train", type: "function" },
    { label: "mlpack_hoeffding_tree", type: "function" },
    { label: "mlpack_hoeffding_tree_predict", type: "function" },
    { label: "mlpack_kernel_pca", type: "function" },
    { label: "mlpack_kfn", type: "function" },
    { label: "mlpack_kfn_build", type: "function" },
    { label: "mlpack_kmeans", type: "function" },
    { label: "mlpack_kmeans_centroids", type: "function" },
    { label: "mlpack_knn", type: "function" },
    { label: "mlpack_knn_build", type: "function" },
    { label: "mlpack_krann", type: "function" },
    { label: "mlpack_krann_build", type: "function" },
    { label: "mlpack_lars", type: "function" },
    { label: "mlpack_lars_predict", type: "function" },
    { label: "mlpack_linear_regression", type: "function" },
    { label: "mlpack_linear_regression_predict", type: "function" },
    { label: "mlpack_linear_svm", type: "function" },
    { label: "mlpack_linear_svm_predict", type: "function" },
    { label: "mlpack_logistic_regression", type: "function" },
    { label: "mlpack_logistic_regression_predict", type: "function" },
    { label: "mlpack_lsh", type: "function" },
    { label: "mlpack_lsh_build", type: "function" },
    { label: "mlpack_mean_shift", type: "function" },
    { label: "mlpack_nbc", type: "function" },
    { label: "mlpack_nbc_predict", type: "function" },
    { label: "mlpack_nmf", type: "function" },
    { label: "mlpack_pca", type: "function" },
    { label: "mlpack_perceptron", type: "function" },
    { label: "mlpack_perceptron_predict", type: "function" },
    { label: "mlpack_preprocess_split", type: "function" },
    { label: "mlpack_radical", type: "function" },
    { label: "mlpack_random_forest", type: "function" },
    { label: "mlpack_random_forest_predict", type: "function" },
    { label: "mlpack_softmax_regression", type: "function" },
    { label: "mlpack_softmax_regression_predict", type: "function" },
    { label: "mode", type: "function" },
    { label: "modulo", type: "function" },
    { label: "monoid", type: "function" },
    { label: "mse", type: "function" },
    { label: "multiply", type: "function" },
    { label: "murmurhash", type: "function" },
    { label: "nanoseconds_to_datetime", type: "function" },
    { label: "natural_exp", type: "function" },
    { label: "natural_log", type: "function" },
    { label: "neq", type: "function" },
    { label: "not", type: "function" },
    { label: "nullary_relation", type: "function" },
    { label: "num_bytes", type: "function" },
    { label: "num_chars", type: "function" },
    { label: "numerator", type: "function" },
    { label: "pack", type: "function" },
    { label: "parse_date", type: "function" },
    { label: "parse_datetime", type: "function" },
    { label: "parse_decimal", type: "function" },
    { label: "parse_float", type: "function" },
    { label: "parse_int", type: "function" },
    { label: "parse_json", type: "function" },
    { label: "parse_uuid", type: "function" },
    { label: "partial_order", type: "function" },
    { label: "partial_order_and_bounded_lattice", type: "function" },
    { label: "partial_order_and_join_bounded_lattice", type: "function" },
    { label: "partial_order_and_lattice", type: "function" },
    { label: "partial_order_and_meet_bounded_lattice", type: "function" },
    { label: "pattern_match", type: "function" },
    { label: "percentile", type: "function" },
    { label: "percentile_nearest", type: "function" },
    { label: "period_add", type: "function" },
    { label: "period_day_to_int", type: "function" },
    { label: "period_max", type: "function" },
    { label: "period_min", type: "function" },
    { label: "pi_float", type: "function" },
    { label: "pivot", type: "function" },
    { label: "pop_standard_deviation", type: "function" },
    { label: "pop_variance", type: "function" },
    { label: "pop_zscore_normalization", type: "function" },
    { label: "power", type: "function" },
    { label: "prefix_join", type: "function" },
    { label: "preorder", type: "function" },
    { label: "product", type: "function" },
    { label: "proper_subset", type: "function" },
    { label: "proper_superset", type: "function" },
    { label: "rad", type: "function" },
    { label: "random_mersenne_twister", type: "function" },
    { label: "random_threefry_float", type: "function" },
    { label: "random_threefry_uint", type: "function" },
    { label: "random_uint", type: "function" },
    { label: "range", type: "function" },
    { label: "rational", type: "function" },
    { label: "rational_convert", type: "function" },
    { label: "reflexive", type: "function" },
    { label: "regex_compile", type: "function" },
    { label: "regex_match", type: "function" },
    { label: "regex_match_all", type: "function" },
    { label: "rel", type: "function" },
    { label: "relname_string", type: "function" },
    { label: "remainder", type: "function" },
    { label: "reverse_sort", type: "function" },
    { label: "right_distributive", type: "function" },
    { label: "right_identity", type: "function" },
    { label: "right_override", type: "function" },
    { label: "right_zero", type: "function" },
    { label: "ring", type: "function" },
    { label: "rmse", type: "function" },
    { label: "round", type: "function" },
    { label: "sample_standard_deviation", type: "function" },
    { label: "sample_variance", type: "function" },
    { label: "sample_zscore_normalization", type: "function" },
    { label: "second", type: "function" },
    { label: "semilattice", type: "function" },
    { label: "semiring", type: "function" },
    { label: "sign", type: "function" },
    { label: "sin", type: "function" },
    { label: "sinh", type: "function" },
    { label: "sort", type: "function" },
    { label: "soundex", type: "function" },
    { label: "spread", type: "function" },
    { label: "sqrt", type: "function" },
    { label: "squared", type: "function" },
    { label: "squared_deviation", type: "function" },
    { label: "strict_partial_order", type: "function" },
    { label: "strict_total_order", type: "function" },
    { label: "string", type: "function" },
    { label: "string_join", type: "function" },
    { label: "string_length", type: "function" },
    { label: "string_replace", type: "function" },
    { label: "string_replace_multiple", type: "function" },
    { label: "string_split", type: "function" },
    { label: "string_trim", type: "function" },
    { label: "subset", type: "function" },
    { label: "substring", type: "function" },
    { label: "substring_bytes", type: "function" },
    { label: "subtract", type: "function" },
    { label: "suffix_join", type: "function" },
    { label: "sum", type: "function" },
    { label: "sum_int", type: "function" },
    { label: "superset", type: "function" },
    { label: "svg", type: "function" },
    { label: "symmetric", type: "function" },
    { label: "table", type: "function" },
    { label: "tan", type: "function" },
    { label: "tanh", type: "function" },
    { label: "ternary_relation", type: "function" },
    { label: "top", type: "function" },
    { label: "total", type: "function" },
    { label: "total_order", type: "function" },
    { label: "transitive", type: "function" },
    { label: "transpose", type: "function" },
    { label: "trunc", type: "function" },
    { label: "trunc_divide", type: "function" },
    { label: "trunc_to_int", type: "function" },
    { label: "uint", type: "function" },
    { label: "unary_operator", type: "function" },
    { label: "unary_relation", type: "function" },
    { label: "unary_relation_substitution_laws", type: "function" },
    { label: "union", type: "function" },
    { label: "unit_normalization", type: "function" },
    { label: "unix_epoch", type: "function" },
    { label: "unpack", type: "function" },
    { label: "uppercase", type: "function" },
    { label: "uuid_string", type: "function" },
    { label: "vega", type: "function" },
    { label: "vegalite", type: "function" },
    { label: "vegalite_utils", type: "function" },
    { label: "view_json", type: "function" },
    { label: "weighted_mean", type: "function" },
    { label: "xgboost_classifier", type: "function" },
    { label: "xgboost_classifier_predict", type: "function" },
    { label: "xgboost_classifier_probabilities", type: "function" },
    { label: "xgboost_feature_importances", type: "function" },
    { label: "xgboost_regressor", type: "function" },
    { label: "xgboost_regressor_predict", type: "function" },
    { label: "zero_annihilation", type: "function" },
    { label: "zero_of_operator", type: "function" },
    { label: "zip", type: "function" },
    { label: "registered", type: "variable", info: "Registered Sign / Registered Trade Mark Sign", apply: "®" },
    { label: "degree", type: "variable", info: "Degree Sign", apply: "°" },
    { label: "pm", type: "variable", info: "Plus-Minus Sign / Plus-Or-Minus Sign", apply: "±" },
    { label: "\\^2", info: "Superscript Two / Superscript Digit Two", apply: "²" },
    { label: "\\^3", info: "Superscript Three / Superscript Digit Three", apply: "³" },
    { label: "\\^1", info: "Superscript One / Superscript Digit One", apply: "¹" },
    { label: "\\1/4", type: "variable", info: "Vulgar Fraction One Quarter / Fraction One Quarter", apply: "¼" },
    { label: "\\1/2", type: "variable", info: "Vulgar Fraction One Half / Fraction One Half", apply: "½" },
    { label: "\\3/4", type: "variable", info: "Vulgar Fraction Three Quarters / Fraction Three Quarters", apply: "¾" },
    { label: "\\questiondown", type: "variable", info: "Inverted Question Mark", apply: "¿" },
    { label: "\\times", type: "variable", info: "Multiplication Sign", apply: "×" },
    { label: "\\div", type: "variable", info: "Division Sign", apply: "÷" },
    { label: "\\Alpha", type: "variable", info: "Greek Capital Letter Alpha", apply: "Α" },
    { label: "\\Beta", type: "variable", info: "Greek Capital Letter Beta", apply: "Β" },
    { label: "\\Gamma", type: "variable", info: "Greek Capital Letter Gamma", apply: "Γ" },
    { label: "\\Delta", type: "variable", info: "Greek Capital Letter Delta", apply: "Δ" },
    { label: "\\Epsilon", type: "variable", info: "Greek Capital Letter Epsilon", apply: "Ε" },
    { label: "\\Zeta", type: "variable", info: "Greek Capital Letter Zeta", apply: "Ζ" },
    { label: "\\Eta", type: "variable", info: "Greek Capital Letter Eta", apply: "Η" },
    { label: "\\Theta", type: "variable", info: "Greek Capital Letter Theta", apply: "Θ" },
    { label: "\\Iota", type: "variable", info: "Greek Capital Letter Iota", apply: "Ι" },
    { label: "\\Kappa", type: "variable", info: "Greek Capital Letter Kappa", apply: "Κ" },
    { label: "\\Lambda", type: "variable", info: "Greek Capital Letter Lamda / Greek Capital Letter Lambda", apply: "Λ" },
    { label: "\\upMu", type: "variable", info: "Greek Capital Letter Mu", apply: "Μ" },
    { label: "\\upNu", type: "variable", info: "Greek Capital Letter Nu", apply: "Ν" },
    { label: "\\Xi", type: "variable", info: "Greek Capital Letter Xi", apply: "Ξ" },
    { label: "\\upOmicron", type: "variable", info: "Greek Capital Letter Omicron", apply: "Ο" },
    { label: "\\Pi", type: "variable", info: "Greek Capital Letter Pi", apply: "Π" },
    { label: "\\Rho", type: "variable", info: "Greek Capital Letter Rho", apply: "Ρ" },
    { label: "\\Sigma", type: "variable", info: "Greek Capital Letter Sigma", apply: "Σ" },
    { label: "\\Tau", type: "variable", info: "Greek Capital Letter Tau", apply: "Τ" },
    { label: "\\Upsilon", type: "variable", info: "Greek Capital Letter Upsilon", apply: "Υ" },
    { label: "\\Phi", type: "variable", info: "Greek Capital Letter Phi", apply: "Φ" },
    { label: "\\Chi", type: "variable", info: "Greek Capital Letter Chi", apply: "Χ" },
    { label: "\\Psi", type: "variable", info: "Greek Capital Letter Psi", apply: "Ψ" },
    { label: "\\Omega", type: "variable", info: "Greek Capital Letter Omega", apply: "Ω" },
    { label: "\\alpha", type: "variable", info: "Greek Small Letter Alpha", apply: "α" },
    { label: "\\beta", type: "variable", info: "Greek Small Letter Beta", apply: "β" },
    { label: "\\gamma", type: "variable", info: "Greek Small Letter Gamma", apply: "γ" },
    { label: "\\delta", type: "variable", info: "Greek Small Letter Delta", apply: "δ" },
    { label: "\\varepsilon", type: "variable", info: "Greek Small Letter Epsilon", apply: "ε" },
    { label: "\\zeta", type: "variable", info: "Greek Small Letter Zeta", apply: "ζ" },
    { label: "\\eta", type: "variable", info: "Greek Small Letter Eta", apply: "η" },
    { label: "\\theta", type: "variable", info: "Greek Small Letter Theta", apply: "θ" },
    { label: "\\iota", type: "variable", info: "Greek Small Letter Iota", apply: "ι" },
    { label: "\\kappa", type: "variable", info: "Greek Small Letter Kappa", apply: "κ" },
    { label: "\\lambda", type: "variable", info: "Greek Small Letter Lamda / Greek Small Letter Lambda", apply: "λ" },
    { label: "\\mu", type: "variable", info: "Greek Small Letter Mu", apply: "μ" },
    { label: "\\nu", type: "variable", info: "Greek Small Letter Nu", apply: "ν" },
    { label: "\\xi", type: "variable", info: "Greek Small Letter Xi", apply: "ξ" },
    { label: "\\upomicron", type: "variable", info: "Greek Small Letter Omicron", apply: "ο" },
    { label: "\\pi", type: "variable", info: "Greek Small Letter Pi", apply: "π" },
    { label: "\\rho", type: "variable", info: "Greek Small Letter Rho", apply: "ρ" },
    { label: "\\varsigma", type: "variable", info: "Greek Small Letter Final Sigma", apply: "ς" },
    { label: "\\sigma", type: "variable", info: "Greek Small Letter Sigma", apply: "σ" },
    { label: "\\tau", type: "variable", info: "Greek Small Letter Tau", apply: "τ" },
    { label: "\\upsilon", type: "variable", info: "Greek Small Letter Upsilon", apply: "υ" },
    { label: "\\varphi", type: "variable", info: "Greek Small Letter Phi", apply: "φ" },
    { label: "\\chi", type: "variable", info: "Greek Small Letter Chi", apply: "χ" },
    { label: "\\psi", type: "variable", info: "Greek Small Letter Psi", apply: "ψ" },
    { label: "\\omega", type: "variable", info: "Greek Small Letter Omega", apply: "ω" },
    { label: "\\upvarbeta", type: "variable", info: "Greek Beta Symbol / Greek Small Letter Curled Beta", apply: "ϐ" },
    { label: "\\vartheta", type: "variable", info: "Greek Theta Symbol / Greek Small Letter Script Theta", apply: "ϑ" },
    { label: "\\phi", type: "variable", info: "Greek Phi Symbol / Greek Small Letter Script Phi", apply: "ϕ" },
    { label: "\\varpi", type: "variable", info: "Greek Pi Symbol / Greek Small Letter Omega Pi", apply: "ϖ" },
    { label: "\\upoldKoppa", type: "variable", info: "Greek Letter Archaic Koppa", apply: "Ϙ" },
    { label: "\\upoldkoppa", type: "variable", info: "Greek Small Letter Archaic Koppa", apply: "ϙ" },
    { label: "\\Stigma", type: "variable", info: "Greek Letter Stigma / Greek Capital Letter Stigma", apply: "Ϛ" },
    { label: "\\upstigma", type: "variable", info: "Greek Small Letter Stigma", apply: "ϛ" },
    { label: "\\Digamma", type: "variable", info: "Greek Letter Digamma / Greek Capital Letter Digamma", apply: "Ϝ" },
    { label: "\\digamma", type: "variable", info: "Greek Small Letter Digamma", apply: "ϝ" },
    { label: "\\Koppa", type: "variable", info: "Greek Letter Koppa / Greek Capital Letter Koppa", apply: "Ϟ" },
    { label: "\\upkoppa", type: "variable", info: "Greek Small Letter Koppa", apply: "ϟ" },
    { label: "\\Sampi", type: "variable", info: "Greek Letter Sampi / Greek Capital Letter Sampi", apply: "Ϡ" },
    { label: "\\upsampi", type: "variable", info: "Greek Small Letter Sampi", apply: "ϡ" },
    { label: "\\varkappa", type: "variable", info: "Greek Kappa Symbol / Greek Small Letter Script Kappa", apply: "ϰ" },
    { label: "\\varrho", type: "variable", info: "Greek Rho Symbol / Greek Small Letter Tailed Rho", apply: "ϱ" },
    { label: "\\varTheta", type: "variable", info: "Greek Capital Theta Symbol", apply: "ϴ" },
    { label: "\\epsilon", type: "variable", info: "Greek Lunate Epsilon Symbol", apply: "ϵ" },
    { label: "\\backepsilon", type: "variable", info: "Greek Reversed Lunate Epsilon Symbol", apply: "϶" },
    { label: "\\^0", info: "Superscript Zero / Superscript Digit Zero", apply: "⁰" },
    { label: "\\^i", info: "Superscript Latin Small Letter I", apply: "ⁱ" },
    { label: "\\^4", info: "Superscript Four / Superscript Digit Four", apply: "⁴" },
    { label: "\\^5", info: "Superscript Five / Superscript Digit Five", apply: "⁵" },
    { label: "\\^6", info: "Superscript Six / Superscript Digit Six", apply: "⁶" },
    { label: "\\^7", info: "Superscript Seven / Superscript Digit Seven", apply: "⁷" },
    { label: "\\^8", info: "Superscript Eight / Superscript Digit Eight", apply: "⁸" },
    { label: "\\^9", info: "Superscript Nine / Superscript Digit Nine", apply: "⁹" },
    { label: "\\^+", info: "Superscript Plus Sign", apply: "⁺" },
    { label: "\\^-", info: "Superscript Minus / Superscript Hyphen-Minus", apply: "⁻" },
    { label: "\\^=", info: "Superscript Equals Sign", apply: "⁼" },
    { label: "\\^(", info: "Superscript Left Parenthesis / Superscript Opening Parenthesis", apply: "⁽" },
    { label: "\\^)", info: "Superscript Right Parenthesis / Superscript Closing Parenthesis", apply: "⁾" },
    { label: "\\^n", info: "Superscript Latin Small Letter N", apply: "ⁿ" },
    { label: "\\_0", type: "variable", info: "Subscript Zero / Subscript Digit Zero", apply: "₀" },
    { label: "\\_1", type: "variable", info: "Subscript One / Subscript Digit One", apply: "₁" },
    { label: "\\_2", type: "variable", info: "Subscript Two / Subscript Digit Two", apply: "₂" },
    { label: "\\_3", type: "variable", info: "Subscript Three / Subscript Digit Three", apply: "₃" },
    { label: "\\_4", type: "variable", info: "Subscript Four / Subscript Digit Four", apply: "₄" },
    { label: "\\_5", type: "variable", info: "Subscript Five / Subscript Digit Five", apply: "₅" },
    { label: "\\_6", type: "variable", info: "Subscript Six / Subscript Digit Six", apply: "₆" },
    { label: "\\_7", type: "variable", info: "Subscript Seven / Subscript Digit Seven", apply: "₇" },
    { label: "\\_8", type: "variable", info: "Subscript Eight / Subscript Digit Eight", apply: "₈" },
    { label: "\\_9", type: "variable", info: "Subscript Nine / Subscript Digit Nine", apply: "₉" },
    { label: "\\forall", type: "variable", info: "For All", apply: "∀" },
    { label: "\\complement", type: "variable", info: "Complement", apply: "∁" },
    { label: "\\partial", type: "variable", info: "Partial Differential", apply: "∂" },
    { label: "\\exists", type: "variable", info: "There Exists", apply: "∃" },
    { label: "\\nexists", type: "variable", info: "There Does Not Exist", apply: "∄" },
    { label: "\\emptyset", type: "variable", info: "Empty Set", apply: "∅" },
    { label: "\\increment", type: "variable", info: "Increment", apply: "∆" },
    { label: "\\nabla", type: "variable", info: "Nabla", apply: "∇" },
    { label: "\\in", type: "variable", info: "Element Of", apply: "∈" },
    { label: "\\notin", type: "variable", info: "Not An Element Of", apply: "∉" },
    { label: "\\sqrt", type: "variable", info: "Square Root", apply: "√" },
    { label: "\\cbrt", type: "variable", info: "Cube Root", apply: "∛" },
    { label: "\\fourthroot", type: "variable", info: "Fourth Root", apply: "∜" },
    { label: "\\propto", type: "variable", info: "Proportional To", apply: "∝" },
    { label: "\\infty", type: "variable", info: "Infinity", apply: "∞" },
    { label: "\\cap", type: "variable", info: "Intersection", apply: "∩" },
    { label: "\\cup", type: "variable", info: "Union", apply: "∪" },
    { label: "\\therefore", type: "variable", info: "Therefore", apply: "∴" },
    { label: "\\because", type: "variable", info: "Because", apply: "∵" },
    { label: "\\leq", type: "variable", info: "Less-Than Or Equal To / Less Than Or Equal To", apply: "≤" },
    { label: "\\geq", type: "variable", info: "Greater-Than Or Equal To / Greater Than Or Equal To", apply: "≥" },
    { label: "\\subset", type: "variable", info: "Subset Of", apply: "⊂" },
    { label: "\\supset", type: "variable", info: "Superset Of", apply: "⊃" },
    { label: "\\nsubset", type: "variable", info: "Not A Subset Of", apply: "⊄" },
    { label: "\\nsupset", type: "variable", info: "Not A Superset Of", apply: "⊅" },
    { label: "\\subseteq", type: "variable", info: "Subset Of Or Equal To", apply: "⊆" },
    { label: "\\supseteq", type: "variable", info: "Superset Of Or Equal To", apply: "⊇" },
    { label: "\\nsubseteq", type: "variable", info: "Neither A Subset Of Nor Equal To", apply: "⊈" },
    { label: "\\nsupseteq", type: "variable", info: "Neither A Superset Of Nor Equal To", apply: "⊉" },
    { label: "\\bowtie", type: "variable", info: "Bowtie", apply: "⋈" },
    { label: "\\ltimes", type: "variable", info: "Left Normal Factor Semidirect Product", apply: "⋉" },
    { label: "\\rtimes", type: "variable", info: "Right Normal Factor Semidirect Product", apply: "⋊" },
    { label: "\\vdots", type: "variable", info: "Vertical Ellipsis", apply: "⋮" },
    { label: "\\cdots", type: "variable", info: "Midline Horizontal Ellipsis", apply: "⋯" },
    { label: "\\adots", type: "variable", info: "Up Right Diagonal Ellipsis", apply: "⋰" },
    { label: "\\ddots", type: "variable", info: "Down Right Diagonal Ellipsis", apply: "⋱" }
];

const relLanguage = LRLanguage.define({
    parser: parser.configure({
        props: [
            styleTags({
                "Keyword AttributeKeyword": tags.keyword,
                Type: tags.typeName,
                Emphasis: tags.emphasis,
                "IntLiteral FloatLiteral": tags.number,
                BooleanLiteral: tags.bool,
                CharLiteral: tags.character,
                "DocstringLiteral MultilineDocstringLiteral": tags.docString,
                "StaticStringLiteral/...": tags.string,
                "StaticMultilineStringLiteral RawStringSequence InterpolationLiteral InterpolationMultilineLiteral": tags.string,
                LineComment: tags.lineComment,
                BlockComment: tags.blockComment,
                BasicId: tags.attributeName,
                "LhsId/BasicId": tags.definition(tags.variableName),
                "PartialApplicationExpression/BasicExpression/BasicId": tags.variableName,
                "ApplicationExpression/BasicExpression/BasicId": tags.variableName,
                "LogicalParam/LogicalExpression/BasicExpression/BasicId": tags.attributeName,
                "FormalId/BasicId": tags.attributeName,
                "InterpolationId AliasId/BasicId": tags.labelName,
                "QualifiedNameElem/BasicId RelnameLiteral ValueTypeLiteral": tags.literal,
                "DateLiteral DateTimeLiteral": tags.string,
                "Operator OperatorKeyword": tags.operatorKeyword,
                '( )': tags.paren,
                '[ ]': tags.squareBracket,
                '{ }': tags.brace,
                ':': tags.derefOperator,
                ', ;': tags.separator
            }),
            foldNodeProp.add({
                MultilineDocstringLiteral(tree) { return { from: tree.from + 3, to: tree.to - 3 }; },
                InterpolationMultilineLiteral(tree) { return { from: tree.from + 3, to: tree.to - 3 }; },
                StaticMultilineStringLiteral(tree) { return { from: tree.from + 3, to: tree.to - 3 }; },
                RawStringSequence(tree) { return { from: tree.from + 1, to: tree.to - 1 }; },
                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; },
                BoundedExpression(tree) { return { from: tree.from + 1, to: tree.to - 1 }; }
            })
        ]
    }),
    languageData: {
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`", '"""'] },
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
    }
});
// Autocomplete
const relCompletion = relLanguage.data.of({
    autocomplete: completeFromList(autocompleteList)
});
function rel() {
    return new LanguageSupport(relLanguage, [relCompletion]);
}

export { rel, relCompletion, relLanguage };
