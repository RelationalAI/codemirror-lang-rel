import { LRParser } from '@lezer/lr';
import { LRLanguage, foldNodeProp, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@lezer/highlight';
import { completeFromList } from '@codemirror/autocomplete';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_BasicId = {__proto__:null,doc:14, function:23, inline:25, ondemand:27, outline:29, static:31, raw:58, def:62, Any:66, String:68, Int:70, Number:72, Char:74, Missing:76, Float:78, Floating:80, UnsignedInt:82, UInt:84, SignedInt:86, Rational:88, FixedDecimal:90, RelName:92, Entity:94, AutoNumber:96, Hash:98, FilePos:100, Date:102, DateTime:104, Year:106, Month:108, Week:110, Day:112, Hour:114, Minute:116, Second:118, Millisecond:120, Microsecond:122, Nanosecond:124, Boolean:126, type:128, entity:130, value:132, output:143, insert:145, delete:147, abort:149, export:151, where:202, for:204, from:206, if:286, then:288, else:290, end:292, forall:294, exists:296, and:300, or:304, implies:308, not:314, iff:318, xor:324, in:344, ic:356, module:360, with:364, use:366, as:370};
const spec_Operator = {__proto__:null,".":189, "^":213, "-":215, "/":217, "%":219, "*":221, "÷":223, "×":225, "⊗":227, "⊙":229, "+":231, "∩":233, "⊕":235, "∪":237, "⊓":239, "⊔":241, "=":243, "!=":245, "≈":247, "∼":249, "→":251, "←":253, "≼":255, "≽":257, "≺":259, "≻":261, "≠":263, "<":265, ">":267, "<=":269, "≤":271, ">=":273, "≥":275, "⊆":277, "⊇":279, "⊂":281, "⊃":283, "∧":303, "∨":307, "⇒":311, "⇐":313, "¬":317, "≡":321, "⇔":323, "≢":327, "⇎":329, "⊻":331, "<:":333, ":>":335, "<++":337, "++>":339, "∈":347};
const parser = LRParser.deserialize({
  version: 14,
  states: "!DOO`QPOOOzQPO'#CfOOQO'#G`'#G`O!]QPO'#GROOQO'#Gq'#GqOOQO'#G_'#G_Q`QPOOO!qQPO'#CaO!yQPO'#C`O!]QPO'#GRO%lQPO'#GRO%qQPO'#GSO(lQPO'#GTO!yQPO'#GVO(vQQO'#GXO-^QPO,59QOOQO'#Gs'#GsOOQO-E:^-E:^O!yQPO,58zO-uQPO,5<mO-zQPO,5<nO.PQPO,5<oO!yQPO,5<qOOQO-E:]-E:]OOQO,58{,58{O/UQPO'#G}O/`QQO'#DqO/eQPO'#DtO0fQPO'#DsOOQO'#C|'#C|OOQO'#HO'#HOOOQO'#G}'#G}OOQO'#HP'#HPO0kQPO,58zO0yQPO,5<mO!yQPO,5<mO!yQPO,5<nO4pQQO'#GQO8YQQO'#D{OOQO'#Gg'#GgO8aQPO,5<oO(vQQO,5<oO(vQQO,5<oO8gQPO,5<oO8aQPO,5<oO8oQPO,5<qOOQO'#Cm'#CmO8yQSO'#G}O=lQQO'#F`OOQO'#Dt'#DtOGfQSO'#DtOGpQQO'#E]OLWQPO'#EdO! OQQO'#EZO!#mQQO'#F`O!)^QSO'#E[OOQO'#E['#E[O!#zQSO'#E[O!)kQPO'#E[O(vQQO'#EZO!+WQQO'#EYO!,rQQO'#EXO!.ZQQO'#EWO!/aQPO'#EVO!0nQPO'#EUO!1xQPO'#F|OOQO'#EU'#EUO!1}QWO'#ERO!2YQ`O'#F}OOQO'#EO'#EOOOQO'#D}'#D}O!2eQPO'#D|O!2sQSO'#CxO!3RQQO'#E[O(vQQO'#E[O!7YQQO'#EZO!7jQPO,5<sO!7oQQO1G.lO!8dQPO1G.fO!yQPO1G2XO!yQPO1G2YO!8rQPO1G2ZO(vQQO1G2ZO(vQQO1G2ZO!8xQPO1G2ZO!8rQPO1G2ZO!9QQPO1G2]O!9[QPO,5:]OOQO'#Gf'#GfO!:[QPO,5:_O!8dQPO1G.fO!:fQQO'#GQO(vQQO1G.fO(vQQO1G.fO!8jQPO1G.fO!yQPO1G.fO!:mQPO1G2XO!:rQPO1G2YO!:wQPO1G2ZO!yQPO1G2]O!;RQPO1G2XO!<PQPO1G2YO!<}QPO,5:]O!>mQQO'#D}OOQO,5<l,5<lO!@YQPO,5<lOOQO,5:g,5:gO!@_QPO,5:gOOQO-E:e-E:eOOQO1G2Z1G2ZO!@dQPO1G2ZO!9QQPO1G2]O!@iQPO1G2]OOQO1G2]1G2]O!@pQPO,5;OOOQO,5;z,5;zO!@xQPO,5;zO!@}QPO,5;zO!AYQSO,5:_O!ErQPO,5:wO!EwQQO,5;OO!IkQQO,5:yO!MeQQO,5;TO!3RQQO,5:vO!3RQQO,5:vO!3RQQO,5:vO!3RQQO,5:vO!3RQQO,5:vO!3RQQO,5:vO##_QPO,5;zO##dQPO,5;zO#)RQSO,5:vO#)]QQO,5:iO#,sQQO,5:vO#,zQPO'#FgOOQO,5:u,5:uO!7YQQO,5:uO!7YQQO,5:uO!7YQQO,5:uO!7YQQO,5:uO!7YQQO,5:uO!7YQQO,5:tO!7YQQO,5:sO!7YQQO,5:rO!7YQQO,5:qO#,sQQO,5<hO(vQQO,5<hOOQO'#ES'#ESOGpQQO'#ESO#-PQWO,5:mO#-_QPO,5:mO#-gQ`O,5<iO#-_QPO,5<iO4wQQO'#GkO#-uQPO,5:hO#.TQpO'#CzO#.]QpO'#CzO#.hQpO'#CzO#.vQpO'#CzOOQO,59d,59dO=lQQO'#F`O#4OQQO,5:vO#4fQQO'#E[O#4mQPO,5:vO#7UQQO1G2_O#7]QPO'#GuOOQO'#Cl'#ClO#7eQPO7+$WO#7jQPO7+$QO(vQQO7+$QO(vQQO7+$QO#7pQPO7+$QO#7xQPO7+'sO#8vQPO7+'tO(vQQO7+'uO(vQQO7+'uO#9tQPO7+'uOOQO7+'u7+'uO#9|QPO7+'uO#:RQPO7+'uO#:aQPO7+'wO#:kQPO7+'wOOQO7+'w7+'wOOQO1G/w1G/wOOQO-E:d-E:dOOQO7+$Q7+$QO#:rQPO7+$QO#7jQPO7+$QO!yQPO7+'sO!yQPO7+'tO#:RQPO7+'uO#:aQPO7+'wO#:wQPO7+'sO(vQQO7+'sO(vQQO7+'sO#:}QPO7+'sO#;VQPO7+'tO(vQQO7+'tO(vQQO7+'tO#;]QPO7+'tO#<uQQO,5:iOOQO1G2W1G2WOOQO1G0R1G0ROOQO1G0j1G0jOOQO1G1f1G1fO#>_QPO1G1fOOQO1G0c1G0cO#APQSO'#EZO#FWQSO'#E[O#GcQSO1G0jO#GmQQO'#EbO#HXQPO'#EaO#HmQPO'#EcOOQO'#Ea'#EaO#HrQPO'#E`OOQO'#E`'#E`O#IWQQO'#EhO#IbQPO'#H[OOQO1G0e1G0eO#IgQPO1G0eOOQO1G0o1G0oO#IlQPO1G0oOOQO1G0b1G0bO#NeQQO1G0bO$ OQQO1G0bO$&lQQO1G0bO$&vQQO1G0bO$'QQQO1G0bO$)rQPO1G1fO#)]QQO1G0TO$)wQSO1G0TO#,sQQO'#EdO$+^QPO1G0bO$+cQSO'#D}O!7YQQO,5<RP#,sQQO,5<ROOQO1G0a1G0aO$.SQQO1G0aO$0mQQO1G0aO$0}QQO1G0aO$2xQQO1G0aO$4yQQO1G0`O$6}QQO1G0_O$8fQQO1G0^O$9lQPO1G0]OOQO1G2S1G2SO$:yQPO,5:nOOQO'#Gi'#GiO$;OQWO1G0XOOQO1G0X1G0XO$;OQWO1G0XOOQO'#Gj'#GjO$;^Q`O1G2TOOQO1G2T1G2TO$;^Q`O1G2TOOQO,5=V,5=VOOQO-E:i-E:iOOQO'#Ga'#GaO$;lQpO,59fOOQO,59f,59fOOQO'#Gb'#GbO$;tQpO,59fOOQO'#Gc'#GcO$<PQpO,59fOOQO'#Gd'#GdO$<_QpO,59fOOQO,5:v,5:vO(vQQO1G0bO$<pQPO'#G[O$=hQPO'#HcOOQO7+'y7+'yO!7oQQO'#GeO$>]QPO,5=aOOQO<<Gr<<GrO(vQQO<<GlO(vQQO<<GlO$>eQPO<<GlOOQO<<Gl<<GlO$>mQPO<<GlO$>rQPO<<K_O(vQQO<<K_O(vQQO<<K_O$>xQPO<<K_O$?QQPO<<K`O(vQQO<<K`O(vQQO<<K`O$?WQPO<<K`OOQO<<Ka<<KaO$?`QPO<<KaO(vQQO<<KaO(vQQO<<KaO$?eQPO<<KaO$?mQPO<<KcOOQO<<Kc<<KcO$?tQPO<<GlO$@SQPO<<K_O$AQQPO<<K`O$BOQPO<<KaO$B^QPO<<KcOOQO<<K_<<K_O$BhQPO<<K_OOQO<<K`<<K`O$BmQPO<<K`O$BrQQO1G0TOOQO7+'Q7+'QO$FeQSO,5:uO$JaQSO,5:vO$JwQQO,5:|O#,sQQO,5:}O$KXQQO,5:}O% OQQO,5=vOOQO7+&P7+&POOQO7+&Z7+&ZO% cQSO7+%oO%!xQPO,5;OOGpQQO7+%|O%!}QSO,5:iO%#[QQO1G1mP%$zQQO'#EdOOQO1G1m1G1mO%&`QQO'#D|OOQO1G0Y1G0YOOQO-E:g-E:gOOQO7+%s7+%sO%'uQWO7+%sOOQO-E:h-E:hOOQO7+'o7+'oO%(TQ`O7+'oOOQO-E:_-E:_OOQO1G/Q1G/QOOQO-E:`-E:`OOQO-E:a-E:aOOQO-E:b-E:bO%(cQPO7+%|O%*wQQO,5<vO#4rQQO'#GlO%+OQPO,5=}OOQO,5=P,5=POOQO-E:c-E:cOOQOAN=WAN=WO%+sQPOAN=WO(vQQOAN=WO(vQQOAN=WO(vQQOAN@yO(vQQOAN@yO%+xQPOAN@yOOQOAN@yAN@yO%,QQPOAN@yO(vQQOAN@zO(vQQOAN@zO%,VQPOAN@zOOQOAN@zAN@zO%,_QPOAN@zOOQOAN@{AN@{O%,dQPOAN@{O(vQQOAN@{O(vQQOAN@{OOQOAN@}AN@}O%,iQPOAN=WO%,qQPOAN@yO%-PQPOAN@zO%-_QPOAN@{O%-gQPOAN@}O%-nQQO7+%oO%3wQSO1G0bO%4bQSO1G0bO%8sQSO1G0bO%8}QSO1G0bO%9XQSO1G0bO%;lQSO1G0aO%<nQSO1G0aO%=OQSO1G0aO%=`QSO1G0aO%=jQQO1G0hOOQO1G0i1G0iOOQO'#Eh'#EhO%?SQQO'#EhO%?^QPO1G3bO%?fQPO<<IhO%@xQQO,5:hO%CcQQO1G0jOOQO<<I_<<I_OOQO<<KZ<<KZO(vQQO<<IhOOQO'#G^'#G^OOQO1G2b1G2bOOQO,5=W,5=WOOQO-E:j-E:jOOQOG22rG22rO%DcQPOG22rOOQOG26eG26eO%DhQPOG26eO(vQQOG26eO(vQQOG26eOOQOG26fG26fO%DmQPOG26fO(vQQOG26fO(vQQOG26fOOQOG26gG26gO%DrQPOG26gO(vQQOG22rO(vQQOG22rO%DwQPOG26eO%EPQPOG26fO(vQQOG26gO(vQQOG26gOOQOG26iG26iO%EXQSO1G1mO%FgQSO'#EdO%FnQSO'#D|O% OQQO'#GhO%FxQPO7+(|O%HUQQO,5:uOOQOAN?SAN?SO%HiQPOAN?SOOQOLD(^LD(^OOQOLD,PLD,PO%HnQPOLD,POOQOLD,QLD,QO%HsQPOLD,QOOQOLD,RLD,RO%HxQPOLD(^O(vQQOLD,PO(vQQOLD,PO(vQQOLD,QO(vQQOLD,QO%H}QPOLD,RO%ISQSO,5:hOOQO,5=S,5=SOOQO-E:f-E:fOOQOG24nG24nOOQO!$( k!$( kOOQO!$( l!$( lOOQO!$'Kx!$'KxO%I^QPO!$( kO%IcQPO!$( lOOQO!$( m!$( mOOQO!)9EV!)9EVOOQO!)9EW!)9EWO0fQPO'#DsO%IhQSO'#E[O& [QSO'#E[O&%yQSO'#E[O%IqQSO'#E[O%JOQSO'#E[O& iQSO'#E[OGpQQO'#EZO$KXQQO'#EZO$KXQQO'#EZO&&WQQO'#EZO(vQQO'#EZO&&WQQO'#EZOGpQQO'#EZO#)]QQO'#E[O&)}QQO'#EZO$JwQQO'#EZO&*_QQO'#EZO!EwQQO'#EZO% RQQO'#EZO&*oQQO'#EZO&.cQQO'#EZO&*_QQO,5;OP$JwQQO,5;OP!7YQQO,5;OP&)}QQO,5;OO% RQQO,5;OO&.cQQO,5;OP&*oQQO,5;OO#)]QQO,5:vO#)]QQO,5:vO#)]QQO,5:vO#)]QQO,5:vO#)]QQO,5:vO#)]QQO,5:vO&.sQSO,5:vO##oQSO,5:vO&/dQSO,5:vO!3RQQO,5:iO&)}QQO,5:uO$JwQQO,5:uO&*_QQO,5:uO!EwQQO,5:uO% RQQO,5:uO&*oQQO,5:uO&.cQQO,5:uO&)}QQO,5:uO$JwQQO,5:uO&*_QQO,5:uO!EwQQO,5:uO% RQQO,5:uO&*oQQO,5:uO&.cQQO,5:uO&)}QQO,5:uO$JwQQO,5:uO&*_QQO,5:uO!EwQQO,5:uO% RQQO,5:uO&*oQQO,5:uO&.cQQO,5:uO&)}QQO,5:uO$JwQQO,5:uO&*_QQO,5:uO!EwQQO,5:uO% RQQO,5:uO&*oQQO,5:uO&.cQQO,5:uO&)}QQO,5:uO$JwQQO,5:uO&*_QQO,5:uO!EwQQO,5:uO% RQQO,5:uO&*oQQO,5:uO&.cQQO,5:uO&)}QQO,5:tO$JwQQO,5:tO&)}QQO,5:sO$JwQQO,5:sO&)}QQO,5:rO&)}QQO,5:qOGpQQO,5<hO4wQQO'#GkO&3zQPO,5:hP&6VQSO1G0jO&8TQQO'#EhO!3RQQO1G0TO&)}QQO,5<RO$JwQQO,5<RO&*_QQO,5<RO!EwQQO,5<RO% RQQO,5<RO&*oQQO,5<RO&.cQQO,5<RO#,sQQO,5<RO&9oQQO1G0aO&9|QQO1G0aO&;}QQO1G0aO&=]QQO1G0aO&=mQQO1G0aO&?[QQO1G0aO&?lQQO1G0aO&@oQQO1G0aO&A}QQO1G0aO&CYQQO1G0aO&CjQQO1G0aO&CzQQO1G0aO&FqQQO1G0aO&GRQQO1G0aO&GcQQO1G0aO&HqQQO1G0aO&IeQQO1G0aO&JhQQO1G0aO&JxQQO1G0aO&LWQQO1G0aO&LeQQO1G0`O&NVQQO1G0`O&NyQQO1G0_O' WQQO1G0_O' xQQO1G0^O'!VQPO1G0]O'!kQQO,5=vO'#OQQO1G1mO'#rQQO1G1mO'%bQQO1G1mO''bQQO1G1mO''rQQO1G1mP')jQQO'#EdP')tQQO'#EdO'+SQQO'#EdO'-WQQO'#EdO'-eQQO'#EdO'-oQSO1G0aO'/TQSO1G0aO'/eQSO1G0aO'/uQSO1G0aO'0YQQO'#EhO'0dQQO1G0jP'0qQQO1G0jO'1qQQO1G0jP'2RQQO1G0jP'3RQQO1G0jO'3uQSO1G1mP'4YQSO'#EdO'!kQQO'#GhO'4jQPO7+(|O'){QPO'#EdO'4rQPO'#EdO'5QQPO'#EdO'5`QQO'#EYO'5gQQO'#EYO'6ZQQO'#EXO'6hQQO'#EXO'7YQQO'#EWO'7gQPO'#EVO'7{QPO'#EUO'8aQPO'#F|O'8fQPO'#D|O'9sQPO'#FgO'9xQPO'#FgO'9}QPO'#FgO':SQPO'#FgO':XQPO'#FgO':^QPO'#FgO':cQPO'#FgO#,sQQO,5<hO#,sQQO,5<hO':hQPO'#H[P#,sQQO,5<RO#,sQQO,5<RP#,sQQO,5<RO#,sQQO,5<RO#,sQQO,5<RO':mQPO1G3bO':uQQO,5:uO';VQQO,5:uP#,sQQO,5<RO'<cQPO'#EUO(vQQO,5<hO'<wQPO'#EUO'=YQPO'#F|OGpQQO,5<hO!@sQPO'#F|",
  stateData: "'=r~O%cOS%dOSPOSQOS~OVVOoWO!cZO!dYO$x[O$z]O$|^O%fPO~OZ`O[`O]`O^`O_`O~OobO!cdO!dcO$xeO$zfO%fPO~OWhOXhO~OUiOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!ipO!jpO!kpO!lpO!mpO%hjO~O!bsO~O!btO~OUiOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!ipO!jpO!kpO!lpO!mpO%huO%uvO~O&PzO&UyO~P%vOU!POb!OOc!OOd!OOe!OOf!OOg!OOh!OOi!OOj!OOk!OOm!jOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f!hO!ipO!jpO!kpO!lpO!mpO!s!gO!t!gO#_!kO$T!lO$X![O$Y!]O$c!mO$d!mO%h!QO%j!eO%l!fO%y!TO%z!YO&P!WO&R![O&S!]O~O%h!oOoYa!cYa!dYa$xYa$zYa%fYa~O!b!qO~O!b!rO~O&P!uO&U!tO~P%vO!n!hX%h%qX%u%qXV%qXo%qX!c%qX!d%qX$W%qX$x%qX$z%qX$|%qX%f%qX%a%qX~O&P%qX&U%qX~P.ZO!f!yO~O!n!hX%hpX%upX&PpX&UpXVpXopX!cpX!dpX$WpX$xpX$zpX$|pX%fpX%apX~O!n!zO~O%h!}O%uvO&P#PO&U#OO~Oo#RO!c#TO!d#SO$x#UO$z#VO%fPO~OUoOb!OOc!OOd!OOe!OOf!OOg!OOh!OOi!OOj!OOk!OOm!jOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!s!gO!t!gO%j!eO%l!fO%p#[O~O!f#YO~P1_OUoOb!OOc!OOd!OOe!OOf!OOg!OOh!OOi!OOj!OOk!OOm!jOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f!hO!s!gO!t!gO%j!eO%l!fO~O%t#^O~P4wO%h!}O%uvO&P!uO&U!tO~O$W#eO%uvO~P`O#Q%qX#X%qX#Y%qX#Z%qX#^%qX#_%qX#`%qX#a%qX#b%qX#c%qX#d%qX#e%qX#f%qX#g%qX#h%qX#i%qX#j%qX#k%qX#l%qX#m%qX#n%qX#o%qX#p%qX#q%qX#r%qX#s%qX#t%qX#u%qX#v%qX#w%qX#x%qX#y%qX#z%qX#{%qX#|%qX#}%qX$O%qX$P%qX$Q%qX$R%qX$[%qX$]%qX$^%qX$_%qX$`%qX$a%qX$b%qX$e%qX$f%qX$g%qX$h%qX$i%qX$j%qX$k%qX$l%qX$m%qX$n%qX$o%qX$r%qX$s%qX$}%qX%o%qX%x%qX%{%qX%|%qX%}%qX&Q%qX%p%qX$U%qX%t%qX$V%qX~P.ZOU!POb!OOc!OOd!OOe!OOf!OOg!OOh!OOi!OOj!OOk!OOm!jOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f#YO!ipO!jpO!kpO!lpO!mpO!s!gO!t!gO#_!kO$T!lO$X![O$Y*pO$c*xO$d*xO%h!QO%j!eO%l!fO%o#hO%p#gO%y!TO%z!YO%{#hO&P!WO&R![O&S*pO~O#Q#OX#Y#OX#Z#OX#^#OX#_#OX#`#OX#a#OX#b#OX#c#OX#d#OX#e#OX#f#OX#g#OX#h#OX#i#OX#j#OX#k#OX#l#OX#m#OX#n#OX#o#OX#p#OX#q#OX#r#OX#s#OX#t#OX#u#OX#v#OX#w#OX#x#OX#y#OX#z#OX#{#OX#|#OX#}#OX$O#OX$P#OX$Q#OX$R#OX$[#OX$]#OX$^#OX$_#OX$`#OX$a#OX$b#OX$e#OX$f#OX$g#OX$h#OX$i#OX$j#OX$k#OX$l#OX$m#OX$n#OX$o#OX$}#OX%h#OX%o#OX%u#OX%{#OX%}#OXV#OXo#OX!c#OX!d#OX$x#OX$z#OX$|#OX%a#OX%f#OX&Q#OX%p#OX$U#OX%t#OX#X#OX$W#OX$V#OX~O!n!hX%|#OX~PB]OU!POb!OOc!OOd!OOe!OOf!OOg!OOh!OOi!OOj!OOk!OOm!jOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f!hO!ipO!jpO!kpO!lpO!mpO!s!gO!t!gO#_!kO$T!lO$X![O$Y*pO$c*xO$d*xO%h!QO%j!eO%l!fO%y!TO%z!YO&P!WO&R![O&S*pO~O#X#lO%|#WX%p#WX~O#Q#oO#^#pO#_#qO#`#pO#a#pO#b#pO#c#pO#d#pO#e#pO#f#pO#g#qO#h#qO#i#qO#j#rO#k#qO#l#rO#m#sO#n#sO#o#sO#p#sO#q#tO#r#sO#s#sO#t#sO#u#sO#v#sO#w#sO#x#sO#y#sO#z#sO#{#sO#|#sO#}#sO$O#sO$P#sO$Q#sO$R#sO%h#nO%u#mO~O#Y!}X#Z!}X$[!}X$]!}X$^!}X$_!}X$`!}X$a!}X$b!}X$e!}X$f!}X$g!}X$h!}X$i!}X$j!}X$k!}X$l!}X$m!}X$n!}X$o!}X$}!}X%o!}X%{!}X%}!}XV!}Xo!}X!c!}X!d!}X$x!}X$z!}X$|!}X%a!}X%f!}X&Q!}X%p!}X$U!}X%t!}X$W!}X$V!}X~PLcO%o#uO%{#uO&Q#gO~P(vO#Q#OX#X!qX#Y#OX#Z#OX#^#OX#_#OX#`#OX#a#OX#b#OX#c#OX#d#OX#e#OX#f#OX#g#OX#h#OX#i#OX#j#OX#k#OX#l#OX#m#OX#n#OX#o#OX#p#OX#q#OX#r#OX#s#OX#t#OX#u#OX#v#OX#w#OX#x#OX#y#OX#z#OX#{#OX#|#OX#}#OX$O#OX$P#OX$Q#OX$R#OX$[#OX$]#OX$^#OX$_#OX$`#OX$a#OX$b#OX$e#OX$f#OX$g#OX$h#OX$i#OX$j#OX$k#OX$l#OX$m#OX$n#OX$o#OX$}#OX%h#OX%o!qX%o#OX%u#OX%{#OX%|!qX%}#OXV#OXo#OX!c#OX!d#OX$x#OX$z#OX$|#OX%a#OX%f#OX&Q#OX%p!qX%p#OX$U#OX%t#OX$W#OX$V#OX~O$r#xO$s#xO%x#wO~P!#zO%h#yO~O$[#|O$]#|O$^#}O$_#}O$`$OO$a$OO$b$OO$e$PO$f$PO$g$PO$h$QO$i$QO$j$QO$k$QO#Y!|X#Z!|X$l!|X$m!|X$n!|X$o!|X%{!|X%}!|X~O$}!|X%o!|XV!|Xo!|X!c!|X!d!|X$x!|X$z!|X$|!|X%a!|X%f!|X&Q!|X$U!|X$W!|X$V!|X~P!)pO#Y!{X#Z!{X$n!{X$o!{X%o!{X%{!{X%}!{X~O$l$RO$m$RO$}!{XV!{Xo!{X!c!{X!d!{X$x!{X$z!{X$|!{X%a!{X%f!{X&Q!{X$U!{X$W!{X$V!{X~P!,ZO#Y!zX#Z!zX%o!zX%{!zX%}!zX~O$n$SO$o$SO$}!zXV!zXo!zX!c!zX!d!zX$x!zX$z!zX$|!zX%a!zX%f!zX&Q!zX$U!zX$W!zX$V!zX~P!-xO%o$TO#Y!yX#Z!yX$}!yX%{!yX%}!yXV!yXo!yX!c!yX!d!yX$x!yX$z!yX$|!yX%a!yX%f!yX&Q!yX$U!yX$W!yX$V!yX~O#Y$VO#Z$VO%{$UO%}$VO$}!xXV!xXo!xX!c!xX!d!xX$x!xX$z!xX$|!xX%a!xX%f!xX&Q!xX$U!xX$W!xX$V!xX~O%|$WO~O!w$XO%v$[O%w$YO~O!w$XO%w$YO&T$^O~O%o$_O#X!pX%|!pX%p!pX~O%j$aO%l$bO%m$cO%n$dO~OU!POb!OOc!OOd!OOe!OOf!OOg!OOh!OOi!OOj!OOk!OOm!jOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!ipO!jpO!kpO!lpO!mpO!s!gO!t!gO#_!kO$T!lO$X![O%h$fO%j!eO%l!fO%y!TO%z!YO&P!WO&R![O~O$Y!]O$c!mO$d!mO&S!]O~P!3RO$}$jO~Ob!OOc!OOd!OOe!OOf!OOg!OOh!OOi!OOj!OOk!OOm!jO~O%h!}O%uvO&P$pO&U$oO~O%h!}O%uvO&P$uO&U$tO~O$W$|O%uvO~P`O%p$}O~O!n!zO%h!ga%u!gaV!gao!ga!c!ga!d!ga$W!ga$x!ga$z!ga$|!ga%f!ga%a!ga~O&P!ga&U!ga~P!9aO!f!hO~P1_O!b%SO~O!b%TO~O&P$uO&U$tO~P%vO%h!}O%uvO&P%YO&U%XOV$uio$ui!c$ui!d$ui$x$ui$z$ui$|$ui%a$ui%f$ui$W$ui~O%h!}O%uvO&P%^O&U%]OV$vio$vi!c$vi!d$vi$x$vi$z$vi$|$vi%a$vi%f$vi$W$vi~O%p$}O%o!qX#X!qX%|!qX~O%o!qX%p!qX#X!qX#Y!qX#Z!qX$[!qX$]!qX$^!qX$_!qX$`!qX$a!qX$b!qX$e!qX$f!qX$g!qX$h!qX$i!qX$j!qX$k!qX%}!qX~O$r+aO$s+aO%x%`O%t!qX$}!qXV!qXo!qX!c!qX!d!qX$x!qX$z!qX$|!qX%a!qX%f!qX&Q!qX%{!qX$l!qX$m!qX$n!qX$o!qX$U!qX$W!qX$V!qX~P!=]O%p%aO~O%t%bO~O&Q$wO~O$W$|O~P`O%p%cO%|,]O~O%p%dO~O%o%eO%p%dO%{%eO~O#Q!ga#Y!ga#Z!ga#^!ga#_!ga#`!ga#a!ga#b!ga#c!ga#d!ga#e!ga#f!ga#g!ga#h!ga#i!ga#j!ga#k!ga#l!ga#m!ga#n!ga#o!ga#p!ga#q!ga#r!ga#s!ga#t!ga#u!ga#v!ga#w!ga#x!ga#y!ga#z!ga#{!ga#|!ga#}!ga$O!ga$P!ga$Q!ga$R!ga$[!ga$]!ga$^!ga$_!ga$`!ga$a!ga$b!ga$e!ga$f!ga$g!ga$h!ga$i!ga$j!ga$k!ga$l!ga$m!ga$n!ga$o!ga$}!ga%o!ga%{!ga%}!ga&Q!ga%p!ga$U!ga%|!ga%t!ga#X!ga$V!ga~P!9aO%p%fO~OU!POqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!ipO!jpO!kpO!lpO!mpO!s!gO!t!gO#_*wO$T!lO$X![O$Y*sO$c*{O$d*{O%h$fO%j!eO%l!fO%y!TO%z!YO&P!WO&R![O&S*sO~P!7oOU!POqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f%nO!ipO!jpO!kpO!lpO!mpO!s!gO!t!gO#_!kO$T!lO$X![O$Y!]O$c!mO$d!mO%h!QO%j!eO%l!fO%t%rO%y!TO%z!YO&P!WO&R![O&S!]O~P!7oOU!POqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f%nO!ipO!jpO!kpO!lpO!mpO!s!gO!t!gO#_!kO$T!lO$X![O$Y*pO$c*xO$d*xO%h!QO%j!eO%l!fO%p%tO%y!TO%z!YO&P!WO&R![O&S*pO~P!7oO&Q%dO~O%o%|O%{%|O&Q%dO~O$r%}O$s%}O#Q#Oa#X!qa#Y#Oa#Z#Oa#^#Oa#_#Oa#`#Oa#a#Oa#b#Oa#c#Oa#d#Oa#e#Oa#f#Oa#g#Oa#h#Oa#i#Oa#j#Oa#k#Oa#l#Oa#m#Oa#n#Oa#o#Oa#p#Oa#q#Oa#r#Oa#s#Oa#t#Oa#u#Oa#v#Oa#w#Oa#x#Oa#y#Oa#z#Oa#{#Oa#|#Oa#}#Oa$O#Oa$P#Oa$Q#Oa$R#Oa$[#Oa$]#Oa$^#Oa$_#Oa$`#Oa$a#Oa$b#Oa$e#Oa$f#Oa$g#Oa$h#Oa$i#Oa$j#Oa$k#Oa$l#Oa$m#Oa$n#Oa$o#Oa$}#Oa%h#Oa%o!qa%u#Oa%{#Oa%|!qa%}#OaV#Oao#Oa!c#Oa!d#Oa$x#Oa$z#Oa$|#Oa%a#Oa%f#Oa&Q#Oa%p#Oa$U#Oa%t#Oa$W#Oa$V#Oa~O%o#Oa%p!qa~P##oOU!POqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!ipO!jpO!kpO!lpO!mpO!s!gO!t!gO#_*wO$T!lO$X![O%h$fO%j!eO%l!fO%y!TO%z!YO&P!WO&R![O~P!7oO%h&PO~P4wO%|&SO~O!w$XO%j&cO%v&aO%w$YO~O!w$XO%w$YO~O!w$XO%l&gO%w$YO&T&eO~O%o$_O#X!pa%|!pa%p!pa~O%j&mO%k&kO~O%j&nO%k&nO%l&mO~O%j&pO%k&pO%l&pO%m&mO~O%j&rO%k&rO%l&rO%m&rO%n&mO~O#Y#Oa#Z#Oa#_#Oa#`#Oa#a#Oa#b#Oa#c#Oa#d#Oa#e#Oa#f#Oa#g#Oa#h#Oa#i#Oa#j#Oa#k#Oa#l#Oa#m#Oa#n#Oa#o#Oa#p#Oa#q#Oa#r#Oa#s#Oa#t#Oa#u#Oa#v#Oa#w#Oa#x#Oa#y#Oa#z#Oa#{#Oa#|#Oa#}#Oa$O#Oa$P#Oa$Q#Oa$R#Oa$[#Oa$]#Oa$^#Oa$_#Oa$`#Oa$a#Oa$b#Oa$e#Oa$f#Oa$g#Oa$h#Oa$i#Oa$j#Oa$k#Oa$l#Oa$m#Oa$n#Oa$o#Oa$}#Oa%{#Oa%}#OaV#Oao#Oa!c#Oa!d#Oa$x#Oa$z#Oa$|#Oa%a#Oa%f#Oa&Q#Oa%p#Oa$U#Oa%t#Oa$W#Oa$V#Oa~O#Q#oO#^#pO%h#nO%u#mO%o#Oa#X#Oa~P#/XO%x&tO~PB]O$U&uO~OUoOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f&vO~O%x&xO~P#4rO%o&yO%p%iX~O%p&{O~O%h!}O%uvO&P&}O&U&|O~O%h!}O%uvO&P'TO&U'SOV$uqo$uq!c$uq!d$uq$x$uq$z$uq$|$uq%a$uq%f$uq$W$uq~O%h!}O%uvO&P'XO&U'WOV$vqo$vq!c$vq!d$vq$x$vq$z$vq$|$vq%a$vq%f$vq$W$vq~O&P'^O&U']O~O&Q'ZO~O%h!}O%uvO&P'^O&U']O~O$W'aO%uvO~P`O$W'aO~P`O&Q'PO~O%h!}O%uvO&P'TO&U'SO~O%h!}O%uvO&P'XO&U'WO~O%o!qa%p!qa#X!qa#Y!qa#Z!qa$[!qa$]!qa$^!qa$_!qa$`!qa$a!qa$b!qa$e!qa$f!qa$g!qa$h!qa$i!qa$j!qa$k!qa%}!qa~O$r,bO$s,bO%t!qa$}!qaV!qao!qa!c!qa!d!qa$x!qa$z!qa$|!qa%a!qa%f!qa&Q!qa%{!qa$l!qa$m!qa$n!qa$o!qa$U!qa$W!qa$V!qa~P#;eO%p'lO~O#Q+WO#^+XO#_+YO#`+XO#a+XO#b+XO#c+XO#d+XO#e+XO#f+XO#g+YO#h+YO#i+YO#j+ZO#k+YO#l+ZO#m+[O#n+[O#o+[O#p+[O#q+]O#r+[O#s+[O#t+[O#u+[O#v+[O#w+[O#x+[O#y+[O#z+[O#{+[O#|+[O#}+[O$O+[O$P+[O$Q+[O$R+[O%h#nO%u#mO~O$[!}X$]!}X$^!}X$_!}X$`!}X$a!}X$b!}X$e!}X$f!}X$g!}X$h!}X$i!}X$j!}X$k!}X%|!}X%p!}X#Y!}X#Z!}X%}!}X~P#>dO#Q#OX#^#OX#_#OX#`#OX#a#OX#b#OX#c#OX#d#OX#e#OX#f#OX#g#OX#h#OX#i#OX#j#OX#k#OX#l#OX#m#OX#n#OX#o#OX#p#OX#q#OX#r#OX#s#OX#t#OX#u#OX#v#OX#w#OX#x#OX#y#OX#z#OX#{#OX#|#OX#}#OX$O#OX$P#OX$Q#OX$R#OX$[#OX$]#OX$^#OX$_#OX$`#OX$a#OX$b#OX$e#OX$f#OX$g#OX$h#OX$i#OX$j#OX$k#OX%h#OX%u#OX%|#OX%p#OX#Y#OX#Z#OX%}#OX~O%x&tO#X#OX%o#OX~P#B`O$[+eO$]+eO$^+lO$_+lO$`+sO$a+sO$b+sO$e+zO$f+zO$g+zO$h,RO$i,RO$j,RO$k,RO~O%|#Wi%p#Wi~P#FeO$n,YO$o,YO#Y#UX#Z#UX%t#UX%{#UX%}#UX%p#UX~O#Y'pO#Z'pO%{'oO%}'pO%t#TX%p#TX~O%|'qO~O#X!qX%o!qX%o#[X%t#SX%|!qX%p#SX~O%o#[X%t!|X~P!)pO%o'rO~O%t'sO~O%p'tO~O#Q#oO#^#pO%h#nO%u#mO#Y#Oi#Z#Oi#_#Oi#g#Oi#h#Oi#i#Oi#j#Oi#k#Oi#l#Oi#m#Oi#n#Oi#o#Oi#p#Oi#q#Oi#r#Oi#s#Oi#t#Oi#u#Oi#v#Oi#w#Oi#x#Oi#y#Oi#z#Oi#{#Oi#|#Oi#}#Oi$O#Oi$P#Oi$Q#Oi$R#Oi$[#Oi$]#Oi$^#Oi$_#Oi$`#Oi$a#Oi$b#Oi$e#Oi$f#Oi$g#Oi$h#Oi$i#Oi$j#Oi$k#Oi$l#Oi$m#Oi$n#Oi$o#Oi$}#Oi%o#Oi%{#Oi%}#OiV#Oio#Oi!c#Oi!d#Oi$x#Oi$z#Oi$|#Oi%a#Oi%f#Oi&Q#Oi%p#Oi$U#Oi%t#Oi$W#Oi$V#Oi#X#Oi~O#`#Oi#a#Oi#b#Oi#c#Oi#d#Oi#e#Oi#f#Oi~P#IqO#`#pO#a#pO#b#pO#c#pO#d#pO#e#pO#f#pO~P#IqO#Q#oO#^#pO#_#qO#`#pO#a#pO#b#pO#c#pO#d#pO#e#pO#f#pO#g#qO#h#qO#i#qO#k#qO%h#nO%u#mO#Y#Oi#Z#Oi#m#Oi#n#Oi#o#Oi#p#Oi#q#Oi#r#Oi#s#Oi#t#Oi#u#Oi#v#Oi#w#Oi#x#Oi#y#Oi#z#Oi#{#Oi#|#Oi#}#Oi$O#Oi$P#Oi$Q#Oi$R#Oi$[#Oi$]#Oi$^#Oi$_#Oi$`#Oi$a#Oi$b#Oi$e#Oi$f#Oi$g#Oi$h#Oi$i#Oi$j#Oi$k#Oi$l#Oi$m#Oi$n#Oi$o#Oi$}#Oi%o#Oi%{#Oi%}#OiV#Oio#Oi!c#Oi!d#Oi$x#Oi$z#Oi$|#Oi%a#Oi%f#Oi&Q#Oi%p#Oi$U#Oi%t#Oi$W#Oi$V#Oi#X#Oi~O#j#Oi#l#Oi~P$ iO#j#rO#l#rO~P$ iO#Y#Oi#Z#Oi$[#Oi$]#Oi$^#Oi$_#Oi$`#Oi$a#Oi$b#Oi$e#Oi$f#Oi$g#Oi$h#Oi$i#Oi$j#Oi$k#Oi$l#Oi$m#Oi$n#Oi$o#Oi$}#Oi%o#Oi%{#Oi%}#OiV#Oio#Oi!c#Oi!d#Oi$x#Oi$z#Oi$|#Oi%a#Oi%f#Oi&Q#Oi%p#Oi$U#Oi%t#Oi$W#Oi$V#Oi#X#Oi~PLcO&Q'lO~O#X!qi%o!qi%|!qi%p!qi$[!qi$]!qi$^!qi$_!qi$`!qi$a!qi$b!qi$e!qi$f!qi$g!qi$h!qi$i!qi$j!qi$k!qi#Y!qi#Z!qi%}!qi~P#>dO%|'wO~O$r#xO$s#xO%x'xO%|!qX~P!=]O#Y!}i#Z!}i$^!}i$_!}i$`!}i$a!}i$b!}i$e!}i$f!}i$g!}i$h!}i$i!}i$j!}i$k!}i$l!}i$m!}i$n!}i$o!}i$}!}i%{!}i%}!}iV!}io!}i!c!}i!d!}i$x!}i$z!}i$|!}i%a!}i%f!}i&Q!}i$U!}i%t!}i$W!}i$V!}i~O$[#|O$]#|O%o!}i~P$+sO$[#|O$]#|O$^#}O$_#}O$`$OO$a$OO#Y!}i#Z!}i$h!}i$i!}i$j!}i$k!}i$l!}i$m!}i$n!}i$o!}i$}!}i%o!}i%{!}i%}!}iV!}io!}i!c!}i!d!}i$x!}i$z!}i$|!}i%a!}i%f!}i&Q!}i$U!}i%t!}i$W!}i$V!}i~O$b!}i$e!}i$f!}i$g!}i~P$.aO$b$OO$e$PO$f$PO$g$PO~P$.aO#Y!}i#Z!}i$l!}i$m!}i$n!}i$o!}i$}!}i%{!}i%}!}iV!}io!}i!c!}i!d!}i$x!}i$z!}i$|!}i%a!}i%f!}i&Q!}i$U!}i%t!}i$W!}i$V!}i~O$[#|O$]#|O$^#}O$_#}O$`$OO$a$OO$b$OO$e$PO$f$PO$g$PO$h$QO$i$QO$j$QO$k$QO%o!}i~P$1_O$[#|O$]#|O$^#}O$_#}O$`$OO$a$OO$b$OO$e$PO$f$PO$g$PO$h$QO$i$QO$j$QO$k$QO~O#Y!|i#Z!|i$l!|i$m!|i$n!|i$o!|i$}!|i%o!|i%{!|i%}!|iV!|io!|i!c!|i!d!|i$x!|i$z!|i$|!|i%a!|i%f!|i&Q!|i$U!|i$W!|i$V!|i~P$3{O#Y!{i#Z!{i$n!{i$o!{i%o!{i%{!{i%}!{i~O$l$RO$m$RO$}!{iV!{io!{i!c!{i!d!{i$x!{i$z!{i$|!{i%a!{i%f!{i&Q!{i$U!{i$W!{i$V!{i~P$6fO#Y!zi#Z!zi%o!zi%{!zi%}!zi~O$n$SO$o$SO$}!ziV!zio!zi!c!zi!d!zi$x!zi$z!zi$|!zi%a!zi%f!zi&Q!zi$U!zi$W!zi$V!zi~P$8TO%o$TO#Y!yi#Z!yi$}!yi%{!yi%}!yiV!yio!yi!c!yi!d!yi$x!yi$z!yi$|!yi%a!yi%f!yi&Q!yi$U!yi$W!yi$V!yi~O%p'}O~O!w$XO%j(PO%v&aO%w$YO~O!w$XO%l(SO%w$YO&T&eO~O%j(VO%k&kO~O%j&nO%k&nO%l(VO~O%j&pO%k&pO%l&pO%m(VO~O%j&rO%k&rO%l&rO%m&rO%n(VO~O%P([OV%OXo%OX!c%OX!d%OX$x%OX$z%OX$|%OX%a%OX%f%OX%o%OX$W%OX~O%o(]OV&VXo&VX!c&VX!d&VX$x&VX$z&VX$|&VX%a&VX%f&VX$W&VX~O%o&yO%p%ia~O&P(dO&U(cO~O&Q(aO~O%h!}O%uvO&P(fO&U(eO~O%h!}O%uvO&P(kO&U(jO~O&Q(oO~O&P(rO&U(qO~O$W(sO~P`O%h!}O%uvO&P(dO&U(cO~O%h!}O%uvO&P(fO&U(eOV$uyo$uy!c$uy!d$uy$x$uy$z$uy$|$uy%a$uy%f$uy$W$uy~O%h!}O%uvO&P(kO&U(jOV$vyo$vy!c$vy!d$vy$x$vy$z$vy$|$vy%a$vy%f$vy$W$vy~O%h!}O%uvO&P(rO&U(qO~O$W(sO%uvO~P`O&Q(hO~O&Q(mO~O%o!qi%p!qi%t!qi#X!qi$}!qiV!qio!qi!c!qi!d!qi$x!qi$z!qi$|!qi%a!qi%f!qi&Q!qi%{!qi#Y!qi#Z!qi$[!qi$]!qi$^!qi$_!qi$`!qi$a!qi$b!qi$e!qi$f!qi$g!qi$h!qi$i!qi$j!qi$k!qi$l!qi$m!qi$n!qi$o!qi%}!qi$U!qi$W!qi$V!qi~PLcO$[!}a$]!}a$^!}a$_!}a$`!}a$a!}a$b!}a$e!}a$f!}a$g!}a$h!}a$i!}a$j!}a$k!}a%p!}a~O#Y,jO#Z,jO%},jO%|!}a~P$EdO#_#Oa#`#Oa#a#Oa#b#Oa#c#Oa#d#Oa#e#Oa#f#Oa#g#Oa#h#Oa#i#Oa#j#Oa#k#Oa#l#Oa#m#Oa#n#Oa#o#Oa#p#Oa#q#Oa#r#Oa#s#Oa#t#Oa#u#Oa#v#Oa#w#Oa#x#Oa#y#Oa#z#Oa#{#Oa#|#Oa#}#Oa$O#Oa$P#Oa$Q#Oa$R#Oa$[#Oa$]#Oa$^#Oa$_#Oa$`#Oa$a#Oa$b#Oa$e#Oa$f#Oa$g#Oa$h#Oa$i#Oa$j#Oa$k#Oa%|#Oa%p#Oa#Y#Oa#Z#Oa%}#Oa~O#Q+WO#^+XO%h#nO%u#mO#X#Oa%o#Oa~P$FuO$Y*qO$c*yO$d*yO&S*qO~P!3ROU!POqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f!hO!ipO!jpO!kpO!lpO!mpO!s!gO!t!gO#_!kO$T!lO$X![O$Y*qO$c*yO$d*yO%h!QO%j!eO%l!fO%y!TO%z!YO&P!WO&R![O&S*qO~P!7oO!f)VO$Y*tO$c*|O$d*|O&S*tO~P!3RO#X!qq%o!qq%|!qq%p!qq$[!qq$]!qq$^!qq$_!qq$`!qq$a!qq$b!qq$e!qq$f!qq$g!qq$h!qq$i!qq$j!qq$k!qq#Y!qq#Z!qq%}!qq~P#>dO%p%cO~O$r%}O$s%}O%|!qa~P#;eO#Y$Zi#Z$Zi$l$Zi$m$Zi$n$Zi$o$Zi$}$Zi%o$Zi%{$Zi%}$ZiV$Zio$Zi!c$Zi!d$Zi$x$Zi$z$Zi$|$Zi%a$Zi%f$Zi&Q$Zi$U$Zi%t$Zi$W$Zi$V$Zi~P$3{O#X+RO~Q#WX#X!pX#Y!pX#Z!pX$[!pX$]!pX$^!pX$_!pX$`!pX$a!pX$b!pX$e!pX$f!pX$g!pX$h!pX$i!pX$j!pX$k!pX%}!pX%p!pX~O%o,^O$l!pX$m!pX$n!pX$o!pX$}!pX%{!pXV!pXo!pX!c!pX!d!pX$x!pX$z!pX$|!pX%a!pX%f!pX&Q!pX$U!pX%t!pX$W!pX$V!pX~P%%RO!w$XO%j)]O%v&aO%w$YO~O!w$XO%l)^O%w$YO&T&eO~O$V)_O~OUoOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO~O!f)`O~P%(hO%o(]OV&Vao&Va!c&Va!d&Va$x&Va$z&Va$|&Va%a&Va%f&Va$W&Va~O&Q)dO~O&P)iO&U)hO~O&Q)fO~O&P)mO&U)lO~O&Q)jO~O&Q)nO~O&P)qO&U)pO~O%h!}O%uvO&P)iO&U)hO~O%h!}O%uvO&P)mO&U)lO~O&P)uO&U)tO~O$W)vO~P`O%o!qq%p!qq%t!qq#X!qq$}!qqV!qqo!qq!c!qq!d!qq$x!qq$z!qq$|!qq%a!qq%f!qq&Q!qq%{!qq#Y!qq#Z!qq$[!qq$]!qq$^!qq$_!qq$`!qq$a!qq$b!qq$e!qq$f!qq$g!qq$h!qq$i!qq$j!qq$k!qq$l!qq$m!qq$n!qq$o!qq%}!qq$U!qq$W!qq$V!qq~PLcO#Q+WO#^+XO%h#nO%u#mO#_#Oi#g#Oi#h#Oi#i#Oi#j#Oi#k#Oi#l#Oi#m#Oi#n#Oi#o#Oi#p#Oi#q#Oi#r#Oi#s#Oi#t#Oi#u#Oi#v#Oi#w#Oi#x#Oi#y#Oi#z#Oi#{#Oi#|#Oi#}#Oi$O#Oi$P#Oi$Q#Oi$R#Oi$[#Oi$]#Oi$^#Oi$_#Oi$`#Oi$a#Oi$b#Oi$e#Oi$f#Oi$g#Oi$h#Oi$i#Oi$j#Oi$k#Oi%|#Oi#X#Oi%o#Oi%p#Oi#Y#Oi#Z#Oi%}#Oi~O#`#Oi#a#Oi#b#Oi#c#Oi#d#Oi#e#Oi#f#Oi~P%0`O#`+XO#a+XO#b+XO#c+XO#d+XO#e+XO#f+XO~P%0`O#Q+WO#^+XO#_+YO#`+XO#a+XO#b+XO#c+XO#d+XO#e+XO#f+XO#g+YO#h+YO#i+YO#k+YO%h#nO%u#mO#m#Oi#n#Oi#o#Oi#p#Oi#q#Oi#r#Oi#s#Oi#t#Oi#u#Oi#v#Oi#w#Oi#x#Oi#y#Oi#z#Oi#{#Oi#|#Oi#}#Oi$O#Oi$P#Oi$Q#Oi$R#Oi$[#Oi$]#Oi$^#Oi$_#Oi$`#Oi$a#Oi$b#Oi$e#Oi$f#Oi$g#Oi$h#Oi$i#Oi$j#Oi$k#Oi%|#Oi#X#Oi%o#Oi%p#Oi#Y#Oi#Z#Oi%}#Oi~O#j#Oi#l#Oi~P%4{O#j+ZO#l+ZO~P%4{O$[#Oi$]#Oi$^#Oi$_#Oi$`#Oi$a#Oi$b#Oi$e#Oi$f#Oi$g#Oi$h#Oi$i#Oi$j#Oi$k#Oi%|#Oi#X#Oi%o#Oi%p#Oi#Y#Oi#Z#Oi%}#Oi~P#>dO$^!}i$_!}i$`!}i$a!}i$b!}i$e!}i$f!}i$g!}i$h!}i$i!}i$j!}i$k!}i%|!}i%p!}i~O$[+eO$]+eO~P%:nO$[+eO$]+eO$^+lO$_+lO$`+sO$a+sO$h!}i$i!}i$j!}i$k!}i%|!}i%p!}i~O$b!}i$e!}i$f!}i$g!}i~P%;vO$b+sO$e+zO$f+zO$g+zO~P%;vO%|!}i%p!}i~P#FeO$n,YO$o,YO#Y#Ui#Z#Ui%t#Ui%{#Ui%}#Ui%p#Ui~O$[+fO$]+fO$^+mO$_+mO$`+tO$a+tO$b+tO$e+{O$f+{O$g+{O$h,SO$i,SO$j,SO$k,SO~O%o#[X%t#[X~P%>UO%o)zO%t&Oi~O%p)}O~O#X!pa#Y!pa#Z!pa$[!pa$]!pa$^!pa$_!pa$`!pa$a!pa$b!pa$e!pa$f!pa$g!pa$h!pa$i!pa$j!pa$k!pa%}!pa%p!pa~O%o,^O$l!pa$m!pa$n!pa$o!pa$}!pa%{!paV!pao!pa!c!pa!d!pa$x!pa$z!pa$|!pa%a!pa%f!pa&Q!pa$U!pa%t!pa$W!pa$V!pa~P%?kO$}#WiV#Wio#Wi!c#Wi!d#Wi$x#Wi$z#Wi$|#Wi%a#Wi%f#Wi&Q#Wi%p#Wi$U#Wi%t#Wi$W#Wi$V#Wi~O$[+dO$]+dO$^+kO$_+kO$`+rO$a+rO$b+rO$e+yO$f+yO$g+yO$h,QO$i,QO$j,QO$k,QO~P%B_O&Q*PO~O&Q*QO~O&Q*SO~O&Q*UO~O&P*XO&U*WO~O&P*ZO&U*YO~O%|$Zi%p$Zi~P#FeO$[#WX$]#WX$^#WX$_#WX$`#WX$a#WX$b#WX$e#WX$f#WX$g#WX$h#WX$i#WX$j#WX$k#WX%|#WX%p#WX~O#X#lO~P%EcO%o$_O%|!pX~P%%RO%o)zO%t&Oq~O$[!}a$]!}a$^!}a$_!}a$`!}a$a!}a$b!}a$e!}a$f!}a$g!}a$h!}a$i!}a$j!}a$k!}a%o!}a%{!}a~O#Y.ZO#Z.ZO%}.ZO%t!}a&Q!}a~P%GQO$W*`O~O&Q*aO~O&Q*bO~O&Q*cO~O&Q*fO~O%o$_O%|!pa~P%?kO&Q*gO~O&Q*hO~O$r#xO$s#xO%x+^O#X!qX%o!qX%|!qX~P#B`O#Q#OX#X!qX#Y#OX#Z#OX#^#OX#_#OX#`#OX#a#OX#b#OX#c#OX#d#OX#e#OX#f#OX#g#OX#h#OX#i#OX#j#OX#k#OX#l#OX#m#OX#n#OX#o#OX#p#OX#q#OX#r#OX#s#OX#t#OX#u#OX#v#OX#w#OX#x#OX#y#OX#z#OX#{#OX#|#OX#}#OX$O#OX$P#OX$Q#OX$R#OX$[#OX$]#OX$^#OX$_#OX$`#OX$a#OX$b#OX$e#OX$f#OX$g#OX$h#OX$i#OX$j#OX$k#OX$l#OX$m#OX$n#OX$o#OX%h#OX%o!qX%t#OX%u#OX%{#OX%|!qX%}#OX%p#OX$}#OXV#OXo#OX!c#OX!d#OX$x#OX$z#OX$|#OX%a#OX%f#OX&Q#OX$U#OX$W#OX$V#OX~O$r#xO$s#xO%x+_O~P%JOO#Q#OX#X!qX#Y#OX#Z#OX#^#OX#_#OX#`#OX#a#OX#b#OX#c#OX#d#OX#e#OX#f#OX#g#OX#h#OX#i#OX#j#OX#k#OX#l#OX#m#OX#n#OX#o#OX#p#OX#q#OX#r#OX#s#OX#t#OX#u#OX#v#OX#w#OX#x#OX#y#OX#z#OX#{#OX#|#OX#}#OX$O#OX$P#OX$Q#OX$R#OX$[#OX$]#OX$^#OX$_#OX$`#OX$a#OX$b#OX$e#OX$f#OX$g#OX$h#OX$i#OX$j#OX$k#OX$l#OX$m#OX$n#OX$o#OX%h#OX%o!qX%o#OX%p#OX%u#OX%{#OX%|!qX%}#OX~O$r#xO$s#xO%x+`O~P& iOU!POqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f!hO!ipO!jpO!kpO!lpO!mpO!s!gO!t!gO#_*wO$T!lO$X![O$Y*uO$c*}O$d*}O%h!QO%j!eO%l!fO%y!TO%z!YO&P!WO&R![O&S*uO~P!7oO$Y*pO$c*xO$d*xO&S*pO~P!3RO$Y*rO$c*zO$d*zO&S*rO~P!3ROU!POqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!ipO!jpO!kpO!lpO!mpO!s!gO!t!gO#_*wO$T!lO$X![O$Y*uO$c*}O$d*}O%h$fO%j!eO%l!fO%y!TO%z!YO&P!WO&R![O&S*uO~P!7oO$Y*vO$c+OO$d+OO&S*vO~P!3RO$r%}O$s%}O#Q#Oa#X!qa#^#Oa%h#Oa%o!qa%u#Oa%|!qa~P$FuO$r%}O$s%}O#Q#Oa#X!qa#Y#Oa#Z#Oa#^#Oa#_#Oa#`#Oa#a#Oa#b#Oa#c#Oa#d#Oa#e#Oa#f#Oa#g#Oa#h#Oa#i#Oa#j#Oa#k#Oa#l#Oa#m#Oa#n#Oa#o#Oa#p#Oa#q#Oa#r#Oa#s#Oa#t#Oa#u#Oa#v#Oa#w#Oa#x#Oa#y#Oa#z#Oa#{#Oa#|#Oa#}#Oa$O#Oa$P#Oa$Q#Oa$R#Oa$[#Oa$]#Oa$^#Oa$_#Oa$`#Oa$a#Oa$b#Oa$e#Oa$f#Oa$g#Oa$h#Oa$i#Oa$j#Oa$k#Oa$l#Oa$m#Oa$n#Oa$o#Oa%h#Oa%o!qa%o#Oa%p#Oa%u#Oa%{#Oa%|!qa%}#Oa~O%o,^O%p!pa%t!pa#X!pa$}!paV!pao!pa!c!pa!d!pa$x!pa$z!pa$|!pa%a!pa%f!pa&Q!pa%{!pa$U!pa$W!pa$V!pa~O$[+gO$]+gO$^+nO$_+nO$`+uO$a+uO$b+uO$e+|O$f+|O$g+|O$h,TO$i,TO$j,TO$k,TO~O#Y#Wi#Z#Wi%|#Wi%}#Wi%p#Wi~P&5XO$[+bO$]+bO$^+iO$_+iO$`+pO$a+pO$b+pO$e+wO$f+wO$g+wO$h,OO$i,OO$j,OO$k,OO#Y!|X#Z!|X$l!|X$m!|X$n!|X$o!|X%p!|X%{!|X%}!|X~O%o#[X~P&6jO#Y!}i#Z!}i$^!}i$_!}i$`!}i$a!}i$b!}i$e!}i$f!}i$g!}i$h!}i$i!}i$j!}i$k!}i$l!}i$m!}i$n!}i$o!}i%p!}i%{!}i%}!}i~O$[+bO$]+bO%o!}i~P&8[O$[+cO$]+cO%p!}i~P$+sO$[+dO$]+dO$b!}i$e!}i$f!}i$g!}i$h!}i$i!}i$j!}i$k!}i$}!}iV!}io!}i!c!}i!d!}i$x!}i$z!}i$|!}i%a!}i%f!}i&Q!}i%p!}i$U!}i%t!}i$W!}i$V!}i~O$^!}i$_!}i$`!}i$a!}i~P&:ZO$^!}i$_!}i$`!}i$a!}i$b!}i$e!}i$f!}i$g!}i$h!}i$i!}i$j!}i$k!}i%o!}i%{!}i~O$[+fO$]+fO%t!}i&Q!}i~P&<_O$[+hO$]+hO%p!}i~P&<_O$[+bO$]+bO$^+iO$_+iO$`+pO$a+pO#Y!}i#Z!}i$h!}i$i!}i$j!}i$k!}i$l!}i$m!}i$n!}i$o!}i%o!}i%p!}i%{!}i%}!}i~O$b!}i$e!}i$f!}i$g!}i~P&=zO$[+cO$]+cO$^+jO$_+jO$`+qO$a+qO$b!}i$e!}i$f!}i$g!}i$h!}i$i!}i$j!}i$k!}i%p!}i~P$1_O$^+kO$_+kO$`+rO$a+rO~P&:ZO$[+fO$]+fO$^+mO$_+mO$`+tO$a+tO$h!}i$i!}i$j!}i$k!}i%o!}i%t!}i%{!}i&Q!}i~O$b!}i$e!}i$f!}i$g!}i~P&APO$[+hO$]+hO$^+oO$_+oO$`+vO$a+vO$h!}i$i!}i$j!}i$k!}i%o!}i%p!}i%{!}i~O$b!}i$e!}i$f!}i$g!}i~P&B_O$b+pO$e+wO$f+wO$g+wO~P&=zO$[+cO$]+cO$^+jO$_+jO$`+qO$a+qO$b+qO$e+xO$f+xO$g+xO$h!}i$i!}i$j!}i$k!}i%p!}i~P$1_O$[+dO$]+dO$^+kO$_+kO$`+rO$a+rO$b+rO$e+yO$f+yO$g+yO$}!}iV!}io!}i!c!}i!d!}i$x!}i$z!}i$|!}i%a!}i%f!}i&Q!}i%p!}i$U!}i%t!}i$W!}i$V!}i~O$h!}i$i!}i$j!}i$k!}i~P&D}O$b+tO$e+{O$f+{O$g+{O~P&APO$b+vO$e+}O$f+}O$g+}O~P&B_O$[+bO$]+bO$^+iO$_+iO$`+pO$a+pO$b+pO$e+wO$f+wO$g+wO$h,OO$i,OO$j,OO$k,OO~O#Y!}i#Z!}i$l!}i$m!}i$n!}i$o!}i%o!}i%p!}i%{!}i%}!}i~P&GsO$[+cO$]+cO$^+jO$_+jO$`+qO$a+qO$b+qO$e+xO$f+xO$g+xO$h,PO$i,PO$j,PO$k,PO%p!}i~P$1_O$h,QO$i,QO$j,QO$k,QO~P&D}O%o!}i%t!}i%{!}i&Q!}i~P%>UO$[+hO$]+hO$^+oO$_+oO$`+vO$a+vO$b+vO$e+}O$f+}O$g+}O$h,UO$i,UO$j,UO$k,UO~O%o!}i%p!}i%{!}i~P&KYO#Y!|i#Z!|i$l!|i$m!|i$n!|i$o!|i%o!|i%p!|i%{!|i%}!|i~P&GsO$[+cO$]+cO$^+jO$_+jO$`+qO$a+qO$b+qO$e+xO$f+xO$g+xO$h,PO$i,PO$j,PO$k,PO~O#Y!|i#Z!|i$l!|i$m!|i$n!|i$o!|i%t!|i%{!|i%}!|i%p!|i~P&MXO$l,VO$m,VO%p!{i~P$6fO$l,WO$m,WO#Y!{i#Z!{i$n!{i$o!{i%t!{i%{!{i%}!{i%p!{i~O$n,XO$o,XO%p!zi~P$8TO%o,ZO#Y!yi#Z!yi%p!yi%{!yi%}!yi~O!f)VO$Y*vO$c+OO$d+OO&S*vO~P!3RO#Y$Zi#Z$Zi$l$Zi$m$Zi$n$Zi$o$Zi%o$Zi%p$Zi%{$Zi%}$Zi~P&GsO#Y$Zi#Z$Zi$l$Zi$m$Zi$n$Zi$o$Zi%t$Zi%{$Zi%}$Zi%p$Zi$}$ZiV$Zio$Zi!c$Zi!d$Zi$x$Zi$z$Zi$|$Zi%a$Zi%f$Zi&Q$Zi$U$Zi$W$Zi$V$Zi~P&MXO$[+dO$]+dO$^+kO$_+kO$`+rO$a+rO$b+rO$e+yO$f+yO$g+yO$h,QO$i,QO$j,QO$k,QO$}$ZiV$Zio$Zi!c$Zi!d$Zi$x$Zi$z$Zi$|$Zi%a$Zi%f$Zi&Q$Zi%p$Zi$U$Zi%t$Zi$W$Zi$V$Zi~O%o$Zi%t$Zi%{$Zi&Q$Zi~P%>UO%o$Zi%p$Zi%{$Zi~P&KYO#Y#WX#Z#WX$[#WX$]#WX$^#WX$_#WX$`#WX$a#WX$b#WX$e#WX$f#WX$g#WX$h#WX$i#WX$j#WX$k#WX$l#WX$m#WX$n#WX$o#WX%p#WX%{#WX%}#WX~O#X+SO%o#WX~P'(PO#X+QO~Q#WX#X+PO$}#WXV#WXo#WX!c#WX!d#WX$x#WX$z#WX$|#WX%a#WX%f#WX&Q#WX%p#WX$U#WX%t#WX$W#WX$V#WX~O$[#WX$]#WX$^#WX$_#WX$`#WX$a#WX$b#WX$e#WX$f#WX$g#WX$h#WX$i#WX$j#WX$k#WX~P'){O$[#WX$]#WX$^#WX$_#WX$`#WX$a#WX$b#WX$e#WX$f#WX$g#WX$h#WX$i#WX$j#WX$k#WX%o#WX%{#WX~O#X+TO%t#WX&Q#WX~P',SO#X+UO%p#WX~P',SO$[+gO$]+gO#Y!}i#Z!}i%}!}i~P%:nO$[+gO$]+gO$^+nO$_+nO$`+uO$a+uO#Y!}i#Z!}i$h!}i$i!}i$j!}i$k!}i%|!}i%}!}i%p!}i~O$b!}i$e!}i$f!}i$g!}i~P'.SO$b+uO$e+|O$f+|O$g+|O~P'.SO#Y!}i#Z!}i%|!}i%}!}i%p!}i~P&5XO%o#[X%p#[X~P&KYO%o#Wi%p#Wi%{#Wi~P&KYO$[+cO$]+cO$^+jO$_+jO$`+qO$a+qO$b+qO$e+xO$f+xO$g+xO$h,PO$i,PO$j,PO$k,PO~Q#Wi%o#Wi%{#Wi&Q#Wi%t#Wi~P%>UO$[#|O$]#|O$^#}O$_#}O$`$OO$a$OO$b$OO$e$PO$f$PO$g$PO$h$QO$i$QO$j$QO$k$QO~Q#Wi#Y#Wi#Z#Wi$l#Wi$m#Wi$n#Wi$o#Wi%o#Wi%p#Wi%{#Wi%}#Wi~P&GsO#Y$Zi#Z$Zi%|$Zi%}$Zi%p$Zi~P&5XO#X+VO#Y#WX#Z#WX%}#WX~P%EcO%o-nO%p&Oq~O#X+TO%o#WX%{#WX&Q#WX~O#X+UO%o#WX%p#WX%{#WX~O%o!|X~P&6jO#Y!|X#Z!|X$l!|X$m!|X$n!|X$o!|X%t!|X%{!|X%}!|X%p!|X~P&MXO$l,VO$m,VO%p!{X~P!,ZO$l,WO$m,WO#Y!{X#Z!{X$n!{X$o!{X%t!{X%{!{X%}!{X%p!{X~O$n,XO$o,XO%p!zX~P!-xO%o,ZO#Y!yX#Z!yX%p!yX%{!yX%}!yX~O#Y.TO#Z.TO%{,[O%}.TO%o!xX%p!xX~O%|.eO~O%o,^O%p!pX%t!pX#X!pX$}!pXV!pXo!pX!c!pX!d!pX$x!pX$z!pX$|!pX%a!pX%f!pX&Q!pX%{!pX$U!pX$W!pX$V!pX~O%|,cO~O%|,dO~O%|,eO~O%|,fO~O%|,gO~O%|,hO~O%|,iO~O%o-VO~O%o-nO%p&Oi~O#Y.[O#Z.[O%}.[O%p!}a~P%GQO#Y.XO#Z.XO%}.XO$}!}aV!}ao!}a!c!}a!d!}a$x!}a$z!}a$|!}a%a!}a%f!}a&Q!}a$U!}a%t!}a$W!}a$V!}a~P$EdO#Y.UO#Z.UO%{$UO%}.UO%o!xX&Q!xX~O#Y$VO#Z$VO%{,[O%}$VO%p!xX~O%|.bO~O%kd!n%x!sU%zXW&Tkj%vcbc!f%|~",
  goto: "!I_&WPPPP&X&gPPPP&uPPPPP'W'ZPPPPPPPPPP+bP/eP/hPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP0gP4f8ePPPPPP<d=Y?nArPPE}JOPJhNO! b!!v!$f!&X!,V4wP4w!0i!0o!0v!0{!1QPPP!3m4wPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP4wPPPPPP!3}PPPPPPPPPPPPPPPPPPPP!4XE}PP!5e&X&X&XP&XP&XPP!6uP!6{!7O!7h!7}!8T!8Z!8a!8g!8m!8w!:_!:i!:s!:}!;aPPPP!;gP!;uP!;xPPPPPPP!;{!@t!E]PPPPPPPPPP!0iPPPPPP!I[iSOU}!x#c#d$z${%V'`'f(xiXOU}!x#c#d$z${%V'`'f(xoQORUXr}!x#c#d$z${%V'`'f(xR$m!o(|!g^uvyz!Q!T!W!]!k!l!m!t!u!}#O#P#l#m#n#o#p#q#r#s#t#x#y#|#}$O$P$Q$R$S$T$U$V$W$Y$_$f$o$p$t$u%X%Y%]%^%}&P&S&T&u&|&}'S'T'W'X']'^'o'p'q'r'w(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u)z*W*X*Y*Z*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,T,U,V,W,X,Y,Z,[,],^,b,c,d,e,f,g,h,i,j-V-n.T.U.W.X.Y.Z.[.`.b.eQ$k!oR(_&y)R!O^uvyz!Q!T!W!]!k!l!m!o!t!u!}#O#P#l#m#n#o#p#q#r#s#t#x#y#|#}$O$P$Q$R$S$T$U$V$W$Y$_$f$o$p$t$u%X%Y%]%^%}&P&S&T&u&y&|&}'S'T'W'X']'^'o'p'q'r'w(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u)z*W*X*Y*Z*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,T,U,V,W,X,Y,Z,[,],^,b,c,d,e,f,g,h,i,j-V-n.T.U.W.X.Y.Z.[.`.b.eR$e!jQqWQ|[Q}]Q!pbQ!weQ!xfQ#WsQ#XtQ$r!qQ$s!rQ%R#RQ%U#UQ%V#VQ'c%SR'd%TnkW[]befst!q!r#R#U#V%S%T(V!S^yz!Q!T!W!]!k!l!m!t!u#O#P#l#m#n#o#p#q#r#s#t#x#|#}$O$P$Q$R$S$T$U$W$Y$f$o$p$t$u%X%Y%]%^%}&S&u&|&}'S'T'W'X']'^'o'q'r'w(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u)z*W*X*Y*Z*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,T,U,V,W,X,Y,Z,[,],b,c,d,e,f,g,h,i-V-n.b.enmW[]befst!q!r#R#U#V%S%T(V!Y^yz!Q!T!W!]!k!l!m!t!u#O#P#l#m#n#o#p#q#r#s#t#x#|#}$O$P$Q$R$S$T$U$W$Y$f$o$p$t$u%X%Y%]%^%}&S&u&|&}'S'T'W'X']'^'o'q'r'w(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u)z*W*X*Y*Z*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,T,U,V,W,X,Y,Z,[,],b,c,d,e,f,g,h,i-V-n.b.enlW[]befst!q!r#R#U#V%S%T(V*i^yz!Q!T!W!]!k!l!m!t!u#O#P#l#m#n#o#p#q#r#s#t#x#|#}$O$P$Q$R$S$T$U$W$Y$f$o$p$t$u%X%Y%]%^%}&S&u&|&}'S'T'W'X']'^'o'q'r'w(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u)z*W*X*Y*Z*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,T,U,V,W,X,Y,Z,[,],b,c,d,e,f,g,h,i-V-n.b.e!gw[eqx|}!p!s!w!x!|#U#W#X#c$n$r$s$y$z%R%U%V%W%['R'V'b'c'd'e'f(u(v#|!U^yz!Q!T!W!]!l!t!u#O#P#m#n#y$W$Y$f$o$p$t$u%X%Y%]%^&u&|&}'S'T'W'X']'^'q'w(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u*W*X*Y*Z*p*q*r*s*t*u*v,].b.eS#]u!}Q#_vQ'z&TQ)x,jQ-].WQ-^.YQ-_.XQ-`.ZQ-a.[Q-m.`U-p$V&P'pQ-q.UR-r.T#|!i^yz!Q!T!W!]!l!t!u#O#P#m#n#y$W$Y$f$o$p$t$u%X%Y%]%^&u&|&}'S'T'W'X']'^'q'w(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u*W*X*Y*Z*p*q*r*s*t*u*v,].b.eS&i$_,^['|&T.W.X.Y.Z.[S)y,j.`a-{uv!}$V&P'p.T.U%Y!Y!k!m#l#o#p#q#r#s#t#x#|#}$O$P$Q$R$S$T$U%}&S'o'r)z*w*x*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,T,U,V,W,X,Y,Z,[,b,c,d,e,f,g,h,i-V-n#^!Z^yz!Q!W!]!l!t!u#O#P#m$W$o$p$t$u%X%Y%]%^&u&|&}'S'T'W'X']'^(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u*W*X*Y*Z*t.bv!huv!}#y$V$_&P&T'p,^,j.T.U.W.X.Y.Z.[.`S*m*s*uU*n'q*q*rc*o!T#n$Y$f'w*p*v,].e(}!g^uvyz!Q!T!W!]!k!l!m!t!u!}#O#P#l#m#n#o#p#q#r#s#t#x#y#|#}$O$P$Q$R$S$T$U$V$W$Y$_$f$o$p$t$u%X%Y%]%^%}&P&S&T&u&|&}'S'T'W'X']'^'o'p'q'r'w(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u)z*W*X*Y*Z*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,T,U,V,W,X,Y,Z,[,],^,b,c,d,e,f,g,h,i,j-V-n.T.U.W.X.Y.Z.[.`.b.eQ$Z!eQ$]!fW&a$Z&b&d(QQ&d$[W&e$]&f&h(TR&h$^Q!n^Q#ayQ#bzS#i!Q$fQ#k!TQ#v!WQ$i!lQ$w!tQ$x!uQ%P#OQ%Q#PW&_$W,].b.eQ&`$YQ'P$oQ'Q$pQ'Z$tQ'[$uQ'g%XQ'h%YQ'i%]Q'j%^Q(Z&uQ(a&|Q(b&}Q(h'SQ(i'TQ(m'WQ(n'XQ(o']Q(p'^Q)Y'wQ)d(cQ)e(dQ)f(eQ)g(fQ)j(jQ)k(kQ)n(qQ)o(rQ*O)_Q*P)pQ*Q)hQ*R)iQ*S)lQ*T)mQ*U)tQ*V)qQ*[)uQ*a*WQ*b*YQ*d*XR*e*Z#Q!b^yz!l!t!u#O#P$W$o$p$t$u%X%Y%]%^&u&|&}'S'T'W'X']'^(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u*W*X*Y*ZU-y!Q$f,]S.a!W.bX.c!T$Y'w.e#U!a^yz!W!l!t!u#O#P$W$o$p$t$u%X%Y%]%^&u&|&}'S'T'W'X']'^(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u*W*X*Y*Z.bQ&^$UQ-U,[_-x!Q!T$Y$f'w,].e#W!`^yz!W!l!t!u#O#P$U$W$o$p$t$u%X%Y%]%^&u&|&}'S'T'W'X']'^(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u*W*X*Y*Z.bU%j#m#n'qQ&]$TQ)T'oQ-T,Za-w!Q!T$Y$f'w,[,].e#Y!_^yz!W!l!t!u#O#P$T$U$W$o$p$t$u%X%Y%]%^&u&|&}'S'T'W'X']'^(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u*W*X*Y*Z.bQ&[$SQ-R,XQ-S,Yb-u!Q!T$Y$f'w,Z,[,].eX-v#m#n'o'q#[!^^yz!W!l!t!u#O#P$S$T$U$W$o$p$t$u%X%Y%]%^&u&|&}'S'T'W'X']'^(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u*W*X*Y*Z.bh#{!]!m*p*q*u*x*y*z*{*|*}+OQ%i#lQ%p#m`&U#|+b+c+d+e+f+g+hQ&V#}Q&W$OQ&X$PQ&Y$QQ&Z$RQ'm*sQ'y&SQ)P+lQ)Q+sQ)R+zQ)S,RS)W'r)zQ)[+PQ)w,fQ)|*tQ,`+VQ,a#nQ,k+iQ,l+jQ,m+kQ,n+mQ,o+oQ,p+pQ,q+qQ,r+rQ,s+tQ,t+vQ,u+wQ,v+xQ,w+yQ,x+{Q,y+}Q,z,OQ,{,PQ,|,QQ,},SQ-O,UQ-P,VQ-Q,WQ-W,cQ-X,dQ-Y,eQ-Z,gQ-[,iQ-b+nQ-c+uQ-d+|Q-e,TS-f-V-nQ-g+UQ-h+QQ-i+TQ-j+RQ-k+SQ-l,hd-s!Q!T$Y$f'w,X,Z,[,].eU-t'o'q,YQ.^*vR._*r&j!V^yz!Q!T!W!]!l!m!t!u#O#P#m#n#|#}$O$P$Q$R$S$T$U$W$Y$f$o$p$t$u%X%Y%]%^&S&u&|&}'S'T'W'X']'^'o'q'r'w(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u)z*W*X*Y*Z*p*q*r*t*v*x*y*z*|+O+P+Q+R+S+T+U+b+c+d+f+h+i+j+k+m+o+p+q+r+t+v+w+x+y+{+},O,P,Q,S,U,V,W,X,Y,Z,[,],c,d,e,g,i-V-n.b.eQ$g!kt%g#l*s*u*{*}+V+e+g+l+n+s+u+z+|,R,T,f,hS%v#o+WQ%w#pQ%x#qQ%y#rQ%z#sQ%{#tQ&O#xQ'k+aQ'n*wQ'u%}Q(y,bQ(z+XQ({+YQ(|+ZQ(}+[R)O+]Q%s#mR%u#nS%o#m#nR)U'qV%k#m#n'qV%m#m#n'q#Q!c^yz!l!t!u#O#P$W$o$p$t$u%X%Y%]%^&u&|&}'S'T'W'X']'^(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u*W*X*Y*ZQ#f!QQ#z!]U%l#m#n'qQ&Q#yU&_$V.T.UQ'v&P`'{&T,j.W.X.Y.Z.[.`Q)U'pW-z!T$Y'w.eQ-|*pQ-}*qQ.O*rQ.P*sQ.Q*tQ.R*uQ.S*vS.d!W.bT.f$f,]Q%q#mQ)X'rS*^)z-nQ.V#nR.]-Va#{!]*p*q*r*s*t*u*v#e!d^yz!Q!T!W!l!t!u#O#P$W$Y$f$o$p$t$u%X%Y%]%^&u&|&}'S'T'W'X']'^'w(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u*W*X*Y*Z,].b.eQ{[U!vex|Q#QqS$q!p!|U$v!s!w#UQ%Z#WQ%_#XS'O$n%RS'U$r%WS'Y$s%[S'_$y%US(g'R'cS(l'V'dQ(t'bQ(w'eQ)r(uR)s(vQ&w$jR)b(]R)a([QUOYgU#d${'`(xQ#d}S${!x#cS'`$z%VR(x'fhROU}!x#c#d$z${%V'`'f(xSaRrRrXQ&l$aR(U&lQ&o$bR(W&oQ&q$cR(X&qQ&s$dR(Y&sQ&z$kR(`&zQ!{lQ#j*iT%O!{#jQx[S!se|Q!|qp#`x!s!|#c$n$y$z%W%['R'V'b'e'f(u(vQ#c}Q$n!pS$y!w#UQ$z!xQ%W#WQ%[#XQ'R$rQ'V$sQ'b%RQ'e%UQ'f%VQ(u'cR(v'dQ){)XS*_){-oR-o.]Q&b$ZS(O&b(QR(Q&dQ&f$]S(R&f(TR(T&hQ$`!iW&j$`)Z*],_Q)Z'|Q*])yR,_-{Q(^&wR)c(^iTOU}!x#c#d$z${%V'`'f(xR_PR$l!onmW[]befst!q!r#R#U#V%S%T#^!X^yz!Q!W!]!l!t!u#O#P#m$W$o$p$t$u%X%Y%]%^&u&|&}'S'T'W'X']'^(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u*W*X*Y*Z*t.bn#Zuv!}$V&P&T'p,^.T.U.W.X.Y.Z.[$U$h!k!m#o#p#q#r#s#t#|#}$O$P$Q$R$S$T$U&S'o'r)z*x*y*z*|+O+P+Q+R+S+T+U+a+b+c+d+f+h+i+j+k+m+o+p+q+r+t+v+w+x+y+{+},O,P,Q,S,U,V,W,X,Y,Z,[,b,c,d,e,g,i-V-n!S%h#l#x%}*w*{*}+V+W+X+Y+Z+[+]+e+g+l+n+s+u+z+|,R,T,f,hW&R#y$_,j.`S&v$j(]Q)`([S*j*s*uU*k'q*q*rc*l!T#n$Y$f'w*p*v,].eniW[]befst!q!r#R#U#V%S%T|ouv!}#y$V$_$j&P&T'p([(],^,j.T.U.W.X.Y.Z.[.`(V!P^yz!Q!T!W!]!k!l!m!t!u#O#P#l#m#n#o#p#q#r#s#t#x#|#}$O$P$Q$R$S$T$U$W$Y$f$o$p$t$u%X%Y%]%^%}&S&u&|&}'S'T'W'X']'^'o'q'r'w(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u)z*W*X*Y*Z*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,T,U,V,W,X,Y,Z,[,],b,c,d,e,f,g,h,i-V-n.b.enkW[]befst!q!r#R#U#V%S%T(V!R^yz!Q!T!W!]!k!l!m!t!u#O#P#l#m#n#o#p#q#r#s#t#x#|#}$O$P$Q$R$S$T$U$W$Y$f$o$p$t$u%X%Y%]%^%}&S&u&|&}'S'T'W'X']'^'o'q'r'w(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u)z*W*X*Y*Z*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,T,U,V,W,X,Y,Z,[,],b,c,d,e,f,g,h,i-V-n.b.eR&x$j",
  nodeNames: "⚠ LineComment BlockComment Rel DefinitionStatement Docstring BasicId Keyword DocstringLiteral MultilineDocstringLiteral Attribute AttributeKeyword AttributeKeyword AttributeKeyword AttributeKeyword AttributeKeyword AttributeParams BaseLiteral IntLiteral FloatLiteral RelnameLiteral RelnameStringLiteral RelnameMultilineStringLiteral StaticStringLiteral StaticMultilineStringLiteral CharLiteral DateLiteral DateTimeLiteral RawStringLiteral Keyword RawStringSequence Keyword LhsId Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Keyword Keyword Keyword ParenOpId Operator QualifiedName QualifiedNameId Emphasis Emphasis Emphasis Emphasis Emphasis QualifiedNameElem FormalParamsBracket FormalParams FormalParam Literal BooleanLiteral SpecializeIntLiteral InterpolationLiteral Interpolation InterpolationId Expression UnionExpression JoinExpression OverrideExpression RestrictExpression LogicalExpression BasicExpression SpecializeExpression OperatorKeyword PartialApplicationExpression NocommaParam NocommaExpression NocommaUnionExpression NocommaAbstractExpression Bindings Keyword Keyword Keyword LogicalParam ApplicationExpression OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword BoundedExpression Keyword Keyword Keyword Keyword Keyword Keyword LogicalAbstractExpression Keyword OperatorKeyword Keyword OperatorKeyword Keyword OperatorKeyword OperatorKeyword Keyword OperatorKeyword Keyword OperatorKeyword OperatorKeyword Keyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword AbstractExpression InterpolationMultilineLiteral Keyword OperatorKeyword FormalParamsParen ValueTypeStatement EntityTypeStatement ConstraintStatement Keyword ModuleStatement Keyword UseStatement Keyword Keyword Alias Keyword AliasId",
  maxTerm: 237,
  nodeProps: [
    ["group", -6,4,175,176,177,179,181,"Declaration"]
  ],
  skippedNodes: [0,1,2],
  repeatNodeCount: 14,
  tokenData: "&-^~R#vOX)iXY6kYZ:oZ[6k[])i]^:o^p)ipq6kqr;[rs=Sst!*vtu)iuv!3cvw)iwx!5Pxy!?dyz!@_z{!AY{|!BT|}!DR}!O!AY!O!P!D|!P!Q!LZ!Q!R$ b!R![$@{![!]$B`!]!^%8d!^!_%9_!_!`%;i!`!a%<f!a!b)i!b!c%=g!c!}%>b!}#O%Ap#O#P%Bk#P#Q%DO#Q#R%Dy#R#S%HP#S#T)i#T#Y%>b#Y#Z%Ip#Z#h%>b#h#i&$b#i#o%>b#o#p&'|#p#q&(w#q#r&)r#r$f)i$f$g6k$g$r)i$r$s!AY$s%o)i%o%p!AY%p&a)i&a&b!AY&b4w)i4w5b%>b5b5i)i5i6S%>b6S#BY)i#BY#BZ6k#BZ$IS)i$IS$I_6k$I_$I|)i$I|$I}&*m$I}$JO&*m$JO$JT)i$JT$JU6k$JU$KV)i$KV$KW6k$KW%#t)i%#t%#u!AY%#u%#v)i%#v%#w!AY%#w%%U)i%%U%%V!AY%%V%%W)i%%W%%X!AY%%X%%Y)i%%Y%%Z!AY%%Z%%[)i%%[%%]!AY%%]%&Y)i%&Y%&Z&+h%&Z%&])i%&]%&^&,c%&^%&b)i%&b%&c!AY%&c%'R)i%'R%'S!AY%'S%'T!AY%'T%'U!AY%'U%'V!AY%'V%'h)i%'h%'i!AY%'i%'t)i%'t%'u!AY%'u%(^)i%(^%(_!AY%(_%(`!AY%(`%(a!AY%(a%(b)i%(b%(c!AY%(c%(d!AY%(d%(x)i%(x%(y!AY%(y%(z!AY%(z%({!AY%({%(|!AY%(|%)Q)i%)Q%)R!AY%)R%)S!AY%)S%)U)i%)U%)V!AY%)V%)W!AY%)W%)c)i%)c%)d!AY%)d%)e!AY%)e%)f!AY%)f%)g)i%)g%)h!AY%)h%)i)i%)i%)j!AY%)j%*])i%*]%*^!AY%*^&FU)i&FU&FV6k&FV?HT)i?HT?HU6k?HU~)i!Y)rY%kp&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bh*iY&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b`+^U&T`Or+Xrs+psu+Xv#O+X#O#P,i#P~+X`+sUOr+Xrs,Vsu+Xv#O+X#O#P,i#P~+X`,YTOr+Xsu+Xv#O+X#O#P,i#P~+X`,ldrs+Xuv+Xwx+X!Q!R-z!R!S-z!S!T-z!T!U-z!U!Y.i!w!x/W#O#P+X#T#U+X#U#V+X#X#Y+X#Y#Z+X#b#c+X#f#g+X#h#i+X#i#j0Y#j#k+X#l#m0r`.PW&T`Or+Xrs+psu+Xv!Q+X!Q!Y.i!Y#O+X#O#P,i#P~+X`.nW&T`Or+Xrs+psu+Xv!Q+X!Q!Y+X!Y#O+X#O#P,i#P~+X`/ZR!Q![/d!c!i/d#T#Z/d`/gR!Q![/p!c!i/p#T#Z/p`/sR!Q![/|!c!i/|#T#Z/|`0PR!Q![0Y!c!i0Y#T#Z0Y`0]R!Q![0f!c!i0f#T#Z0f`0iR!Q![0r!c!i0r#T#Z0r`0uR!Q![1O!c!i1O#T#Z1O`1RR!Q![+X!c!i+X#T#Z+Xh1_drs*buv*bwx*b!Q!R2m!R!S2m!S!T2m!T!U2m!U!Y3j!w!x4g#O#P*b#T#U*b#U#V*b#X#Y*b#Y#Z*b#b#c*b#f#g*b#h#i*b#i#j5i#j#k*b#l#m6Rh2t[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y3j!Y#O*b#O#P1[#P~*bh3q[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y*b!Y#O*b#O#P1[#P~*bh4jR!Q![4s!c!i4s#T#Z4sh4vR!Q![5P!c!i5P#T#Z5Ph5SR!Q![5]!c!i5]#T#Z5]h5`R!Q![5i!c!i5i#T#Z5ih5lR!Q![5u!c!i5u#T#Z5uh5xR!Q![6R!c!i6R#T#Z6Rh6UR!Q![6_!c!i6_#T#Z6_h6bR!Q![*b!c!i*b#T#Z*b~6vl%kp%c~&T`%vWOX*bXY8nYZ+XZ[8n[]*b]^+X^p*bpq8nqr*brs+psu*bv#O*b#O#P1[#P$f*b$f$g8n$g#BY*b#BY#BZ8n#BZ$IS*b$IS$I_8n$I_$JT*b$JT$JU8n$JU$KV*b$KV$KW8n$KW&FU*b&FU&FV8n&FV?HT*b?HT?HU8n?HU~*b~8wl%c~&T`%vWOX*bXY8nYZ+XZ[8n[]*b]^+X^p*bpq8nqr*brs+psu*bv#O*b#O#P1[#P$f*b$f$g8n$g#BY*b#BY#BZ8n#BZ$IS*b$IS$I_8n$I_$JT*b$JT$JU8n$JU$KV*b$KV$KW8n$KW&FU*b&FU&FV8n&FV?HT*b?HT?HU8n?HU~*b~:xU%kp%d~&T`Or+Xrs+psu+Xv#O+X#O#P,i#P~+X!`;e[%kp&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!_*b!_!`<Z!`#O*b#O#P1[#P~*bn<dY&T`%vW!fUOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!a=XZ%j!OOY=zYZ+XZ]=z]^+X^r=zrsJQsu=zuv?]v#O=z#O#PDo#P~=zc>PZ&T`OY=zYZ+XZ]=z]^+X^r=zrs>rsu=zuv?]v#O=z#O#PDo#P~=zc>yUgQWPOr+Xrs,Vsu+Xv#O+X#O#P,i#P~+XP?`VOY?]Z]?]^r?]rs?us#O?]#O#P?z#P~?]P?zOWPP?}drs?]uv?]wx?]!Q!RA]!R!SA]!S!TA]!T!UA]!U!YA{!w!xBk#O#P?]#T#U?]#U#V?]#X#Y?]#Y#Z?]#b#c?]#f#g?]#h#i?]#i#jCm#j#k?]#l#mDVPA`XOY?]Z]?]^r?]rs?us!Q?]!Q!YA{!Y#O?]#O#P?z#P~?]PBOXOY?]Z]?]^r?]rs?us!Q?]!Q!Y?]!Y#O?]#O#P?z#P~?]PBnR!Q![Bw!c!iBw#T#ZBwPBzR!Q![CT!c!iCT#T#ZCTPCWR!Q![Ca!c!iCa#T#ZCaPCdR!Q![Cm!c!iCm#T#ZCmPCpR!Q![Cy!c!iCy#T#ZCyPC|R!Q![DV!c!iDV#T#ZDVPDYR!Q![Dc!c!iDc#T#ZDcPDfR!Q![?]!c!i?]#T#Z?]cDrdrs=zuv=zwx=z!Q!RFQ!R!SFQ!S!TFQ!T!UFQ!U!YGO!w!xG|#O#P=z#T#U=z#U#V=z#X#Y=z#Y#Z=z#b#c=z#f#g=z#h#i=z#i#jIO#j#k=z#l#mIhcFV]&T`OY=zYZ+XZ]=z]^+X^r=zrs>rsu=zuv?]v!Q=z!Q!YGO!Y#O=z#O#PDo#P~=zcGT]&T`OY=zYZ+XZ]=z]^+X^r=zrs>rsu=zuv?]v!Q=z!Q!Y=z!Y#O=z#O#PDo#P~=zcHPR!Q![HY!c!iHY#T#ZHYcH]R!Q![Hf!c!iHf#T#ZHfcHiR!Q![Hr!c!iHr#T#ZHrcHuR!Q![IO!c!iIO#T#ZIOcIRR!Q![I[!c!iI[#T#ZI[cI_R!Q![Ih!c!iIh#T#ZIhcIkR!Q![It!c!iIt#T#ZItcIwR!Q![=z!c!i=z#T#Z=z!XJXUgQWPOr+XrsJksu+Xv#O+X#O#P,i#P~+X!XJpV%l!WOrKVrs!)csuKVuvLxv#OKV#O#P!$n#P~KVRKYVOrKVrsKosuKVuvLxv#OKV#O#P!$n#P~KVRKrVOrKVrsLXsuKVuvLxv#OKV#O#P!$n#P~KVRL[VOrKVrsLqsuKVuvLxv#OKV#O#P!$n#P~KVRLxOhQXPPL{TOrLxrsM[s#OLx#O#PNV#P~LxPM_TOrLxrsMns#OLx#O#PNV#P~LxPMqTOrLxrsNQs#OLx#O#PNV#P~LxPNVOXPPNYdrsLxuvLxwxLx!Q!R! h!R!S! h!S!T! h!T!U! h!U!Y!!Q!w!x!!j#O#PLx#T#ULx#U#VLx#X#YLx#Y#ZLx#b#cLx#f#gLx#h#iLx#i#j!#l#j#kLx#l#m!$UP! kVOrLxrsM[s!QLx!Q!Y!!Q!Y#OLx#O#PNV#P~LxP!!TVOrLxrsM[s!QLx!Q!YLx!Y#OLx#O#PNV#P~LxP!!mR!Q![!!v!c!i!!v#T#Z!!vP!!yR!Q![!#S!c!i!#S#T#Z!#SP!#VR!Q![!#`!c!i!#`#T#Z!#`P!#cR!Q![!#l!c!i!#l#T#Z!#lP!#oR!Q![!#x!c!i!#x#T#Z!#xP!#{R!Q![!$U!c!i!$U#T#Z!$UP!$XR!Q![!$b!c!i!$b#T#Z!$bP!$eR!Q![Lx!c!iLx#T#ZLxR!$qdrsKVuvKVwxKV!Q!R!&P!R!S!&P!S!T!&P!T!U!&P!U!Y!&o!w!x!'_#O#PKV#T#UKV#U#VKV#X#YKV#Y#ZKV#b#cKV#f#gKV#h#iKV#i#j!(a#j#kKV#l#m!(yR!&SXOrKVrsKosuKVuvLxv!QKV!Q!Y!&o!Y#OKV#O#P!$n#P~KVR!&rXOrKVrsKosuKVuvLxv!QKV!Q!YKV!Y#OKV#O#P!$n#P~KVR!'bR!Q![!'k!c!i!'k#T#Z!'kR!'nR!Q![!'w!c!i!'w#T#Z!'wR!'zR!Q![!(T!c!i!(T#T#Z!(TR!(WR!Q![!(a!c!i!(a#T#Z!(aR!(dR!Q![!(m!c!i!(m#T#Z!(mR!(pR!Q![!(y!c!i!(y#T#Z!(yR!(|R!Q![!)V!c!i!)V#T#Z!)VR!)YR!Q![KV!c!iKV#T#ZKVw!)fVOrKVrs!){suKVuvLxv#OKV#O#P!$n#P~KVw!*QV%mtOrKVrs!*gsuKVuvLxv#OKV#O#P!$n#P~KVw!*nPhQXPrs!*qt!*vO%nt![!+P_%kp&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bvx*bxy!,Oy!Q*b!Q!R!,w!R![!.S![#O*b#O#P1[#P~*bj!,XY%yQ&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bj!-Q`!tQ&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!.S![#O*b#O#P1[#P#c*b#c#d!/R#d#l*b#l#m!0}#m~*bj!.][!tQ&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!.S![#O*b#O#P1[#P~*bj!/Y[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y!0O!Y#O*b#O#P1[#P~*bj!0X[!tQ&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y!0O!Y#O*b#O#P1[#P~*bj!1U`&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!2W![!c*b!c!i!2W!i#O*b#O#P1[#P#T*b#T#Z!2W#Z~*bj!2a`!tQ&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!2W![!c*b!c!i!2W!i#O*b#O#P1[#P#T*b#T#Z!2W#Z~*b!a!3jU%kp!fUxy!3|!c!}!4R#R#S!4j#T#o!4R4w5b!4R5i6S!4Ri!4RO%wii!4WU!wi!Q![!4R!c!}!4R#R#S!4R#T#o!4R4w5b!4R5i6S!4Ri!4mU!Q![!4R!c!}!4R#R#S!4R#T#o!4R4w5b!4R5i6S!4R![!5Y]%kp&T`%vWOY!6RYZ!7wZ]!6R]^!7w^r!6Rrs!9Psu!6Ruv!9lvw!6Rwx*bx#O!6R#O#P!9w#P~!6Rj!6Y[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bvw*bwx!7Ox#O*b#O#P1[#P~*bj!7XYiQ&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bb!7|W&T`Or+Xrs+psu+Xvw+Xwx!8fx#O+X#O#P,i#P~+Xb!8mUiQ&T`Or+Xrs+psu+Xv#O+X#O#P,i#P~+Xb!9SWOr+Xrs,Vsu+Xvw+Xwx!8fx#O+X#O#P,i#P~+XQ!9oPwx!9rQ!9wOiQj!9zdrs!6Ruv!6Rwx!6R!Q!R!;Y!R!S!;Y!S!T!;Y!T!U!;Y!U!Y!<]!w!x!=`#O#P!6R#T#U!6R#U#V!6R#X#Y!6R#Y#Z!6R#b#c!6R#f#g!6R#h#i!6R#i#j!>b#j#k!6R#l#m!>zj!;a^&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bvw*bwx!7Ox!Q*b!Q!Y!<]!Y#O*b#O#P1[#P~*bj!<d^&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bvw*bwx!7Ox!Q*b!Q!Y!6R!Y#O*b#O#P1[#P~*bj!=cR!Q![!=l!c!i!=l#T#Z!=lj!=oR!Q![!=x!c!i!=x#T#Z!=xj!={R!Q![!>U!c!i!>U#T#Z!>Uj!>XR!Q![!>b!c!i!>b#T#Z!>bj!>eR!Q![!>n!c!i!>n#T#Z!>nj!>qR!Q![!>z!c!i!>z#T#Z!>zj!>}R!Q![!?W!c!i!?W#T#Z!?Wj!?ZR!Q![!6R!c!i!6R#T#Z!6R!a!?oY%hV%kp&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!a!@jY%pV%kp&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!`!AeY%kp&T`%vW!fUOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!`!B`[%kp&T`%vW!fUOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|!CU|#O*b#O#P1[#P~*bn!C][&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!`*b!`!a<Z!a#O*b#O#P1[#P~*b!a!D^Y%oV%kp&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!`!EX^%kp&T`%vW!fUOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!FT!P!Q*b!Q![!Gy![#O*b#O#P1[#P~*bn!F[[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!GQ!P#O*b#O#P1[#P~*bn!GZY%xU&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bj!HS`&T`%vWcQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!Gy![!g*b!g!h!IU!h#O*b#O#P1[#P#X*b#X#Y!IU#Y~*bj!I]`&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|!J_|}*b}!O!J_!O!Q*b!Q![!K[![#O*b#O#P1[#P~*bj!Jf[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!K[![#O*b#O#P1[#P~*bj!Ke[&T`%vWcQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!K[![#O*b#O#P1[#P~*b~!Lf^%kp&T`%vW!fUOY*bYZ+XZ]*b]^+X^r*brs+psu*bvz*bz{!Mb{!P*b!P!Q#9i!Q#O*b#O#P1[#P~*b~!Mi]&T`%vWOY!MbYZ!NbZ]!Mb]^!Nb^r!Mbrs# Ssu!Mbuv#!bvz!Mbz{#-r{#O!Mb#O#P#/q#P~!Mb~!NgX&T`Or!Nbrs# Ssu!Nbuv#!bvz!Nbz{##V{#O!Nb#O#P#$h#P~!Nb~# VXOr!Nbrs# rsu!Nbuv#!bvz!Nbz{##V{#O!Nb#O#P#$h#P~!Nb~# uXOr!Nbrs#!bsu!Nbuv#!bvz!Nbz{##V{#O!Nb#O#P#$h#P~!Nb~#!eROz#!bz{#!n{~#!b~#!qTOz#!bz{#!n{!P#!b!P!Q##Q!Q~#!b~##VOQ~~##[Z&T`Or!Nbrs# Ssu!Nbuv#!bvz!Nbz{##V{!P!Nb!P!Q##}!Q#O!Nb#O#P#$h#P~!Nb~#$UUQ~&T`Or+Xrs+psu+Xv#O+X#O#P,i#P~+X~#$ksOr#!brs!Nbsu#!buv!Nbvw#!bwx!Nbxz#!bz{#!n{!Q#!b!Q!R#&x!R!S#&x!S!T#&x!T!U#&x!U!Y#'p!Y!w#!b!w!x#(h!x#O#!b#O#P!Nb#P#T#!b#T#U!Nb#U#V!Nb#V#X#!b#X#Y!Nb#Y#Z!Nb#Z#b#!b#b#c!Nb#c#f#!b#f#g!Nb#g#h#!b#h#i!Nb#i#j#+U#j#k!Nb#k#l#!b#l#m#,d#m~#!b~#&}Z&T`Or!Nbrs# Ssu!Nbuv#!bvz!Nbz{##V{!Q!Nb!Q!Y#'p!Y#O!Nb#O#P#$h#P~!Nb~#'uZ&T`Or!Nbrs# Ssu!Nbuv#!bvz!Nbz{##V{!Q!Nb!Q!Y!Nb!Y#O!Nb#O#P#$h#P~!Nb~#(kXOz#!bz{#!n{!Q#!b!Q![#)W![!c#!b!c!i#)W!i#T#!b#T#Z#)W#Z~#!b~#)ZXOz#!bz{#!n{!Q#!b!Q![#)v![!c#!b!c!i#)v!i#T#!b#T#Z#)v#Z~#!b~#)yXOz#!bz{#!n{!Q#!b!Q![#*f![!c#!b!c!i#*f!i#T#!b#T#Z#*f#Z~#!b~#*iXOz#!bz{#!n{!Q#!b!Q![#+U![!c#!b!c!i#+U!i#T#!b#T#Z#+U#Z~#!b~#+XXOz#!bz{#!n{!Q#!b!Q![#+t![!c#!b!c!i#+t!i#T#!b#T#Z#+t#Z~#!b~#+wXOz#!bz{#!n{!Q#!b!Q![#,d![!c#!b!c!i#,d!i#T#!b#T#Z#,d#Z~#!b~#,gXOz#!bz{#!n{!Q#!b!Q![#-S![!c#!b!c!i#-S!i#T#!b#T#Z#-S#Z~#!b~#-VXOz#!bz{#!n{!Q#!b!Q![!Nb![!c#!b!c!i!Nb!i#T#!b#T#Z!Nb#Z~#!b~#-y_&T`%vWOY!MbYZ!NbZ]!Mb]^!Nb^r!Mbrs# Ssu!Mbuv#!bvz!Mbz{#-r{!P!Mb!P!Q#.x!Q#O!Mb#O#P#/q#P~!Mb~#/RYQ~&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b~#/tsOr#!brs!Mbsu#!buv!Mbvw#!bwx!Mbxz#!bz{#!n{!Q#!b!Q!R#2R!R!S#2R!S!T#2R!T!U#2R!U!Y#3X!Y!w#!b!w!x#4_!x#O#!b#O#P!Mb#P#T#!b#T#U!Mb#U#V!Mb#V#X#!b#X#Y!Mb#Y#Z!Mb#Z#b#!b#b#c!Mb#c#f#!b#f#g!Mb#g#h#!b#h#i!Mb#i#j#6{#j#k!Mb#k#l#!b#l#m#8Z#m~#!b~#2Y_&T`%vWOY!MbYZ!NbZ]!Mb]^!Nb^r!Mbrs# Ssu!Mbuv#!bvz!Mbz{#-r{!Q!Mb!Q!Y#3X!Y#O!Mb#O#P#/q#P~!Mb~#3`_&T`%vWOY!MbYZ!NbZ]!Mb]^!Nb^r!Mbrs# Ssu!Mbuv#!bvz!Mbz{#-r{!Q!Mb!Q!Y!Mb!Y#O!Mb#O#P#/q#P~!Mb~#4bXOz#!bz{#!n{!Q#!b!Q![#4}![!c#!b!c!i#4}!i#T#!b#T#Z#4}#Z~#!b~#5QXOz#!bz{#!n{!Q#!b!Q![#5m![!c#!b!c!i#5m!i#T#!b#T#Z#5m#Z~#!b~#5pXOz#!bz{#!n{!Q#!b!Q![#6]![!c#!b!c!i#6]!i#T#!b#T#Z#6]#Z~#!b~#6`XOz#!bz{#!n{!Q#!b!Q![#6{![!c#!b!c!i#6{!i#T#!b#T#Z#6{#Z~#!b~#7OXOz#!bz{#!n{!Q#!b!Q![#7k![!c#!b!c!i#7k!i#T#!b#T#Z#7k#Z~#!b~#7nXOz#!bz{#!n{!Q#!b!Q![#8Z![!c#!b!c!i#8Z!i#T#!b#T#Z#8Z#Z~#!b~#8^XOz#!bz{#!n{!Q#!b!Q![#8y![!c#!b!c!i#8y!i#T#!b#T#Z#8y#Z~#!b~#8|XOz#!bz{#!n{!Q#!b!Q![!Mb![!c#!b!c!i!Mb!i#T#!b#T#Z!Mb#Z~#!b~#9rZP~&T`%vWOY#9iYZ+XZ]#9i]^#:e^r#9irs#;Xsu#9iuv#<kv#O#9i#O#P#E{#P~#9i~#:lXP~&T`OY#:eYZ+XZr#:ers#;Xsu#:euv#<kv#O#:e#O#P#<v#P~#:e~#;^XP~OY#:eYZ+XZr#:ers#;ysu#:euv#<kv#O#:e#O#P#<v#P~#:e~#<OXP~OY#:eYZ+XZr#:ers#<ksu#:euv#<kv#O#:e#O#P#<v#P~#:e~#<pQP~OY#<kZ~#<k~#<{rP~OY#<kZr#<krs#:esu#<kuv#:evw#<kwx#:ex!Q#<k!Q!R#?V!R!S#?V!S!T#?V!T!U#?V!U!Y#@P!Y!w#<k!w!x#@y!x#O#<k#O#P#:e#P#T#<k#T#U#:e#U#V#:e#V#X#<k#X#Y#:e#Y#Z#:e#Z#b#<k#b#c#:e#c#f#<k#f#g#:e#g#h#<k#h#i#:e#i#j#Cc#j#k#:e#k#l#<k#l#m#Do#m~#<k~#?^ZP~&T`OY#:eYZ+XZr#:ers#;Xsu#:euv#<kv!Q#:e!Q!Y#@P!Y#O#:e#O#P#<v#P~#:e~#@WZP~&T`OY#:eYZ+XZr#:ers#;Xsu#:euv#<kv!Q#:e!Q!Y#:e!Y#O#:e#O#P#<v#P~#:e~#AOWP~OY#<kZ!Q#<k!Q![#Ah![!c#<k!c!i#Ah!i#T#<k#T#Z#Ah#Z~#<k~#AmWP~OY#<kZ!Q#<k!Q![#BV![!c#<k!c!i#BV!i#T#<k#T#Z#BV#Z~#<k~#B[WP~OY#<kZ!Q#<k!Q![#Bt![!c#<k!c!i#Bt!i#T#<k#T#Z#Bt#Z~#<k~#ByWP~OY#<kZ!Q#<k!Q![#Cc![!c#<k!c!i#Cc!i#T#<k#T#Z#Cc#Z~#<k~#ChWP~OY#<kZ!Q#<k!Q![#DQ![!c#<k!c!i#DQ!i#T#<k#T#Z#DQ#Z~#<k~#DVWP~OY#<kZ!Q#<k!Q![#Do![!c#<k!c!i#Do!i#T#<k#T#Z#Do#Z~#<k~#DtWP~OY#<kZ!Q#<k!Q![#E^![!c#<k!c!i#E^!i#T#<k#T#Z#E^#Z~#<k~#EcWP~OY#<kZ!Q#<k!Q![#:e![!c#<k!c!i#:e!i#T#<k#T#Z#:e#Z~#<k~#FQrP~OY#<kZr#<krs#9isu#<kuv#9ivw#<kwx#9ix!Q#<k!Q!R#H[!R!S#H[!S!T#H[!T!U#H[!U!Y#I^!Y!w#<k!w!x#J`!x#O#<k#O#P#9i#P#T#<k#T#U#9i#U#V#9i#V#X#<k#X#Y#9i#Y#Z#9i#Z#b#<k#b#c#9i#c#f#<k#f#g#9i#g#h#<k#h#i#9i#i#j#Lx#j#k#9i#k#l#<k#l#m#NU#m~#<k~#He]P~&T`%vWOY#9iYZ+XZ]#9i]^#:e^r#9irs#;Xsu#9iuv#<kv!Q#9i!Q!Y#I^!Y#O#9i#O#P#E{#P~#9i~#Ig]P~&T`%vWOY#9iYZ+XZ]#9i]^#:e^r#9irs#;Xsu#9iuv#<kv!Q#9i!Q!Y#9i!Y#O#9i#O#P#E{#P~#9i~#JeWP~OY#<kZ!Q#<k!Q![#J}![!c#<k!c!i#J}!i#T#<k#T#Z#J}#Z~#<k~#KSWP~OY#<kZ!Q#<k!Q![#Kl![!c#<k!c!i#Kl!i#T#<k#T#Z#Kl#Z~#<k~#KqWP~OY#<kZ!Q#<k!Q![#LZ![!c#<k!c!i#LZ!i#T#<k#T#Z#LZ#Z~#<k~#L`WP~OY#<kZ!Q#<k!Q![#Lx![!c#<k!c!i#Lx!i#T#<k#T#Z#Lx#Z~#<k~#L}WP~OY#<kZ!Q#<k!Q![#Mg![!c#<k!c!i#Mg!i#T#<k#T#Z#Mg#Z~#<k~#MlWP~OY#<kZ!Q#<k!Q![#NU![!c#<k!c!i#NU!i#T#<k#T#Z#NU#Z~#<k~#NZWP~OY#<kZ!Q#<k!Q![#Ns![!c#<k!c!i#Ns!i#T#<k#T#Z#Ns#Z~#<k~#NxWP~OY#<kZ!Q#<k!Q![#9i![!c#<k!c!i#9i!i#T#<k#T#Z#9i#Z~#<k![$ mf%kp&T`%vWbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!Gy!P!Q*b!Q![$#R![!g*b!g!h!IU!h#O*b#O#P1[#P#X*b#X#Y!IU#Y#c*b#c#d$<k#d#l*b#l#m$>g#m~*bj$#[b&T`%vWbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!Gy!P!Q*b!Q![$$d![!g*b!g!h!IU!h#O*b#O#P1[#P#X*b#X#Y!IU#Y~*bj$$mb&T`%vWbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!Gy!P!Q*b!Q![$%u![!g*b!g!h!IU!h#O*b#O#P1[#P#X*b#X#Y!IU#Y~*bj$&Oc&T`%vWbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv}*b}!O$'Z!O!P!Gy!P!Q*b!Q![$;Y![!g*b!g!h!IU!h#O*b#O#P1[#P#X*b#X#Y!IU#Y~*bj$'b[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$(W![#O*b#O#P1[#P~*bj$(_[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$)T![#O*b#O#P1[#P~*bj$)[[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv}*b}!O$*Q!O#O*b#O#P1[#P~*bj$*X[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$*}![#O*b#O#P1[#P~*bj$+U[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$+z![#O*b#O#P1[#P~*bj$,T[&T`jQ%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!v*b!v!w$,y!w#O*b#O#P1[#P~*bj$-Q[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$-v![#O*b#O#P1[#P~*bj$-}[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$.s![#O*b#O#P1[#P~*bj$.z[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv![*b![!]$/p!]#O*b#O#P1[#P~*bj$/w[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$0m![#O*b#O#P1[#P~*bj$0t[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$1j![#O*b#O#P1[#P~*bj$1q[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv![*b![!]$2g!]#O*b#O#P1[#P~*bj$2n[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$3d![#O*b#O#P1[#P~*bj$3k[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$4a![#O*b#O#P1[#P~*bj$4hb&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|$5p|}*b}!O$5p!O!Q*b!Q![$6m![!|*b!|!}$:a!}#O*b#O#P1[#P~*bj$5w[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$6m![#O*b#O#P1[#P~*bj$6t[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$7j![#O*b#O#P1[#P~*bj$7q[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv![*b![!]$8g!]#O*b#O#P1[#P~*bj$8n[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$9d![#O*b#O#P1[#P~*bj$9k[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$:a![#O*b#O#P1[#P~*bj$:jY&T`kQ%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bj$;cb&T`%vWbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!Gy!P!Q*b!Q![$;Y![!g*b!g!h!IU!h#O*b#O#P1[#P#X*b#X#Y!IU#Y~*bj$<r[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y$=h!Y#O*b#O#P1[#P~*bj$=q[&T`%vWbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y$=h!Y#O*b#O#P1[#P~*bj$>n`&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$?p![!c*b!c!i$?p!i#O*b#O#P1[#P#T*b#T#Z$?p#Z~*bj$?y`&T`%vWbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$?p![!c*b!c!i$?p!i#O*b#O#P1[#P#T*b#T#Z$?p#Z~*b![$AWb%kp&T`%vWbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!Gy!P!Q*b!Q![$#R![!g*b!g!h!IU!h#O*b#O#P1[#P#X*b#X#Y!IU#Y~*b!a$Bki%kp&T`%vW%|TOY*bYZ+XZ]*b]^+X^r*brs$DYsu*bvx*bxy%$Qy!`*b!`!a<Z!a!c*b!c!}%1|!}#O%3m#O#P1[#P#Q*b#Q#R%5`#R#S%6u#S#T*b#T#o%1|#o4w*b4w5b%1|5b5i*b5i6S%1|6S~*bb$D]YOY$D{YZ+XZ]$D{]^+X^r$D{rs$Kdsu$D{v#O$D{#O#P$FX#P~$D{b$EQY&T`OY$D{YZ+XZ]$D{]^+X^r$D{rs$Epsu$D{v#O$D{#O#P$FX#P~$D{b$EuUeQOr+Xrs,Vsu+Xv#O+X#O#P,i#P~+Xb$F[drs$D{uv$D{wx$D{!Q!R$Gj!R!S$Gj!S!T$Gj!T!U$Gj!U!Y$He!w!x$I`#O#P$D{#T#U$D{#U#V$D{#X#Y$D{#Y#Z$D{#b#c$D{#f#g$D{#h#i$D{#i#j$Jb#j#k$D{#l#m$Jzb$Go[&T`OY$D{YZ+XZ]$D{]^+X^r$D{rs$Epsu$D{v!Q$D{!Q!Y$He!Y#O$D{#O#P$FX#P~$D{b$Hj[&T`OY$D{YZ+XZ]$D{]^+X^r$D{rs$Epsu$D{v!Q$D{!Q!Y$D{!Y#O$D{#O#P$FX#P~$D{b$IcR!Q![$Il!c!i$Il#T#Z$Ilb$IoR!Q![$Ix!c!i$Ix#T#Z$Ixb$I{R!Q![$JU!c!i$JU#T#Z$JUb$JXR!Q![$Jb!c!i$Jb#T#Z$Jbb$JeR!Q![$Jn!c!i$Jn#T#Z$Jnb$JqR!Q![$Jz!c!i$Jz#T#Z$Jzb$J}R!Q![$KW!c!i$KW#T#Z$KWb$KZR!Q![$D{!c!i$D{#T#Z$D{b$KiUeQOr+Xrs$K{su+Xv#O+X#O#P,i#P~+XQ$LOUOr$K{rs$Lbsu$K{v#O$K{#O#P$Mc#P~$K{Q$LeUOr$K{rs$Lwsu$K{v#O$K{#O#P$Mc#P~$K{Q$LzUOr$K{rs$M^su$K{v#O$K{#O#P$Mc#P~$K{Q$McOfQQ$Mfdrs$K{uv$K{wx$K{!Q!R$Nt!R!S$Nt!S!T$Nt!T!U$Nt!U!Y% a!w!x% |#O#P$K{#T#U$K{#U#V$K{#X#Y$K{#Y#Z$K{#b#c$K{#f#g$K{#h#i$K{#i#j%#O#j#k$K{#l#m%#hQ$NwWOr$K{rs$Lbsu$K{v!Q$K{!Q!Y% a!Y#O$K{#O#P$Mc#P~$K{Q% dWOr$K{rs$Lbsu$K{v!Q$K{!Q!Y$K{!Y#O$K{#O#P$Mc#P~$K{Q%!PR!Q![%!Y!c!i%!Y#T#Z%!YQ%!]R!Q![%!f!c!i%!f#T#Z%!fQ%!iR!Q![%!r!c!i%!r#T#Z%!rQ%!uR!Q![%#O!c!i%#O#T#Z%#OQ%#RR!Q![%#[!c!i%#[#T#Z%#[Q%#_R!Q![%#h!c!i%#h#T#Z%#hQ%#kR!Q![%#t!c!i%#t#T#Z%#tQ%#wR!Q![$K{!c!i$K{#T#Z$K{m%$X!v&T`%vWOY*bYZ+XZ]*b]^+X^q*bqr%)ors+psu*buv%,bvz*bz{%*l{|%,m|}*b}!O%*l!O!P%*l!P!Q%*l!Q![*b![!]%-p!]!^*b!^!_%.m!_!`%*l!`!a%0y!a#O*b#O#P1[#P#Q*b#Q#R%*l#R$r*b$r$s%*l$s%o*b%o%p%*l%p&a*b&a&b%*l&b%#t*b%#t%#u%*l%#u%#v*b%#v%#w%*l%#w%%U*b%%U%%V%*l%%V%%W*b%%W%%X%*l%%X%%Y*b%%Y%%Z%*l%%Z%%[*b%%[%%]%*l%%]%&b*b%&b%&c%*l%&c%'R*b%'R%'S%*l%'S%'T%*l%'T%'U%*l%'U%'V%*l%'V%'h*b%'h%'i%*l%'i%'t*b%'t%'u%*l%'u%(^*b%(^%(_%*l%(_%(`%*l%(`%(a%*l%(a%(b*b%(b%(c%*l%(c%(d%*l%(d%(x*b%(x%(y%*l%(y%(z%*l%(z%({%*l%({%(|%*l%(|%)Q*b%)Q%)R%*l%)R%)S%*l%)S%)U*b%)U%)V%*l%)V%)W%*l%)W%)c*b%)c%)d%*l%)d%)e%*l%)e%)f%*l%)f%)g*b%)g%)h%*l%)h%)i*b%)i%)j%*l%)j%*]*b%*]%*^%*l%*^~*bm%)v[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!_*b!_!`%*l!`#O*b#O#P1[#P~*bm%*s[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bvy*byz%+iz#O*b#O#P1[#P~*bm%+rY!nT&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bT%,ePyz%,hT%,mO!nTm%,t^&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bvy*byz%+iz{*b{|%-p|#O*b#O#P1[#P~*bm%-w[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!`*b!`!a%*l!a#O*b#O#P1[#P~*bm%.tb&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bvy*byz%+iz{*b{|%/||![*b![!]%*l!]!_*b!_!`%*l!`#O*b#O#P1[#P~*bm%0T[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|%*l|#O*b#O#P1[#P~*bm%1Q^&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bvy*byz%+iz!_*b!_!`%*l!`#O*b#O#P1[#P~*bo%2XfdQ!nT&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%1|![!c*b!c!}%1|!}#O*b#O#P1[#P#R*b#R#S%1|#S#T*b#T#o%1|#o4w*b4w5b%1|5b5i*b5i6S%1|6S~*bj%3tZ&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P#Q%4g#Q~*bj%4pYdQ&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bo%5gd&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!c*b!c!}%1|!}#O*b#O#P1[#P#R*b#R#S%6u#S#T*b#T#o%1|#o4w*b4w5b%1|5b5i*b5i6S%1|6S~*bo%7OfdQ&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%1|![!c*b!c!}%1|!}#O*b#O#P1[#P#R*b#R#S%1|#S#T*b#T#o%1|#o4w*b4w5b%1|5b5i*b5i6S%1|6S~*b!a%8oY%{V%kp&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!`%9j`%kp&T`%vW!fUOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|%:l|![*b![!]<Z!]!_*b!_!`<Z!`#O*b#O#P1[#P~*bn%:s[&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|<Z|#O*b#O#P1[#P~*b!a%;vY&UP%kp&T`%vW!fUOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!`%<q[%kp&T`%vW!fUOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!_*b!_!`<Z!`#O*b#O#P1[#P~*b!a%=rY%fV%kp&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!a%>mf%kpUV&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%@R![!c*b!c!}%@R!}#O*b#O#P1[#P#R*b#R#S%@R#S#T*b#T#o%@R#o4w*b4w5b%@R5b5i*b5i6S%@R6S~*bo%@[fUV&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%@R![!c*b!c!}%@R!}#O*b#O#P1[#P#R*b#R#S%@R#S#T*b#T#o%@R#o4w*b4w5b%@R5b5i*b5i6S%@R6S~*b!a%A{Y%uV%kp&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!Y%Bpd%kprs*buv*bwx*b!Q!R2m!R!S2m!S!T2m!T!U2m!U!Y3j!w!x4g#O#P*b#T#U*b#U#V*b#X#Y*b#Y#Z*b#b#c*b#f#g*b#h#i*b#i#j5i#j#k*b#l#m6R!a%DZY%tV%kp&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!a%EUd%kp&T`%vW!fUOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!c*b!c!}%@R!}#O*b#O#P1[#P#R*b#R#S%Fd#S#T*b#T#o%@R#o4w*b4w5b%@R5b5i*b5i6S%@R6S~*bo%Fkf&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%@R![!c*b!c!}%@R!}#O*b#O#P1[#P#R*b#R#S%@R#S#T*b#T#o%@R#o4w*b4w5b%@R5b5i*b5i6S%@R6S~*b!a%H[f%kp%zQ&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%@R![!c*b!c!}%@R!}#O*b#O#P1[#P#R*b#R#S%@R#S#T*b#T#o%@R#o4w*b4w5b%@R5b5i*b5i6S%@R6S~*b!a%I{g%kpUV&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%@R![!c*b!c!}%@R!}#O*b#O#P1[#P#R*b#R#S%@R#S#T*b#T#U%Kd#U#o%@R#o4w*b4w5b%@R5b5i*b5i6S%@R6S~*bo%KmhUV&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%@R![!c*b!c!}%@R!}#O*b#O#P1[#P#R*b#R#S%@R#S#T*b#T#`%@R#`#a%MX#a#o%@R#o4w*b4w5b%@R5b5i*b5i6S%@R6S~*bo%MbhUV&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%@R![!c*b!c!}%@R!}#O*b#O#P1[#P#R*b#R#S%@R#S#T*b#T#g%@R#g#h%N|#h#o%@R#o4w*b4w5b%@R5b5i*b5i6S%@R6S~*bo& VhUV&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%@R![!c*b!c!}%@R!}#O*b#O#P1[#P#R*b#R#S%@R#S#T*b#T#X%@R#X#Y&!q#Y#o%@R#o4w*b4w5b%@R5b5i*b5i6S%@R6S~*bo&!|f!sQUV&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%@R![!c*b!c!}%@R!}#O*b#O#P1[#P#R*b#R#S%@R#S#T*b#T#o%@R#o4w*b4w5b%@R5b5i*b5i6S%@R6S~*b!a&$mh%kpUV&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%@R![!c*b!c!}%@R!}#O*b#O#P1[#P#R*b#R#S%@R#S#T*b#T#f%@R#f#g&&X#g#o%@R#o4w*b4w5b%@R5b5i*b5i6S%@R6S~*bo&&bhUV&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%@R![!c*b!c!}%@R!}#O*b#O#P1[#P#R*b#R#S%@R#S#T*b#T#i%@R#i#j%N|#j#o%@R#o4w*b4w5b%@R5b5i*b5i6S%@R6S~*b!]&(XY&PR%kp&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!a&)SY%}V%kp&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!a&)}Y&QV%kp&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b~&*xY%kp%d~&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b![&+sY&RQ%kp&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b![&,nY&SQ%kp&T`%vWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b",
  tokenizers: [0, 1, 2, 3, 4, 5],
  topRules: {"Rel":[0,3]},
  dynamicPrecedences: {"219":1},
  specialized: [{term: 6, get: value => spec_BasicId[value] || -1},{term: 68, get: value => spec_Operator[value] || -1}],
  tokenPrec: 13999
});

const autocompleteList = [
    { label: "Any", type: "type" },
    { label: "AutoNumber", type: "type" },
    { label: "Boolean", type: "type" },
    { label: "Char", type: "type" },
    { label: "Day", type: "type" },
    { label: "Date", type: "type" },
    { label: "DateTime", type: "type" },
    { label: "Year", type: "type" },
    { label: "Month", type: "type" },
    { label: "Week", type: "type" },
    { label: "Hour", type: "type" },
    { label: "Minute", type: "type" },
    { label: "Second", type: "type" },
    { label: "Millisecond", type: "type" },
    { label: "Microsecond", type: "type" },
    { label: "Nanosecond", type: "type" },
    { label: "Entity", type: "type" },
    { label: "Int", type: "type" },
    { label: "Number", type: "type" },
    { label: "Missing", type: "type" },
    { label: "Floating", type: "type" },
    { label: "UnsignedInt", type: "type" },
    { label: "SignedInt", type: "type" },
    { label: "Rational", type: "type" },
    { label: "FixedDecimal", type: "type" },
    { label: "Hash", type: "type" },
    { label: "FilePos", type: "type" },
    { label: "String", type: "type" },
    { label: "def", type: "keyword" },
    { label: "output", type: "interface" },
    { label: "insert", type: "interface" },
    { label: "delete", type: "interface" },
    { label: "export", type: "interface" },
    { label: "from", type: "keyword" },
    { label: "if", type: "keyword" },
    { label: "iff", type: "keyword" },
    { label: "then", type: "keyword" },
    { label: "else", type: "keyword" },
    { label: "end", type: "keyword" },
    { label: "exists", type: "keyword" },
    { label: "where", type: "keyword" },
    { label: "with", type: "keyword" },
    { label: "select", type: "keyword" },
    { label: "implies", type: "keyword" },
    { label: "use", type: "keyword" },
    { label: "forall", type: "keyword" },
    { label: "in", type: "keyword" },
    { label: "ic", type: "keyword" },
    { label: "not", type: "keyword" },
    { label: "and", type: "keyword" },
    { label: "or", type: "keyword" },
    { label: "xor", type: "keyword" },
    { label: "union", type: "keyword" },
    { label: "_flatten", type: "function" },
    { label: "abelian_group", type: "function" },
    { label: "abs", type: "function" },
    { label: "absorption_laws", type: "function" },
    { label: "acos", type: "function" },
    { label: "acosh", type: "function" },
    { label: "acot", type: "function" },
    { label: "add", type: "function" },
    { label: "antisymmetric", type: "function" },
    { label: "approximate_abelian_group", type: "function" },
    { label: "approximate_commutative_monoid", type: "function" },
    { label: "approximate_group", type: "function" },
    { label: "approximate_monoid", type: "function" },
    { label: "approximate_ring", type: "function" },
    { label: "approximate_semiring", type: "function" },
    { label: "approximately_associative", type: "function" },
    { label: "approximately_commutative", type: "function" },
    { label: "approximately_distributive", type: "function" },
    { label: "approximately_has_inverse", type: "function" },
    { label: "approximately_left_distributive", type: "function" },
    { label: "approximately_right_distributive", type: "function" },
    { label: "approximately_zero_annihilation", type: "function" },
    { label: "argmax", type: "function" },
    { label: "argmin", type: "function" },
    { label: "arity", type: "function" },
    { label: "asin", type: "function" },
    { label: "asinh", type: "function" },
    { label: "associative", type: "function" },
    { label: "atan", type: "function" },
    { label: "atanh", type: "function" },
    { label: "auto_number", type: "function" },
    { label: "binary_operator", type: "function" },
    { label: "binary_relation", type: "function" },
    { label: "binary_relation_substitution_laws", type: "function" },
    { label: "bitwise_and", type: "function" },
    { label: "bitwise_left_shift", type: "function" },
    { label: "bitwise_not", type: "function" },
    { label: "bitwise_or", type: "function" },
    { label: "bitwise_right_shift", type: "function" },
    { label: "bitwise_unsigned_right_shift", type: "function" },
    { label: "bitwise_xor", type: "function" },
    { label: "boolean_and", type: "function" },
    { label: "boolean_false", type: "function" },
    { label: "boolean_not", type: "function" },
    { label: "boolean_or", type: "function" },
    { label: "boolean_true", type: "function" },
    { label: "bottom", type: "function" },
    { label: "bounded_lattice", type: "function" },
    { label: "bounded_semilattice", type: "function" },
    { label: "byte", type: "function" },
    { label: "capture_group_by_index", type: "function" },
    { label: "capture_group_by_name", type: "function" },
    { label: "cart", type: "function" },
    { label: "cbrt", type: "function" },
    { label: "ceil", type: "function" },
    { label: "char", type: "function" },
    { label: "clamp", type: "function" },
    { label: "commutative", type: "function" },
    { label: "commutative_monoid", type: "function" },
    { label: "comparable", type: "function" },
    { label: "complement", type: "function" },
    { label: "concat", type: "function" },
    { label: "cos", type: "function" },
    { label: "cosh", type: "function" },
    { label: "cot", type: "function" },
    { label: "count", type: "function" },
    { label: "date_add", type: "function" },
    { label: "date_day", type: "function" },
    { label: "date_dayname", type: "function" },
    { label: "date_dayofquarter", type: "function" },
    { label: "date_dayofweek", type: "function" },
    { label: "date_dayofweekofmonth", type: "function" },
    { label: "date_dayofyear", type: "function" },
    { label: "date_daysinmonth", type: "function" },
    { label: "date_isleapyear", type: "function" },
    { label: "date_month", type: "function" },
    { label: "date_monthname", type: "function" },
    { label: "date_quarterofyear", type: "function" },
    { label: "date_subtract", type: "function" },
    { label: "date_week", type: "function" },
    { label: "date_year", type: "function" },
    { label: "dates_period_days", type: "function" },
    { label: "datetime_add", type: "function" },
    { label: "datetime_day", type: "function" },
    { label: "datetime_day_", type: "function" },
    { label: "datetime_dayname", type: "function" },
    { label: "datetime_dayofquarter", type: "function" },
    { label: "datetime_dayofweek", type: "function" },
    { label: "datetime_dayofweekofmonth", type: "function" },
    { label: "datetime_dayofyear", type: "function" },
    { label: "datetime_daysinmonth", type: "function" },
    { label: "datetime_hour", type: "function" },
    { label: "datetime_hour_", type: "function" },
    { label: "datetime_isleapyear", type: "function" },
    { label: "datetime_minute", type: "function" },
    { label: "datetime_minute_", type: "function" },
    { label: "datetime_month", type: "function" },
    { label: "datetime_month_", type: "function" },
    { label: "datetime_monthname", type: "function" },
    { label: "datetime_now", type: "function" },
    { label: "datetime_quarterofyear", type: "function" },
    { label: "datetime_second", type: "function" },
    { label: "datetime_subtract", type: "function" },
    { label: "datetime_to_nanoseconds", type: "function" },
    { label: "datetime_week", type: "function" },
    { label: "datetime_week_", type: "function" },
    { label: "datetime_year", type: "function" },
    { label: "datetime_year_", type: "function" },
    { label: "datetimes_period_milliseconds", type: "function" },
    { label: "decimal", type: "function" },
    { label: "decimal_bit_length", type: "function" },
    { label: "decimal_int_convert", type: "function" },
    { label: "decimal_precision", type: "function" },
    { label: "decode_base", type: "function" },
    { label: "default_value", type: "function" },
    { label: "deg", type: "function" },
    { label: "denominator", type: "function" },
    { label: "describe", type: "function" },
    { label: "diff", type: "function" },
    { label: "disjoint", type: "function" },
    { label: "distributive", type: "function" },
    { label: "divide", type: "function" },
    { label: "docstring", type: "function" },
    { label: "domain", type: "function" },
    { label: "dot_join", type: "function" },
    { label: "double_metaphone", type: "function" },
    { label: "empty", type: "function" },
    { label: "encode_base", type: "function" },
    { label: "epoch_milliseconds", type: "function" },
    { label: "eq", type: "function" },
    { label: "equal", type: "function" },
    { label: "equivalence_relation", type: "function" },
    { label: "erf", type: "function" },
    { label: "erfinv", type: "function" },
    { label: "escape_regex_metachars", type: "function" },
    { label: "export_csv", type: "function" },
    { label: "export_json", type: "function" },
    { label: "factorial", type: "function" },
    { label: "filepos", type: "function" },
    { label: "filepos_value", type: "function" },
    { label: "first", type: "function" },
    { label: "float", type: "function" },
    { label: "float_int_convert", type: "function" },
    { label: "floor", type: "function" },
    { label: "floor_divide", type: "function" },
    { label: "floor_to_int", type: "function" },
    { label: "format_date", type: "function" },
    { label: "format_datetime", type: "function" },
    { label: "formula_card_est", type: "function" },
    { label: "frequency", type: "function" },
    { label: "function", type: "function" },
    { label: "geometric_mean", type: "function" },
    { label: "glm_generic", type: "function" },
    { label: "glm_linear_regression", type: "function" },
    { label: "glm_logistic_regression", type: "function" },
    { label: "glm_predict", type: "function" },
    { label: "glm_probit_regression", type: "function" },
    { label: "graphviz", type: "function" },
    { label: "group", type: "function" },
    { label: "gt", type: "function" },
    { label: "gt_eq", type: "function" },
    { label: "harmonic_mean", type: "function" },
    { label: "has_identity", type: "function" },
    { label: "has_left_identity", type: "function" },
    { label: "has_left_zero", type: "function" },
    { label: "has_maximal_element", type: "function" },
    { label: "has_minimal_element", type: "function" },
    { label: "has_right_identity", type: "function" },
    { label: "has_right_zero", type: "function" },
    { label: "hash", type: "function" },
    { label: "hash_value_uint", type: "function" },
    { label: "haversine", type: "function" },
    { label: "help", type: "function" },
    { label: "html", type: "function" },
    { label: "ic", type: "function" },
    { label: "idempotent", type: "function" },
    { label: "identity", type: "function" },
    { label: "int", type: "function" },
    { label: "int_float_convert", type: "function" },
    { label: "int_spread_by_even", type: "function" },
    { label: "int_spread_by_ratio", type: "function" },
    { label: "intersect", type: "function" },
    { label: "irreflexive", type: "function" },
    { label: "is_", type: "function" },
    { label: "jacobian", type: "function" },
    { label: "join_bounded_lattice", type: "function" },
    { label: "last", type: "function" },
    { label: "lattice", type: "function" },
    { label: "left_distributive", type: "function" },
    { label: "left_identity", type: "function" },
    { label: "left_override", type: "function" },
    { label: "left_zero", type: "function" },
    { label: "levenshtein", type: "function" },
    { label: "like_match", type: "function" },
    { label: "linear_regression", type: "function" },
    { label: "linear_regression_objective", type: "function" },
    { label: "linear_regression_predict", type: "function" },
    { label: "lined_csv", type: "function" },
    { label: "load_csv", type: "function" },
    { label: "load_csv_row_wise", type: "function" },
    { label: "load_json", type: "function" },
    { label: "log", type: "function" },
    { label: "log_card_est", type: "function" },
    { label: "lowercase", type: "function" },
    { label: "lr_random_initial_point", type: "function" },
    { label: "lt", type: "function" },
    { label: "lt_eq", type: "function" },
    { label: "mae", type: "function" },
    { label: "markdown", type: "function" },
    { label: "max", type: "function" },
    { label: "max_k", type: "function" },
    { label: "maximal_element", type: "function" },
    { label: "maximum", type: "function" },
    { label: "mean", type: "function" },
    { label: "mean_normalization", type: "function" },
    { label: "median", type: "function" },
    { label: "meet_bounded_lattice", type: "function" },
    { label: "metaphone", type: "function" },
    { label: "min", type: "function" },
    { label: "min_k", type: "function" },
    { label: "min_max_normalization", type: "function" },
    { label: "minimal_element", type: "function" },
    { label: "minimize_initial_point", type: "function" },
    { label: "minimum", type: "function" },
    { label: "missing", type: "function" },
    { label: "mlpack_adaboost", type: "function" },
    { label: "mlpack_adaboost_predict", type: "function" },
    { label: "mlpack_approx_kfn", type: "function" },
    { label: "mlpack_approx_kfn_build", type: "function" },
    { label: "mlpack_dbscan", type: "function" },
    { label: "mlpack_decision_tree", type: "function" },
    { label: "mlpack_decision_tree_predict", type: "function" },
    { label: "mlpack_det", type: "function" },
    { label: "mlpack_det_build", type: "function" },
    { label: "mlpack_emst", type: "function" },
    { label: "mlpack_fastmks", type: "function" },
    { label: "mlpack_fastmks_build", type: "function" },
    { label: "mlpack_gmm_generate", type: "function" },
    { label: "mlpack_gmm_probability", type: "function" },
    { label: "mlpack_gmm_train", type: "function" },
    { label: "mlpack_hoeffding_tree", type: "function" },
    { label: "mlpack_hoeffding_tree_predict", type: "function" },
    { label: "mlpack_kernel_pca", type: "function" },
    { label: "mlpack_kfn", type: "function" },
    { label: "mlpack_kfn_build", type: "function" },
    { label: "mlpack_kmeans", type: "function" },
    { label: "mlpack_kmeans_centroids", type: "function" },
    { label: "mlpack_knn", type: "function" },
    { label: "mlpack_knn_build", type: "function" },
    { label: "mlpack_krann", type: "function" },
    { label: "mlpack_krann_build", type: "function" },
    { label: "mlpack_lars", type: "function" },
    { label: "mlpack_lars_predict", type: "function" },
    { label: "mlpack_linear_regression", type: "function" },
    { label: "mlpack_linear_regression_predict", type: "function" },
    { label: "mlpack_linear_svm", type: "function" },
    { label: "mlpack_linear_svm_predict", type: "function" },
    { label: "mlpack_logistic_regression", type: "function" },
    { label: "mlpack_logistic_regression_predict", type: "function" },
    { label: "mlpack_lsh", type: "function" },
    { label: "mlpack_lsh_build", type: "function" },
    { label: "mlpack_mean_shift", type: "function" },
    { label: "mlpack_nbc", type: "function" },
    { label: "mlpack_nbc_predict", type: "function" },
    { label: "mlpack_nmf", type: "function" },
    { label: "mlpack_pca", type: "function" },
    { label: "mlpack_perceptron", type: "function" },
    { label: "mlpack_perceptron_predict", type: "function" },
    { label: "mlpack_preprocess_split", type: "function" },
    { label: "mlpack_radical", type: "function" },
    { label: "mlpack_random_forest", type: "function" },
    { label: "mlpack_random_forest_predict", type: "function" },
    { label: "mlpack_softmax_regression", type: "function" },
    { label: "mlpack_softmax_regression_predict", type: "function" },
    { label: "mode", type: "function" },
    { label: "modulo", type: "function" },
    { label: "monoid", type: "function" },
    { label: "mse", type: "function" },
    { label: "multiply", type: "function" },
    { label: "murmurhash", type: "function" },
    { label: "nanoseconds_to_datetime", type: "function" },
    { label: "natural_exp", type: "function" },
    { label: "natural_log", type: "function" },
    { label: "neq", type: "function" },
    { label: "not", type: "function" },
    { label: "nullary_relation", type: "function" },
    { label: "num_bytes", type: "function" },
    { label: "num_chars", type: "function" },
    { label: "numerator", type: "function" },
    { label: "pack", type: "function" },
    { label: "parse_date", type: "function" },
    { label: "parse_datetime", type: "function" },
    { label: "parse_decimal", type: "function" },
    { label: "parse_float", type: "function" },
    { label: "parse_int", type: "function" },
    { label: "parse_json", type: "function" },
    { label: "parse_uuid", type: "function" },
    { label: "partial_order", type: "function" },
    { label: "partial_order_and_bounded_lattice", type: "function" },
    { label: "partial_order_and_join_bounded_lattice", type: "function" },
    { label: "partial_order_and_lattice", type: "function" },
    { label: "partial_order_and_meet_bounded_lattice", type: "function" },
    { label: "pattern_match", type: "function" },
    { label: "percentile", type: "function" },
    { label: "percentile_nearest", type: "function" },
    { label: "period_add", type: "function" },
    { label: "period_day_to_int", type: "function" },
    { label: "period_max", type: "function" },
    { label: "period_min", type: "function" },
    { label: "pi_float", type: "function" },
    { label: "pivot", type: "function" },
    { label: "pop_standard_deviation", type: "function" },
    { label: "pop_variance", type: "function" },
    { label: "pop_zscore_normalization", type: "function" },
    { label: "power", type: "function" },
    { label: "prefix_join", type: "function" },
    { label: "preorder", type: "function" },
    { label: "product", type: "function" },
    { label: "proper_subset", type: "function" },
    { label: "proper_superset", type: "function" },
    { label: "rad", type: "function" },
    { label: "random_mersenne_twister", type: "function" },
    { label: "random_threefry_float", type: "function" },
    { label: "random_threefry_uint", type: "function" },
    { label: "random_uint", type: "function" },
    { label: "range", type: "function" },
    { label: "rational", type: "function" },
    { label: "rational_convert", type: "function" },
    { label: "reflexive", type: "function" },
    { label: "regex_compile", type: "function" },
    { label: "regex_match", type: "function" },
    { label: "regex_match_all", type: "function" },
    { label: "rel", type: "function" },
    { label: "relname_string", type: "function" },
    { label: "remainder", type: "function" },
    { label: "reverse_sort", type: "function" },
    { label: "right_distributive", type: "function" },
    { label: "right_identity", type: "function" },
    { label: "right_override", type: "function" },
    { label: "right_zero", type: "function" },
    { label: "ring", type: "function" },
    { label: "rmse", type: "function" },
    { label: "round", type: "function" },
    { label: "sample_standard_deviation", type: "function" },
    { label: "sample_variance", type: "function" },
    { label: "sample_zscore_normalization", type: "function" },
    { label: "second", type: "function" },
    { label: "semilattice", type: "function" },
    { label: "semiring", type: "function" },
    { label: "sign", type: "function" },
    { label: "sin", type: "function" },
    { label: "sinh", type: "function" },
    { label: "sort", type: "function" },
    { label: "soundex", type: "function" },
    { label: "spread", type: "function" },
    { label: "sqrt", type: "function" },
    { label: "squared", type: "function" },
    { label: "squared_deviation", type: "function" },
    { label: "strict_partial_order", type: "function" },
    { label: "strict_total_order", type: "function" },
    { label: "string", type: "function" },
    { label: "string_join", type: "function" },
    { label: "string_length", type: "function" },
    { label: "string_replace", type: "function" },
    { label: "string_replace_multiple", type: "function" },
    { label: "string_split", type: "function" },
    { label: "string_trim", type: "function" },
    { label: "subset", type: "function" },
    { label: "substring", type: "function" },
    { label: "substring_bytes", type: "function" },
    { label: "subtract", type: "function" },
    { label: "suffix_join", type: "function" },
    { label: "sum", type: "function" },
    { label: "sum_int", type: "function" },
    { label: "superset", type: "function" },
    { label: "svg", type: "function" },
    { label: "symmetric", type: "function" },
    { label: "table", type: "function" },
    { label: "tan", type: "function" },
    { label: "tanh", type: "function" },
    { label: "ternary_relation", type: "function" },
    { label: "top", type: "function" },
    { label: "total", type: "function" },
    { label: "total_order", type: "function" },
    { label: "transitive", type: "function" },
    { label: "transpose", type: "function" },
    { label: "trunc", type: "function" },
    { label: "trunc_divide", type: "function" },
    { label: "trunc_to_int", type: "function" },
    { label: "uint", type: "function" },
    { label: "unary_operator", type: "function" },
    { label: "unary_relation", type: "function" },
    { label: "unary_relation_substitution_laws", type: "function" },
    { label: "union", type: "function" },
    { label: "unit_normalization", type: "function" },
    { label: "unix_epoch", type: "function" },
    { label: "unpack", type: "function" },
    { label: "uppercase", type: "function" },
    { label: "uuid_string", type: "function" },
    { label: "vega", type: "function" },
    { label: "vegalite", type: "function" },
    { label: "vegalite_utils", type: "function" },
    { label: "view_json", type: "function" },
    { label: "weighted_mean", type: "function" },
    { label: "xgboost_classifier", type: "function" },
    { label: "xgboost_classifier_predict", type: "function" },
    { label: "xgboost_classifier_probabilities", type: "function" },
    { label: "xgboost_feature_importances", type: "function" },
    { label: "xgboost_regressor", type: "function" },
    { label: "xgboost_regressor_predict", type: "function" },
    { label: "zero_annihilation", type: "function" },
    { label: "zero_of_operator", type: "function" },
    { label: "zip", type: "function" },
    { label: "registered", type: "variable", info: "Registered Sign / Registered Trade Mark Sign", apply: "®" },
    { label: "degree", type: "variable", info: "Degree Sign", apply: "°" },
    { label: "pm", type: "variable", info: "Plus-Minus Sign / Plus-Or-Minus Sign", apply: "±" },
    { label: "\\^2", info: "Superscript Two / Superscript Digit Two", apply: "²" },
    { label: "\\^3", info: "Superscript Three / Superscript Digit Three", apply: "³" },
    { label: "\\^1", info: "Superscript One / Superscript Digit One", apply: "¹" },
    { label: "\\1/4", type: "variable", info: "Vulgar Fraction One Quarter / Fraction One Quarter", apply: "¼" },
    { label: "\\1/2", type: "variable", info: "Vulgar Fraction One Half / Fraction One Half", apply: "½" },
    { label: "\\3/4", type: "variable", info: "Vulgar Fraction Three Quarters / Fraction Three Quarters", apply: "¾" },
    { label: "\\questiondown", type: "variable", info: "Inverted Question Mark", apply: "¿" },
    { label: "\\times", type: "variable", info: "Multiplication Sign", apply: "×" },
    { label: "\\div", type: "variable", info: "Division Sign", apply: "÷" },
    { label: "\\Alpha", type: "variable", info: "Greek Capital Letter Alpha", apply: "Α" },
    { label: "\\Beta", type: "variable", info: "Greek Capital Letter Beta", apply: "Β" },
    { label: "\\Gamma", type: "variable", info: "Greek Capital Letter Gamma", apply: "Γ" },
    { label: "\\Delta", type: "variable", info: "Greek Capital Letter Delta", apply: "Δ" },
    { label: "\\Epsilon", type: "variable", info: "Greek Capital Letter Epsilon", apply: "Ε" },
    { label: "\\Zeta", type: "variable", info: "Greek Capital Letter Zeta", apply: "Ζ" },
    { label: "\\Eta", type: "variable", info: "Greek Capital Letter Eta", apply: "Η" },
    { label: "\\Theta", type: "variable", info: "Greek Capital Letter Theta", apply: "Θ" },
    { label: "\\Iota", type: "variable", info: "Greek Capital Letter Iota", apply: "Ι" },
    { label: "\\Kappa", type: "variable", info: "Greek Capital Letter Kappa", apply: "Κ" },
    { label: "\\Lambda", type: "variable", info: "Greek Capital Letter Lamda / Greek Capital Letter Lambda", apply: "Λ" },
    { label: "\\upMu", type: "variable", info: "Greek Capital Letter Mu", apply: "Μ" },
    { label: "\\upNu", type: "variable", info: "Greek Capital Letter Nu", apply: "Ν" },
    { label: "\\Xi", type: "variable", info: "Greek Capital Letter Xi", apply: "Ξ" },
    { label: "\\upOmicron", type: "variable", info: "Greek Capital Letter Omicron", apply: "Ο" },
    { label: "\\Pi", type: "variable", info: "Greek Capital Letter Pi", apply: "Π" },
    { label: "\\Rho", type: "variable", info: "Greek Capital Letter Rho", apply: "Ρ" },
    { label: "\\Sigma", type: "variable", info: "Greek Capital Letter Sigma", apply: "Σ" },
    { label: "\\Tau", type: "variable", info: "Greek Capital Letter Tau", apply: "Τ" },
    { label: "\\Upsilon", type: "variable", info: "Greek Capital Letter Upsilon", apply: "Υ" },
    { label: "\\Phi", type: "variable", info: "Greek Capital Letter Phi", apply: "Φ" },
    { label: "\\Chi", type: "variable", info: "Greek Capital Letter Chi", apply: "Χ" },
    { label: "\\Psi", type: "variable", info: "Greek Capital Letter Psi", apply: "Ψ" },
    { label: "\\Omega", type: "variable", info: "Greek Capital Letter Omega", apply: "Ω" },
    { label: "\\alpha", type: "variable", info: "Greek Small Letter Alpha", apply: "α" },
    { label: "\\beta", type: "variable", info: "Greek Small Letter Beta", apply: "β" },
    { label: "\\gamma", type: "variable", info: "Greek Small Letter Gamma", apply: "γ" },
    { label: "\\delta", type: "variable", info: "Greek Small Letter Delta", apply: "δ" },
    { label: "\\varepsilon", type: "variable", info: "Greek Small Letter Epsilon", apply: "ε" },
    { label: "\\zeta", type: "variable", info: "Greek Small Letter Zeta", apply: "ζ" },
    { label: "\\eta", type: "variable", info: "Greek Small Letter Eta", apply: "η" },
    { label: "\\theta", type: "variable", info: "Greek Small Letter Theta", apply: "θ" },
    { label: "\\iota", type: "variable", info: "Greek Small Letter Iota", apply: "ι" },
    { label: "\\kappa", type: "variable", info: "Greek Small Letter Kappa", apply: "κ" },
    { label: "\\lambda", type: "variable", info: "Greek Small Letter Lamda / Greek Small Letter Lambda", apply: "λ" },
    { label: "\\mu", type: "variable", info: "Greek Small Letter Mu", apply: "μ" },
    { label: "\\nu", type: "variable", info: "Greek Small Letter Nu", apply: "ν" },
    { label: "\\xi", type: "variable", info: "Greek Small Letter Xi", apply: "ξ" },
    { label: "\\upomicron", type: "variable", info: "Greek Small Letter Omicron", apply: "ο" },
    { label: "\\pi", type: "variable", info: "Greek Small Letter Pi", apply: "π" },
    { label: "\\rho", type: "variable", info: "Greek Small Letter Rho", apply: "ρ" },
    { label: "\\varsigma", type: "variable", info: "Greek Small Letter Final Sigma", apply: "ς" },
    { label: "\\sigma", type: "variable", info: "Greek Small Letter Sigma", apply: "σ" },
    { label: "\\tau", type: "variable", info: "Greek Small Letter Tau", apply: "τ" },
    { label: "\\upsilon", type: "variable", info: "Greek Small Letter Upsilon", apply: "υ" },
    { label: "\\varphi", type: "variable", info: "Greek Small Letter Phi", apply: "φ" },
    { label: "\\chi", type: "variable", info: "Greek Small Letter Chi", apply: "χ" },
    { label: "\\psi", type: "variable", info: "Greek Small Letter Psi", apply: "ψ" },
    { label: "\\omega", type: "variable", info: "Greek Small Letter Omega", apply: "ω" },
    { label: "\\upvarbeta", type: "variable", info: "Greek Beta Symbol / Greek Small Letter Curled Beta", apply: "ϐ" },
    { label: "\\vartheta", type: "variable", info: "Greek Theta Symbol / Greek Small Letter Script Theta", apply: "ϑ" },
    { label: "\\phi", type: "variable", info: "Greek Phi Symbol / Greek Small Letter Script Phi", apply: "ϕ" },
    { label: "\\varpi", type: "variable", info: "Greek Pi Symbol / Greek Small Letter Omega Pi", apply: "ϖ" },
    { label: "\\upoldKoppa", type: "variable", info: "Greek Letter Archaic Koppa", apply: "Ϙ" },
    { label: "\\upoldkoppa", type: "variable", info: "Greek Small Letter Archaic Koppa", apply: "ϙ" },
    { label: "\\Stigma", type: "variable", info: "Greek Letter Stigma / Greek Capital Letter Stigma", apply: "Ϛ" },
    { label: "\\upstigma", type: "variable", info: "Greek Small Letter Stigma", apply: "ϛ" },
    { label: "\\Digamma", type: "variable", info: "Greek Letter Digamma / Greek Capital Letter Digamma", apply: "Ϝ" },
    { label: "\\digamma", type: "variable", info: "Greek Small Letter Digamma", apply: "ϝ" },
    { label: "\\Koppa", type: "variable", info: "Greek Letter Koppa / Greek Capital Letter Koppa", apply: "Ϟ" },
    { label: "\\upkoppa", type: "variable", info: "Greek Small Letter Koppa", apply: "ϟ" },
    { label: "\\Sampi", type: "variable", info: "Greek Letter Sampi / Greek Capital Letter Sampi", apply: "Ϡ" },
    { label: "\\upsampi", type: "variable", info: "Greek Small Letter Sampi", apply: "ϡ" },
    { label: "\\varkappa", type: "variable", info: "Greek Kappa Symbol / Greek Small Letter Script Kappa", apply: "ϰ" },
    { label: "\\varrho", type: "variable", info: "Greek Rho Symbol / Greek Small Letter Tailed Rho", apply: "ϱ" },
    { label: "\\varTheta", type: "variable", info: "Greek Capital Theta Symbol", apply: "ϴ" },
    { label: "\\epsilon", type: "variable", info: "Greek Lunate Epsilon Symbol", apply: "ϵ" },
    { label: "\\backepsilon", type: "variable", info: "Greek Reversed Lunate Epsilon Symbol", apply: "϶" },
    { label: "\\^0", info: "Superscript Zero / Superscript Digit Zero", apply: "⁰" },
    { label: "\\^i", info: "Superscript Latin Small Letter I", apply: "ⁱ" },
    { label: "\\^4", info: "Superscript Four / Superscript Digit Four", apply: "⁴" },
    { label: "\\^5", info: "Superscript Five / Superscript Digit Five", apply: "⁵" },
    { label: "\\^6", info: "Superscript Six / Superscript Digit Six", apply: "⁶" },
    { label: "\\^7", info: "Superscript Seven / Superscript Digit Seven", apply: "⁷" },
    { label: "\\^8", info: "Superscript Eight / Superscript Digit Eight", apply: "⁸" },
    { label: "\\^9", info: "Superscript Nine / Superscript Digit Nine", apply: "⁹" },
    { label: "\\^+", info: "Superscript Plus Sign", apply: "⁺" },
    { label: "\\^-", info: "Superscript Minus / Superscript Hyphen-Minus", apply: "⁻" },
    { label: "\\^=", info: "Superscript Equals Sign", apply: "⁼" },
    { label: "\\^(", info: "Superscript Left Parenthesis / Superscript Opening Parenthesis", apply: "⁽" },
    { label: "\\^)", info: "Superscript Right Parenthesis / Superscript Closing Parenthesis", apply: "⁾" },
    { label: "\\^n", info: "Superscript Latin Small Letter N", apply: "ⁿ" },
    { label: "\\_0", type: "variable", info: "Subscript Zero / Subscript Digit Zero", apply: "₀" },
    { label: "\\_1", type: "variable", info: "Subscript One / Subscript Digit One", apply: "₁" },
    { label: "\\_2", type: "variable", info: "Subscript Two / Subscript Digit Two", apply: "₂" },
    { label: "\\_3", type: "variable", info: "Subscript Three / Subscript Digit Three", apply: "₃" },
    { label: "\\_4", type: "variable", info: "Subscript Four / Subscript Digit Four", apply: "₄" },
    { label: "\\_5", type: "variable", info: "Subscript Five / Subscript Digit Five", apply: "₅" },
    { label: "\\_6", type: "variable", info: "Subscript Six / Subscript Digit Six", apply: "₆" },
    { label: "\\_7", type: "variable", info: "Subscript Seven / Subscript Digit Seven", apply: "₇" },
    { label: "\\_8", type: "variable", info: "Subscript Eight / Subscript Digit Eight", apply: "₈" },
    { label: "\\_9", type: "variable", info: "Subscript Nine / Subscript Digit Nine", apply: "₉" },
    { label: "\\forall", type: "variable", info: "For All", apply: "∀" },
    { label: "\\complement", type: "variable", info: "Complement", apply: "∁" },
    { label: "\\partial", type: "variable", info: "Partial Differential", apply: "∂" },
    { label: "\\exists", type: "variable", info: "There Exists", apply: "∃" },
    { label: "\\nexists", type: "variable", info: "There Does Not Exist", apply: "∄" },
    { label: "\\emptyset", type: "variable", info: "Empty Set", apply: "∅" },
    { label: "\\increment", type: "variable", info: "Increment", apply: "∆" },
    { label: "\\nabla", type: "variable", info: "Nabla", apply: "∇" },
    { label: "\\in", type: "variable", info: "Element Of", apply: "∈" },
    { label: "\\notin", type: "variable", info: "Not An Element Of", apply: "∉" },
    { label: "\\sqrt", type: "variable", info: "Square Root", apply: "√" },
    { label: "\\cbrt", type: "variable", info: "Cube Root", apply: "∛" },
    { label: "\\fourthroot", type: "variable", info: "Fourth Root", apply: "∜" },
    { label: "\\propto", type: "variable", info: "Proportional To", apply: "∝" },
    { label: "\\infty", type: "variable", info: "Infinity", apply: "∞" },
    { label: "\\cap", type: "variable", info: "Intersection", apply: "∩" },
    { label: "\\cup", type: "variable", info: "Union", apply: "∪" },
    { label: "\\therefore", type: "variable", info: "Therefore", apply: "∴" },
    { label: "\\because", type: "variable", info: "Because", apply: "∵" },
    { label: "\\leq", type: "variable", info: "Less-Than Or Equal To / Less Than Or Equal To", apply: "≤" },
    { label: "\\geq", type: "variable", info: "Greater-Than Or Equal To / Greater Than Or Equal To", apply: "≥" },
    { label: "\\subset", type: "variable", info: "Subset Of", apply: "⊂" },
    { label: "\\supset", type: "variable", info: "Superset Of", apply: "⊃" },
    { label: "\\nsubset", type: "variable", info: "Not A Subset Of", apply: "⊄" },
    { label: "\\nsupset", type: "variable", info: "Not A Superset Of", apply: "⊅" },
    { label: "\\subseteq", type: "variable", info: "Subset Of Or Equal To", apply: "⊆" },
    { label: "\\supseteq", type: "variable", info: "Superset Of Or Equal To", apply: "⊇" },
    { label: "\\nsubseteq", type: "variable", info: "Neither A Subset Of Nor Equal To", apply: "⊈" },
    { label: "\\nsupseteq", type: "variable", info: "Neither A Superset Of Nor Equal To", apply: "⊉" },
    { label: "\\bowtie", type: "variable", info: "Bowtie", apply: "⋈" },
    { label: "\\ltimes", type: "variable", info: "Left Normal Factor Semidirect Product", apply: "⋉" },
    { label: "\\rtimes", type: "variable", info: "Right Normal Factor Semidirect Product", apply: "⋊" },
    { label: "\\vdots", type: "variable", info: "Vertical Ellipsis", apply: "⋮" },
    { label: "\\cdots", type: "variable", info: "Midline Horizontal Ellipsis", apply: "⋯" },
    { label: "\\adots", type: "variable", info: "Up Right Diagonal Ellipsis", apply: "⋰" },
    { label: "\\ddots", type: "variable", info: "Down Right Diagonal Ellipsis", apply: "⋱" }
];

const relLanguage = LRLanguage.define({
    parser: parser.configure({
        props: [
            styleTags({
                "Keyword AttributeKeyword": tags.keyword,
                Type: tags.typeName,
                Emphasis: tags.emphasis,
                "IntLiteral FloatLiteral": tags.number,
                BooleanLiteral: tags.bool,
                CharLiteral: tags.character,
                "DocstringLiteral MultilineDocstringLiteral": tags.docString,
                "StaticStringLiteral/...": tags.string,
                "StaticMultilineStringLiteral RawStringSequence InterpolationLiteral InterpolationMultilineLiteral": tags.string,
                LineComment: tags.lineComment,
                BlockComment: tags.blockComment,
                BasicId: tags.attributeName,
                "LhsId/BasicId LhsId/QualifiedName/QualifiedNameId/BasicId": tags.definition(tags.variableName),
                "PartialApplicationExpression/BasicExpression/BasicId": tags.variableName,
                "ApplicationExpression/BasicExpression/BasicId": tags.variableName,
                "LogicalParam/LogicalExpression/BasicExpression/BasicId": tags.attributeName,
                "FormalId/BasicId": tags.attributeName,
                "InterpolationId AliasId/BasicId": tags.labelName,
                "QualifiedNameElem RelnameLiteral ValueTypeLiteral": tags.literal,
                "DateLiteral DateTimeLiteral": tags.string,
                "Operator OperatorKeyword": tags.operatorKeyword,
                '( )': tags.paren,
                '[ ]': tags.squareBracket,
                '{ }': tags.brace,
                ':': tags.derefOperator,
                ', ;': tags.separator
            }),
            foldNodeProp.add({
                MultilineDocstringLiteral(tree) { return { from: tree.from + 3, to: tree.to - 3 }; },
                InterpolationMultilineLiteral(tree) { return { from: tree.from + 3, to: tree.to - 3 }; },
                StaticMultilineStringLiteral(tree) { return { from: tree.from + 3, to: tree.to - 3 }; },
                RawStringSequence(tree) { return { from: tree.from + 1, to: tree.to - 1 }; },
                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; },
                BoundedExpression(tree) { return { from: tree.from + 1, to: tree.to - 1 }; }
            })
        ]
    }),
    languageData: {
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`", '"""'] },
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
    }
});
// Autocomplete
const relCompletion = relLanguage.data.of({
    autocomplete: completeFromList(autocompleteList)
});
function rel() {
    return new LanguageSupport(relLanguage, [relCompletion]);
}

export { rel, relCompletion, relLanguage };
