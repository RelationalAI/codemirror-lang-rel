import { LRParser } from '@lezer/lr';
import { NodeProp } from '@lezer/common';
import { LRLanguage, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@codemirror/highlight';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_identifier = {__proto__:null,inline:10, if:16, then:20, else:22, end:24, module:28, forall:32, implies:36, def:40, output:44, with:50, use:52, ic:56, doc:60, true:66, false:66, Int:80, String:84, Any:88, Number:92, Char:96, Missing:100, Floating:104, UnsignedInt:108, SignedInt:112, Rational:116, FixedDecimal:120, RelName:124, Entity:128, AutoNumber:132, Hash:136, FilePos:140, Date:144, DateTime:148, Year:152, Month:156, Week:160, Day:164, Hour:168, Minute:172, Second:176, Millisecond:180, Microsecond:184, Nanosecond:188};
const parser = LRParser.deserialize({
  version: 13,
  states: "/xO]QPOOOOQO'#El'#ElOOQO'#C|'#C|OOQO'#Em'#EmOOQO'#DS'#DSOOQO'#Ed'#EdOOQO'#E_'#E_Q]QPOOO$RQPO'#C`O]QPO'#CcO$WQPO'#CiO]QPO'#CkO]QPO'#CmO$]QPO'#CoO$WQPO'#CtO$WQPO'#CwO$eQQO'#CyO$jQPO'#DTO'uQPO'#DVO+QQPO'#DXO.]QPO'#DZO1hQPO'#D]O4sQPO'#D_O8OQPO'#DaO;ZQPO'#DcO>fQPO'#DeOAqQPO'#DgOD|QPO'#DiOHXQPO'#DkOKdQPO'#DmONoQPO'#DoO!#zQPO'#DqO!'VQPO'#DsO!*bQPO'#DuO!-mQPO'#DwO!0xQPO'#DyO!4TQPO'#D{O!7`QPO'#D}O!:kQPO'#EPO!=vQPO'#ERO!ARQPO'#ETO!D^QPO'#EVO!GiQPO'#EXO!JtQPO'#EZO!NPQPO'#E]OOQO-E8]-E8]O##[QPO,58zO#&gQPO'#CeO#&tQPO,58}OOQO'#Cb'#CbO]QPO,59TO#'PQPO,59VOOQO,59X,59XOOQO,59Z,59ZO#'UQPO,59]O#*dQPO,59`O#*iQPO,59cOOQO,59e,59eOOQO,59o,59oOOQO,59q,59qOOQO,59s,59sOOQO,59u,59uOOQO,59w,59wOOQO,59y,59yOOQO,59{,59{OOQO,59},59}OOQO,5:P,5:POOQO,5:R,5:ROOQO,5:T,5:TOOQO,5:V,5:VOOQO,5:X,5:XOOQO,5:Z,5:ZOOQO,5:],5:]OOQO,5:_,5:_OOQO,5:a,5:aOOQO,5:c,5:cOOQO,5:e,5:eOOQO,5:g,5:gOOQO,5:i,5:iOOQO,5:k,5:kOOQO,5:m,5:mOOQO,5:o,5:oOOQO,5:q,5:qOOQO,5:s,5:sOOQO,5:u,5:uOOQO,5:w,5:wOOQO1G.f1G.fO#*qQPO1G.iO]QPO'#E`OOQO1G.i1G.iO]QPO1G.iO#*|QPO1G.oO]QPO1G.qOOQO'#Cs'#CsOOQO1G.w1G.wO#+RQPO1G.wO$WQPO1G.zOOQO1G.}1G.}O$WQPO1G.}OOQO-E8^-E8^OOQO7+$T7+$TO]QPO7+$TOOQO,5:z,5:zO#.^QPO7+$TOOQO7+$Z7+$ZO#.cQPO7+$]OOQO7+$c7+$cOOQO7+$f7+$fO#.hQPO7+$iO#.mQPO<<GoOOQO<<Go<<GoOOQO<<Gw<<GwOOQO<<HT<<HTOOQOAN=ZAN=Z",
  stateData: "#.r~O#VOSPOSQOS~OWXO^YO`ZOb[Od]Oi^Ol_On`OqPOrPOsPOtPOuPOxaOzbO|cO!OdO!QeO!SfO!UgO!WhO!YiO![jO!^kO!`lO!bmO!dnO!foO!hpO!jqO!lrO!nsO!ptO!ruO!tvO!vwO!xxO!zyO!|zO#O{O#Q|O#XWO~OT!OO~O#Y!RO~Of!WO#Y!RO~Oo!ZO~O#Y!ROWwX^wX`wXbwXdwXiwXlwXnwXqwXrwXswXtwXuwXxwXzwX|wX!OwX!QwX!SwX!UwX!WwX!YwX![wX!^wX!`wX!bwX!dwX!fwX!hwX!jwX!lwX!nwX!pwX!rwX!twX!vwX!xwX!zwX!|wX#OwX#QwX#TwX#XwXYwXZwX[wX#[wX#ZwX~O#Y!ROWyX^yX`yXbyXdyXiyXlyXnyXqyXryXsyXtyXuyXxyXzyX|yX!OyX!QyX!SyX!UyX!WyX!YyX![yX!^yX!`yX!byX!dyX!fyX!hyX!jyX!lyX!nyX!pyX!ryX!tyX!vyX!xyX!zyX!|yX#OyX#QyX#TyX#XyXYyXZyX[yX#[yX#ZyX~O#Y!ROW{X^{X`{Xb{Xd{Xi{Xl{Xn{Xq{Xr{Xs{Xt{Xu{Xx{Xz{X|{X!O{X!Q{X!S{X!U{X!W{X!Y{X![{X!^{X!`{X!b{X!d{X!f{X!h{X!j{X!l{X!n{X!p{X!r{X!t{X!v{X!x{X!z{X!|{X#O{X#Q{X#T{X#X{XY{XZ{X[{X#[{X#Z{X~O#Y!ROW}X^}X`}Xb}Xd}Xi}Xl}Xn}Xq}Xr}Xs}Xt}Xu}Xx}Xz}X|}X!O}X!Q}X!S}X!U}X!W}X!Y}X![}X!^}X!`}X!b}X!d}X!f}X!h}X!j}X!l}X!n}X!p}X!r}X!t}X!v}X!x}X!z}X!|}X#O}X#Q}X#T}X#X}XY}XZ}X[}X#[}X#Z}X~O#Y!ROW!PX^!PX`!PXb!PXd!PXi!PXl!PXn!PXq!PXr!PXs!PXt!PXu!PXx!PXz!PX|!PX!O!PX!Q!PX!S!PX!U!PX!W!PX!Y!PX![!PX!^!PX!`!PX!b!PX!d!PX!f!PX!h!PX!j!PX!l!PX!n!PX!p!PX!r!PX!t!PX!v!PX!x!PX!z!PX!|!PX#O!PX#Q!PX#T!PX#X!PXY!PXZ!PX[!PX#[!PX#Z!PX~O#Y!ROW!RX^!RX`!RXb!RXd!RXi!RXl!RXn!RXq!RXr!RXs!RXt!RXu!RXx!RXz!RX|!RX!O!RX!Q!RX!S!RX!U!RX!W!RX!Y!RX![!RX!^!RX!`!RX!b!RX!d!RX!f!RX!h!RX!j!RX!l!RX!n!RX!p!RX!r!RX!t!RX!v!RX!x!RX!z!RX!|!RX#O!RX#Q!RX#T!RX#X!RXY!RXZ!RX[!RX#[!RX#Z!RX~O#Y!ROW!TX^!TX`!TXb!TXd!TXi!TXl!TXn!TXq!TXr!TXs!TXt!TXu!TXx!TXz!TX|!TX!O!TX!Q!TX!S!TX!U!TX!W!TX!Y!TX![!TX!^!TX!`!TX!b!TX!d!TX!f!TX!h!TX!j!TX!l!TX!n!TX!p!TX!r!TX!t!TX!v!TX!x!TX!z!TX!|!TX#O!TX#Q!TX#T!TX#X!TXY!TXZ!TX[!TX#[!TX#Z!TX~O#Y!ROW!VX^!VX`!VXb!VXd!VXi!VXl!VXn!VXq!VXr!VXs!VXt!VXu!VXx!VXz!VX|!VX!O!VX!Q!VX!S!VX!U!VX!W!VX!Y!VX![!VX!^!VX!`!VX!b!VX!d!VX!f!VX!h!VX!j!VX!l!VX!n!VX!p!VX!r!VX!t!VX!v!VX!x!VX!z!VX!|!VX#O!VX#Q!VX#T!VX#X!VXY!VXZ!VX[!VX#[!VX#Z!VX~O#Y!ROW!XX^!XX`!XXb!XXd!XXi!XXl!XXn!XXq!XXr!XXs!XXt!XXu!XXx!XXz!XX|!XX!O!XX!Q!XX!S!XX!U!XX!W!XX!Y!XX![!XX!^!XX!`!XX!b!XX!d!XX!f!XX!h!XX!j!XX!l!XX!n!XX!p!XX!r!XX!t!XX!v!XX!x!XX!z!XX!|!XX#O!XX#Q!XX#T!XX#X!XXY!XXZ!XX[!XX#[!XX#Z!XX~O#Y!ROW!ZX^!ZX`!ZXb!ZXd!ZXi!ZXl!ZXn!ZXq!ZXr!ZXs!ZXt!ZXu!ZXx!ZXz!ZX|!ZX!O!ZX!Q!ZX!S!ZX!U!ZX!W!ZX!Y!ZX![!ZX!^!ZX!`!ZX!b!ZX!d!ZX!f!ZX!h!ZX!j!ZX!l!ZX!n!ZX!p!ZX!r!ZX!t!ZX!v!ZX!x!ZX!z!ZX!|!ZX#O!ZX#Q!ZX#T!ZX#X!ZXY!ZXZ!ZX[!ZX#[!ZX#Z!ZX~O#Y!ROW!]X^!]X`!]Xb!]Xd!]Xi!]Xl!]Xn!]Xq!]Xr!]Xs!]Xt!]Xu!]Xx!]Xz!]X|!]X!O!]X!Q!]X!S!]X!U!]X!W!]X!Y!]X![!]X!^!]X!`!]X!b!]X!d!]X!f!]X!h!]X!j!]X!l!]X!n!]X!p!]X!r!]X!t!]X!v!]X!x!]X!z!]X!|!]X#O!]X#Q!]X#T!]X#X!]XY!]XZ!]X[!]X#[!]X#Z!]X~O#Y!ROW!_X^!_X`!_Xb!_Xd!_Xi!_Xl!_Xn!_Xq!_Xr!_Xs!_Xt!_Xu!_Xx!_Xz!_X|!_X!O!_X!Q!_X!S!_X!U!_X!W!_X!Y!_X![!_X!^!_X!`!_X!b!_X!d!_X!f!_X!h!_X!j!_X!l!_X!n!_X!p!_X!r!_X!t!_X!v!_X!x!_X!z!_X!|!_X#O!_X#Q!_X#T!_X#X!_XY!_XZ!_X[!_X#[!_X#Z!_X~O#Y!ROW!aX^!aX`!aXb!aXd!aXi!aXl!aXn!aXq!aXr!aXs!aXt!aXu!aXx!aXz!aX|!aX!O!aX!Q!aX!S!aX!U!aX!W!aX!Y!aX![!aX!^!aX!`!aX!b!aX!d!aX!f!aX!h!aX!j!aX!l!aX!n!aX!p!aX!r!aX!t!aX!v!aX!x!aX!z!aX!|!aX#O!aX#Q!aX#T!aX#X!aXY!aXZ!aX[!aX#[!aX#Z!aX~O#Y!ROW!cX^!cX`!cXb!cXd!cXi!cXl!cXn!cXq!cXr!cXs!cXt!cXu!cXx!cXz!cX|!cX!O!cX!Q!cX!S!cX!U!cX!W!cX!Y!cX![!cX!^!cX!`!cX!b!cX!d!cX!f!cX!h!cX!j!cX!l!cX!n!cX!p!cX!r!cX!t!cX!v!cX!x!cX!z!cX!|!cX#O!cX#Q!cX#T!cX#X!cXY!cXZ!cX[!cX#[!cX#Z!cX~O#Y!ROW!eX^!eX`!eXb!eXd!eXi!eXl!eXn!eXq!eXr!eXs!eXt!eXu!eXx!eXz!eX|!eX!O!eX!Q!eX!S!eX!U!eX!W!eX!Y!eX![!eX!^!eX!`!eX!b!eX!d!eX!f!eX!h!eX!j!eX!l!eX!n!eX!p!eX!r!eX!t!eX!v!eX!x!eX!z!eX!|!eX#O!eX#Q!eX#T!eX#X!eXY!eXZ!eX[!eX#[!eX#Z!eX~O#Y!ROW!gX^!gX`!gXb!gXd!gXi!gXl!gXn!gXq!gXr!gXs!gXt!gXu!gXx!gXz!gX|!gX!O!gX!Q!gX!S!gX!U!gX!W!gX!Y!gX![!gX!^!gX!`!gX!b!gX!d!gX!f!gX!h!gX!j!gX!l!gX!n!gX!p!gX!r!gX!t!gX!v!gX!x!gX!z!gX!|!gX#O!gX#Q!gX#T!gX#X!gXY!gXZ!gX[!gX#[!gX#Z!gX~O#Y!ROW!iX^!iX`!iXb!iXd!iXi!iXl!iXn!iXq!iXr!iXs!iXt!iXu!iXx!iXz!iX|!iX!O!iX!Q!iX!S!iX!U!iX!W!iX!Y!iX![!iX!^!iX!`!iX!b!iX!d!iX!f!iX!h!iX!j!iX!l!iX!n!iX!p!iX!r!iX!t!iX!v!iX!x!iX!z!iX!|!iX#O!iX#Q!iX#T!iX#X!iXY!iXZ!iX[!iX#[!iX#Z!iX~O#Y!ROW!kX^!kX`!kXb!kXd!kXi!kXl!kXn!kXq!kXr!kXs!kXt!kXu!kXx!kXz!kX|!kX!O!kX!Q!kX!S!kX!U!kX!W!kX!Y!kX![!kX!^!kX!`!kX!b!kX!d!kX!f!kX!h!kX!j!kX!l!kX!n!kX!p!kX!r!kX!t!kX!v!kX!x!kX!z!kX!|!kX#O!kX#Q!kX#T!kX#X!kXY!kXZ!kX[!kX#[!kX#Z!kX~O#Y!ROW!mX^!mX`!mXb!mXd!mXi!mXl!mXn!mXq!mXr!mXs!mXt!mXu!mXx!mXz!mX|!mX!O!mX!Q!mX!S!mX!U!mX!W!mX!Y!mX![!mX!^!mX!`!mX!b!mX!d!mX!f!mX!h!mX!j!mX!l!mX!n!mX!p!mX!r!mX!t!mX!v!mX!x!mX!z!mX!|!mX#O!mX#Q!mX#T!mX#X!mXY!mXZ!mX[!mX#[!mX#Z!mX~O#Y!ROW!oX^!oX`!oXb!oXd!oXi!oXl!oXn!oXq!oXr!oXs!oXt!oXu!oXx!oXz!oX|!oX!O!oX!Q!oX!S!oX!U!oX!W!oX!Y!oX![!oX!^!oX!`!oX!b!oX!d!oX!f!oX!h!oX!j!oX!l!oX!n!oX!p!oX!r!oX!t!oX!v!oX!x!oX!z!oX!|!oX#O!oX#Q!oX#T!oX#X!oXY!oXZ!oX[!oX#[!oX#Z!oX~O#Y!ROW!qX^!qX`!qXb!qXd!qXi!qXl!qXn!qXq!qXr!qXs!qXt!qXu!qXx!qXz!qX|!qX!O!qX!Q!qX!S!qX!U!qX!W!qX!Y!qX![!qX!^!qX!`!qX!b!qX!d!qX!f!qX!h!qX!j!qX!l!qX!n!qX!p!qX!r!qX!t!qX!v!qX!x!qX!z!qX!|!qX#O!qX#Q!qX#T!qX#X!qXY!qXZ!qX[!qX#[!qX#Z!qX~O#Y!ROW!sX^!sX`!sXb!sXd!sXi!sXl!sXn!sXq!sXr!sXs!sXt!sXu!sXx!sXz!sX|!sX!O!sX!Q!sX!S!sX!U!sX!W!sX!Y!sX![!sX!^!sX!`!sX!b!sX!d!sX!f!sX!h!sX!j!sX!l!sX!n!sX!p!sX!r!sX!t!sX!v!sX!x!sX!z!sX!|!sX#O!sX#Q!sX#T!sX#X!sXY!sXZ!sX[!sX#[!sX#Z!sX~O#Y!ROW!uX^!uX`!uXb!uXd!uXi!uXl!uXn!uXq!uXr!uXs!uXt!uXu!uXx!uXz!uX|!uX!O!uX!Q!uX!S!uX!U!uX!W!uX!Y!uX![!uX!^!uX!`!uX!b!uX!d!uX!f!uX!h!uX!j!uX!l!uX!n!uX!p!uX!r!uX!t!uX!v!uX!x!uX!z!uX!|!uX#O!uX#Q!uX#T!uX#X!uXY!uXZ!uX[!uX#[!uX#Z!uX~O#Y!ROW!wX^!wX`!wXb!wXd!wXi!wXl!wXn!wXq!wXr!wXs!wXt!wXu!wXx!wXz!wX|!wX!O!wX!Q!wX!S!wX!U!wX!W!wX!Y!wX![!wX!^!wX!`!wX!b!wX!d!wX!f!wX!h!wX!j!wX!l!wX!n!wX!p!wX!r!wX!t!wX!v!wX!x!wX!z!wX!|!wX#O!wX#Q!wX#T!wX#X!wXY!wXZ!wX[!wX#[!wX#Z!wX~O#Y!ROW!yX^!yX`!yXb!yXd!yXi!yXl!yXn!yXq!yXr!yXs!yXt!yXu!yXx!yXz!yX|!yX!O!yX!Q!yX!S!yX!U!yX!W!yX!Y!yX![!yX!^!yX!`!yX!b!yX!d!yX!f!yX!h!yX!j!yX!l!yX!n!yX!p!yX!r!yX!t!yX!v!yX!x!yX!z!yX!|!yX#O!yX#Q!yX#T!yX#X!yXY!yXZ!yX[!yX#[!yX#Z!yX~O#Y!ROW!{X^!{X`!{Xb!{Xd!{Xi!{Xl!{Xn!{Xq!{Xr!{Xs!{Xt!{Xu!{Xx!{Xz!{X|!{X!O!{X!Q!{X!S!{X!U!{X!W!{X!Y!{X![!{X!^!{X!`!{X!b!{X!d!{X!f!{X!h!{X!j!{X!l!{X!n!{X!p!{X!r!{X!t!{X!v!{X!x!{X!z!{X!|!{X#O!{X#Q!{X#T!{X#X!{XY!{XZ!{X[!{X#[!{X#Z!{X~O#Y!ROW!}X^!}X`!}Xb!}Xd!}Xi!}Xl!}Xn!}Xq!}Xr!}Xs!}Xt!}Xu!}Xx!}Xz!}X|!}X!O!}X!Q!}X!S!}X!U!}X!W!}X!Y!}X![!}X!^!}X!`!}X!b!}X!d!}X!f!}X!h!}X!j!}X!l!}X!n!}X!p!}X!r!}X!t!}X!v!}X!x!}X!z!}X!|!}X#O!}X#Q!}X#T!}X#X!}XY!}XZ!}X[!}X#[!}X#Z!}X~O#Y!ROW#PX^#PX`#PXb#PXd#PXi#PXl#PXn#PXq#PXr#PXs#PXt#PXu#PXx#PXz#PX|#PX!O#PX!Q#PX!S#PX!U#PX!W#PX!Y#PX![#PX!^#PX!`#PX!b#PX!d#PX!f#PX!h#PX!j#PX!l#PX!n#PX!p#PX!r#PX!t#PX!v#PX!x#PX!z#PX!|#PX#O#PX#Q#PX#T#PX#X#PXY#PXZ#PX[#PX#[#PX#Z#PX~O#Y!ROWSa^Sa`SabSadSaiSalSanSaqSarSasSatSauSaxSazSa|Sa!OSa!QSa!SSa!USa!WSa!YSa![Sa!^Sa!`Sa!bSa!dSa!fSa!hSa!jSa!lSa!nSa!pSa!rSa!tSa!vSa!xSa!zSa!|Sa#OSa#QSa#TSa#XSaYSaZSa[Sa#[Sa#ZSa~OYXXZXX[XX~P]OY!zOZ!|O[!{O~O#[#OO~O#Y!RO#]#POWea^ea`eabeadeaiealeaneaqeareaseateaueaxeazea|ea!Oea!Qea!Sea!Uea!Wea!Yea![ea!^ea!`ea!bea!dea!fea!hea!jea!lea!nea!pea!rea!tea!vea!xea!zea!|ea#Oea#Qea#Tea#XeaYeaZea[ea#[ea#Zea~Oj#SO~O#]#TO#^#UO~OY!zOZ#XO[#WO~O[#[O~O#Y!ROWei^ei`eibeideiieileineiqeireiseiteiueixeizei|ei!Oei!Qei!Sei!Uei!Wei!Yei![ei!^ei!`ei!bei!dei!fei!hei!jei!lei!nei!pei!rei!tei!vei!xei!zei!|ei#Oei#Qei#Tei#XeiYeiZei[ei#[ei#Zei~O[#bO~O#Z#cO~O#_#dO~O[#eO~O",
  goto: "(X#bPPPP#cP#p#cP&TPPP#cP#cP#cP#cP#cP&d#cPP#cP#cPP#cPPPPP#c&gP&gP&gP&gP&gP&gP&gP&gP&gP&gP&gP&gP&gP&gP&gP&gP&gP&gP&gP&gP&gP&gP&gP&gP&gP&gP&gP&gP&t'SPPP'YPPPPPPP'm'zgTOVXZ[!P!S!z!|#O#XQ!SYQ!V]Q!X^Q!Y_Q![aQ!]bQ!^cQ!_dQ!`eQ!afQ!bgQ!chQ!diQ!ejQ!fkQ!glQ!hmQ!inQ!joQ!kpQ!lqQ!mrQ!nsQ!otQ!puQ!qvQ!rwQ!sxQ!tyQ!uzQ!v{Q!w|Q!x!OQ#Q!WQ#^#RQ#_#SR#`#UQ!QXQ!}!SQ#Y!zQ#Z!|R#a#XR#R!WgROVXZ[!P!S!z!|#O#XQVOS}V!PZ!PX!S!z!|#XQ!y!QR#V!y`UOVX!P!S!z!|#XQ!TZQ!U[R#]#OgQOVXZ[!P!S!z!|#O#XgSOVXZ[!P!S!z!|#O#X",
  nodeNames: "âš  LineComment BlockComment Rel InlineStatement inline VariableName IfStatement if Body then else end ModuleStatement module ForallStatement forall ImpliesStatement implies DefineStatement def OutputDefinitionStatement output AssignOp WithUseStatement with use ConstraintStatement ic DocstringStatement doc DocstringLiteral ExpressionStatement BooleanLiteral Number StringLiteral RelnameLiteral RelnameStringLiteral TypeStatement IntType Int StringType String AnyType Any NumberType Number CharType Char MissingType Missing FloatingType Floating UnsignedIntType UnsignedInt SignedIntType SignedInt RationalType Rational FixedDecimalType FixedDecimal RelNameType RelName EntityType Entity AutoNumberType AutoNumber HashType Hash FilePosType FilePos DateType Date DateTimeType DateTime YearType Year MonthType Month WeekType Week DayType Day HourType Hour MinuteType Minute SecondType Second MillisecondType Millisecond MicrosecondType Microsecond NanosecondType Nanosecond",
  maxTerm: 109,
  nodeProps: [
    [NodeProp.group, -5,33,34,35,36,37,"Expression",-28,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,"Type"]
  ],
  skippedNodes: [0,1,2],
  repeatNodeCount: 2,
  tokenData: "Et~RfXY!gYZ!g]^!gpq!grs!xwx8vxy9eyz9j!O!P9o!P!Q:o!Q!R;x!R![<m![!]=x!_!`Db!b!cDg!c!}Dl#R#SET#T#oDl#o#pEj#q#rEo4w5bDl5i6SDl~!lS#V~XY!gYZ!g]^!gpq!gR!}ZsPOY#pYZ$dZ]#p]^!x^r#prs)ps#O#p#O#P*W#P#Q#p#Q#R!x#R~#pP#uUsPOY#pZr#prs$Xs#O#p#O#P$^#P~#pP$^OsPP$aPO~#pQ$gTYZ$d]^$drs$v#O#P%[#Q#R$dQ${ToQYZ$d]^$drs$v#O#P%[#Q#R$dQ%_eYZ$d]^$drs$v!Q!R&p!R!S&p!S!T&p!T!U&p!U!Y'V!w!x'l#O#P%[#Q#R$d#T#U$d#U#V$d#X#Y$d#Y#Z$d#b#c$d#f#g$d#h#i$d#i#j(n#j#k$d#l#m)WQ&sUYZ$d]^$drs$v!Q!Y'V#O#P%[#Q#R$dQ'YUYZ$d]^$drs$v!Q!Y$d#O#P%[#Q#R$dQ'oR!Q!['x!c!i'x#T#Z'xQ'{R!Q![(U!c!i(U#T#Z(UQ(XR!Q![(b!c!i(b#T#Z(bQ(eR!Q![(n!c!i(n#T#Z(nQ(qR!Q![(z!c!i(z#T#Z(zQ(}R!Q![)W!c!i)W#T#Z)WQ)ZR!Q![)d!c!i)d#T#Z)dQ)gR!Q![$d!c!i$d#T#Z$dR)wToQsPYZ$d]^$drs$v#O#P%[#Q#R$dR*ZsOY#pYZ!xZ]#p]^!x^r#prs,hs!Q#p!Q!R-b!R!S-b!S!T-b!T!U-b!U!Y.`!Y!w#p!w!x/^!x#O#p#O#P6d#P#Q#p#Q#R!x#R#T#p#T#U!x#U#V!x#V#X#p#X#Y!x#Y#Z!x#Z#b#p#b#c!x#c#f#p#f#g!x#g#h#p#h#i!x#i#j2x#j#k!x#k#l#p#l#m4n#m~#pR,oZoQsPOY#pYZ$dZ]#p]^!x^r#prs)ps#O#p#O#P*W#P#Q#p#Q#R!x#R~#pR-g]sPOY#pYZ$dZ]#p]^!x^r#prs)ps!Q#p!Q!Y.`!Y#O#p#O#P*W#P#Q#p#Q#R!x#R~#pR.e]sPOY#pYZ$dZ]#p]^!x^r#prs)ps!Q#p!Q!Y!x!Y#O#p#O#P*W#P#Q#p#Q#R!x#R~#pR/c[sPOY#pZr#prs$Xs!Q#p!Q![0X![!c#p!c!i0X!i#O#p#O#P$^#P#T#p#T#Z0X#Z~#pR0^[sPOY#pZr#prs$Xs!Q#p!Q![1S![!c#p!c!i1S!i#O#p#O#P$^#P#T#p#T#Z1S#Z~#pR1X[sPOY#pZr#prs$Xs!Q#p!Q![1}![!c#p!c!i1}!i#O#p#O#P$^#P#T#p#T#Z1}#Z~#pR2S[sPOY#pZr#prs$Xs!Q#p!Q![2x![!c#p!c!i2x!i#O#p#O#P$^#P#T#p#T#Z2x#Z~#pR2}[sPOY#pZr#prs$Xs!Q#p!Q![3s![!c#p!c!i3s!i#O#p#O#P$^#P#T#p#T#Z3s#Z~#pR3x[sPOY#pZr#prs$Xs!Q#p!Q![4n![!c#p!c!i4n!i#O#p#O#P$^#P#T#p#T#Z4n#Z~#pR4s[sPOY#pZr#prs$Xs!Q#p!Q![5i![!c#p!c!i5i!i#O#p#O#P$^#P#T#p#T#Z5i#Z~#pR5n[sPOY#pZr#prs$Xs!Q#p!Q![!x![!c#p!c!i!x!i#O#p#O#P$^#P#T#p#T#Z!x#Z~#pR6issPOY#pYZ$dZ]#p]^!x^r#prs)ps!Q#p!Q!R-b!R!S-b!S!T-b!T!U-b!U!Y.`!Y!w#p!w!x/^!x#O#p#O#P*W#P#Q#p#Q#R!x#R#T#p#T#U!x#U#V!x#V#X#p#X#Y!x#Y#Z!x#Z#b#p#b#c!x#c#f#p#f#g!x#g#h#p#h#i!x#i#j2x#j#k!x#k#l#p#l#m4n#m~#pP8{UsPOY8vZw8vwx$Xx#O8v#O#P9_#P~8vP9bPO~8v~9jO#[~~9oO#Z~~9rP!Q![9u~9zRr~!Q![9u!g!h:T#X#Y:T~:WR{|:a}!O:a!Q![:g~:dP!Q![:g~:lPr~!Q![:g~:rQz{:x!P!Q;m~:{ROz:xz{;U{~:x~;XTOz:xz{;U{!P:x!P!Q;h!Q~:x~;mOQ~~;rQP~OY;mZ~;m~;}Ur~!O!P<a!Q![<m!g!h:T#X#Y:T#c#d=O#l#m=^~<dR!Q![<a!g!h:T#X#Y:T~<rSr~!O!P<a!Q![<m!g!h:T#X#Y:T~=RP!Q!Y=U~=ZPr~!Q!Y=U~=aR!Q![=j!c!i=j#T#Z=j~=oRr~!Q![=j!c!i=j#T#Z=j~={Vrs>b!c!}Cn!}#ODV#R#SCn#T#oCn4w5bCn5i6SCn~>eTYZ>b]^>brs>t#O#P?Y#Q#R>b~>yTu~YZ>b]^>brs>t#O#P?Y#Q#R>b~?]eYZ>b]^>brs>t!Q!R@n!R!S@n!S!T@n!T!U@n!U!YAT!w!xAj#O#P?Y#Q#R>b#T#U>b#U#V>b#X#Y>b#Y#Z>b#b#c>b#f#g>b#h#i>b#i#jBl#j#k>b#l#mCU~@qUYZ>b]^>brs>t!Q!YAT#O#P?Y#Q#R>b~AWUYZ>b]^>brs>t!Q!Y>b#O#P?Y#Q#R>b~AmR!Q![Av!c!iAv#T#ZAv~AyR!Q![BS!c!iBS#T#ZBS~BVR!Q![B`!c!iB`#T#ZB`~BcR!Q![Bl!c!iBl#T#ZBl~BoR!Q![Bx!c!iBx#T#ZBx~B{R!Q![CU!c!iCU#T#ZCU~CXR!Q![Cb!c!iCb#T#ZCb~CeR!Q![>b!c!i>b#T#Z>b~CsUt~!Q![Cn!c!}Cn#R#SCn#T#oCn4w5bCn5i6SCn~DYP#P#QD]~DbOt~~DgO#]~~DlO#X~~DqU#Y~!Q![Dl!c!}Dl#R#SDl#T#oDl4w5bDl5i6SDl~EWU!Q![Dl!c!}Dl#R#SDl#T#oDl4w5bDl5i6SDl~EoO#^~~EtO#_~",
  tokenizers: [0, 1],
  topRules: {"Rel":[0,3]},
  specialized: [{term: 102, get: value => spec_identifier[value] || -1}],
  tokenPrec: 0
});

// import {completeFromList} from "@codemirror/autocomplete"
const relLanguage = LRLanguage.define({
    parser: parser.configure({
        props: [
            // indentNodeProp.add({
            //   Application: delimitedIndent({closing: ")", align: false})
            // }),
            // foldNodeProp.add({
            //   Application: foldInside
            // }),
            styleTags({
                'use forall for iff if then else end where with select implies': tags.controlKeyword,
                'in not and or xor': tags.operatorKeyword,
                'as from output inline ic doc': tags.keyword,
                'def': tags.definitionKeyword,
                'module': tags.moduleKeyword,
                'Any String Int Number Char Missing Floating UnsignedInt SignedInt Rational FixedDecimal RelName Entity AutoNumber Hash FilePos Date DateTime Year Month Week Day Hour Minute Second Millisecond Microsecond Nanosecond Boolean': tags.typeName,
                Number: tags.number,
                BooleanLiteral: tags.bool,
                StringLiteral: tags.string,
                // DateLiteral: t.string,
                // DateTimeLiteral: t.string,
                AssignOp: tags.definitionOperator,
                LineComment: tags.lineComment,
                BlockComment: tags.blockComment,
                VariableName: tags.definition(tags.variableName),
                Atom: tags.atom,
                RelnameLiteral: tags.atom,
                RelnameStringLiteral: tags.atom,
                DefineStatement: tags.atom,
                '( )': tags.paren,
                '[ ]': tags.squareBracket,
                '{ }': tags.brace,
                '.': tags.derefOperator,
                ', ;': tags.separator,
            })
        ]
    }),
    languageData: {
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
        // indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
        wordChars: "$"
    }
});
// Autocomplete
// export const relCompletion = relLanguage.data.of({
//   autocomplete: completeFromList([
//     { label: "Any", type: "type" },
//     { label: "AutoNumber", type: "type" },
//     { label: "Boolean", type: "type" },
//     { label: "Char", type: "type" },
//     { label: "Day", type: "type" },
//     { label: "Date", type: "type" },
//     { label: "DateTime", type: "type" },
//     { label: "Year", type: "type" },
//     { label: "Month", type: "type" },
//     { label: "Week", type: "type" },
//     { label: "Hour", type: "type" },
//     { label: "Minute", type: "type" },
//     { label: "Second", type: "type" },
//     { label: "Millisecond", type: "type" },
//     { label: "Microsecond", type: "type" },
//     { label: "Nanosecond", type: "type" },
//     { label: "Entity", type: "type" },
//     { label: "Int", type: "type" },
//     { label: "Number", type: "type" },
//     { label: "Missing", type: "type" },
//     { label: "Floating", type: "type" },
//     { label: "UnsignedInt", type: "type" },
//     { label: "SignedInt", type: "type" },
//     { label: "Rational", type: "type" },
//     { label: "FixedDecimal", type: "type" },
//     { label: "Hash", type: "type" },
//     { label: "FilePos", type: "type" },
//     { label: "String", type: "type" },
//     { label: "def", type: "keyword" },
//     { label: "output", type: "keyword" },
//     { label: "from", type: "keyword" },
//     { label: "if", type: "keyword" },
//     { label: "iff", type: "keyword" },
//     { label: "then", type: "keyword" },
//     { label: "else", type: "keyword" },
//     { label: "end", type: "keyword" },
//     { label: "exists", type: "keyword" },
//     { label: "where", type: "keyword" },
//     { label: "with", type: "keyword" },
//     { label: "select", type: "keyword" },
//     { label: "implies", type: "keyword" },
//     { label: "use", type: "keyword" },
//     { label: "forall", type: "keyword" },
//     { label: "in", type: "keyword" },
//     { label: "ic", type: "keyword" },
//     { label: "not", type: "keyword" },
//     { label: "and", type: "keyword" },
//     { label: "or", type: "keyword" },
//     { label: "xor", type: "keyword" },
//     { label: "union", type: "keyword" },
//   ])
// })
function rel() {
    // return new LanguageSupport(relLanguage, [relCompletion])
    return new LanguageSupport(relLanguage);
}

export { rel, relLanguage };
