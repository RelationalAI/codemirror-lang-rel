import { LRParser } from '@lezer/lr';
import { LRLanguage, foldNodeProp, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@lezer/highlight';
import { completeFromList } from '@codemirror/autocomplete';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_BasicId = {__proto__:null,doc:14, function:23, inline:25, ondemand:27, outline:29, static:31, raw:58, def:62, Any:66, String:68, Int:70, Number:72, Char:74, Missing:76, Float:78, Floating:80, UnsignedInt:82, UInt:84, SignedInt:86, Rational:88, FixedDecimal:90, RelName:92, Entity:94, AutoNumber:96, Hash:98, FilePos:100, Date:102, DateTime:104, Year:106, Month:108, Week:110, Day:112, Hour:114, Minute:116, Second:118, Millisecond:120, Microsecond:122, Nanosecond:124, Boolean:126, type:128, entity:130, value:132, output:141, insert:143, delete:145, abort:147, export:149, where:198, for:200, from:202, if:280, then:282, else:284, end:286, forall:288, exists:290, and:294, or:298, implies:302, not:308, iff:312, xor:318, in:338, ic:350, module:354, with:358, use:360, as:364};
const spec_Operator = {__proto__:null,".":187, "^":207, "-":209, "/":211, "%":213, "*":215, "÷":217, "×":219, "⊗":221, "⊙":223, "+":225, "∩":227, "⊕":229, "∪":231, "⊓":233, "⊔":235, "=":237, "!=":239, "≈":241, "∼":243, "→":245, "←":247, "≼":249, "≽":251, "≺":253, "≻":255, "≠":257, "<":259, ">":261, "<=":263, "≤":265, ">=":267, "≥":269, "⊆":271, "⊇":273, "⊂":275, "⊃":277, "∧":297, "∨":301, "⇒":305, "⇐":307, "¬":311, "≡":315, "⇔":317, "≢":321, "⇎":323, "⊻":325, "<:":327, ":>":329, "<++":331, "++>":333, "∈":341};
const parser = LRParser.deserialize({
  version: 14,
  states: "!E|O`QPOOOzQPO'#CfOOQO'#G['#G[O!]QPO'#GOOOQO'#Gm'#GmOOQO'#GZ'#GZQ`QPOOO!qQPO'#CaO!yQPO'#C`O!]QPO'#GOO%lQPO'#GOO%qQPO'#GPO(lQPO'#GQO!yQPO'#GSO(vQQO'#GUO-ZQPO,59QOOQO'#Go'#GoOOQO-E:Y-E:YO!yQPO,58zO-rQPO,5<jO-wQPO,5<kO-|QPO,5<lO!yQPO,5<nOOQO-E:X-E:XOOQO,58{,58{O/UQPO'#HOO/]QPO'#HOO/dQQO'#DqO0gQPO'#DyO0nQPO'#C|O0uQPO'#DsOOQO'#C|'#C|OOQO'#HP'#HPOOQO'#HO'#HOOOQO'#HQ'#HQO0zQPO,58zO1YQPO,5<jO!yQPO,5<jO!yQPO,5<kO4|QQO'#F}O8cQQO'#DzOOQO'#Gc'#GcO8jQPO,5<lO(vQQO,5<lO(vQQO,5<lO8pQPO,5<lO8jQPO,5<lO8xQPO,5<nO9SQSO'#CpOOQO'#Cp'#CpOOQO'#Cm'#CmO>wQQO'#HOO?RQQO'#HOO?YQQO'#F]OIPQQO'#DyO0uQPO'#DsOIWQQO'#E[OMkQPO'#EbOMvQQO'#F]O!%gQQO'#EZOOQO'#EZ'#EZONTQQO'#EZO!(aQQO'#EYO!+OQPO'#EZO(vQQO'#EYO!,kQQO'#EXO!.VQQO'#EWO!/nQQO'#EVO!0tQPO'#HWO!2RQPO'#ETOOQO'#EU'#EUO!3]QPO'#FyOOQO'#ET'#ETO!3bQWO'#EQO!3mQ`O'#FzOOQO'#D}'#D}OOQO'#D|'#D|O!3xQPO'#D{O!4WQWO'#CxO!4fQQO'#EZO(vQQO'#EZO!8jQQO'#EYO!8zQPO,5<pO!9PQQO1G.lO!9qQPO1G.fO!yQPO1G2UO!yQPO1G2VO!:PQPO1G2WO(vQQO1G2WO(vQQO1G2WO!:VQPO1G2WO!:PQPO1G2WO!:_QPO1G2YO!:iQPO'#GbO!;lQPO,5:_O!;vQPO,5:]O!9qQPO1G.fO!;{QQO'#F}O(vQQO1G.fO(vQQO1G.fO!9wQPO1G.fO!yQPO1G.fO!<SQPO1G2UO!<XQPO1G2VO!<^QPO1G2WO!yQPO1G2YO!<hQPO1G2UO!=fQPO1G2VO!>dQPO,5:]O!@SQQO'#D|OOQO,5<i,5<iO!AoQPO,5<iOOQO,5:f,5:fO!AtQPO,5:fOOQO-E:a-E:aOOQO1G2W1G2WO!AyQPO1G2WO!:_QPO1G2YO!BOQPO1G2YOOQO1G2Y1G2YOOQO,59[,59[O!BVQSO,59[OOQO,59],59]OOQO,59_,59_O!B_QQO,5:_O!FtQPO,5:|OOQO,5;w,5;wO!F|QPO,5;wO!GRQPO,5;wO!G^QPO,5:vO!GcQQO,5:|O!KVQPO,5;wO!K[QPO,5;wO#!yQQO,5:uO##TQQO,5:hO#&kQQO,5:uO#*eQQO,5:uO!4fQQO,5:uO!4fQQO,5:uO!4fQQO,5:uO!4fQQO,5:uO!4fQQO,5:uO!4fQQO,5:uO#._QQO,5:uO#.fQPO'#FdOOQO,5:t,5:tO!8jQQO,5:tO!8jQQO,5:tO!8jQQO,5:tO!8jQQO,5:tO!8jQQO,5:tO!8jQQO,5:sO!8jQQO,5:rO!8jQQO,5:qO!8jQQO,5=rO#._QQO,5<eO(vQQO,5<eO#.kQSO'#ESOOQO'#ER'#EROIWQQO'#ERO#.pQWO,5:lO!3eQPO,5:lO#/OQ`O,5<fO!3eQPO,5<fO5TQQO'#GgO#/^QPO,5:gO#/lQpO'#CzO#/tQpO'#CzO#0PQpO'#CzO#0_QpO'#CzOOQO,59d,59dO?YQQO'#F]O#0pQQO'#EZO#5qQQO,5:uO#6XQPO,5:uO#8pQQO1G2[O#8wQPO'#GqOOQO'#Cl'#ClO#9PQPO7+$WO#9UQPO7+$QO(vQQO7+$QO(vQQO7+$QO#9[QPO7+$QO#9dQPO7+'pO#:bQPO7+'qO(vQQO7+'rO(vQQO7+'rO#;`QPO7+'rOOQO7+'r7+'rO#;hQPO7+'rO#;mQPO7+'rO#;{QPO7+'tO#<VQPO7+'tOOQO7+'t7+'tOOQO'#Dy'#DyOOQO,5<|,5<|OOQO-E:`-E:`OOQO1G/w1G/wOOQO7+$Q7+$QO#<^QPO7+$QO#9UQPO7+$QO!yQPO7+'pO!yQPO7+'qO#;mQPO7+'rO#;{QPO7+'tO#<cQPO7+'pO(vQQO7+'pO(vQQO7+'pO#<iQPO7+'pO#<qQPO7+'qO(vQQO7+'qO(vQQO7+'qO#<wQPO7+'qO#>aQQO,5:hOOQO1G2T1G2TOOQO1G0Q1G0QOOQO1G.v1G.vOOQO1G0h1G0hOOQO1G1c1G1cO#?yQPO1G1cOOQO1G0b1G0bO#@|QQO1G0hO#AWQPO1G1cO##TQQO1G0SO#CxQQO1G0SO#E_QQO'#HZO#EyQPO'#E_OOQO'#E`'#E`O#F_QPO'#EaOOQO'#E_'#E_O#FdQPO'#E^OOQO'#E^'#E^O#FxQQO'#EfO#GSQPO'#H^OOQO1G0a1G0aO#GXQPO1G0aO#G^QPO1G0aO#LVQQO1G0aO#LpQQO1G0aO$$^QQO1G0aO$$hQQO1G0aO$$rQQO1G0aO#._QQO'#EbO$'dQPO1G0aO!8jQQO,5<OP#._QQO,5<OOOQO1G0`1G0`O$)xQQO1G0`O$,cQQO1G0`O$,sQQO1G0`O$.nQQO1G0`O$0oQQO1G0_O$2sQQO1G0^O$4[QQO1G0]O$5bQPO1G3^OOQO1G2P1G2POOQO,5:n,5:nO$6oQPO,5:mOOQO'#Ge'#GeO$6tQWO1G0WOOQO1G0W1G0WO$6tQWO1G0WOOQO'#Gf'#GfO$7SQ`O1G2QOOQO1G2Q1G2QO$7SQ`O1G2QOOQO,5=R,5=ROOQO-E:e-E:eOOQO'#G]'#G]O$7bQpO,59fOOQO,59f,59fOOQO'#G^'#G^O$7jQpO,59fOOQO'#G_'#G_O$7uQpO,59fOOQO'#G`'#G`O$8TQpO,59fOOQO,5:u,5:uO(vQQO1G0aO$8fQPO'#GXO$9^QPO'#HeOOQO7+'v7+'vO!9PQQO'#GaO$:RQPO,5=]OOQO<<Gr<<GrO(vQQO<<GlO(vQQO<<GlO$:ZQPO<<GlOOQO<<Gl<<GlO$:cQPO<<GlO$:hQPO<<K[O(vQQO<<K[O(vQQO<<K[O$:nQPO<<K[O$:vQPO<<K]O(vQQO<<K]O(vQQO<<K]O$:|QPO<<K]OOQO<<K^<<K^O$;UQPO<<K^O(vQQO<<K^O(vQQO<<K^O$;ZQPO<<K^O$;cQPO<<K`OOQO<<K`<<K`O$;jQPO<<GlO$;xQPO<<K[O$<vQPO<<K]O$=tQPO<<K^O$>SQPO<<K`OOQO<<K[<<K[O$>^QPO<<K[OOQO<<K]<<K]O$>cQPO<<K]OOQO7+&}7+&}OOQO,5:_,5:_O$?iQQO,5:tO$?yQQO7+%nO$A`QQO,5=uO#._QQO,5:{O$ApQQO,5:{O$EgQQO,5=xOOQO7+%{7+%{O!FwQPO,5:|OIWQQO7+%{O$EzQQO1G1jP$GjQQO'#EbOOQO1G1j1G1jO$IOQQO'#D{OOQO1G0X1G0XOOQO-E:c-E:cOOQO7+%r7+%rO$JeQWO7+%rOOQO-E:d-E:dOOQO7+'l7+'lO$JsQ`O7+'lOOQO-E:Z-E:ZOOQO1G/Q1G/QOOQO-E:[-E:[OOQO-E:]-E:]OOQO-E:^-E:^O$KRQPO7+%{O$MgQQO,5<sO#6^QQO'#GhO$MnQPO,5>POOQO,5<{,5<{OOQO-E:_-E:_OOQOAN=WAN=WO$NcQPOAN=WO(vQQOAN=WO(vQQOAN=WO(vQQOAN@vO(vQQOAN@vO$NhQPOAN@vOOQOAN@vAN@vO$NpQPOAN@vO(vQQOAN@wO(vQQOAN@wO$NuQPOAN@wOOQOAN@wAN@wO$N}QPOAN@wOOQOAN@xAN@xO% SQPOAN@xO(vQQOAN@xO(vQQOAN@xOOQOAN@zAN@zO% XQPOAN=WO% aQPOAN@vO% oQPOAN@wO% }QPOAN@xO%!VQPOAN@zO%!^QQO1G3aOOQO1G0g1G0gOOQO'#Ef'#EfO%#vQQO'#EfO%$QQPO1G3dO%$YQPO<<IgO%%lQQO,5:gOOQO<<I^<<I^OOQO<<KW<<KWO(vQQO<<IgOOQO1G2_1G2_OOQO,5=S,5=SOOQO-E:f-E:fOOQOG22rG22rO%'RQPOG22rOOQOG26bG26bO%'WQPOG26bO(vQQOG26bO(vQQOG26bOOQOG26cG26cO%']QPOG26cO(vQQOG26cO(vQQOG26cOOQOG26dG26dO%'bQPOG26dO(vQQOG22rO(vQQOG22rO%'gQPOG26bO%'oQPOG26cO(vQQOG26dO(vQQOG26dOOQOG26fG26fO$EgQQO'#GdO%'wQPO7+)OOOQOAN?RAN?RO%(PQPOAN?ROOQOLD(^LD(^OOQOLD+|LD+|O%(UQPOLD+|OOQOLD+}LD+}O%(ZQPOLD+}OOQOLD,OLD,OO%(`QPOLD(^O(vQQOLD+|O(vQQOLD+|O(vQQOLD+}O(vQQOLD+}O%(eQPOLD,OOOQO,5=O,5=OOOQO-E:b-E:bOOQOG24mG24mOOQO!$( h!$( hOOQO!$( i!$( iOOQO!$'Kx!$'KxO%(jQPO!$( hO%(oQPO!$( iOOQO!$( j!$( jOOQO!)9ES!)9ESOOQO!)9ET!)9ETO0uQPO'#DsO%,rQQO'#HOO%.XQQO'#HOO%2^QQO'#DyO%2kQQO'#EZO%8_QQO'#EZO%<|QQO'#EZO%2tQQO'#EZO%3RQQO'#EZO%8lQQO'#EZOIWQQO'#EYO$ApQQO'#EYO$ApQQO'#EYO%=ZQQO'#EYO%=ZQQO'#EYO(vQQO'#EYOIWQQO'#EYO##TQQO'#EZO%AQQQO'#EYO$A`QQO'#EYO%AbQQO'#EYO!GcQQO'#EYO%ArQQO'#EYO$EjQQO'#EYO%EfQQO'#EYO%AbQQO,5:|P$A`QQO,5:|P!8jQQO,5:|P%AQQQO,5:|O$EjQQO,5:|O%EfQQO,5:|P%ArQQO,5:|O%IzQQO,5:uO!KgQQO,5:uO%JRQQO,5:uO!4fQQO,5:hO##TQQO,5:uO##TQQO,5:uO##TQQO,5:uO##TQQO,5:uO##TQQO,5:uO##TQQO,5:uO%AQQQO,5:tO$A`QQO,5:tO%AbQQO,5:tO!GcQQO,5:tO%ArQQO,5:tO$EjQQO,5:tO%EfQQO,5:tO%AQQQO,5:tO$A`QQO,5:tO%AbQQO,5:tO!GcQQO,5:tO%ArQQO,5:tO$EjQQO,5:tO%EfQQO,5:tO%AQQQO,5:tO$A`QQO,5:tO%AbQQO,5:tO!GcQQO,5:tO%ArQQO,5:tO$EjQQO,5:tO%EfQQO,5:tO%AQQQO,5:tO$A`QQO,5:tO%AbQQO,5:tO!GcQQO,5:tO%ArQQO,5:tO$EjQQO,5:tO%EfQQO,5:tO%AQQQO,5:tO$A`QQO,5:tO%AbQQO,5:tO!GcQQO,5:tO%ArQQO,5:tO$EjQQO,5:tO%EfQQO,5:tO%AQQQO,5:sO$A`QQO,5:sO%AQQQO,5:rO$A`QQO,5:rO%AQQQO,5:qO%AQQQO,5=rOIWQQO,5<eO%JiQQO,5:uO& kQQO1G0hP&!kQQO1G0hP&#kQQO1G0hP&%iQQO1G0hO&&]QQO1G0hO&'kQQO1G0hP&(vQQO1G0hO!4fQQO1G0SO&)ZQQO1G0SO&+{QQO'#EfO&0WQQO1G0aO&0qQQO1G0aO&5SQQO1G0aO&5^QQO1G0aO&5hQQO1G0aO%AQQQO,5<OO$A`QQO,5<OO%AbQQO,5<OO!GcQQO,5<OO%ArQQO,5<OO$EjQQO,5<OO%EfQQO,5<OO&8bQQO1G0`O&8oQQO1G0`O&:pQQO1G0`O&<OQQO1G0`O&<YQQO1G0`O&=kQQO1G0`O&={QQO1G0`O&?jQQO1G0`O&?zQQO1G0`O&@}QQO1G0`O&BVQQO1G0`O&ChQQO1G0`O&DvQQO1G0`O&FRQQO1G0`O&FcQQO1G0`O&FsQQO1G0`O&IjQQO1G0`O&IzQQO1G0`O&J[QQO1G0`O&JlQQO1G0`O&J|QQO1G0`O&K^QQO1G0`O&LQQQO1G0`O&MTQQO1G0`O&MeQQO1G0`O&MoQQO1G0`O&NSQQO1G0`O&NdQQO1G0`O&NqQQO1G0_O'!cQQO1G0_O'#VQQO1G0^O'#dQQO1G0^O'$UQQO1G0]O'$cQPO1G3^O'$wQQO7+%nO''iQQO,5=xO''|QQO1G1jO'(pQQO1G1jO'*`QQO1G1jO',`QQO1G1jO',jQQO1G1jO',}QQO1G1jO'-_QQO1G1jP'/VQQO'#EbP'/aQQO'#EbO'0oQQO'#EbO'2sQQO'#EbP'2zQQO'#EbO'4`QQO'#EbO'4mQQO'#EbO'4wQQO'#EfO''iQQO'#GdO'5RQPO7+)OO'/hQPO'#EbO'5ZQPO'#EbO'5iQPO'#EbO'5wQQO'#EYO'7WQQO'#EXO'7zQQO'#EXO'8nQQO'#EWO'8{QQO'#EWO'9mQQO'#EVO'9zQPO'#HWO':`QPO'#ETO':tQPO'#FyO':yQQO'#D|O';ZQPO'#FdO';`QPO'#FdO';eQPO'#FdO';jQPO'#FdO';oQPO'#FdO';tQPO'#FdO';yQPO'#FdO#._QQO,5<eO#._QQO,5<eO5TQQO'#GgO%$_QPO,5:gO'<OQQO,5:hO'<]QPO'#H^P#._QQO,5<OP#._QQO,5<OO#._QQO,5<OO#._QQO,5<OP#._QQO,5<OO#._QQO,5<OO#._QQO,5<OO'=fQQO,5:tO'=yQQO,5:tO'?SQQO,5:tO'?gQQO'#D{O'?qQPO1G3dO'?yQQO,5:gO'A^QPO'#ETO'ArQPO'#D{O(vQQO,5<eO'CPQPO'#ETO'CbQPO'#FyOIWQQO,5<eO'CgQPO'#Fy",
  stateData: "'DO~O%_OS%`OSPOSQOS~OVVOoWO!cZO!dYO$u[O$w]O$y^O%bPO~OZ`O[`O]`O^`O_`O~OobO!cdO!dcO$ueO$wfO%bPO~OWhOXhO~OUiOqpOrpOspOtpOupOvpOwpOxpOypOzpO{pO|pO}pO!OpO!PpO!QpO!RpO!SpO!TpO!UpO!VpO!WpO!XpO!YpO!ZpO![pO!]pO!^pO!_pO!`pO!apO!bqO!cqO!dqO!hrO!irO!jrO!krO!lrO%dkO~O!buO~O!bvO~OUiOqpOrpOspOtpOupOvpOwpOxpOypOzpO{pO|pO}pO!OpO!PpO!QpO!RpO!SpO!TpO!UpO!VpO!WpO!XpO!YpO!ZpO![pO!]pO!^pO!_pO!`pO!apO!bqO!cqO!dqO!hrO!irO!jrO!krO!lrO%dwO%vxO~O&R|O&W{O~P%vOU!TOb!SOc!SOf!SOh!SOi!SOj!SOk!SOm!pOqpOrpOspOtpOupOvpOwpOxpOypOzpO{pO|pO}pO!OpO!PpO!QpO!RpO!SpO!TpO!UpO!VpO!WpO!XpO!YpO!ZpO![pO!]pO!^pO!_pO!`pO!apO!bqO!cqO!dqO!f!nO!hrO!irO!jrO!krO!lrO!r!mO!s!mO#[!qO$Q!rO$U!aO$V!bO$`!sO$a!sO%d!VO%f!QO%i!^O%j!RO%k!kO%m!lO%|!YO&R![O&T!aO&U!bO~O%d!uOoYa!cYa!dYa$uYa$wYa%bYa~O!b!wO~O!b!xO~O&R!{O&W!zO~P%vO%d%rX%v%rX&R%rX&W%rXV%rXo%rX!c%rX!d%rX$T%rX$u%rX$w%rX$y%rX%b%rX%]%rX~O%f!mX~P.WO%f#PO~P.WO!f#RO~O%dpX%vpX&RpX&WpXVpXopX!cpX!dpX$TpX$upX$wpX$ypX%bpX%]pX~O%f!mX~P/iO%f#PO~P/iO%f#PO~O%d#TO%vxO&R#VO&W#UO~Oo#XO!c#ZO!d#YO$u#[O$w#]O%bPO~OUqOb!SOc!SOf!SOh!SOi!SOj!SOk!SOm!pOqpOrpOspOtpOupOvpOwpOxpOypOzpO{pO|pO}pO!OpO!PpO!QpO!RpO!SpO!TpO!UpO!VpO!WpO!XpO!YpO!ZpO![pO!]pO!^pO!_pO!`pO!apO!bqO!cqO!dqO!r!mO!s!mO%f!QO%j!RO%k!kO%m!lO%q#bO~O!f#`O~P1nOUqOb!SOc!SOf!SOh!SOi!SOj!SOk!SOm!pOqpOrpOspOtpOupOvpOwpOxpOypOzpO{pO|pO}pO!OpO!PpO!QpO!RpO!SpO!TpO!UpO!VpO!WpO!XpO!YpO!ZpO![pO!]pO!^pO!_pO!`pO!apO!bqO!cqO!dqO!f!nO!r!mO!s!mO%f!QO%j!RO%k!kO%m!lO~O%u#dO~P5TO%d#TO%vxO&R!{O&W!zO~O$T#kO%vxO~P`Of#nOh#oO%g#mO%h#lO%i#lO~O#P%rX#V%rX#W%rX#X%rX#Z%rX#[%rX#]%rX#^%rX#_%rX#`%rX#a%rX#b%rX#c%rX#d%rX#e%rX#f%rX#g%rX#h%rX#i%rX#j%rX#k%rX#l%rX#m%rX#n%rX#o%rX#p%rX#q%rX#r%rX#s%rX#t%rX#u%rX#v%rX#w%rX#x%rX#y%rX#z%rX#{%rX#|%rX#}%rX$O%rX$X%rX$Y%rX$Z%rX$[%rX$]%rX$^%rX$_%rX$b%rX$c%rX$d%rX$e%rX$f%rX$g%rX$h%rX$i%rX$j%rX$k%rX$l%rX$o%rX$p%rX$z%rX%d%rX%p%rX%v%rX%{%rX&O%rX&P%rXV%rXo%rX!c%rX!d%rX$u%rX$w%rX$y%rX%]%rX%b%rX&S%rX%q%rX$R%rX%u%rX$T%rX$S%rX~O%f!mX%f%rX~P9eO%f#PO~P9eOU!TOb!SOc!SOf!SOh!SOi!SOj!SOk!SOm!pOqpOrpOspOtpOupOvpOwpOxpOypOzpO{pO|pO}pO!OpO!PpO!QpO!RpO!SpO!TpO!UpO!VpO!WpO!XpO!YpO!ZpO![pO!]pO!^pO!_pO!`pO!apO!bqO!cqO!dqO!f#`O!hrO!irO!jrO!krO!lrO!r!mO!s!mO#[!qO$Q!rO$U!aO$V*jO$`*rO$a*rO%d!VO%f!QO%i!^O%j!RO%k!kO%m!lO%p#sO%q#rO%|!YO&O#sO&R![O&T!aO&U*jO~O#P!}X#W!}X#X!}X#Z!}X#[!}X#]!}X#^!}X#_!}X#`!}X#a!}X#b!}X#c!}X#d!}X#e!}X#f!}X#g!}X#h!}X#i!}X#j!}X#k!}X#l!}X#m!}X#n!}X#o!}X#p!}X#q!}X#r!}X#s!}X#t!}X#u!}X#v!}X#w!}X#x!}X#y!}X#z!}X#{!}X#|!}X#}!}X$O!}X$X!}X$Y!}X$Z!}X$[!}X$]!}X$^!}X$_!}X$b!}X$c!}X$d!}X$e!}X$f!}X$g!}X$h!}X$i!}X$j!}X$k!}X$l!}X$z!}X%d!}X%p!}X%v!}X&O!}X&P!}XV!}Xo!}X!c!}X!d!}X$u!}X$w!}X$y!}X%]!}X%b!}X&S!}X%q!}X$R!}X%u!}X$T!}X$S!}X#V!}X~O%f!mX~PCvOU!TOb!SOc!SOf!SOh!SOi!SOj!SOk!SOm!pOqpOrpOspOtpOupOvpOwpOxpOypOzpO{pO|pO}pO!OpO!PpO!QpO!RpO!SpO!TpO!UpO!VpO!WpO!XpO!YpO!ZpO![pO!]pO!^pO!_pO!`pO!apO!bqO!cqO!dqO!f!nO!hrO!irO!jrO!krO!lrO!r!mO!s!mO#[!qO$Q!rO$U!aO$V*jO$`*rO$a*rO%d!VO%f!QO%i!^O%j!RO%k!kO%m!lO%|!YO&R![O&T!aO&U*jO~O#V#vO%f#UX%q#UX~O%p#wO&O#wO&S#rO~P(vO#P!}X#V!pX#W!}X#X!}X#Z!}X#[!}X#]!}X#^!}X#_!}X#`!}X#a!}X#b!}X#c!}X#d!}X#e!}X#f!}X#g!}X#h!}X#i!}X#j!}X#k!}X#l!}X#m!}X#n!}X#o!}X#p!}X#q!}X#r!}X#s!}X#t!}X#u!}X#v!}X#w!}X#x!}X#y!}X#z!}X#{!}X#|!}X#}!}X$O!}X$X!}X$Y!}X$Z!}X$[!}X$]!}X$^!}X$_!}X$b!}X$c!}X$d!}X$e!}X$f!}X$g!}X$h!}X$i!}X$j!}X$k!}X$l!}X$z!}X%d!}X%f!pX%p!pX%p!}X%v!}X&O!}X&P!}XV!}Xo!}X!c!}X!d!}X$u!}X$w!}X$y!}X%]!}X%b!}X&S!}X%q!pX%q!}X$R!}X%u!}X$T!}X$S!}X~O$o#zO$p#zO%{#yO~PNTO#P#}O#Z$OO#[$PO#]$OO#^$OO#_$OO#`$OO#a$OO#b$OO#c$OO#d$PO#e$PO#f$PO#g$QO#h$PO#i$QO#j$RO#k$RO#l$RO#m$RO#n$SO#o$RO#p$RO#q$RO#r$RO#s$RO#t$RO#u$RO#v$RO#w$RO#x$RO#y$RO#z$RO#{$RO#|$RO#}$RO$O$RO%d#|O%v#{O~O#W!|X#X!|X$X!|X$Y!|X$Z!|X$[!|X$]!|X$^!|X$_!|X$b!|X$c!|X$d!|X$e!|X$f!|X$g!|X$h!|X$i!|X$j!|X$k!|X$l!|X$z!|X%p!|X&O!|X&P!|XV!|Xo!|X!c!|X!d!|X$u!|X$w!|X$y!|X%]!|X%b!|X&S!|X%q!|X$R!|X%u!|X$T!|X$S!|X~P!%tO%d$TO~O$X$WO$Y$WO$Z$XO$[$XO$]$YO$^$YO$_$YO$b$ZO$c$ZO$d$ZO$e$[O$f$[O$g$[O$h$[O#W!{X#X!{X$i!{X$j!{X$k!{X$l!{X&O!{X&P!{X~O$z!{X%p!{XV!{Xo!{X!c!{X!d!{X$u!{X$w!{X$y!{X%]!{X%b!{X&S!{X$R!{X$T!{X$S!{X~P!+TO#W!zX#X!zX$k!zX$l!zX%p!zX&O!zX&P!zX~O$i$]O$j$]O$z!zXV!zXo!zX!c!zX!d!zX$u!zX$w!zX$y!zX%]!zX%b!zX&S!zX$R!zX$T!zX$S!zX~P!-nO#W!yX#X!yX%p!yX&O!yX&P!yX~O$k$^O$l$^O$z!yXV!yXo!yX!c!yX!d!yX$u!yX$w!yX$y!yX%]!yX%b!yX&S!yX$R!yX$T!yX$S!yX~P!/]O%p$_O#W%zX#X%zX$z%zX&O%zX&P%zXV%zXo%zX!c%zX!d%zX$u%zX$w%zX$y%zX%]%zX%b%zX&S%zX$R%zX$T%zX$S%zX~O#W$aO#X$aO&O$`O&P$aO$z!wXV!wXo!wX!c!wX!d!wX$u!wX$w!wX$y!wX%]!wX%b!wX&S!wX$R!wX$T!wX$S!wX~O%f$bO~O%w$gO%x$cO%y$eO~O%x$cO%y$eO&V$iO~O%p$jO#V!oX%f!oX%q!oX~O%k$lO%m$mO%n$nO%o$oO~OU*aOb!SOc!SOf!SOh!SOi!SOj!SOk!SOm!pOqpOrpOspOtpOupOvpOwpOxpOypOzpO{pO|pO}pO!OpO!PpO!QpO!RpO!SpO!TpO!UpO!VpO!WpO!XpO!YpO!ZpO![pO!]pO!^pO!_pO!`pO!apO!bqO!cqO!dqO!hrO!irO!jrO!krO!lrO!r!mO!s!mO#[!qO$Q!rO$U!aO%d$qO%f!QO%i!^O%j!RO%k!kO%m!lO%|!YO&R![O&T!aO~O$V!bO$`!sO$a!sO&U!bO~P!4fO$z$uO~Ob!SOc!SOf!SOh!SOi!SOj!SOk!SOm!pO%f!QO%j!RO~O%d#TO%vxO&R${O&W$zO~O%d#TO%vxO&R%QO&W%PO~O$T%XO%vxO~P`OU%YO%dkO~O%f#PO%d!ga%v!gaV!gao!ga!c!ga!d!ga$T!ga$u!ga$w!ga$y!ga%b!ga%]!ga~O&R!ga&W!ga~P!:qO%q%]O~O!f!nO~P1nO!b%aO~O!b%bO~O&R%QO&W%PO~P%vO%d#TO%vxO&R%gO&W%fOV$rio$ri!c$ri!d$ri$u$ri$w$ri$y$ri%]$ri%b$ri$T$ri~O%d#TO%vxO&R%kO&W%jOV$sio$si!c$si!d$si$u$si$w$si$y$si%]$si%b$si$T$si~O%q%]O%p!pX#V!pX%f!pX~O%p!pX%q!pX#V!pX#W!pX#X!pX$X!pX$Y!pX$Z!pX$[!pX$]!pX$^!pX$_!pX$b!pX$c!pX$d!pX$e!pX$f!pX$g!pX$h!pX&P!pX~O$o+TO$p+TO%{%mO%u!pX$z!pXV!pXo!pX!c!pX!d!pX$u!pX$w!pX$y!pX%]!pX%b!pX&S!pX&O!pX$i!pX$j!pX$k!pX$l!pX$R!pX$T!pX$S!pX~P!>rO%q%nO~O%u%oO~O&S%SO~O$T%XO~P`O%h%pO%i%pO~O#P!ga#W!ga#X!ga#Z!ga#[!ga#]!ga#^!ga#_!ga#`!ga#a!ga#b!ga#c!ga#d!ga#e!ga#f!ga#g!ga#h!ga#i!ga#j!ga#k!ga#l!ga#m!ga#n!ga#o!ga#p!ga#q!ga#r!ga#s!ga#t!ga#u!ga#v!ga#w!ga#x!ga#y!ga#z!ga#{!ga#|!ga#}!ga$O!ga$X!ga$Y!ga$Z!ga$[!ga$]!ga$^!ga$_!ga$b!ga$c!ga$d!ga$e!ga$f!ga$g!ga$h!ga$i!ga$j!ga$k!ga$l!ga$z!ga%p!ga&O!ga&P!ga&S!ga%q!ga$R!ga%u!ga$S!ga#V!ga~P!:qO%f,VO%q%qO~O%q%rO~O%p%sO%q%rO&O%sO~O%q%tO~OU!TOqpOrpOspOtpOupOvpOwpOxpOypOzpO{pO|pO}pO!OpO!PpO!QpO!RpO!SpO!TpO!UpO!VpO!WpO!XpO!YpO!ZpO![pO!]pO!^pO!_pO!`pO!apO!bqO!cqO!dqO!hrO!irO!jrO!krO!lrO!r!mO!s!mO#[*qO$Q!rO$U!aO$V*mO$`*uO$a*uO%d$qO%i!^O%k!kO%m!lO%|!YO&R![O&T!aO&U*mO~P!9PO&S%rO~O%p%vO&O%vO&S%rO~O$o%wO$p%wO#P!}a#V!pa#W!}a#X!}a#Z!}a#[!}a#]!}a#^!}a#_!}a#`!}a#a!}a#b!}a#c!}a#d!}a#e!}a#f!}a#g!}a#h!}a#i!}a#j!}a#k!}a#l!}a#m!}a#n!}a#o!}a#p!}a#q!}a#r!}a#s!}a#t!}a#u!}a#v!}a#w!}a#x!}a#y!}a#z!}a#{!}a#|!}a#}!}a$O!}a$X!}a$Y!}a$Z!}a$[!}a$]!}a$^!}a$_!}a$b!}a$c!}a$d!}a$e!}a$f!}a$g!}a$h!}a$i!}a$j!}a$k!}a$l!}a$z!}a%d!}a%f!pa%p!pa%v!}a&O!}a&P!}aV!}ao!}a!c!}a!d!}a$u!}a$w!}a$y!}a%]!}a%b!}a&S!}a%q!}a$R!}a%u!}a$T!}a$S!}a~O%p!}a%q!pa~P!KgOU!TOqpOrpOspOtpOupOvpOwpOxpOypOzpO{pO|pO}pO!OpO!PpO!QpO!RpO!SpO!TpO!UpO!VpO!WpO!XpO!YpO!ZpO![pO!]pO!^pO!_pO!`pO!apO!bqO!cqO!dqO!hrO!irO!jrO!krO!lrO!r!mO!s!mO#[*qO$Q!rO$U!aO%d$qO%i!^O%k!kO%m!lO%|!YO&R![O&T!aO~P!9POU!TOqpOrpOspOtpOupOvpOwpOxpOypOzpO{pO|pO}pO!OpO!PpO!QpO!RpO!SpO!TpO!UpO!VpO!WpO!XpO!YpO!ZpO![pO!]pO!^pO!_pO!`pO!apO!bqO!cqO!dqO!f&OO!hrO!irO!jrO!krO!lrO!r!mO!s!mO#[!qO$Q!rO$U!aO$V!bO$`!sO$a!sO%d!VO%i!^O%k!kO%m!lO%u&SO%|!YO&R![O&T!aO&U!bO~P!9POU!TOqpOrpOspOtpOupOvpOwpOxpOypOzpO{pO|pO}pO!OpO!PpO!QpO!RpO!SpO!TpO!UpO!VpO!WpO!XpO!YpO!ZpO![pO!]pO!^pO!_pO!`pO!apO!bqO!cqO!dqO!f&OO!hrO!irO!jrO!krO!lrO!r!mO!s!mO#[!qO$Q!rO$U!aO$V*jO$`*rO$a*rO%d!VO%i!^O%k!kO%m!lO%q&SO%|!YO&R![O&T!aO&U*jO~P!9PO%d&[O~P5TO%f&^O~O%h&jO~O%k&nO%w&lO%x$cO%y$eO~O%m&rO%x$cO%y$eO&V&pO~O%p$jO#V!oa%f!oa%q!oa~O%k&xO%l&vO~O%k&yO%l&yO%m&xO~O%k&{O%l&{O%m&{O%n&xO~O%k&}O%l&}O%m&}O%n&}O%o&xO~O%{'PO%f!}X~PCvO#W!}a#X!}a#[!}a#]!}a#^!}a#_!}a#`!}a#a!}a#b!}a#c!}a#d!}a#e!}a#f!}a#g!}a#h!}a#i!}a#j!}a#k!}a#l!}a#m!}a#n!}a#o!}a#p!}a#q!}a#r!}a#s!}a#t!}a#u!}a#v!}a#w!}a#x!}a#y!}a#z!}a#{!}a#|!}a#}!}a$O!}a$X!}a$Y!}a$Z!}a$[!}a$]!}a$^!}a$_!}a$b!}a$c!}a$d!}a$e!}a$f!}a$g!}a$h!}a$i!}a$j!}a$k!}a$l!}a$z!}a&O!}a&P!}aV!}ao!}a!c!}a!d!}a$u!}a$w!}a$y!}a%]!}a%b!}a&S!}a%q!}a$R!}a%u!}a$T!}a$S!}a~O#P#}O#Z$OO%d#|O%v#{O%p!}a#V!}a~P#0zO$R'QO~OUqOqpOrpOspOtpOupOvpOwpOxpOypOzpO{pO|pO}pO!OpO!PpO!QpO!RpO!SpO!TpO!UpO!VpO!WpO!XpO!YpO!ZpO![pO!]pO!^pO!_pO!`pO!apO!bqO!cqO!dqO!f'RO~O%{'TO~P#6^O%p'UO%q%eX~O%q'WO~O%d#TO%vxO&R'YO&W'XO~O%d#TO%vxO&R'`O&W'_OV$rqo$rq!c$rq!d$rq$u$rq$w$rq$y$rq%]$rq%b$rq$T$rq~O%d#TO%vxO&R'dO&W'cOV$sqo$sq!c$sq!d$sq$u$sq$w$sq$y$sq%]$sq%b$sq$T$sq~O&R'iO&W'hO~O&S'fO~O%d#TO%vxO&R'iO&W'hO~O$T'lO%vxO~P`O$T'lO~P`O&S'[O~O%d#TO%vxO&R'`O&W'_O~O%d#TO%vxO&R'dO&W'cO~O%p!pa%q!pa#V!pa#W!pa#X!pa$X!pa$Y!pa$Z!pa$[!pa$]!pa$^!pa$_!pa$b!pa$c!pa$d!pa$e!pa$f!pa$g!pa$h!pa&P!pa~O$o,`O$p,`O%u!pa$z!paV!pao!pa!c!pa!d!pa$u!pa$w!pa$y!pa%]!pa%b!pa&S!pa&O!pa$i!pa$j!pa$k!pa$l!pa$R!pa$T!pa$S!pa~P#=PO%q'vO~O$X+_O$Y+_O$Z+fO$[+fO$]+mO$^+mO$_+mO$b+tO$c+tO$d+tO$e+{O$f+{O$g+{O$h+{O~O%f#Ui%q#Ui~P#@OO&S'vO~O#P+UO#Z+VO#[+WO#]+VO#^+VO#_+VO#`+VO#a+VO#b+VO#c+VO#d+WO#e+WO#f+WO#g+XO#h+WO#i+XO#j+YO#k+YO#l+YO#m+YO#n+ZO#o+YO#p+YO#q+YO#r+YO#s+YO#t+YO#u+YO#v+YO#w+YO#x+YO#y+YO#z+YO#{+YO#|+YO#}+YO$O+YO%d#|O%v#{O~O#V!pi%f!pi%p!pi%q!pi$X!pi$Y!pi$Z!pi$[!pi$]!pi$^!pi$_!pi$b!pi$c!pi$d!pi$e!pi$f!pi$g!pi$h!pi#W!pi#X!pi&P!pi~P#A]O$k,SO$l,SO#W%}X#X%}X%u%}X&O%}X&P%}X%q%}X~O#W'{O#X'{O&O'zO&P'{O%u#RX%q#RX~O%f'|O~O#V!pX%f!pX%p!pX%p#YX%u#QX%q#QX~O%p#YX%u!{X~P!+TO%p'}O~O%u(OO~O%q(OO~O#P#}O#Z$OO%d#|O%v#{O#W!}i#X!}i#[!}i#d!}i#e!}i#f!}i#g!}i#h!}i#i!}i#j!}i#k!}i#l!}i#m!}i#n!}i#o!}i#p!}i#q!}i#r!}i#s!}i#t!}i#u!}i#v!}i#w!}i#x!}i#y!}i#z!}i#{!}i#|!}i#}!}i$O!}i$X!}i$Y!}i$Z!}i$[!}i$]!}i$^!}i$_!}i$b!}i$c!}i$d!}i$e!}i$f!}i$g!}i$h!}i$i!}i$j!}i$k!}i$l!}i$z!}i%p!}i&O!}i&P!}iV!}io!}i!c!}i!d!}i$u!}i$w!}i$y!}i%]!}i%b!}i&S!}i%q!}i$R!}i%u!}i$T!}i$S!}i#V!}i~O#]!}i#^!}i#_!}i#`!}i#a!}i#b!}i#c!}i~P#GcO#]$OO#^$OO#_$OO#`$OO#a$OO#b$OO#c$OO~P#GcO#P#}O#Z$OO#[$PO#]$OO#^$OO#_$OO#`$OO#a$OO#b$OO#c$OO#d$PO#e$PO#f$PO#h$PO%d#|O%v#{O#W!}i#X!}i#j!}i#k!}i#l!}i#m!}i#n!}i#o!}i#p!}i#q!}i#r!}i#s!}i#t!}i#u!}i#v!}i#w!}i#x!}i#y!}i#z!}i#{!}i#|!}i#}!}i$O!}i$X!}i$Y!}i$Z!}i$[!}i$]!}i$^!}i$_!}i$b!}i$c!}i$d!}i$e!}i$f!}i$g!}i$h!}i$i!}i$j!}i$k!}i$l!}i$z!}i%p!}i&O!}i&P!}iV!}io!}i!c!}i!d!}i$u!}i$w!}i$y!}i%]!}i%b!}i&S!}i%q!}i$R!}i%u!}i$T!}i$S!}i#V!}i~O#g!}i#i!}i~P#MZO#g$QO#i$QO~P#MZO#W!}i#X!}i$X!}i$Y!}i$Z!}i$[!}i$]!}i$^!}i$_!}i$b!}i$c!}i$d!}i$e!}i$f!}i$g!}i$h!}i$i!}i$j!}i$k!}i$l!}i$z!}i%p!}i&O!}i&P!}iV!}io!}i!c!}i!d!}i$u!}i$w!}i$y!}i%]!}i%b!}i&S!}i%q!}i$R!}i%u!}i$T!}i$S!}i#V!}i~P!%tO%f(QO~O#W!|i#X!|i$Z!|i$[!|i$]!|i$^!|i$_!|i$b!|i$c!|i$d!|i$e!|i$f!|i$g!|i$h!|i$i!|i$j!|i$k!|i$l!|i$z!|i&O!|i&P!|iV!|io!|i!c!|i!d!|i$u!|i$w!|i$y!|i%]!|i%b!|i&S!|i$R!|i%u!|i$T!|i$S!|i~O$X$WO$Y$WO%p!|i~P$'iO$X$WO$Y$WO$Z$XO$[$XO$]$YO$^$YO#W!|i#X!|i$e!|i$f!|i$g!|i$h!|i$i!|i$j!|i$k!|i$l!|i$z!|i%p!|i&O!|i&P!|iV!|io!|i!c!|i!d!|i$u!|i$w!|i$y!|i%]!|i%b!|i&S!|i$R!|i%u!|i$T!|i$S!|i~O$_!|i$b!|i$c!|i$d!|i~P$*VO$_$YO$b$ZO$c$ZO$d$ZO~P$*VO#W!|i#X!|i$i!|i$j!|i$k!|i$l!|i$z!|i&O!|i&P!|iV!|io!|i!c!|i!d!|i$u!|i$w!|i$y!|i%]!|i%b!|i&S!|i$R!|i%u!|i$T!|i$S!|i~O$X$WO$Y$WO$Z$XO$[$XO$]$YO$^$YO$_$YO$b$ZO$c$ZO$d$ZO$e$[O$f$[O$g$[O$h$[O%p!|i~P$-TO$X$WO$Y$WO$Z$XO$[$XO$]$YO$^$YO$_$YO$b$ZO$c$ZO$d$ZO$e$[O$f$[O$g$[O$h$[O~O#W!{i#X!{i$i!{i$j!{i$k!{i$l!{i$z!{i%p!{i&O!{i&P!{iV!{io!{i!c!{i!d!{i$u!{i$w!{i$y!{i%]!{i%b!{i&S!{i$R!{i$T!{i$S!{i~P$/qO#W!zi#X!zi$k!zi$l!zi%p!zi&O!zi&P!zi~O$i$]O$j$]O$z!ziV!zio!zi!c!zi!d!zi$u!zi$w!zi$y!zi%]!zi%b!zi&S!zi$R!zi$T!zi$S!zi~P$2[O#W!yi#X!yi%p!yi&O!yi&P!yi~O$k$^O$l$^O$z!yiV!yio!yi!c!yi!d!yi$u!yi$w!yi$y!yi%]!yi%b!yi&S!yi$R!yi$T!yi$S!yi~P$3yO%p$_O#W%zi#X%zi$z%zi&O%zi&P%ziV%zio%zi!c%zi!d%zi$u%zi$w%zi$y%zi%]%zi%b%zi&S%zi$R%zi$T%zi$S%zi~O%q(VO~O%k(XO%w&lO%x$cO%y$eO~O%m([O%x$cO%y$eO&V&pO~O%k(_O%l&vO~O%k&yO%l&yO%m(_O~O%k&{O%l&{O%m&{O%n(_O~O%k&}O%l&}O%m&}O%n&}O%o(_O~O$|(dOV${Xo${X!c${X!d${X$u${X$w${X$y${X%]${X%b${X%p${X$T${X~O%p(eOV&XXo&XX!c&XX!d&XX$u&XX$w&XX$y&XX%]&XX%b&XX$T&XX~O%p'UO%q%ea~O&R(lO&W(kO~O&S(iO~O%d#TO%vxO&R(nO&W(mO~O%d#TO%vxO&R(sO&W(rO~O&S(wO~O&R(zO&W(yO~O$T({O~P`O%d#TO%vxO&R(lO&W(kO~O%d#TO%vxO&R(nO&W(mOV$ryo$ry!c$ry!d$ry$u$ry$w$ry$y$ry%]$ry%b$ry$T$ry~O%d#TO%vxO&R(sO&W(rOV$syo$sy!c$sy!d$sy$u$sy$w$sy$y$sy%]$sy%b$sy$T$sy~O%d#TO%vxO&R(zO&W(yO~O$T({O%vxO~P`O&S(pO~O&S(uO~O$X!|a$Y!|a$Z!|a$[!|a$]!|a$^!|a$_!|a$b!|a$c!|a$d!|a$e!|a$f!|a$g!|a$h!|a%q!|a~O#W.eO#X.eO&P.eO%f!|a~P$>hO#V!pq%f!pq%p!pq%q!pq$X!pq$Y!pq$Z!pq$[!pq$]!pq$^!pq$_!pq$b!pq$c!pq$d!pq$e!pq$f!pq$g!pq$h!pq#W!pq#X!pq&P!pq~P#A]O$V*kO$`*sO$a*sO&U*kO~P!4fOU!TOqpOrpOspOtpOupOvpOwpOxpOypOzpO{pO|pO}pO!OpO!PpO!QpO!RpO!SpO!TpO!UpO!VpO!WpO!XpO!YpO!ZpO![pO!]pO!^pO!_pO!`pO!apO!bqO!cqO!dqO!f!nO!hrO!irO!jrO!krO!lrO!r!mO!s!mO#[!qO$Q!rO$U!aO$V*kO$`*sO$a*sO%d!VO%i!^O%k!kO%m!lO%|!YO&R![O&T!aO&U*kO~P!9PO!f)TO$V*oO$`*wO$a*wO&U*oO~P!4fO#W$Wi#X$Wi$i$Wi$j$Wi$k$Wi$l$Wi$z$Wi%p$Wi&O$Wi&P$WiV$Wio$Wi!c$Wi!d$Wi$u$Wi$w$Wi$y$Wi%]$Wi%b$Wi&S$Wi$R$Wi%u$Wi$T$Wi$S$Wi~P$/qO#V*{O~Q#UX#V!oX#W!oX#X!oX$X!oX$Y!oX$Z!oX$[!oX$]!oX$^!oX$_!oX$b!oX$c!oX$d!oX$e!oX$f!oX$g!oX$h!oX&P!oX%q!oX~O%p.^O$i!oX$j!oX$k!oX$l!oX$z!oX&O!oXV!oXo!oX!c!oX!d!oX$u!oX$w!oX$y!oX%]!oX%b!oX&S!oX$R!oX%u!oX$T!oX$S!oX~P$GqO%k)YO%w&lO%x$cO%y$eO~O%m)ZO%x$cO%y$eO&V&pO~O$S)[O~OUqOqpOrpOspOtpOupOvpOwpOxpOypOzpO{pO|pO}pO!OpO!PpO!QpO!RpO!SpO!TpO!UpO!VpO!WpO!XpO!YpO!ZpO![pO!]pO!^pO!_pO!`pO!apO!bqO!cqO!dqO~O!f)]O~P$KWO%p(eOV&Xao&Xa!c&Xa!d&Xa$u&Xa$w&Xa$y&Xa%]&Xa%b&Xa$T&Xa~O&S)`O~O&R)eO&W)dO~O&S)bO~O&R)iO&W)hO~O&S)fO~O&S)jO~O&R)mO&W)lO~O%d#TO%vxO&R)eO&W)dO~O%d#TO%vxO&R)iO&W)hO~O&R)qO&W)pO~O$T)rO~P`O$k,SO$l,SO#W%}i#X%}i%u%}i&O%}i&P%}i%q%}i~O$X+aO$Y+aO$Z+hO$[+hO$]+oO$^+oO$_+oO$b+vO$c+vO$d+vO$e+}O$f+}O$g+}O$h+}O~O%p#YX%u#YX~P%!xO%p)sO%u&Qi~O%q)uO~O%p.^O#V!oa$z!oa&O!oaV!oao!oa!c!oa!d!oa$u!oa$w!oa$y!oa%]!oa%b!oa&S!oa%q!oa$R!oa%u!oa$T!oa$S!oa~O#W!oa#X!oa$X!oa$Y!oa$Z!oa$[!oa$]!oa$^!oa$_!oa$b!oa$c!oa$d!oa$e!oa$f!oa$g!oa$h!oa$i!oa$j!oa$k!oa$l!oa&P!oa~P%$_O&S)wO~O&S)xO~O&S)zO~O&S)|O~O&R*PO&W*OO~O&R*RO&W*QO~O%p)sO%u&Qq~O$T*VO~O&S*WO~O&S*XO~O&S*YO~O&S*]O~O&S*^O~O&S*_O~O#P%rX#W%rX#X%rX#Z%rX#[%rX#]%rX#^%rX#_%rX#`%rX#a%rX#b%rX#c%rX#d%rX#e%rX#f%rX#g%rX#h%rX#i%rX#j%rX#k%rX#l%rX#m%rX#n%rX#o%rX#p%rX#q%rX#r%rX#s%rX#t%rX#u%rX#v%rX#w%rX#x%rX#y%rX#z%rX#{%rX#|%rX#}%rX$O%rX$X%rX$Y%rX$Z%rX$[%rX$]%rX$^%rX$_%rX$b%rX$c%rX$d%rX$e%rX$f%rX$g%rX$h%rX%d%rX%p%rX%v%rX%{%rX&P%rX%q%rX#V%rX~O$i%rX$j%rX$k%rX$l%rX$z%rX%f!mX&O%rXV%rXo%rX!c%rX!d%rX$u%rX$w%rX$y%rX%]%rX%b%rX&S%rX$R%rX%u%rX$T%rX$S%rX~P%(tO%f#PO$o%rX$p%rX~P%(tO#P!}X#Z!}X#[!}X#]!}X#^!}X#_!}X#`!}X#a!}X#b!}X#c!}X#d!}X#e!}X#f!}X#g!}X#h!}X#i!}X#j!}X#k!}X#l!}X#m!}X#n!}X#o!}X#p!}X#q!}X#r!}X#s!}X#t!}X#u!}X#v!}X#w!}X#x!}X#y!}X#z!}X#{!}X#|!}X#}!}X$O!}X$X!}X$Y!}X$Z!}X$[!}X$]!}X$^!}X$_!}X$b!}X$c!}X$d!}X$e!}X$f!}X$g!}X$h!}X%d!}X%f!}X%v!}X%q!}X#W!}X#X!}X&P!}X~O%f!mX#V!}X%p!}X~P%.fO$o#zO$p#zO%{+QO#V!pX%f!pX%p!pX~P%.fO#P!}X#V!pX#W!}X#X!}X#Z!}X#[!}X#]!}X#^!}X#_!}X#`!}X#a!}X#b!}X#c!}X#d!}X#e!}X#f!}X#g!}X#h!}X#i!}X#j!}X#k!}X#l!}X#m!}X#n!}X#o!}X#p!}X#q!}X#r!}X#s!}X#t!}X#u!}X#v!}X#w!}X#x!}X#y!}X#z!}X#{!}X#|!}X#}!}X$O!}X$X!}X$Y!}X$Z!}X$[!}X$]!}X$^!}X$_!}X$b!}X$c!}X$d!}X$e!}X$f!}X$g!}X$h!}X$i!}X$j!}X$k!}X$l!}X%d!}X%f!pX%p!pX%u!}X%v!}X&O!}X&P!}X%q!}X$z!}XV!}Xo!}X!c!}X!d!}X$u!}X$w!}X$y!}X%]!}X%b!}X&S!}X$R!}X$T!}X$S!}X~O$o#zO$p#zO%{+RO~P%3RO#P!}X#V!pX#W!}X#X!}X#Z!}X#[!}X#]!}X#^!}X#_!}X#`!}X#a!}X#b!}X#c!}X#d!}X#e!}X#f!}X#g!}X#h!}X#i!}X#j!}X#k!}X#l!}X#m!}X#n!}X#o!}X#p!}X#q!}X#r!}X#s!}X#t!}X#u!}X#v!}X#w!}X#x!}X#y!}X#z!}X#{!}X#|!}X#}!}X$O!}X$X!}X$Y!}X$Z!}X$[!}X$]!}X$^!}X$_!}X$b!}X$c!}X$d!}X$e!}X$f!}X$g!}X$h!}X$i!}X$j!}X$k!}X$l!}X%d!}X%f!pX%p!pX%p!}X%q!}X%v!}X&O!}X&P!}X~O$o#zO$p#zO%{+SO~P%8lOU!TOqpOrpOspOtpOupOvpOwpOxpOypOzpO{pO|pO}pO!OpO!PpO!QpO!RpO!SpO!TpO!UpO!VpO!WpO!XpO!YpO!ZpO![pO!]pO!^pO!_pO!`pO!apO!bqO!cqO!dqO!f!nO!hrO!irO!jrO!krO!lrO!r!mO!s!mO#[*qO$Q!rO$U!aO$V*nO$`*vO$a*vO%d!VO%i!^O%k!kO%m!lO%|!YO&R![O&T!aO&U*nO~P!9PO$V*jO$`*rO$a*rO&U*jO~P!4fO$V*lO$`*tO$a*tO&U*lO~P!4fOU!TOqpOrpOspOtpOupOvpOwpOxpOypOzpO{pO|pO}pO!OpO!PpO!QpO!RpO!SpO!TpO!UpO!VpO!WpO!XpO!YpO!ZpO![pO!]pO!^pO!_pO!`pO!apO!bqO!cqO!dqO!hrO!irO!jrO!krO!lrO!r!mO!s!mO#[*qO$Q!rO$U!aO$V*nO$`*vO$a*vO%d$qO%i!^O%k!kO%m!lO%|!YO&R![O&T!aO&U*nO~P!9PO$V*pO$`*xO$a*xO&U*pO~P!4fO$o%wO$p%wO#P!}a#V!pa#W!}a#X!}a#Z!}a#[!}a#]!}a#^!}a#_!}a#`!}a#a!}a#b!}a#c!}a#d!}a#e!}a#f!}a#g!}a#h!}a#i!}a#j!}a#k!}a#l!}a#m!}a#n!}a#o!}a#p!}a#q!}a#r!}a#s!}a#t!}a#u!}a#v!}a#w!}a#x!}a#y!}a#z!}a#{!}a#|!}a#}!}a$O!}a$X!}a$Y!}a$Z!}a$[!}a$]!}a$^!}a$_!}a$b!}a$c!}a$d!}a$e!}a$f!}a$g!}a$h!}a%d!}a%f!pa%p!pa%v!}a&P!}a%q!}a~O%f!}a~P%EvO$i!}a$j!}a$k!}a$l!}a%p!}a&O!}a~P%EvO#P+UO#Z+VO%d#|O%v#{O#[!}a#]!}a#^!}a#_!}a#`!}a#a!}a#b!}a#c!}a#d!}a#e!}a#f!}a#g!}a#h!}a#i!}a#j!}a#k!}a#l!}a#m!}a#n!}a#o!}a#p!}a#q!}a#r!}a#s!}a#t!}a#u!}a#v!}a#w!}a#x!}a#y!}a#z!}a#{!}a#|!}a#}!}a$O!}a$X!}a$Y!}a$Z!}a$[!}a$]!}a$^!}a$_!}a$b!}a$c!}a$d!}a$e!}a$f!}a$g!}a$h!}a%f!}a#V!}a%p!}a%q!}a#W!}a#X!}a&P!}a~O$z#UiV#Uio#Ui!c#Ui!d#Ui$u#Ui$w#Ui$y#Ui%]#Ui%b#Ui&S#Ui%q#Ui$R#Ui%u#Ui$T#Ui$S#Ui~O$X+^O$Y+^O$Z+eO$[+eO$]+lO$^+lO$_+lO$b+sO$c+sO$d+sO$e+zO$f+zO$g+zO$h+zO~P%NgO$X+]O$Y+]O$Z+dO$[+dO$]+kO$^+kO$_+kO$b+rO$c+rO$d+rO$e+yO$f+yO$g+yO$h+yO~Q#Ui$X$WO$Y$WO$Z$XO$[$XO$]$YO$^$YO$_$YO$b$ZO$c$ZO$d$ZO$e$[O$f$[O$g$[O$h$[O~Q#Ui$X+[O$Y+[O$Z+cO$[+cO$]+jO$^+jO$_+jO$b+qO$c+qO$d+qO$e+xO$f+xO$g+xO$h+xO~O#W#Ui#X#Ui$i#Ui$j#Ui$k#Ui$l#Ui%p#Ui%q#Ui&O#Ui&P#Ui~P&$kO%p#Ui&O#Ui&S#Ui%u#Ui~P%!xO$X+bO$Y+bO$Z+iO$[+iO$]+pO$^+pO$_+pO$b+wO$c+wO$d+wO$e,OO$f,OO$g,OO$h,OO~O%p#Ui%q#Ui&O#Ui~P&&mO$X+`O$Y+`O$Z+gO$[+gO$]+nO$^+nO$_+nO$b+uO$c+uO$d+uO$e+|O$f+|O$g+|O$h+|O~O#W#Ui#X#Ui%f#Ui&P#Ui%q#Ui~P&'xO%p!pi%q!pi%u!pi#V!pi$z!piV!pio!pi!c!pi!d!pi$u!pi$w!pi$y!pi%]!pi%b!pi&S!pi&O!pi#W!pi#X!pi$X!pi$Y!pi$Z!pi$[!pi$]!pi$^!pi$_!pi$b!pi$c!pi$d!pi$e!pi$f!pi$g!pi$h!pi$i!pi$j!pi$k!pi$l!pi&P!pi$R!pi$T!pi$S!pi~P!%tO#W!{X#X!{X$i!{X$j!{X$k!{X$l!{X%p#YX%q!{X&O!{X&P!{X~P&$kO#P+UO#Z+VO%d#|O%v#{O#[!}i#d!}i#e!}i#f!}i#g!}i#h!}i#i!}i#j!}i#k!}i#l!}i#m!}i#n!}i#o!}i#p!}i#q!}i#r!}i#s!}i#t!}i#u!}i#v!}i#w!}i#x!}i#y!}i#z!}i#{!}i#|!}i#}!}i$O!}i$X!}i$Y!}i$Z!}i$[!}i$]!}i$^!}i$_!}i$b!}i$c!}i$d!}i$e!}i$f!}i$g!}i$h!}i%f!}i#V!}i%p!}i%q!}i#W!}i#X!}i&P!}i~O#]!}i#^!}i#_!}i#`!}i#a!}i#b!}i#c!}i~P&,oO#]+VO#^+VO#_+VO#`+VO#a+VO#b+VO#c+VO~P&,oO#P+UO#Z+VO#[+WO#]+VO#^+VO#_+VO#`+VO#a+VO#b+VO#c+VO#d+WO#e+WO#f+WO#h+WO%d#|O%v#{O#j!}i#k!}i#l!}i#m!}i#n!}i#o!}i#p!}i#q!}i#r!}i#s!}i#t!}i#u!}i#v!}i#w!}i#x!}i#y!}i#z!}i#{!}i#|!}i#}!}i$O!}i$X!}i$Y!}i$Z!}i$[!}i$]!}i$^!}i$_!}i$b!}i$c!}i$d!}i$e!}i$f!}i$g!}i$h!}i%f!}i#V!}i%p!}i%q!}i#W!}i#X!}i&P!}i~O#g!}i#i!}i~P&1[O#g+XO#i+XO~P&1[O$X!}i$Y!}i$Z!}i$[!}i$]!}i$^!}i$_!}i$b!}i$c!}i$d!}i$e!}i$f!}i$g!}i$h!}i%f!}i#V!}i%p!}i%q!}i#W!}i#X!}i&P!}i~P#A]O#W!|i#X!|i$Z!|i$[!|i$]!|i$^!|i$_!|i$b!|i$c!|i$d!|i$e!|i$f!|i$g!|i$h!|i$i!|i$j!|i$k!|i$l!|i%q!|i&O!|i&P!|i~O$X+[O$Y+[O%p!|i~P&6}O$X+]O$Y+]O%q!|i~P$'iO$X+^O$Y+^O$_!|i$b!|i$c!|i$d!|i$e!|i$f!|i$g!|i$h!|i$z!|iV!|io!|i!c!|i!d!|i$u!|i$w!|i$y!|i%]!|i%b!|i&S!|i%q!|i$R!|i%u!|i$T!|i$S!|i~O$Z!|i$[!|i$]!|i$^!|i~P&8|O$Z!|i$[!|i$]!|i$^!|i$_!|i$b!|i$c!|i$d!|i$e!|i$f!|i$g!|i$h!|i%f!|i%q!|i~O$X+_O$Y+_O~P&;QO$X+`O$Y+`O#W!|i#X!|i&P!|i~P&;QO$Z!|i$[!|i$]!|i$^!|i$_!|i$b!|i$c!|i$d!|i$e!|i$f!|i$g!|i$h!|i%p!|i&O!|i~O$X+aO$Y+aO%u!|i&S!|i~P&<mO$X+bO$Y+bO%q!|i~P&<mO$X+[O$Y+[O$Z+cO$[+cO$]+jO$^+jO#W!|i#X!|i$e!|i$f!|i$g!|i$h!|i$i!|i$j!|i$k!|i$l!|i%p!|i%q!|i&O!|i&P!|i~O$_!|i$b!|i$c!|i$d!|i~P&>YO$X+]O$Y+]O$Z+dO$[+dO$]+kO$^+kO$_!|i$b!|i$c!|i$d!|i$e!|i$f!|i$g!|i$h!|i%q!|i~P$-TO$Z+eO$[+eO$]+lO$^+lO~P&8|O$X+_O$Y+_O$Z+fO$[+fO$]+mO$^+mO$e!|i$f!|i$g!|i$h!|i%f!|i%q!|i~O$_!|i$b!|i$c!|i$d!|i~P&A_O$X+`O$Y+`O$Z+gO$[+gO$]+nO$^+nO#W!|i#X!|i$e!|i$f!|i$g!|i$h!|i%f!|i&P!|i%q!|i~O$_!|i$b!|i$c!|i$d!|i~P&BgO$X+aO$Y+aO$Z+hO$[+hO$]+oO$^+oO$e!|i$f!|i$g!|i$h!|i%p!|i%u!|i&O!|i&S!|i~O$_!|i$b!|i$c!|i$d!|i~P&CxO$X+bO$Y+bO$Z+iO$[+iO$]+pO$^+pO$e!|i$f!|i$g!|i$h!|i%p!|i%q!|i&O!|i~O$_!|i$b!|i$c!|i$d!|i~P&EWO$_+jO$b+qO$c+qO$d+qO~P&>YO$X+]O$Y+]O$Z+dO$[+dO$]+kO$^+kO$_+kO$b+rO$c+rO$d+rO$e!|i$f!|i$g!|i$h!|i%q!|i~P$-TO$X+^O$Y+^O$Z+eO$[+eO$]+lO$^+lO$_+lO$b+sO$c+sO$d+sO$z!|iV!|io!|i!c!|i!d!|i$u!|i$w!|i$y!|i%]!|i%b!|i&S!|i%q!|i$R!|i%u!|i$T!|i$S!|i~O$e!|i$f!|i$g!|i$h!|i~P&GvO$_+mO$b+tO$c+tO$d+tO~P&A_O$_+nO$b+uO$c+uO$d+uO~P&BgO$_+oO$b+vO$c+vO$d+vO~P&CxO$_+pO$b+wO$c+wO$d+wO~P&EWO#W!|i#X!|i$i!|i$j!|i$k!|i$l!|i%p!|i%q!|i&O!|i&P!|i~P&$kO$X+]O$Y+]O$Z+dO$[+dO$]+kO$^+kO$_+kO$b+rO$c+rO$d+rO$e+yO$f+yO$g+yO$h+yO%q!|i~P$-TO$e+zO$f+zO$g+zO$h+zO~P&GvO%f!|i%q!|i~P#@OO#W!|i#X!|i%f!|i&P!|i%q!|i~P&'xO%p!|i%u!|i&O!|i&S!|i~P%!xO%p!|i%q!|i&O!|i~P&&mO#W!{i#X!{i$i!{i$j!{i$k!{i$l!{i%p!{i%q!{i&O!{i&P!{i~P&$kO$X+]O$Y+]O$Z+dO$[+dO$]+kO$^+kO$_+kO$b+rO$c+rO$d+rO$e+yO$f+yO$g+yO$h+yO~O#W!{i#X!{i$i!{i$j!{i$k!{i$l!{i%u!{i&O!{i&P!{i%q!{i~P' eO$i,PO$j,PO%q!zi~P$2[O$i,QO$j,QO#W!zi#X!zi$k!zi$l!zi%u!zi&O!zi&P!zi%q!zi~O$k,RO$l,RO%q!yi~P$3yO%p,TO#W%zi#X%zi%q%zi&O%zi&P%zi~O%p!pq%q!pq%u!pq#V!pq$z!pqV!pqo!pq!c!pq!d!pq$u!pq$w!pq$y!pq%]!pq%b!pq&S!pq&O!pq#W!pq#X!pq$X!pq$Y!pq$Z!pq$[!pq$]!pq$^!pq$_!pq$b!pq$c!pq$d!pq$e!pq$f!pq$g!pq$h!pq$i!pq$j!pq$k!pq$l!pq&P!pq$R!pq$T!pq$S!pq~P!%tO!f)TO$V*pO$`*xO$a*xO&U*pO~P!4fO#W$Wi#X$Wi$i$Wi$j$Wi$k$Wi$l$Wi%p$Wi%q$Wi&O$Wi&P$Wi~P&$kO#W$Wi#X$Wi$i$Wi$j$Wi$k$Wi$l$Wi%u$Wi&O$Wi&P$Wi%q$Wi$z$WiV$Wio$Wi!c$Wi!d$Wi$u$Wi$w$Wi$y$Wi%]$Wi%b$Wi&S$Wi$R$Wi$T$Wi$S$Wi~P' eO$X+^O$Y+^O$Z+eO$[+eO$]+lO$^+lO$_+lO$b+sO$c+sO$d+sO$e+zO$f+zO$g+zO$h+zO$z$WiV$Wio$Wi!c$Wi!d$Wi$u$Wi$w$Wi$y$Wi%]$Wi%b$Wi&S$Wi%q$Wi$R$Wi%u$Wi$T$Wi$S$Wi~O%f$Wi%q$Wi~P#@OO#W$Wi#X$Wi%f$Wi&P$Wi%q$Wi~P&'xO%p$Wi%u$Wi&O$Wi&S$Wi~P%!xO%p$Wi%q$Wi&O$Wi~P&&mO#W#UX#X#UX$X#UX$Y#UX$Z#UX$[#UX$]#UX$^#UX$_#UX$b#UX$c#UX$d#UX$e#UX$f#UX$g#UX$h#UX$i#UX$j#UX$k#UX$l#UX%q#UX&O#UX&P#UX~O#V*|O%p#UX~P'-lO#V*zO~Q#UX#V*yO$z#UXV#UXo#UX!c#UX!d#UX$u#UX$w#UX$y#UX%]#UX%b#UX&S#UX%q#UX$R#UX%u#UX$T#UX$S#UX~O$X#UX$Y#UX$Z#UX$[#UX$]#UX$^#UX$_#UX$b#UX$c#UX$d#UX$e#UX$f#UX$g#UX$h#UX~P'/hO$X#UX$Y#UX$Z#UX$[#UX$]#UX$^#UX$_#UX$b#UX$c#UX$d#UX$e#UX$f#UX$g#UX$h#UX%f#UX%q#UX~O#V#vO~P'1oO#V+PO#W#UX#X#UX&P#UX~P'1oO$X#UX$Y#UX$Z#UX$[#UX$]#UX$^#UX$_#UX$b#UX$c#UX$d#UX$e#UX$f#UX$g#UX$h#UX%p#UX&O#UX~O#V*}O%u#UX&S#UX~P'3[O#V+OO%q#UX~P'3[O%p#YX%q#YX~P&&mO%p-tO%q&Qq~O#V*}O%p#UX&O#UX&S#UX~O#V+OO%p#UX%q#UX&O#UX~O$X!|X$Y!|X$Z!|X$[!|X$]!|X$^!|X$_!|X$b!|X$c!|X$d!|X$e!|X$f!|X$g!|X$h!|X%f!|X%q!|X#W!|X#X!|X&P!|X~P#A]O#W!{X#X!{X$i!{X$j!{X$k!{X$l!{X%p!{X%q!{X&O!{X&P!{X~P&$kO#W!{X#X!{X$i!{X$j!{X$k!{X$l!{X%u!{X&O!{X&P!{X%q!{X~P' eO$i,PO$j,PO%q!zX~P!-nO$i,QO$j,QO#W!zX#X!zX$k!zX$l!zX%u!zX&O!zX&P!zX%q!zX~O$k,RO$l,RO%q!yX~P!/]O%p,TO#W%zX#X%zX%q%zX&O%zX&P%zX~O#W.[O#X.[O&O,UO&P.[O%p!wX%q!wX~O%f.tO~O$o#zO$p#zO%{.`O%f!pX~P!>rO%f,hO~O%f,iO~O%f,jO~O%f,kO~O%f,lO~O%f,mO~O%f,nO~O$o%wO$p%wO%f!pa~P#=PO%p-dO~O$X!|a$Y!|a$Z!|a$[!|a$]!|a$^!|a$_!|a$b!|a$c!|a$d!|a$e!|a$f!|a$g!|a$h!|a%u!|a&S!|a~O#W.gO#X.gO&P.gO%p!|a&O!|a~P'<bO#W.dO#X.dO&P.dO$z!|aV!|ao!|a!c!|a!d!|a$u!|a$w!|a$y!|a%]!|a%b!|a%q!|a$R!|a$T!|a$S!|a~P'<bO#W.hO#X.hO&P.hO%p!|a&O!|a~P$>hO%p$jO%f!oX~P$GqO%p-tO%q&Qi~O%p$jO#V!oa$X!oa$Y!oa$Z!oa$[!oa$]!oa$^!oa$_!oa$b!oa$c!oa$d!oa$e!oa$f!oa$g!oa$h!oa%f!oa%q!oa#W!oa#X!oa&P!oa~O#W.]O#X.]O&O$`O&P.]O%p!wX&S!wX~O%p.^O%q!oX%u!oX#V!oX$z!oXV!oXo!oX!c!oX!d!oX$u!oX$w!oX$y!oX%]!oX%b!oX&S!oX&O!oX$R!oX$T!oX$S!oX~O#W$aO#X$aO&O,UO&P$aO%q!wX~O%f.qO~O%f,VO~O%l%h%{!rU%iXW&Vkj%wcbc!f%f~",
  goto: "!Kb&YPPPP&Z&iPPPP&wPPPPP'Y']PP+d+dP+dPPPP+dP/gP/jPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP0iP4mPPPPP8l<p=f?zBOPPFZJ[JtKSNj! |!#b!%Q!&s!,q5OP!1T!1Z!1b!1g!1lPPP!4XPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP5OPPPPPP!4iPPPPPPPPPPPPPPPPPPPP!4sFZPP!6P&Z&Z&ZP&ZP&ZPP!7aP!7g!8P!8f!8l!8r!8x!9O!9U!9g!:}!;X!;c!;m!<PPPPP!<VP!<eP!<hPPPPPPPPPPPP!<k!Ab!E{PPPPP!I|PP!KYPP!1TPPPPPP!K_iSOU!P#O#i#j%V%W%d'k'q)QiXOU!P#O#i#j%V%W%d'k'q)QoQORUXt!P#O#i#j%V%W%d'k'q)QR$x!u(|!m^wx{|!V!Y![!b!q!r!s!z!{#T#U#V#v#z#{#|#}$O$P$Q$R$S$T$W$X$Y$Z$[$]$^$_$`$a$b$e$j$q$z${%P%Q%f%g%j%k%w&[&^&_'Q'X'Y'_'`'c'd'h'i'z'{'|'}(Q(k(l(m(n(r(s(y(z)[)d)e)h)i)l)m)p)q)s*O*P*Q*R*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+T+U+V+W+X+Y+Z+[+]+^+_+`+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,T,U,V,`,h,i,j,k,l,m,n-d-t.[.].^.b.c.d.e.f.g.h.q.tQ$v!uR(g'U)R!S^wx{|!V!Y![!b!q!r!s!u!z!{#T#U#V#v#z#{#|#}$O$P$Q$R$S$T$W$X$Y$Z$[$]$^$_$`$a$b$e$j$q$z${%P%Q%f%g%j%k%w&[&^&_'Q'U'X'Y'_'`'c'd'h'i'z'{'|'}(Q(k(l(m(n(r(s(y(z)[)d)e)h)i)l)m)p)q)s*O*P*Q*R*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+T+U+V+W+X+Y+Z+[+]+^+_+`+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,T,U,V,`,h,i,j,k,l,m,n-d-t.[.].^.b.c.d.e.f.g.h.q.tR$p!pQsWQ!O[Q!P]Q!vbQ!}eQ#OfQ#^uQ#_vQ$}!wQ%O!xQ%`#XQ%c#[Q%d#]Q'n%aR'o%bnlW[]befuv!w!x#X#[#]%a%b&|!W^{|!V!Y![!b!q!r!s!z!{#U#V#{#|#}$O$P$Q$R$S$W$X$Y$Z$[$]$^$_$`$b$e$q$z${%P%Q%f%g%j%k&^'Q'X'Y'_'`'c'd'h'i'z'|'}(Q(k(l(m(n(r(s(y(z)[)d)e)h)i)l)m)p)q)s*O*P*Q*R*j*k*l*o*p*r*s*t*w*x*y*z*{*|*}+O+T+[+]+^+a+b+c+d+e+h+i+j+k+l+o+p+q+r+s+v+w+x+y+z+},O,P,Q,R,S,T,U,V,`,h,i,j,m,n-d-t.q.tQ%Y#P!X*c#v#z%w*m*n*q*u*v+P+U+V+W+X+Y+Z+_+`+f+g+m+n+t+u+{+|,k,lnoW[]befuv!w!x#X#[#]%a%b(V!^^{|!V!Y![!b!q!r!s!z!{#U#V#v#z#{#|#}$O$P$Q$R$S$W$X$Y$Z$[$]$^$_$`$b$e$q$z${%P%Q%f%g%j%k%w&^'Q'X'Y'_'`'c'd'h'i'z'|'}(Q(k(l(m(n(r(s(y(z)[)d)e)h)i)l)m)p)q)s*O*P*Q*R*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+T+U+V+W+X+Y+Z+[+]+^+_+`+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,T,U,V,`,h,i,j,k,l,m,n-d-t.q.tnnW[]befuv!w!x#X#[#]%a%b&|!X^{|!V!Y![!b!q!r!s!z!{#U#V#{#|#}$O$P$Q$R$S$W$X$Y$Z$[$]$^$_$`$b$e$q$z${%P%Q%f%g%j%k&^'Q'X'Y'_'`'c'd'h'i'z'|'}(Q(k(l(m(n(r(s(y(z)[)d)e)h)i)l)m)p)q)s*O*P*Q*R*j*k*l*o*p*r*s*t*w*x*y*z*{*|*}+O+T+[+]+^+a+b+c+d+e+h+i+j+k+l+o+p+q+r+s+v+w+x+y+z+},O,P,Q,R,S,T,U,V,`,h,i,j,m,n-d-t.q.tQ%Z#P!X*`#v#z%w*m*n*q*u*v+P+U+V+W+X+Y+Z+_+`+f+g+m+n+t+u+{+|,k,l!gy[esz!O!P!v!y!}#O#S#[#^#_#i$y$}%O%U%V%`%c%d%e%i'^'b'm'n'o'p'q(})O#|!Z^{|!V!Y![!b!r!z!{#U#V#{#|$T$b$e$q$z${%P%Q%f%g%j%k'Q'X'Y'_'`'c'd'h'i'|(Q(k(l(m(n(r(s(y(z)[)d)e)h)i)l)m)p)q*O*P*Q*R*j*k*l*m*n*o*p,V.q.tS#cw#TQ#exQ(S&_Q-l.bQ-m.cQ-n.dQ-o.eQ-p.fQ-q.gQ-r.hU-v$a&['{Q-w.]R-x.[#|!o^{|!V!Y![!b!r!z!{#U#V#{#|$T$b$e$q$z${%P%Q%f%g%j%k'Q'X'Y'_'`'c'd'h'i'|(Q(k(l(m(n(r(s(y(z)[)d)e)h)i)l)m)p)q*O*P*Q*R*j*k*l*m*n*o*p,V.q.tS&t$j.^[(U&_.b.c.d.g.hS.l.e.fa.pwx#T$a&['{.[.]%Y!^!q!s#v#z#}$O$P$Q$R$S$W$X$Y$Z$[$]$^$_$`%w&^'z'})s*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+T+U+V+W+X+Y+Z+[+]+^+_+`+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,T,U,`,h,i,j,k,l,m,n-d-t#^!_^{|!V![!b!r!z!{#U#V#{$b$z${%P%Q%f%g%j%k'Q'X'Y'_'`'c'd'h'i(k(l(m(n(r(s(y(z)[)d)e)h)i)l)m)p)q*O*P*Q*R*o.qv!nwx#T$T$a$j&[&_'{.[.].^.b.c.d.e.f.g.hS*g*m*nU*h'|*k*lc*i!Y#|$e$q(Q*j*p,V.t(}!m^wx{|!V!Y![!b!q!r!s!z!{#T#U#V#v#z#{#|#}$O$P$Q$R$S$T$W$X$Y$Z$[$]$^$_$`$a$b$e$j$q$z${%P%Q%f%g%j%k%w&[&^&_'Q'X'Y'_'`'c'd'h'i'z'{'|'}(Q(k(l(m(n(r(s(y(z)[)d)e)h)i)l)m)p)q)s*O*P*Q*R*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+T+U+V+W+X+Y+Z+[+]+^+_+`+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,T,U,V,`,h,i,j,k,l,m,n-d-t.[.].^.b.c.d.e.f.g.h.q.tQ$f!kQ$h!lW&l$f&m&o(YQ&o$gW&p$h&q&s(]R&s$ii$d!k!l$f$g$h$i&m&o&q&s(Y(]Q!t^Q#g{Q#h|S#t!V$qQ#u!YQ#x![Q$t!rQ%S!zQ%T!{Q%^#UQ%_#VW&i$b,V.q.tQ&k$eQ'[$zQ']${Q'f%PQ'g%QQ'r%fQ's%gQ't%jQ'u%kQ(c'QQ(i'XQ(j'YQ(p'_Q(q'`Q(u'cQ(v'dQ(w'hQ(x'iQ)W(QQ)`(kQ)a(lQ)b(mQ)c(nQ)f(rQ)g(sQ)j(yQ)k(zQ)v)[Q)w)lQ)x)dQ)y)eQ)z)hQ){)iQ)|)pQ)})mQ*S)qQ*W*OQ*X*QQ*Z*PR*[*R#Q!g^{|!r!z!{#U#V$b$z${%P%Q%f%g%j%k'Q'X'Y'_'`'c'd'h'i(k(l(m(n(r(s(y(z)[)d)e)h)i)l)m)p)q*O*P*Q*RU.Q!V$q,VS.o![.qX.r!Y$e(Q.t#U!f^{|![!r!z!{#U#V$b$z${%P%Q%f%g%j%k'Q'X'Y'_'`'c'd'h'i(k(l(m(n(r(s(y(z)[)d)e)h)i)l)m)p)q*O*P*Q*R.qQ&h$`Q-b,U_.P!V!Y$e$q(Q,V.t#W!e^{|![!r!z!{#U#V$`$b$z${%P%Q%f%g%j%k'Q'X'Y'_'`'c'd'h'i(k(l(m(n(r(s(y(z)[)d)e)h)i)l)m)p)q*O*P*Q*R.qU%y#{#|'|Q&g$_Q)R'zQ-a,Ta.O!V!Y$e$q(Q,U,V.t#Y!d^{|![!r!z!{#U#V$_$`$b$z${%P%Q%f%g%j%k'Q'X'Y'_'`'c'd'h'i(k(l(m(n(r(s(y(z)[)d)e)h)i)l)m)p)q*O*P*Q*R.qQ&f$^Q-_,RQ-`,Sb-|!V!Y$e$q(Q,T,U,V.tX-}#{#|'z'|#[!c^{|![!r!z!{#U#V$^$_$`$b$z${%P%Q%f%g%j%k'Q'X'Y'_'`'c'd'h'i(k(l(m(n(r(s(y(z)[)d)e)h)i)l)m)p)q*O*P*Q*R.qh$V!b!s*j*k*n*r*s*t*u*v*w*xQ%u#vQ&Q#{`&`$W+[+]+^+_+`+a+bQ&a$XQ&b$YQ&c$ZQ&d$[Q&e$]Q'x*mQ(R&^S)U'})sQ,X*yQ,Y*zQ,Z*{Q,[*|Q,]*}Q,^+OQ,_+PQ,b#|Q,o+cQ,p+dQ,q+eQ,r+fQ,s+gQ,t+hQ,u+iQ,v+jQ,w+kQ,x+lQ,y+mQ,z+nQ,{+oQ,|+pQ,}+qQ-O+rQ-P+sQ-Q+tQ-R+uQ-S+vQ-T+wQ-U+xQ-V+yQ-W+zQ-X+{Q-Y+|Q-Z+}Q-[,OQ-],PQ-^,QQ-e,hQ-f,iQ-g,jQ-h,kQ-i,lQ-j,mQ-k,nS-s-d-td-z!V!Y$e$q(Q,R,T,U,V.tU-{'z'|,SQ.i*oQ.j*lR.k*p&j!`^{|!V!Y![!b!r!s!z!{#U#V#{#|$W$X$Y$Z$[$]$^$_$`$b$e$q$z${%P%Q%f%g%j%k&^'Q'X'Y'_'`'c'd'h'i'z'|'}(Q(k(l(m(n(r(s(y(z)[)d)e)h)i)l)m)p)q)s*O*P*Q*R*j*k*l*o*p*r*s*t*w*x*y*z*{*|*}+O+[+]+^+a+b+c+d+e+h+i+j+k+l+o+p+q+r+s+v+w+x+y+z+},O,P,Q,R,S,T,U,V,h,i,j,m,n-d-t.q.tQ$s!qQ%x#zS&S#}+UQ&V$OQ&W$PQ&X$QQ&Y$RQ&Z$SQ'y%wQ,W*qQ,a+TQ,c+VQ,d+WQ,e+XQ,f+YQ,g+ZQ-c,`u-y#v*m*n*u*v+P+_+`+f+g+m+n+t+u+{+|,k,lQ&T#{R&U#|S&P#{#|R)S'|V%z#{#|'|V%}#{#|'|#Q!i^{|!r!z!{#U#V$b$z${%P%Q%f%g%j%k'Q'X'Y'_'`'c'd'h'i(k(l(m(n(r(s(y(z)[)d)e)h)i)l)m)p)q*O*P*Q*RQ#q!VQ$U!bU%|#{#|'|Q&]$TU&i$a.[.]Q(P&[`(T&_.b.c.d.e.f.g.hQ)S'{W.R!Y$e(Q.tQ.T*jQ.U*kQ.V*lQ.W*mQ.X*nQ.Y*oQ.Z*pS.s![.qT.u$q,VQ&R#{Q)V'}S*T)s-tQ.a#|R.m-da$V!b*j*k*l*m*n*o*p#e!j^{|!V!Y![!r!z!{#U#V$b$e$q$z${%P%Q%f%g%j%k'Q'X'Y'_'`'c'd'h'i(Q(k(l(m(n(r(s(y(z)[)d)e)h)i)l)m)p)q*O*P*Q*R,V.q.tQ}[U!|ez!OQ#WsS$|!v#SU%R!y!}#[Q%h#^Q%l#_S'Z$y%`S'a$}%eS'e%O%iS'j%U%cS(o'^'nS(t'b'oQ(|'mQ)P'pQ)n(}R)o)OQ'S$uR)^(eQUOYgU#j%W'k)QQ#j!PS%W#O#iS'k%V%dR)Q'qhROU!P#O#i#j%V%W%d'k'q)QSaRtRtXQ&w$lR(^&wQ&z$mR(`&zQ&|$nR(a&|Q'O$oR(b'OQ'V$vR(h'VU#QjmnS#p!U!XS%[#Q#pT'w*`*bQz[S!ye!OQ#Ssp#fz!y#S#i$y%U%V%e%i'^'b'm'p'q(})OQ#i!PQ$y!vS%U!}#[Q%V#OQ%e#^Q%i#_Q'^$}Q'b%OQ'm%`Q'p%cQ'q%dQ(}'nR)O'oQ)t)VS*U)t-uR-u.mQ&m$fS(W&m(YR(Y&oQ&q$hS(Z&q(]R(]&sQ$k!oW&u$k)X._.nQ)X(UQ._.pR.n.lQ(f'SR)_(fiTOU!P#O#i#j%V%W%d'k'q)QR_PR$w!unoW[]befuv!w!x#X#[#]%a%b#^!]^{|!V![!b!r!z!{#U#V#{$b$z${%P%Q%f%g%j%k'Q'X'Y'_'`'c'd'h'i(k(l(m(n(r(s(y(z)[)d)e)h)i)l)m)p)q*O*P*Q*R*o.qn#awx#T$a&[&_'{.[.].^.b.c.d.g.h%Y$r!q!s#v#z#}$O$P$Q$R$S$W$X$Y$Z$[$]$^$_$`%w&^'z'})s*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+T+U+V+W+X+Y+Z+[+]+^+_+`+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,T,U,`,h,i,j,k,l,m,n-d-tS'R$u(eQ)](dS*d*m*nU*e'|*k*lb*f!Y#|$e$q(Q*j*p,V.tX.S$T$j.e.fnjW[]befuv!w!x#X#[#]%a%b|qwx#T$T$a$j$u&[&_'{(d(e.[.].^.b.c.d.e.f.g.h&|!U^{|!V!Y![!b!q!r!s!z!{#U#V#{#|#}$O$P$Q$R$S$W$X$Y$Z$[$]$^$_$`$b$e$q$z${%P%Q%f%g%j%k&^'Q'X'Y'_'`'c'd'h'i'z'|'}(Q(k(l(m(n(r(s(y(z)[)d)e)h)i)l)m)p)q)s*O*P*Q*R*j*k*l*o*p*r*s*t*w*x*y*z*{*|*}+O+T+[+]+^+a+b+c+d+e+h+i+j+k+l+o+p+q+r+s+v+w+x+y+z+},O,P,Q,R,S,T,U,V,`,h,i,j,m,n-d-t.q.t!X*b#v#z%w*m*n*q*u*v+P+U+V+W+X+Y+Z+_+`+f+g+m+n+t+u+{+|,k,lnmW[]befuv!w!x#X#[#]%a%b&|!X^{|!V!Y![!b!q!r!s!z!{#U#V#{#|#}$O$P$Q$R$S$W$X$Y$Z$[$]$^$_$`$b$e$q$z${%P%Q%f%g%j%k&^'Q'X'Y'_'`'c'd'h'i'z'|'}(Q(k(l(m(n(r(s(y(z)[)d)e)h)i)l)m)p)q)s*O*P*Q*R*j*k*l*o*p*r*s*t*w*x*y*z*{*|*}+O+T+[+]+^+a+b+c+d+e+h+i+j+k+l+o+p+q+r+s+v+w+x+y+z+},O,P,Q,R,S,T,U,V,`,h,i,j,m,n-d-t.q.t!X*`#v#z%w*m*n*q*u*v+P+U+V+W+X+Y+Z+_+`+f+g+m+n+t+u+{+|,k,l#e!h^{|!V!Y![!r!z!{#U#V$b$e$q$z${%P%Q%f%g%j%k'Q'X'Y'_'`'c'd'h'i(Q(k(l(m(n(r(s(y(z)[)d)e)h)i)l)m)p)q*O*P*Q*R,V.q.tV%{#{#|'|R'T$u",
  nodeNames: "⚠ LineComment BlockComment Rel DefinitionStatement Docstring BasicId Keyword DocstringLiteral MultilineDocstringLiteral Attribute AttributeKeyword AttributeKeyword AttributeKeyword AttributeKeyword AttributeKeyword AttributeParams BaseLiteral IntLiteral FloatLiteral RelnameLiteral RelnameStringLiteral StaticStringLiteral RelnameMultilineStringLiteral StaticMultilineStringLiteral CharLiteral DateLiteral DateTimeLiteral RawStringLiteral Keyword RawStringSequence Keyword LhsId Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Keyword Keyword Keyword ParenOpId Operator QualifiedName Emphasis Emphasis Emphasis Emphasis Emphasis QualifiedNameElem FormalParamsBracket FormalParams FormalParam Literal BooleanLiteral SpecializeIntLiteral InterpolationLiteral Interpolation InterpolationId Expression UnionExpression JoinExpression OverrideExpression RestrictExpression LogicalExpression BasicExpression SpecializeExpression OperatorKeyword NocommaParam NocommaExpression NocommaUnionExpression NocommaAbstractExpression Bindings Keyword Keyword Keyword LogicalParam OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword BoundedExpression Keyword Keyword Keyword Keyword Keyword Keyword LogicalAbstractExpression Keyword OperatorKeyword Keyword OperatorKeyword Keyword OperatorKeyword OperatorKeyword Keyword OperatorKeyword Keyword OperatorKeyword OperatorKeyword Keyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword AbstractExpression InterpolationMultilineLiteral Keyword OperatorKeyword FormalParamsParen ValueTypeStatement EntityTypeStatement ConstraintStatement Keyword ModuleStatement Keyword UseStatement Keyword Keyword Alias Keyword",
  maxTerm: 239,
  nodeProps: [
    ["group", -6,4,172,173,174,176,178,"Declaration"]
  ],
  skippedNodes: [0,1,2],
  repeatNodeCount: 14,
  tokenData: "%:w~R#vOX)iXY6kYZ:oZ[6k[])i]^:o^p)ipq6kqr;[rs=Sst!*vtu)iuv!3cvw)iwx!3txy!>Xyz!?Sz{!?}{|!@x|}!Bv}!O!?}!O!P!Cq!P!Q!KO!Q!R#NV!R![$?p![!]$AT!]!^$Cz!^!_$Du!_!`$GP!`!a$G|!a!b)i!b!c$H}!c!}$Ix!}#O$M[#O#P$NV#P#Q% j#Q#R%!e#R#S%'[#S#T)i#T#Y$Ix#Y#Z%({#Z#h$Ix#h#i%1w#i#o$Ix#o#p%5g#p#q%6b#q#r%7]#r$f)i$f$g6k$g$r)i$r$s!?}$s%o)i%o%p!?}%p&a)i&a&b!?}&b4w)i4w5b$Ix5b5i)i5i6S$Ix6S#BY)i#BY#BZ6k#BZ$IS)i$IS$I_6k$I_$I|)i$I|$I}%8W$I}$JO%8W$JO$JT)i$JT$JU6k$JU$KV)i$KV$KW6k$KW%#t)i%#t%#u!?}%#u%#v)i%#v%#w!?}%#w%%U)i%%U%%V!?}%%V%%W)i%%W%%X!?}%%X%%Y)i%%Y%%Z!?}%%Z%%[)i%%[%%]!?}%%]%&Y)i%&Y%&Z%9R%&Z%&])i%&]%&^%9|%&^%&b)i%&b%&c!?}%&c%'R)i%'R%'S!?}%'S%'T!?}%'T%'U!?}%'U%'V!?}%'V%'h)i%'h%'i!?}%'i%'t)i%'t%'u!?}%'u%(^)i%(^%(_!?}%(_%(`!?}%(`%(a!?}%(a%(b)i%(b%(c!?}%(c%(d!?}%(d%(x)i%(x%(y!?}%(y%(z!?}%(z%({!?}%({%(|!?}%(|%)Q)i%)Q%)R!?}%)R%)S!?}%)S%)U)i%)U%)V!?}%)V%)W!?}%)W%)c)i%)c%)d!?}%)d%)e!?}%)e%)f!?}%)f%)g)i%)g%)h!?}%)h%)i)i%)i%)j!?}%)j%*])i%*]%*^!?}%*^&FU)i&FU&FV6k&FV?HT)i?HT?HU6k?HU~)i!Y)rY%lp&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bh*iY&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b`+^U&V`Or+Xrs+psu+Xv#O+X#O#P,i#P~+X`+sUOr+Xrs,Vsu+Xv#O+X#O#P,i#P~+X`,YTOr+Xsu+Xv#O+X#O#P,i#P~+X`,ldrs+Xuv+Xwx+X!Q!R-z!R!S-z!S!T-z!T!U-z!U!Y.i!w!x/W#O#P+X#T#U+X#U#V+X#X#Y+X#Y#Z+X#b#c+X#f#g+X#h#i+X#i#j0Y#j#k+X#l#m0r`.PW&V`Or+Xrs+psu+Xv!Q+X!Q!Y.i!Y#O+X#O#P,i#P~+X`.nW&V`Or+Xrs+psu+Xv!Q+X!Q!Y+X!Y#O+X#O#P,i#P~+X`/ZR!Q![/d!c!i/d#T#Z/d`/gR!Q![/p!c!i/p#T#Z/p`/sR!Q![/|!c!i/|#T#Z/|`0PR!Q![0Y!c!i0Y#T#Z0Y`0]R!Q![0f!c!i0f#T#Z0f`0iR!Q![0r!c!i0r#T#Z0r`0uR!Q![1O!c!i1O#T#Z1O`1RR!Q![+X!c!i+X#T#Z+Xh1_drs*buv*bwx*b!Q!R2m!R!S2m!S!T2m!T!U2m!U!Y3j!w!x4g#O#P*b#T#U*b#U#V*b#X#Y*b#Y#Z*b#b#c*b#f#g*b#h#i*b#i#j5i#j#k*b#l#m6Rh2t[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y3j!Y#O*b#O#P1[#P~*bh3q[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y*b!Y#O*b#O#P1[#P~*bh4jR!Q![4s!c!i4s#T#Z4sh4vR!Q![5P!c!i5P#T#Z5Ph5SR!Q![5]!c!i5]#T#Z5]h5`R!Q![5i!c!i5i#T#Z5ih5lR!Q![5u!c!i5u#T#Z5uh5xR!Q![6R!c!i6R#T#Z6Rh6UR!Q![6_!c!i6_#T#Z6_h6bR!Q![*b!c!i*b#T#Z*b~6vl%lp%_~&V`%wWOX*bXY8nYZ+XZ[8n[]*b]^+X^p*bpq8nqr*brs+psu*bv#O*b#O#P1[#P$f*b$f$g8n$g#BY*b#BY#BZ8n#BZ$IS*b$IS$I_8n$I_$JT*b$JT$JU8n$JU$KV*b$KV$KW8n$KW&FU*b&FU&FV8n&FV?HT*b?HT?HU8n?HU~*b~8wl%_~&V`%wWOX*bXY8nYZ+XZ[8n[]*b]^+X^p*bpq8nqr*brs+psu*bv#O*b#O#P1[#P$f*b$f$g8n$g#BY*b#BY#BZ8n#BZ$IS*b$IS$I_8n$I_$JT*b$JT$JU8n$JU$KV*b$KV$KW8n$KW&FU*b&FU&FV8n&FV?HT*b?HT?HU8n?HU~*b~:xU%lp%`~&V`Or+Xrs+psu+Xv#O+X#O#P,i#P~+X![;e[%lp&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!_*b!_!`<Z!`#O*b#O#P1[#P~*bj<dY&V`%wW!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!a=XZ%kzOY=zYZ+XZ]=z]^+X^r=zrsJQsu=zuv?]v#O=z#O#PDo#P~=zg>PZ&V`OY=zYZ+XZ]=z]^+X^r=zrs>rsu=zuv?]v#O=z#O#PDo#P~=zg>yUfUWPOr+Xrs,Vsu+Xv#O+X#O#P,i#P~+XP?`VOY?]Z]?]^r?]rs?us#O?]#O#P?z#P~?]P?zOWPP?}drs?]uv?]wx?]!Q!RA]!R!SA]!S!TA]!T!UA]!U!YA{!w!xBk#O#P?]#T#U?]#U#V?]#X#Y?]#Y#Z?]#b#c?]#f#g?]#h#i?]#i#jCm#j#k?]#l#mDVPA`XOY?]Z]?]^r?]rs?us!Q?]!Q!YA{!Y#O?]#O#P?z#P~?]PBOXOY?]Z]?]^r?]rs?us!Q?]!Q!Y?]!Y#O?]#O#P?z#P~?]PBnR!Q![Bw!c!iBw#T#ZBwPBzR!Q![CT!c!iCT#T#ZCTPCWR!Q![Ca!c!iCa#T#ZCaPCdR!Q![Cm!c!iCm#T#ZCmPCpR!Q![Cy!c!iCy#T#ZCyPC|R!Q![DV!c!iDV#T#ZDVPDYR!Q![Dc!c!iDc#T#ZDcPDfR!Q![?]!c!i?]#T#Z?]gDrdrs=zuv=zwx=z!Q!RFQ!R!SFQ!S!TFQ!T!UFQ!U!YGO!w!xG|#O#P=z#T#U=z#U#V=z#X#Y=z#Y#Z=z#b#c=z#f#g=z#h#i=z#i#jIO#j#k=z#l#mIhgFV]&V`OY=zYZ+XZ]=z]^+X^r=zrs>rsu=zuv?]v!Q=z!Q!YGO!Y#O=z#O#PDo#P~=zgGT]&V`OY=zYZ+XZ]=z]^+X^r=zrs>rsu=zuv?]v!Q=z!Q!Y=z!Y#O=z#O#PDo#P~=zgHPR!Q![HY!c!iHY#T#ZHYgH]R!Q![Hf!c!iHf#T#ZHfgHiR!Q![Hr!c!iHr#T#ZHrgHuR!Q![IO!c!iIO#T#ZIOgIRR!Q![I[!c!iI[#T#ZI[gI_R!Q![Ih!c!iIh#T#ZIhgIkR!Q![It!c!iIt#T#ZItgIwR!Q![=z!c!i=z#T#Z=z!aJXUfUWPOr+XrsJksu+Xv#O+X#O#P,i#P~+X!aJpV%m![OrKVrs!)csuKVuvLxv#OKV#O#P!$n#P~KVVKYVOrKVrsKosuKVuvLxv#OKV#O#P!$n#P~KVVKrVOrKVrsLXsuKVuvLxv#OKV#O#P!$n#P~KVVL[VOrKVrsLqsuKVuvLxv#OKV#O#P!$n#P~KVVLxOhUXPPL{TOrLxrsM[s#OLx#O#PNV#P~LxPM_TOrLxrsMns#OLx#O#PNV#P~LxPMqTOrLxrsNQs#OLx#O#PNV#P~LxPNVOXPPNYdrsLxuvLxwxLx!Q!R! h!R!S! h!S!T! h!T!U! h!U!Y!!Q!w!x!!j#O#PLx#T#ULx#U#VLx#X#YLx#Y#ZLx#b#cLx#f#gLx#h#iLx#i#j!#l#j#kLx#l#m!$UP! kVOrLxrsM[s!QLx!Q!Y!!Q!Y#OLx#O#PNV#P~LxP!!TVOrLxrsM[s!QLx!Q!YLx!Y#OLx#O#PNV#P~LxP!!mR!Q![!!v!c!i!!v#T#Z!!vP!!yR!Q![!#S!c!i!#S#T#Z!#SP!#VR!Q![!#`!c!i!#`#T#Z!#`P!#cR!Q![!#l!c!i!#l#T#Z!#lP!#oR!Q![!#x!c!i!#x#T#Z!#xP!#{R!Q![!$U!c!i!$U#T#Z!$UP!$XR!Q![!$b!c!i!$b#T#Z!$bP!$eR!Q![Lx!c!iLx#T#ZLxV!$qdrsKVuvKVwxKV!Q!R!&P!R!S!&P!S!T!&P!T!U!&P!U!Y!&o!w!x!'_#O#PKV#T#UKV#U#VKV#X#YKV#Y#ZKV#b#cKV#f#gKV#h#iKV#i#j!(a#j#kKV#l#m!(yV!&SXOrKVrsKosuKVuvLxv!QKV!Q!Y!&o!Y#OKV#O#P!$n#P~KVV!&rXOrKVrsKosuKVuvLxv!QKV!Q!YKV!Y#OKV#O#P!$n#P~KVV!'bR!Q![!'k!c!i!'k#T#Z!'kV!'nR!Q![!'w!c!i!'w#T#Z!'wV!'zR!Q![!(T!c!i!(T#T#Z!(TV!(WR!Q![!(a!c!i!(a#T#Z!(aV!(dR!Q![!(m!c!i!(m#T#Z!(mV!(pR!Q![!(y!c!i!(y#T#Z!(yV!(|R!Q![!)V!c!i!)V#T#Z!)VV!)YR!Q![KV!c!iKV#T#ZKV!P!)fVOrKVrs!){suKVuvLxv#OKV#O#P!$n#P~KV!P!*QV%nxOrKVrs!*gsuKVuvLxv#OKV#O#P!$n#P~KV!P!*nPhUXPrs!*qx!*vO%ox![!+P_%lp&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bvx*bxy!,Oy!Q*b!Q!R!,w!R![!.S![#O*b#O#P1[#P~*bj!,XY%|Q&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bj!-Q`!sQ&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!.S![#O*b#O#P1[#P#c*b#c#d!/R#d#l*b#l#m!0}#m~*bj!.][!sQ&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!.S![#O*b#O#P1[#P~*bj!/Y[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y!0O!Y#O*b#O#P1[#P~*bj!0X[!sQ&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y!0O!Y#O*b#O#P1[#P~*bj!1U`&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!2W![!c*b!c!i!2W!i#O*b#O#P1[#P#T*b#T#Z!2W#Z~*bj!2a`!sQ&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!2W![!c*b!c!i!2W!i#O*b#O#P1[#P#T*b#T#Z!2W#Z~*b!]!3lP%xi%lp!fQxy!3oi!3tO%yi![!3}]%lp&V`%wWOY!4vYZ!6lZ]!4v]^!6l^r!4vrs!7tsu!4vuv!8avw!4vwx*bx#O!4v#O#P!8l#P~!4vj!4}[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bvw*bwx!5sx#O*b#O#P1[#P~*bj!5|YiQ&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bb!6qW&V`Or+Xrs+psu+Xvw+Xwx!7Zx#O+X#O#P,i#P~+Xb!7bUiQ&V`Or+Xrs+psu+Xv#O+X#O#P,i#P~+Xb!7wWOr+Xrs,Vsu+Xvw+Xwx!7Zx#O+X#O#P,i#P~+XQ!8dPwx!8gQ!8lOiQj!8odrs!4vuv!4vwx!4v!Q!R!9}!R!S!9}!S!T!9}!T!U!9}!U!Y!;Q!w!x!<T#O#P!4v#T#U!4v#U#V!4v#X#Y!4v#Y#Z!4v#b#c!4v#f#g!4v#h#i!4v#i#j!=V#j#k!4v#l#m!=oj!:U^&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bvw*bwx!5sx!Q*b!Q!Y!;Q!Y#O*b#O#P1[#P~*bj!;X^&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bvw*bwx!5sx!Q*b!Q!Y!4v!Y#O*b#O#P1[#P~*bj!<WR!Q![!<a!c!i!<a#T#Z!<aj!<dR!Q![!<m!c!i!<m#T#Z!<mj!<pR!Q![!<y!c!i!<y#T#Z!<yj!<|R!Q![!=V!c!i!=V#T#Z!=Vj!=YR!Q![!=c!c!i!=c#T#Z!=cj!=fR!Q![!=o!c!i!=o#T#Z!=oj!=rR!Q![!={!c!i!={#T#Z!={j!>OR!Q![!4v!c!i!4v#T#Z!4v!]!>dY%dR%lp&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!]!?_Y%qR%lp&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b![!@YY%lp&V`%wW!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b![!AT[%lp&V`%wW!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|!Ay|#O*b#O#P1[#P~*bj!BQ[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!`*b!`!a<Z!a#O*b#O#P1[#P~*b!]!CRY%pR%lp&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b![!C|^%lp&V`%wW!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!Dx!P!Q*b!Q![!Fn![#O*b#O#P1[#P~*bj!EP[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!Eu!P#O*b#O#P1[#P~*bj!FOY%{Q&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bj!Fw`&V`%wWcQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!Fn![!g*b!g!h!Gy!h#O*b#O#P1[#P#X*b#X#Y!Gy#Y~*bj!HQ`&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|!IS|}*b}!O!IS!O!Q*b!Q![!JP![#O*b#O#P1[#P~*bj!IZ[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!JP![#O*b#O#P1[#P~*bj!JY[&V`%wWcQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!JP![#O*b#O#P1[#P~*b~!KZ^%lp&V`%wW!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bvz*bz{!LV{!P*b!P!Q#8^!Q#O*b#O#P1[#P~*b~!L^]&V`%wWOY!LVYZ!MVZ]!LV]^!MV^r!LVrs!Mwsu!LVuv# Vvz!LVz{#,g{#O!LV#O#P#.f#P~!LV~!M[X&V`Or!MVrs!Mwsu!MVuv# Vvz!MVz{# z{#O!MV#O#P##]#P~!MV~!MzXOr!MVrs!Ngsu!MVuv# Vvz!MVz{# z{#O!MV#O#P##]#P~!MV~!NjXOr!MVrs# Vsu!MVuv# Vvz!MVz{# z{#O!MV#O#P##]#P~!MV~# YROz# Vz{# c{~# V~# fTOz# Vz{# c{!P# V!P!Q# u!Q~# V~# zOQ~~#!PZ&V`Or!MVrs!Mwsu!MVuv# Vvz!MVz{# z{!P!MV!P!Q#!r!Q#O!MV#O#P##]#P~!MV~#!yUQ~&V`Or+Xrs+psu+Xv#O+X#O#P,i#P~+X~##`sOr# Vrs!MVsu# Vuv!MVvw# Vwx!MVxz# Vz{# c{!Q# V!Q!R#%m!R!S#%m!S!T#%m!T!U#%m!U!Y#&e!Y!w# V!w!x#']!x#O# V#O#P!MV#P#T# V#T#U!MV#U#V!MV#V#X# V#X#Y!MV#Y#Z!MV#Z#b# V#b#c!MV#c#f# V#f#g!MV#g#h# V#h#i!MV#i#j#)y#j#k!MV#k#l# V#l#m#+X#m~# V~#%rZ&V`Or!MVrs!Mwsu!MVuv# Vvz!MVz{# z{!Q!MV!Q!Y#&e!Y#O!MV#O#P##]#P~!MV~#&jZ&V`Or!MVrs!Mwsu!MVuv# Vvz!MVz{# z{!Q!MV!Q!Y!MV!Y#O!MV#O#P##]#P~!MV~#'`XOz# Vz{# c{!Q# V!Q![#'{![!c# V!c!i#'{!i#T# V#T#Z#'{#Z~# V~#(OXOz# Vz{# c{!Q# V!Q![#(k![!c# V!c!i#(k!i#T# V#T#Z#(k#Z~# V~#(nXOz# Vz{# c{!Q# V!Q![#)Z![!c# V!c!i#)Z!i#T# V#T#Z#)Z#Z~# V~#)^XOz# Vz{# c{!Q# V!Q![#)y![!c# V!c!i#)y!i#T# V#T#Z#)y#Z~# V~#)|XOz# Vz{# c{!Q# V!Q![#*i![!c# V!c!i#*i!i#T# V#T#Z#*i#Z~# V~#*lXOz# Vz{# c{!Q# V!Q![#+X![!c# V!c!i#+X!i#T# V#T#Z#+X#Z~# V~#+[XOz# Vz{# c{!Q# V!Q![#+w![!c# V!c!i#+w!i#T# V#T#Z#+w#Z~# V~#+zXOz# Vz{# c{!Q# V!Q![!MV![!c# V!c!i!MV!i#T# V#T#Z!MV#Z~# V~#,n_&V`%wWOY!LVYZ!MVZ]!LV]^!MV^r!LVrs!Mwsu!LVuv# Vvz!LVz{#,g{!P!LV!P!Q#-m!Q#O!LV#O#P#.f#P~!LV~#-vYQ~&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b~#.isOr# Vrs!LVsu# Vuv!LVvw# Vwx!LVxz# Vz{# c{!Q# V!Q!R#0v!R!S#0v!S!T#0v!T!U#0v!U!Y#1|!Y!w# V!w!x#3S!x#O# V#O#P!LV#P#T# V#T#U!LV#U#V!LV#V#X# V#X#Y!LV#Y#Z!LV#Z#b# V#b#c!LV#c#f# V#f#g!LV#g#h# V#h#i!LV#i#j#5p#j#k!LV#k#l# V#l#m#7O#m~# V~#0}_&V`%wWOY!LVYZ!MVZ]!LV]^!MV^r!LVrs!Mwsu!LVuv# Vvz!LVz{#,g{!Q!LV!Q!Y#1|!Y#O!LV#O#P#.f#P~!LV~#2T_&V`%wWOY!LVYZ!MVZ]!LV]^!MV^r!LVrs!Mwsu!LVuv# Vvz!LVz{#,g{!Q!LV!Q!Y!LV!Y#O!LV#O#P#.f#P~!LV~#3VXOz# Vz{# c{!Q# V!Q![#3r![!c# V!c!i#3r!i#T# V#T#Z#3r#Z~# V~#3uXOz# Vz{# c{!Q# V!Q![#4b![!c# V!c!i#4b!i#T# V#T#Z#4b#Z~# V~#4eXOz# Vz{# c{!Q# V!Q![#5Q![!c# V!c!i#5Q!i#T# V#T#Z#5Q#Z~# V~#5TXOz# Vz{# c{!Q# V!Q![#5p![!c# V!c!i#5p!i#T# V#T#Z#5p#Z~# V~#5sXOz# Vz{# c{!Q# V!Q![#6`![!c# V!c!i#6`!i#T# V#T#Z#6`#Z~# V~#6cXOz# Vz{# c{!Q# V!Q![#7O![!c# V!c!i#7O!i#T# V#T#Z#7O#Z~# V~#7RXOz# Vz{# c{!Q# V!Q![#7n![!c# V!c!i#7n!i#T# V#T#Z#7n#Z~# V~#7qXOz# Vz{# c{!Q# V!Q![!LV![!c# V!c!i!LV!i#T# V#T#Z!LV#Z~# V~#8gZP~&V`%wWOY#8^YZ+XZ]#8^]^#9Y^r#8^rs#9|su#8^uv#;`v#O#8^#O#P#Dp#P~#8^~#9aXP~&V`OY#9YYZ+XZr#9Yrs#9|su#9Yuv#;`v#O#9Y#O#P#;k#P~#9Y~#:RXP~OY#9YYZ+XZr#9Yrs#:nsu#9Yuv#;`v#O#9Y#O#P#;k#P~#9Y~#:sXP~OY#9YYZ+XZr#9Yrs#;`su#9Yuv#;`v#O#9Y#O#P#;k#P~#9Y~#;eQP~OY#;`Z~#;`~#;prP~OY#;`Zr#;`rs#9Ysu#;`uv#9Yvw#;`wx#9Yx!Q#;`!Q!R#=z!R!S#=z!S!T#=z!T!U#=z!U!Y#>t!Y!w#;`!w!x#?n!x#O#;`#O#P#9Y#P#T#;`#T#U#9Y#U#V#9Y#V#X#;`#X#Y#9Y#Y#Z#9Y#Z#b#;`#b#c#9Y#c#f#;`#f#g#9Y#g#h#;`#h#i#9Y#i#j#BW#j#k#9Y#k#l#;`#l#m#Cd#m~#;`~#>RZP~&V`OY#9YYZ+XZr#9Yrs#9|su#9Yuv#;`v!Q#9Y!Q!Y#>t!Y#O#9Y#O#P#;k#P~#9Y~#>{ZP~&V`OY#9YYZ+XZr#9Yrs#9|su#9Yuv#;`v!Q#9Y!Q!Y#9Y!Y#O#9Y#O#P#;k#P~#9Y~#?sWP~OY#;`Z!Q#;`!Q![#@]![!c#;`!c!i#@]!i#T#;`#T#Z#@]#Z~#;`~#@bWP~OY#;`Z!Q#;`!Q![#@z![!c#;`!c!i#@z!i#T#;`#T#Z#@z#Z~#;`~#APWP~OY#;`Z!Q#;`!Q![#Ai![!c#;`!c!i#Ai!i#T#;`#T#Z#Ai#Z~#;`~#AnWP~OY#;`Z!Q#;`!Q![#BW![!c#;`!c!i#BW!i#T#;`#T#Z#BW#Z~#;`~#B]WP~OY#;`Z!Q#;`!Q![#Bu![!c#;`!c!i#Bu!i#T#;`#T#Z#Bu#Z~#;`~#BzWP~OY#;`Z!Q#;`!Q![#Cd![!c#;`!c!i#Cd!i#T#;`#T#Z#Cd#Z~#;`~#CiWP~OY#;`Z!Q#;`!Q![#DR![!c#;`!c!i#DR!i#T#;`#T#Z#DR#Z~#;`~#DWWP~OY#;`Z!Q#;`!Q![#9Y![!c#;`!c!i#9Y!i#T#;`#T#Z#9Y#Z~#;`~#DurP~OY#;`Zr#;`rs#8^su#;`uv#8^vw#;`wx#8^x!Q#;`!Q!R#GP!R!S#GP!S!T#GP!T!U#GP!U!Y#HR!Y!w#;`!w!x#IT!x#O#;`#O#P#8^#P#T#;`#T#U#8^#U#V#8^#V#X#;`#X#Y#8^#Y#Z#8^#Z#b#;`#b#c#8^#c#f#;`#f#g#8^#g#h#;`#h#i#8^#i#j#Km#j#k#8^#k#l#;`#l#m#Ly#m~#;`~#GY]P~&V`%wWOY#8^YZ+XZ]#8^]^#9Y^r#8^rs#9|su#8^uv#;`v!Q#8^!Q!Y#HR!Y#O#8^#O#P#Dp#P~#8^~#H[]P~&V`%wWOY#8^YZ+XZ]#8^]^#9Y^r#8^rs#9|su#8^uv#;`v!Q#8^!Q!Y#8^!Y#O#8^#O#P#Dp#P~#8^~#IYWP~OY#;`Z!Q#;`!Q![#Ir![!c#;`!c!i#Ir!i#T#;`#T#Z#Ir#Z~#;`~#IwWP~OY#;`Z!Q#;`!Q![#Ja![!c#;`!c!i#Ja!i#T#;`#T#Z#Ja#Z~#;`~#JfWP~OY#;`Z!Q#;`!Q![#KO![!c#;`!c!i#KO!i#T#;`#T#Z#KO#Z~#;`~#KTWP~OY#;`Z!Q#;`!Q![#Km![!c#;`!c!i#Km!i#T#;`#T#Z#Km#Z~#;`~#KrWP~OY#;`Z!Q#;`!Q![#L[![!c#;`!c!i#L[!i#T#;`#T#Z#L[#Z~#;`~#LaWP~OY#;`Z!Q#;`!Q![#Ly![!c#;`!c!i#Ly!i#T#;`#T#Z#Ly#Z~#;`~#MOWP~OY#;`Z!Q#;`!Q![#Mh![!c#;`!c!i#Mh!i#T#;`#T#Z#Mh#Z~#;`~#MmWP~OY#;`Z!Q#;`!Q![#8^![!c#;`!c!i#8^!i#T#;`#T#Z#8^#Z~#;`![#Nbf%lp&V`%wWbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!Fn!P!Q*b!Q![$ v![!g*b!g!h!Gy!h#O*b#O#P1[#P#X*b#X#Y!Gy#Y#c*b#c#d$;`#d#l*b#l#m$=[#m~*bj$!Pb&V`%wWbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!Fn!P!Q*b!Q![$#X![!g*b!g!h!Gy!h#O*b#O#P1[#P#X*b#X#Y!Gy#Y~*bj$#bb&V`%wWbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!Fn!P!Q*b!Q![$$j![!g*b!g!h!Gy!h#O*b#O#P1[#P#X*b#X#Y!Gy#Y~*bj$$sc&V`%wWbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv}*b}!O$&O!O!P!Fn!P!Q*b!Q![$9}![!g*b!g!h!Gy!h#O*b#O#P1[#P#X*b#X#Y!Gy#Y~*bj$&V[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$&{![#O*b#O#P1[#P~*bj$'S[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$'x![#O*b#O#P1[#P~*bj$(P[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv}*b}!O$(u!O#O*b#O#P1[#P~*bj$(|[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$)r![#O*b#O#P1[#P~*bj$)y[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$*o![#O*b#O#P1[#P~*bj$*x[&V`jQ%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!v*b!v!w$+n!w#O*b#O#P1[#P~*bj$+u[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$,k![#O*b#O#P1[#P~*bj$,r[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$-h![#O*b#O#P1[#P~*bj$-o[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv![*b![!]$.e!]#O*b#O#P1[#P~*bj$.l[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$/b![#O*b#O#P1[#P~*bj$/i[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$0_![#O*b#O#P1[#P~*bj$0f[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv![*b![!]$1[!]#O*b#O#P1[#P~*bj$1c[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$2X![#O*b#O#P1[#P~*bj$2`[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$3U![#O*b#O#P1[#P~*bj$3]b&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|$4e|}*b}!O$4e!O!Q*b!Q![$5b![!|*b!|!}$9U!}#O*b#O#P1[#P~*bj$4l[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$5b![#O*b#O#P1[#P~*bj$5i[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$6_![#O*b#O#P1[#P~*bj$6f[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv![*b![!]$7[!]#O*b#O#P1[#P~*bj$7c[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$8X![#O*b#O#P1[#P~*bj$8`[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$9U![#O*b#O#P1[#P~*bj$9_Y&V`kQ%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bj$:Wb&V`%wWbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!Fn!P!Q*b!Q![$9}![!g*b!g!h!Gy!h#O*b#O#P1[#P#X*b#X#Y!Gy#Y~*bj$;g[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y$<]!Y#O*b#O#P1[#P~*bj$<f[&V`%wWbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y$<]!Y#O*b#O#P1[#P~*bj$=c`&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$>e![!c*b!c!i$>e!i#O*b#O#P1[#P#T*b#T#Z$>e#Z~*bj$>n`&V`%wWbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$>e![!c*b!c!i$>e!i#O*b#O#P1[#P#T*b#T#Z$>e#Z~*b![$?{b%lp&V`%wWbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!Fn!P!Q*b!Q![$ v![!g*b!g!h!Gy!h#O*b#O#P1[#P#X*b#X#Y!Gy#Y~*b!]$A`]%lp&V`%wW%fROY*bYZ+XZ]*b]^+X^r*brs+psu*bv!`*b!`!a<Z!a!}*b!}#O$BX#O#P1[#P~*bj$B`Z&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P#Q$CR#Q~*bj$C[Y%jQ&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!]$DVY&OR%lp&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b![$EQ`%lp&V`%wW!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|$FS|![*b![!]<Z!]!_*b!_!`<Z!`#O*b#O#P1[#P~*bj$FZ[&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|<Z|#O*b#O#P1[#P~*b!]$G^Y&WP%lp&V`%wW!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b![$HX[%lp&V`%wW!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!_*b!_!`<Z!`#O*b#O#P1[#P~*b!]$IYY%bR%lp&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!a$JVf%lp%hSUR&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$Kk![!c*b!c!}$Kk!}#O*b#O#P1[#P#R*b#R#S$Kk#S#T*b#T#o$Kk#o4w*b4w5b$Kk5b5i*b5i6S$Kk6S~*bo$Kvf%hSUR&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$Kk![!c*b!c!}$Kk!}#O*b#O#P1[#P#R*b#R#S$Kk#S#T*b#T#o$Kk#o4w*b4w5b$Kk5b5i*b5i6S$Kk6S~*b!]$MgY%vR%lp&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!Y$N[d%lprs*buv*bwx*b!Q!R2m!R!S2m!S!T2m!T!U2m!U!Y3j!w!x4g#O#P*b#T#U*b#U#V*b#X#Y*b#Y#Z*b#b#c*b#f#g*b#h#i*b#i#j5i#j#k*b#l#m6R!]% uY%uR%lp&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!a%!rd%gS%lp&V`%wW!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!c*b!c!}%$Q!}#O*b#O#P1[#P#R*b#R#S%%o#S#T*b#T#o%$Q#o4w*b4w5b%$Q5b5i*b5i6S%$Q6S~*bk%$ZfUR&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%$Q![!c*b!c!}%$Q!}#O*b#O#P1[#P#R*b#R#S%$Q#S#T*b#T#o%$Q#o4w*b4w5b%$Q5b5i*b5i6S%$Q6S~*bk%%vf&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%$Q![!c*b!c!}%$Q!}#O*b#O#P1[#P#R*b#R#S%$Q#S#T*b#T#o%$Q#o4w*b4w5b%$Q5b5i*b5i6S%$Q6S~*b!a%'gf%lp%iU&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$Kk![!c*b!c!}$Kk!}#O*b#O#P1[#P#R*b#R#S$Kk#S#T*b#T#o$Kk#o4w*b4w5b$Kk5b5i*b5i6S$Kk6S~*b!a%)Yg%lp%hSUR&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$Kk![!c*b!c!}$Kk!}#O*b#O#P1[#P#R*b#R#S$Kk#S#T*b#T#U%*q#U#o$Kk#o4w*b4w5b$Kk5b5i*b5i6S$Kk6S~*bo%*|h%hSUR&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$Kk![!c*b!c!}$Kk!}#O*b#O#P1[#P#R*b#R#S$Kk#S#T*b#T#`$Kk#`#a%,h#a#o$Kk#o4w*b4w5b$Kk5b5i*b5i6S$Kk6S~*bo%,sh%hSUR&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$Kk![!c*b!c!}$Kk!}#O*b#O#P1[#P#R*b#R#S$Kk#S#T*b#T#g$Kk#g#h%._#h#o$Kk#o4w*b4w5b$Kk5b5i*b5i6S$Kk6S~*bo%.jh%hSUR&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$Kk![!c*b!c!}$Kk!}#O*b#O#P1[#P#R*b#R#S$Kk#S#T*b#T#X$Kk#X#Y%0U#Y#o$Kk#o4w*b4w5b$Kk5b5i*b5i6S$Kk6S~*bo%0cf%hS!rQUR&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$Kk![!c*b!c!}$Kk!}#O*b#O#P1[#P#R*b#R#S$Kk#S#T*b#T#o$Kk#o4w*b4w5b$Kk5b5i*b5i6S$Kk6S~*b!a%2Uh%lp%hSUR&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$Kk![!c*b!c!}$Kk!}#O*b#O#P1[#P#R*b#R#S$Kk#S#T*b#T#f$Kk#f#g%3p#g#o$Kk#o4w*b4w5b$Kk5b5i*b5i6S$Kk6S~*bo%3{h%hSUR&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$Kk![!c*b!c!}$Kk!}#O*b#O#P1[#P#R*b#R#S$Kk#S#T*b#T#i$Kk#i#j%._#j#o$Kk#o4w*b4w5b$Kk5b5i*b5i6S$Kk6S~*b!]%5rY&RR%lp&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!]%6mY&PR%lp&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!]%7hY&SR%lp&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b~%8cY%lp%`~&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b![%9^Y&TQ%lp&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b![%:XY&UQ%lp&V`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b",
  tokenizers: [0, 1, 2, 3, 4, 5],
  topRules: {"Rel":[0,3]},
  dynamicPrecedences: {"220":1},
  specialized: [{term: 6, get: value => spec_BasicId[value] || -1},{term: 68, get: value => spec_Operator[value] || -1}],
  tokenPrec: 14288
});

const autocompleteList = [
    { label: "Any", type: "type" },
    { label: "AutoNumber", type: "type" },
    { label: "Boolean", type: "type" },
    { label: "Char", type: "type" },
    { label: "Day", type: "type" },
    { label: "Date", type: "type" },
    { label: "DateTime", type: "type" },
    { label: "Year", type: "type" },
    { label: "Month", type: "type" },
    { label: "Week", type: "type" },
    { label: "Hour", type: "type" },
    { label: "Minute", type: "type" },
    { label: "Second", type: "type" },
    { label: "Millisecond", type: "type" },
    { label: "Microsecond", type: "type" },
    { label: "Nanosecond", type: "type" },
    { label: "Entity", type: "type" },
    { label: "Int", type: "type" },
    { label: "Number", type: "type" },
    { label: "Missing", type: "type" },
    { label: "Floating", type: "type" },
    { label: "UnsignedInt", type: "type" },
    { label: "SignedInt", type: "type" },
    { label: "Rational", type: "type" },
    { label: "FixedDecimal", type: "type" },
    { label: "Hash", type: "type" },
    { label: "FilePos", type: "type" },
    { label: "String", type: "type" },
    { label: "def", type: "keyword" },
    { label: "output", type: "interface" },
    { label: "insert", type: "interface" },
    { label: "delete", type: "interface" },
    { label: "export", type: "interface" },
    { label: "from", type: "keyword" },
    { label: "if", type: "keyword" },
    { label: "iff", type: "keyword" },
    { label: "then", type: "keyword" },
    { label: "else", type: "keyword" },
    { label: "end", type: "keyword" },
    { label: "exists", type: "keyword" },
    { label: "where", type: "keyword" },
    { label: "with", type: "keyword" },
    { label: "select", type: "keyword" },
    { label: "implies", type: "keyword" },
    { label: "use", type: "keyword" },
    { label: "forall", type: "keyword" },
    { label: "in", type: "keyword" },
    { label: "ic", type: "keyword" },
    { label: "not", type: "keyword" },
    { label: "and", type: "keyword" },
    { label: "or", type: "keyword" },
    { label: "xor", type: "keyword" },
    { label: "union", type: "keyword" },
    { label: "_flatten", type: "function" },
    { label: "abelian_group", type: "function" },
    { label: "abs", type: "function" },
    { label: "absorption_laws", type: "function" },
    { label: "acos", type: "function" },
    { label: "acosh", type: "function" },
    { label: "acot", type: "function" },
    { label: "add", type: "function" },
    { label: "antisymmetric", type: "function" },
    { label: "approximate_abelian_group", type: "function" },
    { label: "approximate_commutative_monoid", type: "function" },
    { label: "approximate_group", type: "function" },
    { label: "approximate_monoid", type: "function" },
    { label: "approximate_ring", type: "function" },
    { label: "approximate_semiring", type: "function" },
    { label: "approximately_associative", type: "function" },
    { label: "approximately_commutative", type: "function" },
    { label: "approximately_distributive", type: "function" },
    { label: "approximately_has_inverse", type: "function" },
    { label: "approximately_left_distributive", type: "function" },
    { label: "approximately_right_distributive", type: "function" },
    { label: "approximately_zero_annihilation", type: "function" },
    { label: "argmax", type: "function" },
    { label: "argmin", type: "function" },
    { label: "arity", type: "function" },
    { label: "asin", type: "function" },
    { label: "asinh", type: "function" },
    { label: "associative", type: "function" },
    { label: "atan", type: "function" },
    { label: "atanh", type: "function" },
    { label: "auto_number", type: "function" },
    { label: "binary_operator", type: "function" },
    { label: "binary_relation", type: "function" },
    { label: "binary_relation_substitution_laws", type: "function" },
    { label: "bitwise_and", type: "function" },
    { label: "bitwise_left_shift", type: "function" },
    { label: "bitwise_not", type: "function" },
    { label: "bitwise_or", type: "function" },
    { label: "bitwise_right_shift", type: "function" },
    { label: "bitwise_unsigned_right_shift", type: "function" },
    { label: "bitwise_xor", type: "function" },
    { label: "boolean_and", type: "function" },
    { label: "boolean_false", type: "function" },
    { label: "boolean_not", type: "function" },
    { label: "boolean_or", type: "function" },
    { label: "boolean_true", type: "function" },
    { label: "bottom", type: "function" },
    { label: "bounded_lattice", type: "function" },
    { label: "bounded_semilattice", type: "function" },
    { label: "byte", type: "function" },
    { label: "capture_group_by_index", type: "function" },
    { label: "capture_group_by_name", type: "function" },
    { label: "cart", type: "function" },
    { label: "cbrt", type: "function" },
    { label: "ceil", type: "function" },
    { label: "char", type: "function" },
    { label: "clamp", type: "function" },
    { label: "commutative", type: "function" },
    { label: "commutative_monoid", type: "function" },
    { label: "comparable", type: "function" },
    { label: "complement", type: "function" },
    { label: "concat", type: "function" },
    { label: "cos", type: "function" },
    { label: "cosh", type: "function" },
    { label: "cot", type: "function" },
    { label: "count", type: "function" },
    { label: "date_add", type: "function" },
    { label: "date_day", type: "function" },
    { label: "date_dayname", type: "function" },
    { label: "date_dayofquarter", type: "function" },
    { label: "date_dayofweek", type: "function" },
    { label: "date_dayofweekofmonth", type: "function" },
    { label: "date_dayofyear", type: "function" },
    { label: "date_daysinmonth", type: "function" },
    { label: "date_isleapyear", type: "function" },
    { label: "date_month", type: "function" },
    { label: "date_monthname", type: "function" },
    { label: "date_quarterofyear", type: "function" },
    { label: "date_subtract", type: "function" },
    { label: "date_week", type: "function" },
    { label: "date_year", type: "function" },
    { label: "dates_period_days", type: "function" },
    { label: "datetime_add", type: "function" },
    { label: "datetime_day", type: "function" },
    { label: "datetime_day_", type: "function" },
    { label: "datetime_dayname", type: "function" },
    { label: "datetime_dayofquarter", type: "function" },
    { label: "datetime_dayofweek", type: "function" },
    { label: "datetime_dayofweekofmonth", type: "function" },
    { label: "datetime_dayofyear", type: "function" },
    { label: "datetime_daysinmonth", type: "function" },
    { label: "datetime_hour", type: "function" },
    { label: "datetime_hour_", type: "function" },
    { label: "datetime_isleapyear", type: "function" },
    { label: "datetime_minute", type: "function" },
    { label: "datetime_minute_", type: "function" },
    { label: "datetime_month", type: "function" },
    { label: "datetime_month_", type: "function" },
    { label: "datetime_monthname", type: "function" },
    { label: "datetime_now", type: "function" },
    { label: "datetime_quarterofyear", type: "function" },
    { label: "datetime_second", type: "function" },
    { label: "datetime_subtract", type: "function" },
    { label: "datetime_to_nanoseconds", type: "function" },
    { label: "datetime_week", type: "function" },
    { label: "datetime_week_", type: "function" },
    { label: "datetime_year", type: "function" },
    { label: "datetime_year_", type: "function" },
    { label: "datetimes_period_milliseconds", type: "function" },
    { label: "decimal", type: "function" },
    { label: "decimal_bit_length", type: "function" },
    { label: "decimal_int_convert", type: "function" },
    { label: "decimal_precision", type: "function" },
    { label: "decode_base", type: "function" },
    { label: "default_value", type: "function" },
    { label: "deg", type: "function" },
    { label: "denominator", type: "function" },
    { label: "describe", type: "function" },
    { label: "diff", type: "function" },
    { label: "disjoint", type: "function" },
    { label: "distributive", type: "function" },
    { label: "divide", type: "function" },
    { label: "docstring", type: "function" },
    { label: "domain", type: "function" },
    { label: "dot_join", type: "function" },
    { label: "double_metaphone", type: "function" },
    { label: "empty", type: "function" },
    { label: "encode_base", type: "function" },
    { label: "epoch_milliseconds", type: "function" },
    { label: "eq", type: "function" },
    { label: "equal", type: "function" },
    { label: "equivalence_relation", type: "function" },
    { label: "erf", type: "function" },
    { label: "erfinv", type: "function" },
    { label: "escape_regex_metachars", type: "function" },
    { label: "export_csv", type: "function" },
    { label: "export_json", type: "function" },
    { label: "factorial", type: "function" },
    { label: "filepos", type: "function" },
    { label: "filepos_value", type: "function" },
    { label: "first", type: "function" },
    { label: "float", type: "function" },
    { label: "float_int_convert", type: "function" },
    { label: "floor", type: "function" },
    { label: "floor_divide", type: "function" },
    { label: "floor_to_int", type: "function" },
    { label: "format_date", type: "function" },
    { label: "format_datetime", type: "function" },
    { label: "formula_card_est", type: "function" },
    { label: "frequency", type: "function" },
    { label: "function", type: "function" },
    { label: "geometric_mean", type: "function" },
    { label: "glm_generic", type: "function" },
    { label: "glm_linear_regression", type: "function" },
    { label: "glm_logistic_regression", type: "function" },
    { label: "glm_predict", type: "function" },
    { label: "glm_probit_regression", type: "function" },
    { label: "graphviz", type: "function" },
    { label: "group", type: "function" },
    { label: "gt", type: "function" },
    { label: "gt_eq", type: "function" },
    { label: "harmonic_mean", type: "function" },
    { label: "has_identity", type: "function" },
    { label: "has_left_identity", type: "function" },
    { label: "has_left_zero", type: "function" },
    { label: "has_maximal_element", type: "function" },
    { label: "has_minimal_element", type: "function" },
    { label: "has_right_identity", type: "function" },
    { label: "has_right_zero", type: "function" },
    { label: "hash", type: "function" },
    { label: "hash_value_uint", type: "function" },
    { label: "haversine", type: "function" },
    { label: "help", type: "function" },
    { label: "html", type: "function" },
    { label: "ic", type: "function" },
    { label: "idempotent", type: "function" },
    { label: "identity", type: "function" },
    { label: "int", type: "function" },
    { label: "int_float_convert", type: "function" },
    { label: "int_spread_by_even", type: "function" },
    { label: "int_spread_by_ratio", type: "function" },
    { label: "intersect", type: "function" },
    { label: "irreflexive", type: "function" },
    { label: "is_", type: "function" },
    { label: "jacobian", type: "function" },
    { label: "join_bounded_lattice", type: "function" },
    { label: "last", type: "function" },
    { label: "lattice", type: "function" },
    { label: "left_distributive", type: "function" },
    { label: "left_identity", type: "function" },
    { label: "left_override", type: "function" },
    { label: "left_zero", type: "function" },
    { label: "levenshtein", type: "function" },
    { label: "like_match", type: "function" },
    { label: "linear_regression", type: "function" },
    { label: "linear_regression_objective", type: "function" },
    { label: "linear_regression_predict", type: "function" },
    { label: "lined_csv", type: "function" },
    { label: "load_csv", type: "function" },
    { label: "load_csv_row_wise", type: "function" },
    { label: "load_json", type: "function" },
    { label: "log", type: "function" },
    { label: "log_card_est", type: "function" },
    { label: "lowercase", type: "function" },
    { label: "lr_random_initial_point", type: "function" },
    { label: "lt", type: "function" },
    { label: "lt_eq", type: "function" },
    { label: "mae", type: "function" },
    { label: "markdown", type: "function" },
    { label: "max", type: "function" },
    { label: "max_k", type: "function" },
    { label: "maximal_element", type: "function" },
    { label: "maximum", type: "function" },
    { label: "mean", type: "function" },
    { label: "mean_normalization", type: "function" },
    { label: "median", type: "function" },
    { label: "meet_bounded_lattice", type: "function" },
    { label: "metaphone", type: "function" },
    { label: "min", type: "function" },
    { label: "min_k", type: "function" },
    { label: "min_max_normalization", type: "function" },
    { label: "minimal_element", type: "function" },
    { label: "minimize_initial_point", type: "function" },
    { label: "minimum", type: "function" },
    { label: "missing", type: "function" },
    { label: "mlpack_adaboost", type: "function" },
    { label: "mlpack_adaboost_predict", type: "function" },
    { label: "mlpack_approx_kfn", type: "function" },
    { label: "mlpack_approx_kfn_build", type: "function" },
    { label: "mlpack_dbscan", type: "function" },
    { label: "mlpack_decision_tree", type: "function" },
    { label: "mlpack_decision_tree_predict", type: "function" },
    { label: "mlpack_det", type: "function" },
    { label: "mlpack_det_build", type: "function" },
    { label: "mlpack_emst", type: "function" },
    { label: "mlpack_fastmks", type: "function" },
    { label: "mlpack_fastmks_build", type: "function" },
    { label: "mlpack_gmm_generate", type: "function" },
    { label: "mlpack_gmm_probability", type: "function" },
    { label: "mlpack_gmm_train", type: "function" },
    { label: "mlpack_hoeffding_tree", type: "function" },
    { label: "mlpack_hoeffding_tree_predict", type: "function" },
    { label: "mlpack_kernel_pca", type: "function" },
    { label: "mlpack_kfn", type: "function" },
    { label: "mlpack_kfn_build", type: "function" },
    { label: "mlpack_kmeans", type: "function" },
    { label: "mlpack_kmeans_centroids", type: "function" },
    { label: "mlpack_knn", type: "function" },
    { label: "mlpack_knn_build", type: "function" },
    { label: "mlpack_krann", type: "function" },
    { label: "mlpack_krann_build", type: "function" },
    { label: "mlpack_lars", type: "function" },
    { label: "mlpack_lars_predict", type: "function" },
    { label: "mlpack_linear_regression", type: "function" },
    { label: "mlpack_linear_regression_predict", type: "function" },
    { label: "mlpack_linear_svm", type: "function" },
    { label: "mlpack_linear_svm_predict", type: "function" },
    { label: "mlpack_logistic_regression", type: "function" },
    { label: "mlpack_logistic_regression_predict", type: "function" },
    { label: "mlpack_lsh", type: "function" },
    { label: "mlpack_lsh_build", type: "function" },
    { label: "mlpack_mean_shift", type: "function" },
    { label: "mlpack_nbc", type: "function" },
    { label: "mlpack_nbc_predict", type: "function" },
    { label: "mlpack_nmf", type: "function" },
    { label: "mlpack_pca", type: "function" },
    { label: "mlpack_perceptron", type: "function" },
    { label: "mlpack_perceptron_predict", type: "function" },
    { label: "mlpack_preprocess_split", type: "function" },
    { label: "mlpack_radical", type: "function" },
    { label: "mlpack_random_forest", type: "function" },
    { label: "mlpack_random_forest_predict", type: "function" },
    { label: "mlpack_softmax_regression", type: "function" },
    { label: "mlpack_softmax_regression_predict", type: "function" },
    { label: "mode", type: "function" },
    { label: "modulo", type: "function" },
    { label: "monoid", type: "function" },
    { label: "mse", type: "function" },
    { label: "multiply", type: "function" },
    { label: "murmurhash", type: "function" },
    { label: "nanoseconds_to_datetime", type: "function" },
    { label: "natural_exp", type: "function" },
    { label: "natural_log", type: "function" },
    { label: "neq", type: "function" },
    { label: "not", type: "function" },
    { label: "nullary_relation", type: "function" },
    { label: "num_bytes", type: "function" },
    { label: "num_chars", type: "function" },
    { label: "numerator", type: "function" },
    { label: "pack", type: "function" },
    { label: "parse_date", type: "function" },
    { label: "parse_datetime", type: "function" },
    { label: "parse_decimal", type: "function" },
    { label: "parse_float", type: "function" },
    { label: "parse_int", type: "function" },
    { label: "parse_json", type: "function" },
    { label: "parse_uuid", type: "function" },
    { label: "partial_order", type: "function" },
    { label: "partial_order_and_bounded_lattice", type: "function" },
    { label: "partial_order_and_join_bounded_lattice", type: "function" },
    { label: "partial_order_and_lattice", type: "function" },
    { label: "partial_order_and_meet_bounded_lattice", type: "function" },
    { label: "pattern_match", type: "function" },
    { label: "percentile", type: "function" },
    { label: "percentile_nearest", type: "function" },
    { label: "period_add", type: "function" },
    { label: "period_day_to_int", type: "function" },
    { label: "period_max", type: "function" },
    { label: "period_min", type: "function" },
    { label: "pi_float", type: "function" },
    { label: "pivot", type: "function" },
    { label: "pop_standard_deviation", type: "function" },
    { label: "pop_variance", type: "function" },
    { label: "pop_zscore_normalization", type: "function" },
    { label: "power", type: "function" },
    { label: "prefix_join", type: "function" },
    { label: "preorder", type: "function" },
    { label: "product", type: "function" },
    { label: "proper_subset", type: "function" },
    { label: "proper_superset", type: "function" },
    { label: "rad", type: "function" },
    { label: "random_mersenne_twister", type: "function" },
    { label: "random_threefry_float", type: "function" },
    { label: "random_threefry_uint", type: "function" },
    { label: "random_uint", type: "function" },
    { label: "range", type: "function" },
    { label: "rational", type: "function" },
    { label: "rational_convert", type: "function" },
    { label: "reflexive", type: "function" },
    { label: "regex_compile", type: "function" },
    { label: "regex_match", type: "function" },
    { label: "regex_match_all", type: "function" },
    { label: "rel", type: "function" },
    { label: "relname_string", type: "function" },
    { label: "remainder", type: "function" },
    { label: "reverse_sort", type: "function" },
    { label: "right_distributive", type: "function" },
    { label: "right_identity", type: "function" },
    { label: "right_override", type: "function" },
    { label: "right_zero", type: "function" },
    { label: "ring", type: "function" },
    { label: "rmse", type: "function" },
    { label: "round", type: "function" },
    { label: "sample_standard_deviation", type: "function" },
    { label: "sample_variance", type: "function" },
    { label: "sample_zscore_normalization", type: "function" },
    { label: "second", type: "function" },
    { label: "semilattice", type: "function" },
    { label: "semiring", type: "function" },
    { label: "sign", type: "function" },
    { label: "sin", type: "function" },
    { label: "sinh", type: "function" },
    { label: "sort", type: "function" },
    { label: "soundex", type: "function" },
    { label: "spread", type: "function" },
    { label: "sqrt", type: "function" },
    { label: "squared", type: "function" },
    { label: "squared_deviation", type: "function" },
    { label: "strict_partial_order", type: "function" },
    { label: "strict_total_order", type: "function" },
    { label: "string", type: "function" },
    { label: "string_join", type: "function" },
    { label: "string_length", type: "function" },
    { label: "string_replace", type: "function" },
    { label: "string_replace_multiple", type: "function" },
    { label: "string_split", type: "function" },
    { label: "string_trim", type: "function" },
    { label: "subset", type: "function" },
    { label: "substring", type: "function" },
    { label: "substring_bytes", type: "function" },
    { label: "subtract", type: "function" },
    { label: "suffix_join", type: "function" },
    { label: "sum", type: "function" },
    { label: "sum_int", type: "function" },
    { label: "superset", type: "function" },
    { label: "svg", type: "function" },
    { label: "symmetric", type: "function" },
    { label: "table", type: "function" },
    { label: "tan", type: "function" },
    { label: "tanh", type: "function" },
    { label: "ternary_relation", type: "function" },
    { label: "top", type: "function" },
    { label: "total", type: "function" },
    { label: "total_order", type: "function" },
    { label: "transitive", type: "function" },
    { label: "transpose", type: "function" },
    { label: "trunc", type: "function" },
    { label: "trunc_divide", type: "function" },
    { label: "trunc_to_int", type: "function" },
    { label: "uint", type: "function" },
    { label: "unary_operator", type: "function" },
    { label: "unary_relation", type: "function" },
    { label: "unary_relation_substitution_laws", type: "function" },
    { label: "union", type: "function" },
    { label: "unit_normalization", type: "function" },
    { label: "unix_epoch", type: "function" },
    { label: "unpack", type: "function" },
    { label: "uppercase", type: "function" },
    { label: "uuid_string", type: "function" },
    { label: "vega", type: "function" },
    { label: "vegalite", type: "function" },
    { label: "vegalite_utils", type: "function" },
    { label: "view_json", type: "function" },
    { label: "weighted_mean", type: "function" },
    { label: "xgboost_classifier", type: "function" },
    { label: "xgboost_classifier_predict", type: "function" },
    { label: "xgboost_classifier_probabilities", type: "function" },
    { label: "xgboost_feature_importances", type: "function" },
    { label: "xgboost_regressor", type: "function" },
    { label: "xgboost_regressor_predict", type: "function" },
    { label: "zero_annihilation", type: "function" },
    { label: "zero_of_operator", type: "function" },
    { label: "zip", type: "function" },
    { label: "registered", type: "variable", info: "Registered Sign / Registered Trade Mark Sign", apply: "®" },
    { label: "degree", type: "variable", info: "Degree Sign", apply: "°" },
    { label: "pm", type: "variable", info: "Plus-Minus Sign / Plus-Or-Minus Sign", apply: "±" },
    { label: "\\^2", info: "Superscript Two / Superscript Digit Two", apply: "²" },
    { label: "\\^3", info: "Superscript Three / Superscript Digit Three", apply: "³" },
    { label: "\\^1", info: "Superscript One / Superscript Digit One", apply: "¹" },
    { label: "\\1/4", type: "variable", info: "Vulgar Fraction One Quarter / Fraction One Quarter", apply: "¼" },
    { label: "\\1/2", type: "variable", info: "Vulgar Fraction One Half / Fraction One Half", apply: "½" },
    { label: "\\3/4", type: "variable", info: "Vulgar Fraction Three Quarters / Fraction Three Quarters", apply: "¾" },
    { label: "\\questiondown", type: "variable", info: "Inverted Question Mark", apply: "¿" },
    { label: "\\times", type: "variable", info: "Multiplication Sign", apply: "×" },
    { label: "\\div", type: "variable", info: "Division Sign", apply: "÷" },
    { label: "\\Alpha", type: "variable", info: "Greek Capital Letter Alpha", apply: "Α" },
    { label: "\\Beta", type: "variable", info: "Greek Capital Letter Beta", apply: "Β" },
    { label: "\\Gamma", type: "variable", info: "Greek Capital Letter Gamma", apply: "Γ" },
    { label: "\\Delta", type: "variable", info: "Greek Capital Letter Delta", apply: "Δ" },
    { label: "\\Epsilon", type: "variable", info: "Greek Capital Letter Epsilon", apply: "Ε" },
    { label: "\\Zeta", type: "variable", info: "Greek Capital Letter Zeta", apply: "Ζ" },
    { label: "\\Eta", type: "variable", info: "Greek Capital Letter Eta", apply: "Η" },
    { label: "\\Theta", type: "variable", info: "Greek Capital Letter Theta", apply: "Θ" },
    { label: "\\Iota", type: "variable", info: "Greek Capital Letter Iota", apply: "Ι" },
    { label: "\\Kappa", type: "variable", info: "Greek Capital Letter Kappa", apply: "Κ" },
    { label: "\\Lambda", type: "variable", info: "Greek Capital Letter Lamda / Greek Capital Letter Lambda", apply: "Λ" },
    { label: "\\upMu", type: "variable", info: "Greek Capital Letter Mu", apply: "Μ" },
    { label: "\\upNu", type: "variable", info: "Greek Capital Letter Nu", apply: "Ν" },
    { label: "\\Xi", type: "variable", info: "Greek Capital Letter Xi", apply: "Ξ" },
    { label: "\\upOmicron", type: "variable", info: "Greek Capital Letter Omicron", apply: "Ο" },
    { label: "\\Pi", type: "variable", info: "Greek Capital Letter Pi", apply: "Π" },
    { label: "\\Rho", type: "variable", info: "Greek Capital Letter Rho", apply: "Ρ" },
    { label: "\\Sigma", type: "variable", info: "Greek Capital Letter Sigma", apply: "Σ" },
    { label: "\\Tau", type: "variable", info: "Greek Capital Letter Tau", apply: "Τ" },
    { label: "\\Upsilon", type: "variable", info: "Greek Capital Letter Upsilon", apply: "Υ" },
    { label: "\\Phi", type: "variable", info: "Greek Capital Letter Phi", apply: "Φ" },
    { label: "\\Chi", type: "variable", info: "Greek Capital Letter Chi", apply: "Χ" },
    { label: "\\Psi", type: "variable", info: "Greek Capital Letter Psi", apply: "Ψ" },
    { label: "\\Omega", type: "variable", info: "Greek Capital Letter Omega", apply: "Ω" },
    { label: "\\alpha", type: "variable", info: "Greek Small Letter Alpha", apply: "α" },
    { label: "\\beta", type: "variable", info: "Greek Small Letter Beta", apply: "β" },
    { label: "\\gamma", type: "variable", info: "Greek Small Letter Gamma", apply: "γ" },
    { label: "\\delta", type: "variable", info: "Greek Small Letter Delta", apply: "δ" },
    { label: "\\varepsilon", type: "variable", info: "Greek Small Letter Epsilon", apply: "ε" },
    { label: "\\zeta", type: "variable", info: "Greek Small Letter Zeta", apply: "ζ" },
    { label: "\\eta", type: "variable", info: "Greek Small Letter Eta", apply: "η" },
    { label: "\\theta", type: "variable", info: "Greek Small Letter Theta", apply: "θ" },
    { label: "\\iota", type: "variable", info: "Greek Small Letter Iota", apply: "ι" },
    { label: "\\kappa", type: "variable", info: "Greek Small Letter Kappa", apply: "κ" },
    { label: "\\lambda", type: "variable", info: "Greek Small Letter Lamda / Greek Small Letter Lambda", apply: "λ" },
    { label: "\\mu", type: "variable", info: "Greek Small Letter Mu", apply: "μ" },
    { label: "\\nu", type: "variable", info: "Greek Small Letter Nu", apply: "ν" },
    { label: "\\xi", type: "variable", info: "Greek Small Letter Xi", apply: "ξ" },
    { label: "\\upomicron", type: "variable", info: "Greek Small Letter Omicron", apply: "ο" },
    { label: "\\pi", type: "variable", info: "Greek Small Letter Pi", apply: "π" },
    { label: "\\rho", type: "variable", info: "Greek Small Letter Rho", apply: "ρ" },
    { label: "\\varsigma", type: "variable", info: "Greek Small Letter Final Sigma", apply: "ς" },
    { label: "\\sigma", type: "variable", info: "Greek Small Letter Sigma", apply: "σ" },
    { label: "\\tau", type: "variable", info: "Greek Small Letter Tau", apply: "τ" },
    { label: "\\upsilon", type: "variable", info: "Greek Small Letter Upsilon", apply: "υ" },
    { label: "\\varphi", type: "variable", info: "Greek Small Letter Phi", apply: "φ" },
    { label: "\\chi", type: "variable", info: "Greek Small Letter Chi", apply: "χ" },
    { label: "\\psi", type: "variable", info: "Greek Small Letter Psi", apply: "ψ" },
    { label: "\\omega", type: "variable", info: "Greek Small Letter Omega", apply: "ω" },
    { label: "\\upvarbeta", type: "variable", info: "Greek Beta Symbol / Greek Small Letter Curled Beta", apply: "ϐ" },
    { label: "\\vartheta", type: "variable", info: "Greek Theta Symbol / Greek Small Letter Script Theta", apply: "ϑ" },
    { label: "\\phi", type: "variable", info: "Greek Phi Symbol / Greek Small Letter Script Phi", apply: "ϕ" },
    { label: "\\varpi", type: "variable", info: "Greek Pi Symbol / Greek Small Letter Omega Pi", apply: "ϖ" },
    { label: "\\upoldKoppa", type: "variable", info: "Greek Letter Archaic Koppa", apply: "Ϙ" },
    { label: "\\upoldkoppa", type: "variable", info: "Greek Small Letter Archaic Koppa", apply: "ϙ" },
    { label: "\\Stigma", type: "variable", info: "Greek Letter Stigma / Greek Capital Letter Stigma", apply: "Ϛ" },
    { label: "\\upstigma", type: "variable", info: "Greek Small Letter Stigma", apply: "ϛ" },
    { label: "\\Digamma", type: "variable", info: "Greek Letter Digamma / Greek Capital Letter Digamma", apply: "Ϝ" },
    { label: "\\digamma", type: "variable", info: "Greek Small Letter Digamma", apply: "ϝ" },
    { label: "\\Koppa", type: "variable", info: "Greek Letter Koppa / Greek Capital Letter Koppa", apply: "Ϟ" },
    { label: "\\upkoppa", type: "variable", info: "Greek Small Letter Koppa", apply: "ϟ" },
    { label: "\\Sampi", type: "variable", info: "Greek Letter Sampi / Greek Capital Letter Sampi", apply: "Ϡ" },
    { label: "\\upsampi", type: "variable", info: "Greek Small Letter Sampi", apply: "ϡ" },
    { label: "\\varkappa", type: "variable", info: "Greek Kappa Symbol / Greek Small Letter Script Kappa", apply: "ϰ" },
    { label: "\\varrho", type: "variable", info: "Greek Rho Symbol / Greek Small Letter Tailed Rho", apply: "ϱ" },
    { label: "\\varTheta", type: "variable", info: "Greek Capital Theta Symbol", apply: "ϴ" },
    { label: "\\epsilon", type: "variable", info: "Greek Lunate Epsilon Symbol", apply: "ϵ" },
    { label: "\\backepsilon", type: "variable", info: "Greek Reversed Lunate Epsilon Symbol", apply: "϶" },
    { label: "\\^0", info: "Superscript Zero / Superscript Digit Zero", apply: "⁰" },
    { label: "\\^i", info: "Superscript Latin Small Letter I", apply: "ⁱ" },
    { label: "\\^4", info: "Superscript Four / Superscript Digit Four", apply: "⁴" },
    { label: "\\^5", info: "Superscript Five / Superscript Digit Five", apply: "⁵" },
    { label: "\\^6", info: "Superscript Six / Superscript Digit Six", apply: "⁶" },
    { label: "\\^7", info: "Superscript Seven / Superscript Digit Seven", apply: "⁷" },
    { label: "\\^8", info: "Superscript Eight / Superscript Digit Eight", apply: "⁸" },
    { label: "\\^9", info: "Superscript Nine / Superscript Digit Nine", apply: "⁹" },
    { label: "\\^+", info: "Superscript Plus Sign", apply: "⁺" },
    { label: "\\^-", info: "Superscript Minus / Superscript Hyphen-Minus", apply: "⁻" },
    { label: "\\^=", info: "Superscript Equals Sign", apply: "⁼" },
    { label: "\\^(", info: "Superscript Left Parenthesis / Superscript Opening Parenthesis", apply: "⁽" },
    { label: "\\^)", info: "Superscript Right Parenthesis / Superscript Closing Parenthesis", apply: "⁾" },
    { label: "\\^n", info: "Superscript Latin Small Letter N", apply: "ⁿ" },
    { label: "\\_0", type: "variable", info: "Subscript Zero / Subscript Digit Zero", apply: "₀" },
    { label: "\\_1", type: "variable", info: "Subscript One / Subscript Digit One", apply: "₁" },
    { label: "\\_2", type: "variable", info: "Subscript Two / Subscript Digit Two", apply: "₂" },
    { label: "\\_3", type: "variable", info: "Subscript Three / Subscript Digit Three", apply: "₃" },
    { label: "\\_4", type: "variable", info: "Subscript Four / Subscript Digit Four", apply: "₄" },
    { label: "\\_5", type: "variable", info: "Subscript Five / Subscript Digit Five", apply: "₅" },
    { label: "\\_6", type: "variable", info: "Subscript Six / Subscript Digit Six", apply: "₆" },
    { label: "\\_7", type: "variable", info: "Subscript Seven / Subscript Digit Seven", apply: "₇" },
    { label: "\\_8", type: "variable", info: "Subscript Eight / Subscript Digit Eight", apply: "₈" },
    { label: "\\_9", type: "variable", info: "Subscript Nine / Subscript Digit Nine", apply: "₉" },
    { label: "\\forall", type: "variable", info: "For All", apply: "∀" },
    { label: "\\complement", type: "variable", info: "Complement", apply: "∁" },
    { label: "\\partial", type: "variable", info: "Partial Differential", apply: "∂" },
    { label: "\\exists", type: "variable", info: "There Exists", apply: "∃" },
    { label: "\\nexists", type: "variable", info: "There Does Not Exist", apply: "∄" },
    { label: "\\emptyset", type: "variable", info: "Empty Set", apply: "∅" },
    { label: "\\increment", type: "variable", info: "Increment", apply: "∆" },
    { label: "\\nabla", type: "variable", info: "Nabla", apply: "∇" },
    { label: "\\in", type: "variable", info: "Element Of", apply: "∈" },
    { label: "\\notin", type: "variable", info: "Not An Element Of", apply: "∉" },
    { label: "\\sqrt", type: "variable", info: "Square Root", apply: "√" },
    { label: "\\cbrt", type: "variable", info: "Cube Root", apply: "∛" },
    { label: "\\fourthroot", type: "variable", info: "Fourth Root", apply: "∜" },
    { label: "\\propto", type: "variable", info: "Proportional To", apply: "∝" },
    { label: "\\infty", type: "variable", info: "Infinity", apply: "∞" },
    { label: "\\cap", type: "variable", info: "Intersection", apply: "∩" },
    { label: "\\cup", type: "variable", info: "Union", apply: "∪" },
    { label: "\\therefore", type: "variable", info: "Therefore", apply: "∴" },
    { label: "\\because", type: "variable", info: "Because", apply: "∵" },
    { label: "\\leq", type: "variable", info: "Less-Than Or Equal To / Less Than Or Equal To", apply: "≤" },
    { label: "\\geq", type: "variable", info: "Greater-Than Or Equal To / Greater Than Or Equal To", apply: "≥" },
    { label: "\\subset", type: "variable", info: "Subset Of", apply: "⊂" },
    { label: "\\supset", type: "variable", info: "Superset Of", apply: "⊃" },
    { label: "\\nsubset", type: "variable", info: "Not A Subset Of", apply: "⊄" },
    { label: "\\nsupset", type: "variable", info: "Not A Superset Of", apply: "⊅" },
    { label: "\\subseteq", type: "variable", info: "Subset Of Or Equal To", apply: "⊆" },
    { label: "\\supseteq", type: "variable", info: "Superset Of Or Equal To", apply: "⊇" },
    { label: "\\nsubseteq", type: "variable", info: "Neither A Subset Of Nor Equal To", apply: "⊈" },
    { label: "\\nsupseteq", type: "variable", info: "Neither A Superset Of Nor Equal To", apply: "⊉" },
    { label: "\\bowtie", type: "variable", info: "Bowtie", apply: "⋈" },
    { label: "\\ltimes", type: "variable", info: "Left Normal Factor Semidirect Product", apply: "⋉" },
    { label: "\\rtimes", type: "variable", info: "Right Normal Factor Semidirect Product", apply: "⋊" },
    { label: "\\vdots", type: "variable", info: "Vertical Ellipsis", apply: "⋮" },
    { label: "\\cdots", type: "variable", info: "Midline Horizontal Ellipsis", apply: "⋯" },
    { label: "\\adots", type: "variable", info: "Up Right Diagonal Ellipsis", apply: "⋰" },
    { label: "\\ddots", type: "variable", info: "Down Right Diagonal Ellipsis", apply: "⋱" }
];

const relLanguage = LRLanguage.define({
    parser: parser.configure({
        props: [
            styleTags({
                "Keyword AttributeKeyword": tags.keyword,
                Type: tags.typeName,
                Emphasis: tags.emphasis,
                "IntLiteral FloatLiteral": tags.number,
                BooleanLiteral: tags.bool,
                CharLiteral: tags.character,
                "DocstringLiteral MultilineDocstringLiteral": tags.docString,
                "StaticStringLiteral/...": tags.string,
                "StaticMultilineStringLiteral RawStringSequence InterpolationLiteral InterpolationMultilineLiteral": tags.string,
                LineComment: tags.lineComment,
                BlockComment: tags.blockComment,
                "BasicId LhsId/BasicId": tags.variableName,
                "LogicalParam/LogicalExpression/BasicExpression/BasicId": tags.attributeName,
                "FormalId/BasicId": tags.attributeName,
                "InterpolationId BasicExpression/BasicId": tags.labelName,
                "QualifiedNameElem/BasicId RelnameLiteral ValueTypeLiteral": tags.literal,
                "DateLiteral DateTimeLiteral": tags.string,
                "Operator OperatorKeyword": tags.operatorKeyword,
                '( )': tags.paren,
                '[ ]': tags.squareBracket,
                '{ }': tags.brace,
                ':': tags.derefOperator,
                ', ;': tags.separator
            }),
            foldNodeProp.add({
                MultilineDocstringLiteral(tree) { return { from: tree.from + 3, to: tree.to - 3 }; },
                InterpolationMultilineLiteral(tree) { return { from: tree.from + 3, to: tree.to - 3 }; },
                StaticMultilineStringLiteral(tree) { return { from: tree.from + 3, to: tree.to - 3 }; },
                RawStringSequence(tree) { return { from: tree.from + 1, to: tree.to - 1 }; },
                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; },
                BoundedExpression(tree) { return { from: tree.from + 1, to: tree.to - 1 }; }
            })
        ]
    }),
    languageData: {
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`", '"""'] },
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
    }
});
// Autocomplete
const relCompletion = relLanguage.data.of({
    autocomplete: completeFromList(autocompleteList)
});
function rel() {
    return new LanguageSupport(relLanguage, [relCompletion]);
}

export { rel, relCompletion, relLanguage };
