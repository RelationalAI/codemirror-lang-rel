import { LRParser } from '@lezer/lr';
import { LRLanguage, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@lezer/highlight';
import { completeFromList } from '@codemirror/autocomplete';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_identifier = {__proto__:null,inline:12, if:18, then:22, else:24, end:26, iff:30, not:34, xor:38, and:42, or:44, from:48, module:52, forall:56, for:60, in:62, implies:66, def:70, abort:76, export:80, config:84, delete:88, insert:92, output:96, with:102, use:104, ic:108, doc:114, entity:120, type:124, value:128, true:134, false:134, Int:152, String:156, Any:160, Number:164, Char:168, Missing:172, Floating:176, UnsignedInt:180, SignedInt:184, Rational:188, FixedDecimal:192, RelName:196, Entity:200, AutoNumber:204, Hash:208, FilePos:212, Date:216, DateTime:220, Year:224, Month:228, Week:232, Day:236, Hour:240, Minute:244, Second:248, Millisecond:252, Microsecond:256, Nanosecond:260};
const parser = LRParser.deserialize({
  version: 14,
  states: "5`O`QPOOO$}OQO'#DhO%VOQO'#DtOOQO'#Fc'#FcOOQO'#Do'#DoOOQO'#Ff'#FfOOQO'#Dx'#DxOOQO'#FZ'#FZOOQO'#FT'#FTQ`QPOOO%_QPO'#CaO`QPO'#CdO`QPO'#CjO`QPO'#ClO`QPO'#CnO`QPO'#CpO%dQPO'#CsO%dQPO'#CuO`QPO'#CwO%dQPO'#CyO`QPO'#C|O%iQPO'#DOO%dQPO'#D`O%dQPO'#DcO&QQPO'#DeO&VQPO'#DiO&_QPO'#DmO&dQPO'#DyO*bQPO'#D{O.`QPO'#D}O2^QPO'#EPO6[QPO'#ERO:YQPO'#ETO>WQPO'#EVOBUQPO'#EXOFSQPO'#EZOJQQPO'#E]ONOQPO'#E_O!#|QPO'#EaO!'zQPO'#EcO!+xQPO'#EeO!/vQPO'#EgO!3tQPO'#EiO!7rQPO'#EkO!;pQPO'#EmO!?nQPO'#EoO!ClQPO'#EqO!GjQPO'#EsO!KhQPO'#EuO# fQPO'#EwO#%dQPO'#EyO#)bQPO'#E{O#-`QPO'#E}O#1^QPO'#FPO#5[QPO'#FROOOO'#FV'#FVO#9YOQO,5:SOOQO,5:S,5:SO#9bOQO,5:`OOQO,5:`,5:`OOQO-E9R-E9RO#9jQPO,58{O#=hQPO'#CfO#=uQPO,59OOOQO,59U,59UOOQO,59W,59WOOQO,59Y,59YOOQO,59[,59[OOQO'#Cc'#CcOOQO,59_,59_O`QPO,59aO`QPO,59cO#>QQPO,59eOOQO,59h,59hO#>VQPO,59jO`QPO,59mO`QPO,59oO`QPO,59qO`QPO,59sO`QPO,59uO#BTQPO,59wO#FUQPO,59zO#FZQPO,59}O#FcQPO,5:POOQO,5:T,5:TO%dQPO,5:VO%dQPO,5:XOOQO,5:e,5:eOOQO,5:g,5:gOOQO,5:i,5:iOOQO,5:k,5:kOOQO,5:m,5:mOOQO,5:o,5:oOOQO,5:q,5:qOOQO,5:s,5:sOOQO,5:u,5:uOOQO,5:w,5:wOOQO,5:y,5:yOOQO,5:{,5:{OOQO,5:},5:}OOQO,5;P,5;POOQO,5;R,5;ROOQO,5;T,5;TOOQO,5;V,5;VOOQO,5;X,5;XOOQO,5;Z,5;ZOOQO,5;],5;]OOQO,5;_,5;_OOQO,5;a,5;aOOQO,5;c,5;cOOQO,5;e,5;eOOQO,5;g,5;gOOQO,5;i,5;iOOQO,5;k,5;kOOQO,5;m,5;mOOOO-E9T-E9TOOQO1G/n1G/nOOQO1G/z1G/zOOQO1G.g1G.gO#FhQPO1G.jO`QPO'#FUOOQO1G.j1G.jO`QPO1G.jO#FsQPO1G.{OOQO1G.}1G.}O%dQPO1G/POOQO'#DQ'#DQOOQO1G/U1G/UOOQO1G/X1G/XOOQO1G/Z1G/ZOOQO1G/]1G/]OOQO1G/_1G/_OOQO1G/a1G/aOOQO'#D_'#D_OOQO1G/c1G/cO#FxQPO1G/cO%dQPO1G/fOOQO1G/i1G/iO%dQPO1G/iOOQO1G/k1G/kOOQO1G/q1G/qOOQO1G/s1G/sOOQO-E9S-E9SOOQO7+$U7+$UO`QPO7+$UOOQO,5;p,5;pO#JvQPO7+$UOOQO7+$g7+$gOOQO7+$k7+$kOOQO7+$}7+$}OOQO7+%Q7+%QO#J{QPO7+%TO#KQQPO<<GpOOQO<<Gp<<GpOOQO<<Ho<<HoOOQOAN=[AN=[",
  stateData: "#K_~O#|OSPOSQOSROS~OXZO_[Oa]Oc^Oe_Of_Oh`OjaOlbOncOqdOseO!TfO!WgO!YhO!^iO!bjO!dRO!eRO!fRO!gRO!iRO!jRO!kRO!nkO!plO!rmO!tnO!voO!xpO!zqO!|rO#OsO#QtO#SuO#UvO#WwO#YxO#[yO#^zO#`{O#b|O#d}O#f!OO#h!PO#j!QO#l!RO#n!SO#p!TO#r!UO#t!VO#v!WO$OYO$TPO$XQO~O$T!ZO$U!XO~O$U!XO$W!]O~OU!_O~O$P!fO~Ov!mOx!nOz!oO|!pO!O!qO!Q!rO$P!fO~O!Z!uO~O!`!wO$P!fO~O!`!xO~O$P!fOX!mX_!mXa!mXc!mXe!mXf!mXh!mXj!mXl!mXn!mXq!mXs!mX!T!mX!W!mX!Y!mX!^!mX!b!mX!d!mX!e!mX!f!mX!g!mX!i!mX!j!mX!k!mX!n!mX!p!mX!r!mX!t!mX!v!mX!x!mX!z!mX!|!mX#O!mX#Q!mX#S!mX#U!mX#W!mX#Y!mX#[!mX#^!mX#`!mX#b!mX#d!mX#f!mX#h!mX#j!mX#l!mX#n!mX#p!mX#r!mX#t!mX#v!mX#z!mX$O!mX$T!mX$X!mXZ!mX[!mX]!mX~O$P!fOX!oX_!oXa!oXc!oXe!oXf!oXh!oXj!oXl!oXn!oXq!oXs!oX!T!oX!W!oX!Y!oX!^!oX!b!oX!d!oX!e!oX!f!oX!g!oX!i!oX!j!oX!k!oX!n!oX!p!oX!r!oX!t!oX!v!oX!x!oX!z!oX!|!oX#O!oX#Q!oX#S!oX#U!oX#W!oX#Y!oX#[!oX#^!oX#`!oX#b!oX#d!oX#f!oX#h!oX#j!oX#l!oX#n!oX#p!oX#r!oX#t!oX#v!oX#z!oX$O!oX$T!oX$X!oXZ!oX[!oX]!oX~O$P!fOX!qX_!qXa!qXc!qXe!qXf!qXh!qXj!qXl!qXn!qXq!qXs!qX!T!qX!W!qX!Y!qX!^!qX!b!qX!d!qX!e!qX!f!qX!g!qX!i!qX!j!qX!k!qX!n!qX!p!qX!r!qX!t!qX!v!qX!x!qX!z!qX!|!qX#O!qX#Q!qX#S!qX#U!qX#W!qX#Y!qX#[!qX#^!qX#`!qX#b!qX#d!qX#f!qX#h!qX#j!qX#l!qX#n!qX#p!qX#r!qX#t!qX#v!qX#z!qX$O!qX$T!qX$X!qXZ!qX[!qX]!qX~O$P!fOX!sX_!sXa!sXc!sXe!sXf!sXh!sXj!sXl!sXn!sXq!sXs!sX!T!sX!W!sX!Y!sX!^!sX!b!sX!d!sX!e!sX!f!sX!g!sX!i!sX!j!sX!k!sX!n!sX!p!sX!r!sX!t!sX!v!sX!x!sX!z!sX!|!sX#O!sX#Q!sX#S!sX#U!sX#W!sX#Y!sX#[!sX#^!sX#`!sX#b!sX#d!sX#f!sX#h!sX#j!sX#l!sX#n!sX#p!sX#r!sX#t!sX#v!sX#z!sX$O!sX$T!sX$X!sXZ!sX[!sX]!sX~O$P!fOX!uX_!uXa!uXc!uXe!uXf!uXh!uXj!uXl!uXn!uXq!uXs!uX!T!uX!W!uX!Y!uX!^!uX!b!uX!d!uX!e!uX!f!uX!g!uX!i!uX!j!uX!k!uX!n!uX!p!uX!r!uX!t!uX!v!uX!x!uX!z!uX!|!uX#O!uX#Q!uX#S!uX#U!uX#W!uX#Y!uX#[!uX#^!uX#`!uX#b!uX#d!uX#f!uX#h!uX#j!uX#l!uX#n!uX#p!uX#r!uX#t!uX#v!uX#z!uX$O!uX$T!uX$X!uXZ!uX[!uX]!uX~O$P!fOX!wX_!wXa!wXc!wXe!wXf!wXh!wXj!wXl!wXn!wXq!wXs!wX!T!wX!W!wX!Y!wX!^!wX!b!wX!d!wX!e!wX!f!wX!g!wX!i!wX!j!wX!k!wX!n!wX!p!wX!r!wX!t!wX!v!wX!x!wX!z!wX!|!wX#O!wX#Q!wX#S!wX#U!wX#W!wX#Y!wX#[!wX#^!wX#`!wX#b!wX#d!wX#f!wX#h!wX#j!wX#l!wX#n!wX#p!wX#r!wX#t!wX#v!wX#z!wX$O!wX$T!wX$X!wXZ!wX[!wX]!wX~O$P!fOX!yX_!yXa!yXc!yXe!yXf!yXh!yXj!yXl!yXn!yXq!yXs!yX!T!yX!W!yX!Y!yX!^!yX!b!yX!d!yX!e!yX!f!yX!g!yX!i!yX!j!yX!k!yX!n!yX!p!yX!r!yX!t!yX!v!yX!x!yX!z!yX!|!yX#O!yX#Q!yX#S!yX#U!yX#W!yX#Y!yX#[!yX#^!yX#`!yX#b!yX#d!yX#f!yX#h!yX#j!yX#l!yX#n!yX#p!yX#r!yX#t!yX#v!yX#z!yX$O!yX$T!yX$X!yXZ!yX[!yX]!yX~O$P!fOX!{X_!{Xa!{Xc!{Xe!{Xf!{Xh!{Xj!{Xl!{Xn!{Xq!{Xs!{X!T!{X!W!{X!Y!{X!^!{X!b!{X!d!{X!e!{X!f!{X!g!{X!i!{X!j!{X!k!{X!n!{X!p!{X!r!{X!t!{X!v!{X!x!{X!z!{X!|!{X#O!{X#Q!{X#S!{X#U!{X#W!{X#Y!{X#[!{X#^!{X#`!{X#b!{X#d!{X#f!{X#h!{X#j!{X#l!{X#n!{X#p!{X#r!{X#t!{X#v!{X#z!{X$O!{X$T!{X$X!{XZ!{X[!{X]!{X~O$P!fOX!}X_!}Xa!}Xc!}Xe!}Xf!}Xh!}Xj!}Xl!}Xn!}Xq!}Xs!}X!T!}X!W!}X!Y!}X!^!}X!b!}X!d!}X!e!}X!f!}X!g!}X!i!}X!j!}X!k!}X!n!}X!p!}X!r!}X!t!}X!v!}X!x!}X!z!}X!|!}X#O!}X#Q!}X#S!}X#U!}X#W!}X#Y!}X#[!}X#^!}X#`!}X#b!}X#d!}X#f!}X#h!}X#j!}X#l!}X#n!}X#p!}X#r!}X#t!}X#v!}X#z!}X$O!}X$T!}X$X!}XZ!}X[!}X]!}X~O$P!fOX#PX_#PXa#PXc#PXe#PXf#PXh#PXj#PXl#PXn#PXq#PXs#PX!T#PX!W#PX!Y#PX!^#PX!b#PX!d#PX!e#PX!f#PX!g#PX!i#PX!j#PX!k#PX!n#PX!p#PX!r#PX!t#PX!v#PX!x#PX!z#PX!|#PX#O#PX#Q#PX#S#PX#U#PX#W#PX#Y#PX#[#PX#^#PX#`#PX#b#PX#d#PX#f#PX#h#PX#j#PX#l#PX#n#PX#p#PX#r#PX#t#PX#v#PX#z#PX$O#PX$T#PX$X#PXZ#PX[#PX]#PX~O$P!fOX#RX_#RXa#RXc#RXe#RXf#RXh#RXj#RXl#RXn#RXq#RXs#RX!T#RX!W#RX!Y#RX!^#RX!b#RX!d#RX!e#RX!f#RX!g#RX!i#RX!j#RX!k#RX!n#RX!p#RX!r#RX!t#RX!v#RX!x#RX!z#RX!|#RX#O#RX#Q#RX#S#RX#U#RX#W#RX#Y#RX#[#RX#^#RX#`#RX#b#RX#d#RX#f#RX#h#RX#j#RX#l#RX#n#RX#p#RX#r#RX#t#RX#v#RX#z#RX$O#RX$T#RX$X#RXZ#RX[#RX]#RX~O$P!fOX#TX_#TXa#TXc#TXe#TXf#TXh#TXj#TXl#TXn#TXq#TXs#TX!T#TX!W#TX!Y#TX!^#TX!b#TX!d#TX!e#TX!f#TX!g#TX!i#TX!j#TX!k#TX!n#TX!p#TX!r#TX!t#TX!v#TX!x#TX!z#TX!|#TX#O#TX#Q#TX#S#TX#U#TX#W#TX#Y#TX#[#TX#^#TX#`#TX#b#TX#d#TX#f#TX#h#TX#j#TX#l#TX#n#TX#p#TX#r#TX#t#TX#v#TX#z#TX$O#TX$T#TX$X#TXZ#TX[#TX]#TX~O$P!fOX#VX_#VXa#VXc#VXe#VXf#VXh#VXj#VXl#VXn#VXq#VXs#VX!T#VX!W#VX!Y#VX!^#VX!b#VX!d#VX!e#VX!f#VX!g#VX!i#VX!j#VX!k#VX!n#VX!p#VX!r#VX!t#VX!v#VX!x#VX!z#VX!|#VX#O#VX#Q#VX#S#VX#U#VX#W#VX#Y#VX#[#VX#^#VX#`#VX#b#VX#d#VX#f#VX#h#VX#j#VX#l#VX#n#VX#p#VX#r#VX#t#VX#v#VX#z#VX$O#VX$T#VX$X#VXZ#VX[#VX]#VX~O$P!fOX#XX_#XXa#XXc#XXe#XXf#XXh#XXj#XXl#XXn#XXq#XXs#XX!T#XX!W#XX!Y#XX!^#XX!b#XX!d#XX!e#XX!f#XX!g#XX!i#XX!j#XX!k#XX!n#XX!p#XX!r#XX!t#XX!v#XX!x#XX!z#XX!|#XX#O#XX#Q#XX#S#XX#U#XX#W#XX#Y#XX#[#XX#^#XX#`#XX#b#XX#d#XX#f#XX#h#XX#j#XX#l#XX#n#XX#p#XX#r#XX#t#XX#v#XX#z#XX$O#XX$T#XX$X#XXZ#XX[#XX]#XX~O$P!fOX#ZX_#ZXa#ZXc#ZXe#ZXf#ZXh#ZXj#ZXl#ZXn#ZXq#ZXs#ZX!T#ZX!W#ZX!Y#ZX!^#ZX!b#ZX!d#ZX!e#ZX!f#ZX!g#ZX!i#ZX!j#ZX!k#ZX!n#ZX!p#ZX!r#ZX!t#ZX!v#ZX!x#ZX!z#ZX!|#ZX#O#ZX#Q#ZX#S#ZX#U#ZX#W#ZX#Y#ZX#[#ZX#^#ZX#`#ZX#b#ZX#d#ZX#f#ZX#h#ZX#j#ZX#l#ZX#n#ZX#p#ZX#r#ZX#t#ZX#v#ZX#z#ZX$O#ZX$T#ZX$X#ZXZ#ZX[#ZX]#ZX~O$P!fOX#]X_#]Xa#]Xc#]Xe#]Xf#]Xh#]Xj#]Xl#]Xn#]Xq#]Xs#]X!T#]X!W#]X!Y#]X!^#]X!b#]X!d#]X!e#]X!f#]X!g#]X!i#]X!j#]X!k#]X!n#]X!p#]X!r#]X!t#]X!v#]X!x#]X!z#]X!|#]X#O#]X#Q#]X#S#]X#U#]X#W#]X#Y#]X#[#]X#^#]X#`#]X#b#]X#d#]X#f#]X#h#]X#j#]X#l#]X#n#]X#p#]X#r#]X#t#]X#v#]X#z#]X$O#]X$T#]X$X#]XZ#]X[#]X]#]X~O$P!fOX#_X_#_Xa#_Xc#_Xe#_Xf#_Xh#_Xj#_Xl#_Xn#_Xq#_Xs#_X!T#_X!W#_X!Y#_X!^#_X!b#_X!d#_X!e#_X!f#_X!g#_X!i#_X!j#_X!k#_X!n#_X!p#_X!r#_X!t#_X!v#_X!x#_X!z#_X!|#_X#O#_X#Q#_X#S#_X#U#_X#W#_X#Y#_X#[#_X#^#_X#`#_X#b#_X#d#_X#f#_X#h#_X#j#_X#l#_X#n#_X#p#_X#r#_X#t#_X#v#_X#z#_X$O#_X$T#_X$X#_XZ#_X[#_X]#_X~O$P!fOX#aX_#aXa#aXc#aXe#aXf#aXh#aXj#aXl#aXn#aXq#aXs#aX!T#aX!W#aX!Y#aX!^#aX!b#aX!d#aX!e#aX!f#aX!g#aX!i#aX!j#aX!k#aX!n#aX!p#aX!r#aX!t#aX!v#aX!x#aX!z#aX!|#aX#O#aX#Q#aX#S#aX#U#aX#W#aX#Y#aX#[#aX#^#aX#`#aX#b#aX#d#aX#f#aX#h#aX#j#aX#l#aX#n#aX#p#aX#r#aX#t#aX#v#aX#z#aX$O#aX$T#aX$X#aXZ#aX[#aX]#aX~O$P!fOX#cX_#cXa#cXc#cXe#cXf#cXh#cXj#cXl#cXn#cXq#cXs#cX!T#cX!W#cX!Y#cX!^#cX!b#cX!d#cX!e#cX!f#cX!g#cX!i#cX!j#cX!k#cX!n#cX!p#cX!r#cX!t#cX!v#cX!x#cX!z#cX!|#cX#O#cX#Q#cX#S#cX#U#cX#W#cX#Y#cX#[#cX#^#cX#`#cX#b#cX#d#cX#f#cX#h#cX#j#cX#l#cX#n#cX#p#cX#r#cX#t#cX#v#cX#z#cX$O#cX$T#cX$X#cXZ#cX[#cX]#cX~O$P!fOX#eX_#eXa#eXc#eXe#eXf#eXh#eXj#eXl#eXn#eXq#eXs#eX!T#eX!W#eX!Y#eX!^#eX!b#eX!d#eX!e#eX!f#eX!g#eX!i#eX!j#eX!k#eX!n#eX!p#eX!r#eX!t#eX!v#eX!x#eX!z#eX!|#eX#O#eX#Q#eX#S#eX#U#eX#W#eX#Y#eX#[#eX#^#eX#`#eX#b#eX#d#eX#f#eX#h#eX#j#eX#l#eX#n#eX#p#eX#r#eX#t#eX#v#eX#z#eX$O#eX$T#eX$X#eXZ#eX[#eX]#eX~O$P!fOX#gX_#gXa#gXc#gXe#gXf#gXh#gXj#gXl#gXn#gXq#gXs#gX!T#gX!W#gX!Y#gX!^#gX!b#gX!d#gX!e#gX!f#gX!g#gX!i#gX!j#gX!k#gX!n#gX!p#gX!r#gX!t#gX!v#gX!x#gX!z#gX!|#gX#O#gX#Q#gX#S#gX#U#gX#W#gX#Y#gX#[#gX#^#gX#`#gX#b#gX#d#gX#f#gX#h#gX#j#gX#l#gX#n#gX#p#gX#r#gX#t#gX#v#gX#z#gX$O#gX$T#gX$X#gXZ#gX[#gX]#gX~O$P!fOX#iX_#iXa#iXc#iXe#iXf#iXh#iXj#iXl#iXn#iXq#iXs#iX!T#iX!W#iX!Y#iX!^#iX!b#iX!d#iX!e#iX!f#iX!g#iX!i#iX!j#iX!k#iX!n#iX!p#iX!r#iX!t#iX!v#iX!x#iX!z#iX!|#iX#O#iX#Q#iX#S#iX#U#iX#W#iX#Y#iX#[#iX#^#iX#`#iX#b#iX#d#iX#f#iX#h#iX#j#iX#l#iX#n#iX#p#iX#r#iX#t#iX#v#iX#z#iX$O#iX$T#iX$X#iXZ#iX[#iX]#iX~O$P!fOX#kX_#kXa#kXc#kXe#kXf#kXh#kXj#kXl#kXn#kXq#kXs#kX!T#kX!W#kX!Y#kX!^#kX!b#kX!d#kX!e#kX!f#kX!g#kX!i#kX!j#kX!k#kX!n#kX!p#kX!r#kX!t#kX!v#kX!x#kX!z#kX!|#kX#O#kX#Q#kX#S#kX#U#kX#W#kX#Y#kX#[#kX#^#kX#`#kX#b#kX#d#kX#f#kX#h#kX#j#kX#l#kX#n#kX#p#kX#r#kX#t#kX#v#kX#z#kX$O#kX$T#kX$X#kXZ#kX[#kX]#kX~O$P!fOX#mX_#mXa#mXc#mXe#mXf#mXh#mXj#mXl#mXn#mXq#mXs#mX!T#mX!W#mX!Y#mX!^#mX!b#mX!d#mX!e#mX!f#mX!g#mX!i#mX!j#mX!k#mX!n#mX!p#mX!r#mX!t#mX!v#mX!x#mX!z#mX!|#mX#O#mX#Q#mX#S#mX#U#mX#W#mX#Y#mX#[#mX#^#mX#`#mX#b#mX#d#mX#f#mX#h#mX#j#mX#l#mX#n#mX#p#mX#r#mX#t#mX#v#mX#z#mX$O#mX$T#mX$X#mXZ#mX[#mX]#mX~O$P!fOX#oX_#oXa#oXc#oXe#oXf#oXh#oXj#oXl#oXn#oXq#oXs#oX!T#oX!W#oX!Y#oX!^#oX!b#oX!d#oX!e#oX!f#oX!g#oX!i#oX!j#oX!k#oX!n#oX!p#oX!r#oX!t#oX!v#oX!x#oX!z#oX!|#oX#O#oX#Q#oX#S#oX#U#oX#W#oX#Y#oX#[#oX#^#oX#`#oX#b#oX#d#oX#f#oX#h#oX#j#oX#l#oX#n#oX#p#oX#r#oX#t#oX#v#oX#z#oX$O#oX$T#oX$X#oXZ#oX[#oX]#oX~O$P!fOX#qX_#qXa#qXc#qXe#qXf#qXh#qXj#qXl#qXn#qXq#qXs#qX!T#qX!W#qX!Y#qX!^#qX!b#qX!d#qX!e#qX!f#qX!g#qX!i#qX!j#qX!k#qX!n#qX!p#qX!r#qX!t#qX!v#qX!x#qX!z#qX!|#qX#O#qX#Q#qX#S#qX#U#qX#W#qX#Y#qX#[#qX#^#qX#`#qX#b#qX#d#qX#f#qX#h#qX#j#qX#l#qX#n#qX#p#qX#r#qX#t#qX#v#qX#z#qX$O#qX$T#qX$X#qXZ#qX[#qX]#qX~O$P!fOX#sX_#sXa#sXc#sXe#sXf#sXh#sXj#sXl#sXn#sXq#sXs#sX!T#sX!W#sX!Y#sX!^#sX!b#sX!d#sX!e#sX!f#sX!g#sX!i#sX!j#sX!k#sX!n#sX!p#sX!r#sX!t#sX!v#sX!x#sX!z#sX!|#sX#O#sX#Q#sX#S#sX#U#sX#W#sX#Y#sX#[#sX#^#sX#`#sX#b#sX#d#sX#f#sX#h#sX#j#sX#l#sX#n#sX#p#sX#r#sX#t#sX#v#sX#z#sX$O#sX$T#sX$X#sXZ#sX[#sX]#sX~O$P!fOX#uX_#uXa#uXc#uXe#uXf#uXh#uXj#uXl#uXn#uXq#uXs#uX!T#uX!W#uX!Y#uX!^#uX!b#uX!d#uX!e#uX!f#uX!g#uX!i#uX!j#uX!k#uX!n#uX!p#uX!r#uX!t#uX!v#uX!x#uX!z#uX!|#uX#O#uX#Q#uX#S#uX#U#uX#W#uX#Y#uX#[#uX#^#uX#`#uX#b#uX#d#uX#f#uX#h#uX#j#uX#l#uX#n#uX#p#uX#r#uX#t#uX#v#uX#z#uX$O#uX$T#uX$X#uXZ#uX[#uX]#uX~O$T#hO$U!XO~O$U!XO$W#iO~O$P!fOXTa_TaaTacTaeTafTahTajTalTanTaqTasTa!TTa!WTa!YTa!^Ta!bTa!dTa!eTa!fTa!gTa!iTa!jTa!kTa!nTa!pTa!rTa!tTa!vTa!xTa!zTa!|Ta#OTa#QTa#STa#UTa#WTa#YTa#[Ta#^Ta#`Ta#bTa#dTa#fTa#hTa#jTa#lTa#nTa#pTa#rTa#tTa#vTa#zTa$OTa$TTa$XTaZTa[Ta]Ta~OZYX[YX]YX~P`OZ#lO[#nO]#mO~Oo#qO~O$Q#rOXra_raaracraerafrahrajralranraqrasra!Tra!Wra!Yra!^ra!bra!dra!era!fra!gra!ira!jra!kra!nra!pra!rra!tra!vra!xra!zra!|ra#Ora#Qra#Sra#Ura#Wra#Yra#[ra#^ra#`ra#bra#dra#fra#hra#jra#lra#nra#pra#rra#tra#vra#zra$Ora$Tra$XraZra[ra]ra~O$P!fO$Q#yOX!Pa_!Paa!Pac!Pae!Paf!Pah!Paj!Pal!Pan!Paq!Pas!Pa!T!Pa!W!Pa!Y!Pa!^!Pa!b!Pa!d!Pa!e!Pa!f!Pa!g!Pa!i!Pa!j!Pa!k!Pa!n!Pa!p!Pa!r!Pa!t!Pa!v!Pa!x!Pa!z!Pa!|!Pa#O!Pa#Q!Pa#S!Pa#U!Pa#W!Pa#Y!Pa#[!Pa#^!Pa#`!Pa#b!Pa#d!Pa#f!Pa#h!Pa#j!Pa#l!Pa#n!Pa#p!Pa#r!Pa#t!Pa#v!Pa#z!Pa$O!Pa$T!Pa$X!PaZ!Pa[!Pa]!Pa~O!U#|O~O$Q#}O$R$OO~O$TPO~OZ#lO[$UO]$TO~O]$XO~O$P!fOX!Pi_!Pia!Pic!Pie!Pif!Pih!Pij!Pil!Pin!Piq!Pis!Pi!T!Pi!W!Pi!Y!Pi!^!Pi!b!Pi!d!Pi!e!Pi!f!Pi!g!Pi!i!Pi!j!Pi!k!Pi!n!Pi!p!Pi!r!Pi!t!Pi!v!Pi!x!Pi!z!Pi!|!Pi#O!Pi#Q!Pi#S!Pi#U!Pi#W!Pi#Y!Pi#[!Pi#^!Pi#`!Pi#b!Pi#d!Pi#f!Pi#h!Pi#j!Pi#l!Pi#n!Pi#p!Pi#r!Pi#t!Pi#v!Pi#z!Pi$O!Pi$T!Pi$X!PiZ!Pi[!Pi]!Pi~O]$_O~O$S$`O~O]$aO~OQP!g!f$U$W!d~",
  goto: ",T$ZPPPPP$[P$r$[P'iPPP$[P$[P$[P$[PP$[P$[P$[P$[PP$[P$[P'x$[P$[P$[P$[P$[P$[P'{$[PP$[P$[PP(O$[P$[P$[P$[PPPP(iPPP$[)PP)PP)PP)PP)PP)PP)PP)PP)PP)PP)PP)PP)PP)PP)PP)PP)PP)PP)PP)PP)PP)PP)PP)PP)PP)PP)PP)PP)g)u){PPP*VPPPPPPP+VPP+myVOXZ[]^_bd!`!h!i!m!n!o!p!q#l#n$UQ!g`Q!haQ!jcQ!leQ!sfQ!tgQ!viQ!ykQ!zlQ!{mQ!|nQ!}oQ#OpQ#PqQ#QrQ#RsQ#StQ#TuQ#UvQ#VwQ#WxQ#XyQ#YzQ#Z{Q#[|Q#]}Q#^!OQ#_!PQ#`!QQ#a!RQ#b!SQ#c!TQ#d!UQ#e!VQ#f!WQ#j!_Q#z!rQ$Q!wQ$R!xQ$Y#qQ$Z#{Q$[#|R$]$OQ!aZQ#o!hQ$V#lQ$W#nR$^$UR#s!lR#{!rxROXZ[]^_bd!`!h!i!m!n!o!p!q#l#n$UR$P!uyROXZ[]^_bd!`!h!i!m!n!o!p!q#l#n$UyTOXZ[]^_bd!`!h!i!m!n!o!p!q#l#n$UQXOS!^X!`Z!`Z!h#l#n$UQ#k!aR$S#kQ!YPQ![QT#g!Y![`WOXZ!`!h#l#n$UQ!b[Q!c]Q!d^Q!e_Q!ibQ!kdQ#p!iQ#t!mQ#u!nQ#v!oQ#w!pR#x!qySOXZ[]^_bd!`!h!i!m!n!o!p!q#l#n$UyUOXZ[]^_bd!`!h!i!m!n!o!p!q#l#n$U",
  nodeNames: "⚠ LineComment BlockComment StringLiteral Rel InlineStatement inline VariableName IfStatement if Body then else end IffStatement iff NotStatement not XorStatement xor AndOrStatement and or FromStatement from ModuleStatement module ForallStatement forall ForInStatement for in ImpliesStatement implies DefineStatement def AssignOp ImportDefinitionStatement abort ExportDefinitionStatement export ConfigDefinitionStatement config DeleteDefinitionStatement delete InsertDefinitionStatement insert OutputDefinitionStatement output AssignOp WithUseStatement with use ConstraintStatement ic DocStringLiteral LineStarter doc MultilineStringLiteral EntityStatement entity EntityTypeStatement type ValueTypeStatement value ExpressionStatement Number BooleanLiteral DateLiteral DatetimeLiteral MultilineBlockComment RelnameLiteral RelnameStringLiteral ValueTypeLiteral TypeStatement IntType Int StringType String AnyType Any NumberType Number CharType Char MissingType Missing FloatingType Floating UnsignedIntType UnsignedInt SignedIntType SignedInt RationalType Rational FixedDecimalType FixedDecimal RelNameType RelName EntityType Entity AutoNumberType AutoNumber HashType Hash FilePosType FilePos DateType Date DateTimeType DateTime YearType Year MonthType Month WeekType Week DayType Day HourType Hour MinuteType Minute SecondType Second MillisecondType Millisecond MicrosecondType Microsecond NanosecondType Nanosecond",
  maxTerm: 148,
  nodeProps: [
    ["group", -9,58,66,67,68,69,70,71,72,73,"Expression",-28,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,"Type"]
  ],
  skippedNodes: [0,1,2,3],
  repeatNodeCount: 3,
  tokenData: "!IW~RuOX#fXY%UYZ%{Z]#f]^%U^p#fpq%Uqr#frs&qst#ftu,fuw#fwx,|x!O#f!O!P2p!P!Q6U!Q!R>h!R![!%s![!]!&s!]!_#f!_!`!AY!`!b#f!b!c!Ap!c!}!BW!}#Q#f#Q#R!Cd#R#S!GO#S#T#f#T#o!BW#o#p!HY#p#q#f#q#r!Hp#r4w#f4w5b!BW5b5i#f5i6S!BW6S~#fQ#kT$UQOY#fYZ#zZr#frs$Ps~#fQ$PO$UQQ$STOY$cYZ#zZr$crs$us~$cQ$fTOY#fYZ#zZr#frs$Ps~#fQ$xSOY$cYZ#zZr$cs~$cR%]Y#|P$UQOX#fXY%UYZ%{Z]#f]^%U^p#fpq%Uqr#frs$Ps~#fR&SS#|P$UQXY&`YZ&`]^&`pq&`P&eS#|PXY&`YZ&`]^&`pq&`~&vVR~OY']YZ#zZr']rs+{s#O']#O#P+i#P~']~'bVR~OY'wYZ#zZr'wrs(es#O'w#O#P(y#P~'w~(OV$UQR~OY'wYZ#zZr'wrs(es#O'w#O#P(y#P~'w~(jTR~OY$cYZ#zZr$crs$us~$c~)OT$UQOY'wYZ)_Zr'wrs*ls~'w~)fU$UQR~OY)xZr)xrs*as#O)x#O#P*f#P~)x~)}UR~OY)xZr)xrs*as#O)x#O#P*f#P~)x~*fOR~~*iPO~)x~*qVR~OY']YZ#zZr']rs+Ws#O']#O#P+i#P~']~+]SR~OY$cYZ#zZr$cs~$c~+lTOY'wYZ)_Zr'wrs*ls~'w~,QTR~OY$cYZ#zZr$crs,as~$c~,fO$T~R,mT!YP$UQOY#fYZ#zZr#frs$Ps~#f~-TX$UQR~OY,|YZ#zZr,|rs-psw,|wx/Sx#O,|#O#P/j#P~,|~-uXR~OY.bYZ#zZr.brs1Wsw.bwx1xx#O.b#O#P2^#P~.b~.gXR~OY,|YZ#zZr,|rs-psw,|wx/Sx#O,|#O#P/j#P~,|~/ZT$UQR~OY#fYZ#zZr#frs$Ps~#f~/oT$UQOY,|YZ0OZr,|rs-ps~,|~0VU$UQR~OY0iZw0iwx*ax#O0i#O#P1Q#P~0i~0nUR~OY0iZw0iwx*ax#O0i#O#P1Q#P~0i~1TPO~0i~1]XR~OY.bYZ#zZr.brs0isw.bwx1xx#O.b#O#P2^#P~.b~1}TR~OY#fYZ#zZr#frs$Ps~#f~2aTOY,|YZ0OZr,|rs-ps~,|R2uV$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![3[![~#fR3cZ$UQ!dPOY#fYZ#zZr#frs$Ps!Q#f!Q![3[![!g#f!g!h4U!h#X#f#X#Y4U#Y~#fR4ZZ$UQOY#fYZ#zZr#frs$Ps{#f{|4||}#f}!O4|!O!Q#f!Q![5h![~#fR5RV$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![5h![~#fR5oV$UQ!dPOY#fYZ#zZr#frs$Ps!Q#f!Q![5h![~#f~6ZX$UQOY#fYZ#zZr#frs$Psz#fz{6v{!P#f!P!Q<g!Q~#f~7PV$X~$UQ$WQOY7fYZ8QZr7frs9Tsz7fz{:V{~7fR7kV$UQOY7fYZ8QZr7frs9Tsz7fz{:V{~7fR8VR$UQOz8`z{8l{~8`P8cROz8`z{8l{~8`P8oTOz8`z{8l{!P8`!P!Q9O!Q~8`P9TOQPR9WVOY9mYZ8QZr9mrs;_sz9mz{;w{~9mR9pVOY7fYZ8QZr7frs9Tsz7fz{:V{~7fR:[X$UQOY7fYZ8QZr7frs9Tsz7fz{:V{!P7f!P!Q:w!Q~7fR;OTQP$UQOY#fYZ#zZr#frs$Ps~#fR;bVOY9mYZ8QZr9mrs8`sz9mz{;w{~9mR;zXOY7fYZ8QZr7frs9Tsz7fz{:V{!P7f!P!Q:w!Q~7fR<nTPP$UQOY<gYZ#zZr<grs<}s~<gR=STPPOY=cYZ#zZr=crs=ws~=cR=hTPPOY<gYZ#zZr<grs<}s~<gR=|TPPOY=cYZ#zZr=crs>]s~=cP>bQPPOY>]Z~>]R>oa$UQ!dPOY#fYZ#zZr#frs$Ps!O#f!O!P?t!P!Q#f!Q![@l![!g#f!g!h4U!h#X#f#X#Y4U#Y#c#f#c#d!!y#d#l#f#l#m!$R#m~#fR?yZ$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![?t![!g#f!g!h4U!h#X#f#X#Y4U#Y~#fR@s]$UQ!dPOY#fYZ#zZr#frs$Ps!O#f!O!P?t!P!Q#f!Q![Al![!g#f!g!h4U!h#X#f#X#Y4U#Y~#fRAs]$UQ!dPOY#fYZ#zZr#frs$Ps!O#f!O!P?t!P!Q#f!Q![Bl![!g#f!g!h4U!h#X#f#X#Y4U#Y~#fRBs^$UQ!dPOY#fYZ#zZr#frs$Ps}#f}!OCo!O!P?t!P!Q#f!Q![! y![!g#f!g!h4U!h#X#f#X#Y4U#Y~#fRCtV$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![DZ![~#fRD`V$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![Du![~#fRDzV$UQOY#fYZ#zZr#frs$Ps}#f}!OEa!O~#fREfV$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![E{![~#fRFQV$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![Fg![~#fRFnV!fP$UQOY#fYZ#zZr#frs$Ps!v#f!v!wGT!w~#fRGYV$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![Go![~#fRGtV$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![HZ![~#fRH`V$UQOY#fYZ#zZr#frs$Ps![#f![!]Hu!]~#fRHzV$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![Ia![~#fRIfV$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![I{![~#fRJQV$UQOY#fYZ#zZr#frs$Ps![#f![!]Jg!]~#fRJlV$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![KR![~#fRKWV$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![Km![~#fRKr]$UQOY#fYZ#zZr#frs$Ps{#f{|Lk|}#f}!OLk!O!Q#f!Q![MV![!|#f!|!}! c!}~#fRLpV$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![MV![~#fRM[V$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![Mq![~#fRMvV$UQOY#fYZ#zZr#frs$Ps![#f![!]N]!]~#fRNbV$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![Nw![~#fRN|V$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![! c![~#fR! jT!gP$UQOY#fYZ#zZr#frs$Ps~#fR!!Q]$UQ!dPOY#fYZ#zZr#frs$Ps!O#f!O!P?t!P!Q#f!Q![! y![!g#f!g!h4U!h#X#f#X#Y4U#Y~#fR!#OV$UQOY#fYZ#zZr#frs$Ps!Q#f!Q!Y!#e!Y~#fR!#lV$UQ!dPOY#fYZ#zZr#frs$Ps!Q#f!Q!Y!#e!Y~#fR!$WZ$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![!$y![!c#f!c!i!$y!i#T#f#T#Z!$y#Z~#fR!%QZ$UQ!dPOY#fYZ#zZr#frs$Ps!Q#f!Q![!$y![!c#f!c!i!$y!i#T#f#T#Z!$y#Z~#fR!%z]$UQ!dPOY#fYZ#zZr#frs$Ps!O#f!O!P?t!P!Q#f!Q![@l![!g#f!g!h4U!h#X#f#X#Y4U#Y~#fR!&x`$UQOY#fYZ#zZr#frs!'zs!c#f!c!}!>z!}#O!@W#O#R#f#R#S!>z#S#T#f#T#o!>z#o4w#f4w5b!>z5b5i#f5i6S!>z6S~#fR!'}ZOY$cYZ!(pZ]$c]^!.b^r$crs!0vs#O$c#O#P!1n#P#Q$c#Q#R!.b#R~$cR!(uT$UQYZ!)U]^!)Urs!)h#O#P!)|#Q#R!)UP!)XTYZ!)U]^!)Urs!)h#O#P!)|#Q#R!)UP!)mT!jPYZ!)U]^!)Urs!)h#O#P!)|#Q#R!)UP!*PeYZ!)U]^!)Urs!)h!Q!R!+b!R!S!+b!S!T!+b!T!U!+b!U!Y!+w!w!x!,^#O#P!)|#Q#R!)U#T#U!)U#U#V!)U#X#Y!)U#Y#Z!)U#b#c!)U#f#g!)U#h#i!)U#i#j!-`#j#k!)U#l#m!-xP!+eUYZ!)U]^!)Urs!)h!Q!Y!+w#O#P!)|#Q#R!)UP!+zUYZ!)U]^!)Urs!)h!Q!Y!)U#O#P!)|#Q#R!)UP!,aR!Q![!,j!c!i!,j#T#Z!,jP!,mR!Q![!,v!c!i!,v#T#Z!,vP!,yR!Q![!-S!c!i!-S#T#Z!-SP!-VR!Q![!-`!c!i!-`#T#Z!-`P!-cR!Q![!-l!c!i!-l#T#Z!-lP!-oR!Q![!-x!c!i!-x#T#Z!-xP!-{R!Q![!.U!c!i!.U#T#Z!.UP!.XR!Q![!)U!c!i!)U#T#Z!)UR!.eZOY#fYZ!(pZ]#f]^!/W^r#frs!0Os#O#f#O#P!5z#P#Q#f#Q#R!/W#R~#fR!/]Z$UQOY#fYZ!(pZ]#f]^!/W^r#frs!0Os#O#f#O#P!5z#P#Q#f#Q#R!/W#R~#fR!0TZ!jPOY$cYZ!(pZ]$c]^!.b^r$crs!0vs#O$c#O#P!1n#P#Q$c#Q#R!.b#R~$cR!0{Z!jPOY$cYZ!(pZ]$c]^!.b^r$crs!)hs#O$c#O#P!1n#P#Q$c#Q#R!.b#R~$cR!1qsOY#fYZ!(pZ]#f]^!/W^r#frs!0Os!Q#f!Q!R!4O!R!S!4O!S!T!4O!T!U!4O!U!Y!4|!Y!w#f!w!x!8^!x#O#f#O#P!5z#P#Q#f#Q#R!/W#R#T#f#T#U!/W#U#V!/W#V#X#f#X#Y!/W#Y#Z!/W#Z#b#f#b#c!/W#c#f#f#f#g!/W#g#h#f#h#i!/W#i#j!;l#j#k!/W#k#l#f#l#m!=[#m~#fR!4T]$UQOY#fYZ!(pZ]#f]^!/W^r#frs!0Os!Q#f!Q!Y!4|!Y#O#f#O#P!5z#P#Q#f#Q#R!/W#R~#fR!5R]$UQOY#fYZ!(pZ]#f]^!/W^r#frs!0Os!Q#f!Q!Y!/W!Y#O#f#O#P!5z#P#Q#f#Q#R!/W#R~#fR!6Ps$UQOY#fYZ!(pZ]#f]^!/W^r#frs!0Os!Q#f!Q!R!4O!R!S!4O!S!T!4O!T!U!4O!U!Y!4|!Y!w#f!w!x!8^!x#O#f#O#P!5z#P#Q#f#Q#R!/W#R#T#f#T#U!/W#U#V!/W#V#X#f#X#Y!/W#Y#Z!/W#Z#b#f#b#c!/W#c#f#f#f#g!/W#g#h#f#h#i!/W#i#j!;l#j#k!/W#k#l#f#l#m!=[#m~#fR!8cZ$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![!9U![!c#f!c!i!9U!i#T#f#T#Z!9U#Z~#fR!9ZZ$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![!9|![!c#f!c!i!9|!i#T#f#T#Z!9|#Z~#fR!:RZ$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![!:t![!c#f!c!i!:t!i#T#f#T#Z!:t#Z~#fR!:yZ$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![!;l![!c#f!c!i!;l!i#T#f#T#Z!;l#Z~#fR!;qZ$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![!<d![!c#f!c!i!<d!i#T#f#T#Z!<d#Z~#fR!<iZ$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![!=[![!c#f!c!i!=[!i#T#f#T#Z!=[#Z~#fR!=aZ$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![!>S![!c#f!c!i!>S!i#T#f#T#Z!>S#Z~#fR!>XZ$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![!/W![!c#f!c!i!/W!i#T#f#T#Z!/W#Z~#fR!?Ra!iP$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![!>z![!c#f!c!}!>z!}#R#f#R#S!>z#S#T#f#T#o!>z#o4w#f4w5b!>z5b5i#f5i6S!>z6S~#fR!@]V$UQOY#fYZ#zZr#frs$Ps#P#f#P#Q!@r#Q~#fR!@yT!iP$UQOY#fYZ#zZr#frs$Ps~#fR!AaT$QP$UQOY#fYZ#zZr#frs$Ps~#fR!AwT$OP$UQOY#fYZ#zZr#frs$Ps~#fR!B_a$PP$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![!BW![!c#f!c!}!BW!}#R#f#R#S!BW#S#T#f#T#o!BW#o4w#f4w5b!BW5b5i#f5i6S!BW6S~#fR!Ci_$UQOY#fYZ#zZr#frs$Ps!c#f!c!}!Dh!}#R#f#R#S!Et#S#T#f#T#o!Dh#o4w#f4w5b!Dh5b5i#f5i6S!Dh6S~#fR!Doa!kP$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![!Dh![!c#f!c!}!Dh!}#R#f#R#S!Dh#S#T#f#T#o!Dh#o4w#f4w5b!Dh5b5i#f5i6S!Dh6S~#fR!Eya$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![!Dh![!c#f!c!}!Dh!}#R#f#R#S!Dh#S#T#f#T#o!Dh#o4w#f4w5b!Dh5b5i#f5i6S!Dh6S~#fR!GTa$UQOY#fYZ#zZr#frs$Ps!Q#f!Q![!BW![!c#f!c!}!BW!}#R#f#R#S!BW#S#T#f#T#o!BW#o4w#f4w5b!BW5b5i#f5i6S!BW6S~#fR!HaT$RP$UQOY#fYZ#zZr#frs$Ps~#fR!HwT$SP$UQOY#fYZ#zZr#frs$Ps~#f",
  tokenizers: [0, 1],
  topRules: {"Rel":[0,4]},
  specialized: [{term: 139, get: value => spec_identifier[value] || -1}],
  tokenPrec: 6171
});

const autocompleteList = [
    { label: "Any", type: "type" },
    { label: "AutoNumber", type: "type" },
    { label: "Boolean", type: "type" },
    { label: "Char", type: "type" },
    { label: "Day", type: "type" },
    { label: "Date", type: "type" },
    { label: "DateTime", type: "type" },
    { label: "Year", type: "type" },
    { label: "Month", type: "type" },
    { label: "Week", type: "type" },
    { label: "Hour", type: "type" },
    { label: "Minute", type: "type" },
    { label: "Second", type: "type" },
    { label: "Millisecond", type: "type" },
    { label: "Microsecond", type: "type" },
    { label: "Nanosecond", type: "type" },
    { label: "Entity", type: "type" },
    { label: "Int", type: "type" },
    { label: "Number", type: "type" },
    { label: "Missing", type: "type" },
    { label: "Floating", type: "type" },
    { label: "UnsignedInt", type: "type" },
    { label: "SignedInt", type: "type" },
    { label: "Rational", type: "type" },
    { label: "FixedDecimal", type: "type" },
    { label: "Hash", type: "type" },
    { label: "FilePos", type: "type" },
    { label: "String", type: "type" },
    { label: "def", type: "keyword" },
    { label: "output", type: "interface" },
    { label: "insert", type: "interface" },
    { label: "delete", type: "interface" },
    { label: "export", type: "interface" },
    { label: "from", type: "keyword" },
    { label: "if", type: "keyword" },
    { label: "iff", type: "keyword" },
    { label: "then", type: "keyword" },
    { label: "else", type: "keyword" },
    { label: "end", type: "keyword" },
    { label: "exists", type: "keyword" },
    { label: "where", type: "keyword" },
    { label: "with", type: "keyword" },
    { label: "select", type: "keyword" },
    { label: "implies", type: "keyword" },
    { label: "use", type: "keyword" },
    { label: "forall", type: "keyword" },
    { label: "in", type: "keyword" },
    { label: "ic", type: "keyword" },
    { label: "not", type: "keyword" },
    { label: "and", type: "keyword" },
    { label: "or", type: "keyword" },
    { label: "xor", type: "keyword" },
    { label: "union", type: "keyword" },
    { label: "_flatten", type: "function" },
    { label: "abelian_group", type: "function" },
    { label: "abs", type: "function" },
    { label: "absorption_laws", type: "function" },
    { label: "acos", type: "function" },
    { label: "acosh", type: "function" },
    { label: "acot", type: "function" },
    { label: "add", type: "function" },
    { label: "antisymmetric", type: "function" },
    { label: "approximate_abelian_group", type: "function" },
    { label: "approximate_commutative_monoid", type: "function" },
    { label: "approximate_group", type: "function" },
    { label: "approximate_monoid", type: "function" },
    { label: "approximate_ring", type: "function" },
    { label: "approximate_semiring", type: "function" },
    { label: "approximately_associative", type: "function" },
    { label: "approximately_commutative", type: "function" },
    { label: "approximately_distributive", type: "function" },
    { label: "approximately_has_inverse", type: "function" },
    { label: "approximately_left_distributive", type: "function" },
    { label: "approximately_right_distributive", type: "function" },
    { label: "approximately_zero_annihilation", type: "function" },
    { label: "argmax", type: "function" },
    { label: "argmin", type: "function" },
    { label: "arity", type: "function" },
    { label: "asin", type: "function" },
    { label: "asinh", type: "function" },
    { label: "associative", type: "function" },
    { label: "atan", type: "function" },
    { label: "atanh", type: "function" },
    { label: "auto_number", type: "function" },
    { label: "binary_operator", type: "function" },
    { label: "binary_relation", type: "function" },
    { label: "binary_relation_substitution_laws", type: "function" },
    { label: "bitwise_and", type: "function" },
    { label: "bitwise_left_shift", type: "function" },
    { label: "bitwise_not", type: "function" },
    { label: "bitwise_or", type: "function" },
    { label: "bitwise_right_shift", type: "function" },
    { label: "bitwise_unsigned_right_shift", type: "function" },
    { label: "bitwise_xor", type: "function" },
    { label: "boolean_and", type: "function" },
    { label: "boolean_false", type: "function" },
    { label: "boolean_not", type: "function" },
    { label: "boolean_or", type: "function" },
    { label: "boolean_true", type: "function" },
    { label: "bottom", type: "function" },
    { label: "bounded_lattice", type: "function" },
    { label: "bounded_semilattice", type: "function" },
    { label: "byte", type: "function" },
    { label: "capture_group_by_index", type: "function" },
    { label: "capture_group_by_name", type: "function" },
    { label: "cart", type: "function" },
    { label: "cbrt", type: "function" },
    { label: "ceil", type: "function" },
    { label: "char", type: "function" },
    { label: "clamp", type: "function" },
    { label: "commutative", type: "function" },
    { label: "commutative_monoid", type: "function" },
    { label: "comparable", type: "function" },
    { label: "complement", type: "function" },
    { label: "concat", type: "function" },
    { label: "cos", type: "function" },
    { label: "cosh", type: "function" },
    { label: "cot", type: "function" },
    { label: "count", type: "function" },
    { label: "date_add", type: "function" },
    { label: "date_day", type: "function" },
    { label: "date_dayname", type: "function" },
    { label: "date_dayofquarter", type: "function" },
    { label: "date_dayofweek", type: "function" },
    { label: "date_dayofweekofmonth", type: "function" },
    { label: "date_dayofyear", type: "function" },
    { label: "date_daysinmonth", type: "function" },
    { label: "date_isleapyear", type: "function" },
    { label: "date_month", type: "function" },
    { label: "date_monthname", type: "function" },
    { label: "date_quarterofyear", type: "function" },
    { label: "date_subtract", type: "function" },
    { label: "date_week", type: "function" },
    { label: "date_year", type: "function" },
    { label: "dates_period_days", type: "function" },
    { label: "datetime_add", type: "function" },
    { label: "datetime_day", type: "function" },
    { label: "datetime_day_", type: "function" },
    { label: "datetime_dayname", type: "function" },
    { label: "datetime_dayofquarter", type: "function" },
    { label: "datetime_dayofweek", type: "function" },
    { label: "datetime_dayofweekofmonth", type: "function" },
    { label: "datetime_dayofyear", type: "function" },
    { label: "datetime_daysinmonth", type: "function" },
    { label: "datetime_hour", type: "function" },
    { label: "datetime_hour_", type: "function" },
    { label: "datetime_isleapyear", type: "function" },
    { label: "datetime_minute", type: "function" },
    { label: "datetime_minute_", type: "function" },
    { label: "datetime_month", type: "function" },
    { label: "datetime_month_", type: "function" },
    { label: "datetime_monthname", type: "function" },
    { label: "datetime_now", type: "function" },
    { label: "datetime_quarterofyear", type: "function" },
    { label: "datetime_second", type: "function" },
    { label: "datetime_subtract", type: "function" },
    { label: "datetime_to_nanoseconds", type: "function" },
    { label: "datetime_week", type: "function" },
    { label: "datetime_week_", type: "function" },
    { label: "datetime_year", type: "function" },
    { label: "datetime_year_", type: "function" },
    { label: "datetimes_period_milliseconds", type: "function" },
    { label: "decimal", type: "function" },
    { label: "decimal_bit_length", type: "function" },
    { label: "decimal_int_convert", type: "function" },
    { label: "decimal_precision", type: "function" },
    { label: "decode_base", type: "function" },
    { label: "default_value", type: "function" },
    { label: "deg", type: "function" },
    { label: "denominator", type: "function" },
    { label: "describe", type: "function" },
    { label: "diff", type: "function" },
    { label: "disjoint", type: "function" },
    { label: "distributive", type: "function" },
    { label: "divide", type: "function" },
    { label: "docstring", type: "function" },
    { label: "domain", type: "function" },
    { label: "dot_join", type: "function" },
    { label: "double_metaphone", type: "function" },
    { label: "empty", type: "function" },
    { label: "encode_base", type: "function" },
    { label: "epoch_milliseconds", type: "function" },
    { label: "eq", type: "function" },
    { label: "equal", type: "function" },
    { label: "equivalence_relation", type: "function" },
    { label: "erf", type: "function" },
    { label: "erfinv", type: "function" },
    { label: "escape_regex_metachars", type: "function" },
    { label: "export_csv", type: "function" },
    { label: "export_json", type: "function" },
    { label: "factorial", type: "function" },
    { label: "filepos", type: "function" },
    { label: "filepos_value", type: "function" },
    { label: "first", type: "function" },
    { label: "float", type: "function" },
    { label: "float_int_convert", type: "function" },
    { label: "floor", type: "function" },
    { label: "floor_divide", type: "function" },
    { label: "floor_to_int", type: "function" },
    { label: "format_date", type: "function" },
    { label: "format_datetime", type: "function" },
    { label: "formula_card_est", type: "function" },
    { label: "frequency", type: "function" },
    { label: "function", type: "function" },
    { label: "geometric_mean", type: "function" },
    { label: "glm_generic", type: "function" },
    { label: "glm_linear_regression", type: "function" },
    { label: "glm_logistic_regression", type: "function" },
    { label: "glm_predict", type: "function" },
    { label: "glm_probit_regression", type: "function" },
    { label: "graphviz", type: "function" },
    { label: "group", type: "function" },
    { label: "gt", type: "function" },
    { label: "gt_eq", type: "function" },
    { label: "harmonic_mean", type: "function" },
    { label: "has_identity", type: "function" },
    { label: "has_left_identity", type: "function" },
    { label: "has_left_zero", type: "function" },
    { label: "has_maximal_element", type: "function" },
    { label: "has_minimal_element", type: "function" },
    { label: "has_right_identity", type: "function" },
    { label: "has_right_zero", type: "function" },
    { label: "hash", type: "function" },
    { label: "hash_value_uint", type: "function" },
    { label: "haversine", type: "function" },
    { label: "help", type: "function" },
    { label: "html", type: "function" },
    { label: "ic", type: "function" },
    { label: "idempotent", type: "function" },
    { label: "identity", type: "function" },
    { label: "int", type: "function" },
    { label: "int_float_convert", type: "function" },
    { label: "int_spread_by_even", type: "function" },
    { label: "int_spread_by_ratio", type: "function" },
    { label: "intersect", type: "function" },
    { label: "irreflexive", type: "function" },
    { label: "is_", type: "function" },
    { label: "jacobian", type: "function" },
    { label: "join_bounded_lattice", type: "function" },
    { label: "last", type: "function" },
    { label: "lattice", type: "function" },
    { label: "left_distributive", type: "function" },
    { label: "left_identity", type: "function" },
    { label: "left_override", type: "function" },
    { label: "left_zero", type: "function" },
    { label: "levenshtein", type: "function" },
    { label: "like_match", type: "function" },
    { label: "linear_regression", type: "function" },
    { label: "linear_regression_objective", type: "function" },
    { label: "linear_regression_predict", type: "function" },
    { label: "lined_csv", type: "function" },
    { label: "load_csv", type: "function" },
    { label: "load_csv_row_wise", type: "function" },
    { label: "load_json", type: "function" },
    { label: "log", type: "function" },
    { label: "log_card_est", type: "function" },
    { label: "lowercase", type: "function" },
    { label: "lr_random_initial_point", type: "function" },
    { label: "lt", type: "function" },
    { label: "lt_eq", type: "function" },
    { label: "mae", type: "function" },
    { label: "markdown", type: "function" },
    { label: "max", type: "function" },
    { label: "max_k", type: "function" },
    { label: "maximal_element", type: "function" },
    { label: "maximum", type: "function" },
    { label: "mean", type: "function" },
    { label: "mean_normalization", type: "function" },
    { label: "median", type: "function" },
    { label: "meet_bounded_lattice", type: "function" },
    { label: "metaphone", type: "function" },
    { label: "min", type: "function" },
    { label: "min_k", type: "function" },
    { label: "min_max_normalization", type: "function" },
    { label: "minimal_element", type: "function" },
    { label: "minimize_initial_point", type: "function" },
    { label: "minimum", type: "function" },
    { label: "missing", type: "function" },
    { label: "mlpack_adaboost", type: "function" },
    { label: "mlpack_adaboost_predict", type: "function" },
    { label: "mlpack_approx_kfn", type: "function" },
    { label: "mlpack_approx_kfn_build", type: "function" },
    { label: "mlpack_dbscan", type: "function" },
    { label: "mlpack_decision_tree", type: "function" },
    { label: "mlpack_decision_tree_predict", type: "function" },
    { label: "mlpack_det", type: "function" },
    { label: "mlpack_det_build", type: "function" },
    { label: "mlpack_emst", type: "function" },
    { label: "mlpack_fastmks", type: "function" },
    { label: "mlpack_fastmks_build", type: "function" },
    { label: "mlpack_gmm_generate", type: "function" },
    { label: "mlpack_gmm_probability", type: "function" },
    { label: "mlpack_gmm_train", type: "function" },
    { label: "mlpack_hoeffding_tree", type: "function" },
    { label: "mlpack_hoeffding_tree_predict", type: "function" },
    { label: "mlpack_kernel_pca", type: "function" },
    { label: "mlpack_kfn", type: "function" },
    { label: "mlpack_kfn_build", type: "function" },
    { label: "mlpack_kmeans", type: "function" },
    { label: "mlpack_kmeans_centroids", type: "function" },
    { label: "mlpack_knn", type: "function" },
    { label: "mlpack_knn_build", type: "function" },
    { label: "mlpack_krann", type: "function" },
    { label: "mlpack_krann_build", type: "function" },
    { label: "mlpack_lars", type: "function" },
    { label: "mlpack_lars_predict", type: "function" },
    { label: "mlpack_linear_regression", type: "function" },
    { label: "mlpack_linear_regression_predict", type: "function" },
    { label: "mlpack_linear_svm", type: "function" },
    { label: "mlpack_linear_svm_predict", type: "function" },
    { label: "mlpack_logistic_regression", type: "function" },
    { label: "mlpack_logistic_regression_predict", type: "function" },
    { label: "mlpack_lsh", type: "function" },
    { label: "mlpack_lsh_build", type: "function" },
    { label: "mlpack_mean_shift", type: "function" },
    { label: "mlpack_nbc", type: "function" },
    { label: "mlpack_nbc_predict", type: "function" },
    { label: "mlpack_nmf", type: "function" },
    { label: "mlpack_pca", type: "function" },
    { label: "mlpack_perceptron", type: "function" },
    { label: "mlpack_perceptron_predict", type: "function" },
    { label: "mlpack_preprocess_split", type: "function" },
    { label: "mlpack_radical", type: "function" },
    { label: "mlpack_random_forest", type: "function" },
    { label: "mlpack_random_forest_predict", type: "function" },
    { label: "mlpack_softmax_regression", type: "function" },
    { label: "mlpack_softmax_regression_predict", type: "function" },
    { label: "mode", type: "function" },
    { label: "modulo", type: "function" },
    { label: "monoid", type: "function" },
    { label: "mse", type: "function" },
    { label: "multiply", type: "function" },
    { label: "murmurhash", type: "function" },
    { label: "nanoseconds_to_datetime", type: "function" },
    { label: "natural_exp", type: "function" },
    { label: "natural_log", type: "function" },
    { label: "neq", type: "function" },
    { label: "not", type: "function" },
    { label: "nullary_relation", type: "function" },
    { label: "num_bytes", type: "function" },
    { label: "num_chars", type: "function" },
    { label: "numerator", type: "function" },
    { label: "pack", type: "function" },
    { label: "parse_date", type: "function" },
    { label: "parse_datetime", type: "function" },
    { label: "parse_decimal", type: "function" },
    { label: "parse_float", type: "function" },
    { label: "parse_int", type: "function" },
    { label: "parse_json", type: "function" },
    { label: "parse_uuid", type: "function" },
    { label: "partial_order", type: "function" },
    { label: "partial_order_and_bounded_lattice", type: "function" },
    { label: "partial_order_and_join_bounded_lattice", type: "function" },
    { label: "partial_order_and_lattice", type: "function" },
    { label: "partial_order_and_meet_bounded_lattice", type: "function" },
    { label: "pattern_match", type: "function" },
    { label: "percentile", type: "function" },
    { label: "percentile_nearest", type: "function" },
    { label: "period_add", type: "function" },
    { label: "period_day_to_int", type: "function" },
    { label: "period_max", type: "function" },
    { label: "period_min", type: "function" },
    { label: "pi_float", type: "function" },
    { label: "pivot", type: "function" },
    { label: "pop_standard_deviation", type: "function" },
    { label: "pop_variance", type: "function" },
    { label: "pop_zscore_normalization", type: "function" },
    { label: "power", type: "function" },
    { label: "prefix_join", type: "function" },
    { label: "preorder", type: "function" },
    { label: "product", type: "function" },
    { label: "proper_subset", type: "function" },
    { label: "proper_superset", type: "function" },
    { label: "rad", type: "function" },
    { label: "random_mersenne_twister", type: "function" },
    { label: "random_threefry_float", type: "function" },
    { label: "random_threefry_uint", type: "function" },
    { label: "random_uint", type: "function" },
    { label: "range", type: "function" },
    { label: "rational", type: "function" },
    { label: "rational_convert", type: "function" },
    { label: "reflexive", type: "function" },
    { label: "regex_compile", type: "function" },
    { label: "regex_match", type: "function" },
    { label: "regex_match_all", type: "function" },
    { label: "rel", type: "function" },
    { label: "relname_string", type: "function" },
    { label: "remainder", type: "function" },
    { label: "reverse_sort", type: "function" },
    { label: "right_distributive", type: "function" },
    { label: "right_identity", type: "function" },
    { label: "right_override", type: "function" },
    { label: "right_zero", type: "function" },
    { label: "ring", type: "function" },
    { label: "rmse", type: "function" },
    { label: "round", type: "function" },
    { label: "sample_standard_deviation", type: "function" },
    { label: "sample_variance", type: "function" },
    { label: "sample_zscore_normalization", type: "function" },
    { label: "second", type: "function" },
    { label: "semilattice", type: "function" },
    { label: "semiring", type: "function" },
    { label: "sign", type: "function" },
    { label: "sin", type: "function" },
    { label: "sinh", type: "function" },
    { label: "sort", type: "function" },
    { label: "soundex", type: "function" },
    { label: "spread", type: "function" },
    { label: "sqrt", type: "function" },
    { label: "squared", type: "function" },
    { label: "squared_deviation", type: "function" },
    { label: "strict_partial_order", type: "function" },
    { label: "strict_total_order", type: "function" },
    { label: "string", type: "function" },
    { label: "string_join", type: "function" },
    { label: "string_length", type: "function" },
    { label: "string_replace", type: "function" },
    { label: "string_replace_multiple", type: "function" },
    { label: "string_split", type: "function" },
    { label: "string_trim", type: "function" },
    { label: "subset", type: "function" },
    { label: "substring", type: "function" },
    { label: "substring_bytes", type: "function" },
    { label: "subtract", type: "function" },
    { label: "suffix_join", type: "function" },
    { label: "sum", type: "function" },
    { label: "sum_int", type: "function" },
    { label: "superset", type: "function" },
    { label: "svg", type: "function" },
    { label: "symmetric", type: "function" },
    { label: "table", type: "function" },
    { label: "tan", type: "function" },
    { label: "tanh", type: "function" },
    { label: "ternary_relation", type: "function" },
    { label: "top", type: "function" },
    { label: "total", type: "function" },
    { label: "total_order", type: "function" },
    { label: "transitive", type: "function" },
    { label: "transpose", type: "function" },
    { label: "trunc", type: "function" },
    { label: "trunc_divide", type: "function" },
    { label: "trunc_to_int", type: "function" },
    { label: "uint", type: "function" },
    { label: "unary_operator", type: "function" },
    { label: "unary_relation", type: "function" },
    { label: "unary_relation_substitution_laws", type: "function" },
    { label: "union", type: "function" },
    { label: "unit_normalization", type: "function" },
    { label: "unix_epoch", type: "function" },
    { label: "unpack", type: "function" },
    { label: "uppercase", type: "function" },
    { label: "uuid_string", type: "function" },
    { label: "vega", type: "function" },
    { label: "vegalite", type: "function" },
    { label: "vegalite_utils", type: "function" },
    { label: "view_json", type: "function" },
    { label: "weighted_mean", type: "function" },
    { label: "xgboost_classifier", type: "function" },
    { label: "xgboost_classifier_predict", type: "function" },
    { label: "xgboost_classifier_probabilities", type: "function" },
    { label: "xgboost_feature_importances", type: "function" },
    { label: "xgboost_regressor", type: "function" },
    { label: "xgboost_regressor_predict", type: "function" },
    { label: "zero_annihilation", type: "function" },
    { label: "zero_of_operator", type: "function" },
    { label: "zip", type: "function" },
    { label: "registered", type: "variable", info: "Registered Sign / Registered Trade Mark Sign", apply: "®" },
    { label: "degree", type: "variable", info: "Degree Sign", apply: "°" },
    { label: "pm", type: "variable", info: "Plus-Minus Sign / Plus-Or-Minus Sign", apply: "±" },
    { label: "\\^2", info: "Superscript Two / Superscript Digit Two", apply: "²" },
    { label: "\\^3", info: "Superscript Three / Superscript Digit Three", apply: "³" },
    { label: "\\^1", info: "Superscript One / Superscript Digit One", apply: "¹" },
    { label: "\\1/4", type: "variable", info: "Vulgar Fraction One Quarter / Fraction One Quarter", apply: "¼" },
    { label: "\\1/2", type: "variable", info: "Vulgar Fraction One Half / Fraction One Half", apply: "½" },
    { label: "\\3/4", type: "variable", info: "Vulgar Fraction Three Quarters / Fraction Three Quarters", apply: "¾" },
    { label: "\\questiondown", type: "variable", info: "Inverted Question Mark", apply: "¿" },
    { label: "\\times", type: "variable", info: "Multiplication Sign", apply: "×" },
    { label: "\\div", type: "variable", info: "Division Sign", apply: "÷" },
    { label: "\\Alpha", type: "variable", info: "Greek Capital Letter Alpha", apply: "Α" },
    { label: "\\Beta", type: "variable", info: "Greek Capital Letter Beta", apply: "Β" },
    { label: "\\Gamma", type: "variable", info: "Greek Capital Letter Gamma", apply: "Γ" },
    { label: "\\Delta", type: "variable", info: "Greek Capital Letter Delta", apply: "Δ" },
    { label: "\\Epsilon", type: "variable", info: "Greek Capital Letter Epsilon", apply: "Ε" },
    { label: "\\Zeta", type: "variable", info: "Greek Capital Letter Zeta", apply: "Ζ" },
    { label: "\\Eta", type: "variable", info: "Greek Capital Letter Eta", apply: "Η" },
    { label: "\\Theta", type: "variable", info: "Greek Capital Letter Theta", apply: "Θ" },
    { label: "\\Iota", type: "variable", info: "Greek Capital Letter Iota", apply: "Ι" },
    { label: "\\Kappa", type: "variable", info: "Greek Capital Letter Kappa", apply: "Κ" },
    { label: "\\Lambda", type: "variable", info: "Greek Capital Letter Lamda / Greek Capital Letter Lambda", apply: "Λ" },
    { label: "\\upMu", type: "variable", info: "Greek Capital Letter Mu", apply: "Μ" },
    { label: "\\upNu", type: "variable", info: "Greek Capital Letter Nu", apply: "Ν" },
    { label: "\\Xi", type: "variable", info: "Greek Capital Letter Xi", apply: "Ξ" },
    { label: "\\upOmicron", type: "variable", info: "Greek Capital Letter Omicron", apply: "Ο" },
    { label: "\\Pi", type: "variable", info: "Greek Capital Letter Pi", apply: "Π" },
    { label: "\\Rho", type: "variable", info: "Greek Capital Letter Rho", apply: "Ρ" },
    { label: "\\Sigma", type: "variable", info: "Greek Capital Letter Sigma", apply: "Σ" },
    { label: "\\Tau", type: "variable", info: "Greek Capital Letter Tau", apply: "Τ" },
    { label: "\\Upsilon", type: "variable", info: "Greek Capital Letter Upsilon", apply: "Υ" },
    { label: "\\Phi", type: "variable", info: "Greek Capital Letter Phi", apply: "Φ" },
    { label: "\\Chi", type: "variable", info: "Greek Capital Letter Chi", apply: "Χ" },
    { label: "\\Psi", type: "variable", info: "Greek Capital Letter Psi", apply: "Ψ" },
    { label: "\\Omega", type: "variable", info: "Greek Capital Letter Omega", apply: "Ω" },
    { label: "\\alpha", type: "variable", info: "Greek Small Letter Alpha", apply: "α" },
    { label: "\\beta", type: "variable", info: "Greek Small Letter Beta", apply: "β" },
    { label: "\\gamma", type: "variable", info: "Greek Small Letter Gamma", apply: "γ" },
    { label: "\\delta", type: "variable", info: "Greek Small Letter Delta", apply: "δ" },
    { label: "\\varepsilon", type: "variable", info: "Greek Small Letter Epsilon", apply: "ε" },
    { label: "\\zeta", type: "variable", info: "Greek Small Letter Zeta", apply: "ζ" },
    { label: "\\eta", type: "variable", info: "Greek Small Letter Eta", apply: "η" },
    { label: "\\theta", type: "variable", info: "Greek Small Letter Theta", apply: "θ" },
    { label: "\\iota", type: "variable", info: "Greek Small Letter Iota", apply: "ι" },
    { label: "\\kappa", type: "variable", info: "Greek Small Letter Kappa", apply: "κ" },
    { label: "\\lambda", type: "variable", info: "Greek Small Letter Lamda / Greek Small Letter Lambda", apply: "λ" },
    { label: "\\mu", type: "variable", info: "Greek Small Letter Mu", apply: "μ" },
    { label: "\\nu", type: "variable", info: "Greek Small Letter Nu", apply: "ν" },
    { label: "\\xi", type: "variable", info: "Greek Small Letter Xi", apply: "ξ" },
    { label: "\\upomicron", type: "variable", info: "Greek Small Letter Omicron", apply: "ο" },
    { label: "\\pi", type: "variable", info: "Greek Small Letter Pi", apply: "π" },
    { label: "\\rho", type: "variable", info: "Greek Small Letter Rho", apply: "ρ" },
    { label: "\\varsigma", type: "variable", info: "Greek Small Letter Final Sigma", apply: "ς" },
    { label: "\\sigma", type: "variable", info: "Greek Small Letter Sigma", apply: "σ" },
    { label: "\\tau", type: "variable", info: "Greek Small Letter Tau", apply: "τ" },
    { label: "\\upsilon", type: "variable", info: "Greek Small Letter Upsilon", apply: "υ" },
    { label: "\\varphi", type: "variable", info: "Greek Small Letter Phi", apply: "φ" },
    { label: "\\chi", type: "variable", info: "Greek Small Letter Chi", apply: "χ" },
    { label: "\\psi", type: "variable", info: "Greek Small Letter Psi", apply: "ψ" },
    { label: "\\omega", type: "variable", info: "Greek Small Letter Omega", apply: "ω" },
    { label: "\\upvarbeta", type: "variable", info: "Greek Beta Symbol / Greek Small Letter Curled Beta", apply: "ϐ" },
    { label: "\\vartheta", type: "variable", info: "Greek Theta Symbol / Greek Small Letter Script Theta", apply: "ϑ" },
    { label: "\\phi", type: "variable", info: "Greek Phi Symbol / Greek Small Letter Script Phi", apply: "ϕ" },
    { label: "\\varpi", type: "variable", info: "Greek Pi Symbol / Greek Small Letter Omega Pi", apply: "ϖ" },
    { label: "\\upoldKoppa", type: "variable", info: "Greek Letter Archaic Koppa", apply: "Ϙ" },
    { label: "\\upoldkoppa", type: "variable", info: "Greek Small Letter Archaic Koppa", apply: "ϙ" },
    { label: "\\Stigma", type: "variable", info: "Greek Letter Stigma / Greek Capital Letter Stigma", apply: "Ϛ" },
    { label: "\\upstigma", type: "variable", info: "Greek Small Letter Stigma", apply: "ϛ" },
    { label: "\\Digamma", type: "variable", info: "Greek Letter Digamma / Greek Capital Letter Digamma", apply: "Ϝ" },
    { label: "\\digamma", type: "variable", info: "Greek Small Letter Digamma", apply: "ϝ" },
    { label: "\\Koppa", type: "variable", info: "Greek Letter Koppa / Greek Capital Letter Koppa", apply: "Ϟ" },
    { label: "\\upkoppa", type: "variable", info: "Greek Small Letter Koppa", apply: "ϟ" },
    { label: "\\Sampi", type: "variable", info: "Greek Letter Sampi / Greek Capital Letter Sampi", apply: "Ϡ" },
    { label: "\\upsampi", type: "variable", info: "Greek Small Letter Sampi", apply: "ϡ" },
    { label: "\\varkappa", type: "variable", info: "Greek Kappa Symbol / Greek Small Letter Script Kappa", apply: "ϰ" },
    { label: "\\varrho", type: "variable", info: "Greek Rho Symbol / Greek Small Letter Tailed Rho", apply: "ϱ" },
    { label: "\\varTheta", type: "variable", info: "Greek Capital Theta Symbol", apply: "ϴ" },
    { label: "\\epsilon", type: "variable", info: "Greek Lunate Epsilon Symbol", apply: "ϵ" },
    { label: "\\backepsilon", type: "variable", info: "Greek Reversed Lunate Epsilon Symbol", apply: "϶" },
    { label: "\\^0", info: "Superscript Zero / Superscript Digit Zero", apply: "⁰" },
    { label: "\\^i", info: "Superscript Latin Small Letter I", apply: "ⁱ" },
    { label: "\\^4", info: "Superscript Four / Superscript Digit Four", apply: "⁴" },
    { label: "\\^5", info: "Superscript Five / Superscript Digit Five", apply: "⁵" },
    { label: "\\^6", info: "Superscript Six / Superscript Digit Six", apply: "⁶" },
    { label: "\\^7", info: "Superscript Seven / Superscript Digit Seven", apply: "⁷" },
    { label: "\\^8", info: "Superscript Eight / Superscript Digit Eight", apply: "⁸" },
    { label: "\\^9", info: "Superscript Nine / Superscript Digit Nine", apply: "⁹" },
    { label: "\\^+", info: "Superscript Plus Sign", apply: "⁺" },
    { label: "\\^-", info: "Superscript Minus / Superscript Hyphen-Minus", apply: "⁻" },
    { label: "\\^=", info: "Superscript Equals Sign", apply: "⁼" },
    { label: "\\^(", info: "Superscript Left Parenthesis / Superscript Opening Parenthesis", apply: "⁽" },
    { label: "\\^)", info: "Superscript Right Parenthesis / Superscript Closing Parenthesis", apply: "⁾" },
    { label: "\\^n", info: "Superscript Latin Small Letter N", apply: "ⁿ" },
    { label: "\\_0", type: "variable", info: "Subscript Zero / Subscript Digit Zero", apply: "₀" },
    { label: "\\_1", type: "variable", info: "Subscript One / Subscript Digit One", apply: "₁" },
    { label: "\\_2", type: "variable", info: "Subscript Two / Subscript Digit Two", apply: "₂" },
    { label: "\\_3", type: "variable", info: "Subscript Three / Subscript Digit Three", apply: "₃" },
    { label: "\\_4", type: "variable", info: "Subscript Four / Subscript Digit Four", apply: "₄" },
    { label: "\\_5", type: "variable", info: "Subscript Five / Subscript Digit Five", apply: "₅" },
    { label: "\\_6", type: "variable", info: "Subscript Six / Subscript Digit Six", apply: "₆" },
    { label: "\\_7", type: "variable", info: "Subscript Seven / Subscript Digit Seven", apply: "₇" },
    { label: "\\_8", type: "variable", info: "Subscript Eight / Subscript Digit Eight", apply: "₈" },
    { label: "\\_9", type: "variable", info: "Subscript Nine / Subscript Digit Nine", apply: "₉" },
    { label: "\\forall", type: "variable", info: "For All", apply: "∀" },
    { label: "\\complement", type: "variable", info: "Complement", apply: "∁" },
    { label: "\\partial", type: "variable", info: "Partial Differential", apply: "∂" },
    { label: "\\exists", type: "variable", info: "There Exists", apply: "∃" },
    { label: "\\nexists", type: "variable", info: "There Does Not Exist", apply: "∄" },
    { label: "\\emptyset", type: "variable", info: "Empty Set", apply: "∅" },
    { label: "\\increment", type: "variable", info: "Increment", apply: "∆" },
    { label: "\\nabla", type: "variable", info: "Nabla", apply: "∇" },
    { label: "\\in", type: "variable", info: "Element Of", apply: "∈" },
    { label: "\\notin", type: "variable", info: "Not An Element Of", apply: "∉" },
    { label: "\\sqrt", type: "variable", info: "Square Root", apply: "√" },
    { label: "\\cbrt", type: "variable", info: "Cube Root", apply: "∛" },
    { label: "\\fourthroot", type: "variable", info: "Fourth Root", apply: "∜" },
    { label: "\\propto", type: "variable", info: "Proportional To", apply: "∝" },
    { label: "\\infty", type: "variable", info: "Infinity", apply: "∞" },
    { label: "\\cap", type: "variable", info: "Intersection", apply: "∩" },
    { label: "\\cup", type: "variable", info: "Union", apply: "∪" },
    { label: "\\therefore", type: "variable", info: "Therefore", apply: "∴" },
    { label: "\\because", type: "variable", info: "Because", apply: "∵" },
    { label: "\\leq", type: "variable", info: "Less-Than Or Equal To / Less Than Or Equal To", apply: "≤" },
    { label: "\\geq", type: "variable", info: "Greater-Than Or Equal To / Greater Than Or Equal To", apply: "≥" },
    { label: "\\subset", type: "variable", info: "Subset Of", apply: "⊂" },
    { label: "\\supset", type: "variable", info: "Superset Of", apply: "⊃" },
    { label: "\\nsubset", type: "variable", info: "Not A Subset Of", apply: "⊄" },
    { label: "\\nsupset", type: "variable", info: "Not A Superset Of", apply: "⊅" },
    { label: "\\subseteq", type: "variable", info: "Subset Of Or Equal To", apply: "⊆" },
    { label: "\\supseteq", type: "variable", info: "Superset Of Or Equal To", apply: "⊇" },
    { label: "\\nsubseteq", type: "variable", info: "Neither A Subset Of Nor Equal To", apply: "⊈" },
    { label: "\\nsupseteq", type: "variable", info: "Neither A Superset Of Nor Equal To", apply: "⊉" },
    { label: "\\bowtie", type: "variable", info: "Bowtie", apply: "⋈" },
    { label: "\\ltimes", type: "variable", info: "Left Normal Factor Semidirect Product", apply: "⋉" },
    { label: "\\rtimes", type: "variable", info: "Right Normal Factor Semidirect Product", apply: "⋊" },
    { label: "\\vdots", type: "variable", info: "Vertical Ellipsis", apply: "⋮" },
    { label: "\\cdots", type: "variable", info: "Midline Horizontal Ellipsis", apply: "⋯" },
    { label: "\\adots", type: "variable", info: "Up Right Diagonal Ellipsis", apply: "⋰" },
    { label: "\\ddots", type: "variable", info: "Down Right Diagonal Ellipsis", apply: "⋱" }
];

const relLanguage = LRLanguage.define({
    parser: parser.configure({
        props: [
            // indentNodeProp.add({
            //   Application: delimitedIndent({closing: ")", align: false})
            // }),
            // foldNodeProp.add({
            //   Application: foldInside
            // }),
            styleTags({
                'use forall for in iff if then else end where with select implies': tags.controlKeyword,
                'not and or xor': tags.operatorKeyword,
                'as from inline ic doc entity type value': tags.keyword,
                'output insert delete abort export': tags.emphasis,
                'def': tags.definitionKeyword,
                'module': tags.moduleKeyword,
                'Any String Int Number Char Missing Float Floating UnsignedInt SignedInt Rational FixedDecimal RelName Entity AutoNumber Hash FilePos Date DateTime Year Month Week Day Hour Minute Second Millisecond Microsecond Nanosecond Boolean': tags.typeName,
                Number: tags.number,
                BooleanLiteral: tags.bool,
                StringLiteral: tags.string,
                MultilineStringLiteral: tags.string,
                AssignOp: tags.definitionOperator,
                LineComment: tags.lineComment,
                BlockComment: tags.blockComment,
                MultilineBlockComment: tags.blockComment,
                VariableName: tags.definition(tags.variableName),
                Atom: tags.atom,
                RelnameLiteral: tags.literal,
                RelnameStringLiteral: tags.literal,
                ValueTypeLiteral: tags.literal,
                DefineStatement: tags.atom,
                DateLiteral: tags.string,
                DateTimeLiteral: tags.string,
                '( )': tags.paren,
                '[ ]': tags.squareBracket,
                '{ }': tags.brace,
                ':': tags.derefOperator,
                ', ;': tags.separator
            })
        ]
    }),
    languageData: {
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`", '"""'] },
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
        // indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
        wordChars: "$"
    }
});
// Autocomplete
const relCompletion = relLanguage.data.of({
    autocomplete: completeFromList(autocompleteList)
});
function rel() {
    return new LanguageSupport(relLanguage, [relCompletion]);
}

export { rel, relCompletion, relLanguage };
