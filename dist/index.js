import { LRParser } from '@lezer/lr';
import { LRLanguage, LanguageSupport } from '@codemirror/language';
import { styleTags, tags } from '@lezer/highlight';
import { completeFromList } from '@codemirror/autocomplete';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_identifier = {__proto__:null,inline:12, if:18, then:22, else:24, end:26, iff:30, not:34, xor:38, and:42, or:44, from:48, module:52, forall:56, for:60, in:62, implies:66, def:70, abort:76, export:80, config:84, delete:88, insert:92, output:96, with:102, use:104, ic:108, raw:114, doc:120, entity:126, type:130, value:134, true:140, false:140, Int:158, String:162, Any:166, Number:170, Char:174, Missing:178, Floating:182, UnsignedInt:186, SignedInt:190, Rational:194, FixedDecimal:198, RelName:202, Entity:206, AutoNumber:210, Hash:214, FilePos:218, Date:222, DateTime:226, Year:230, Month:234, Week:238, Day:242, Hour:246, Minute:250, Second:254, Millisecond:258, Microsecond:262, Nanosecond:266};
const parser = LRParser.deserialize({
  version: 14,
  states: "6UO`QPOOO%QOQO'#DhO%YOQO'#DkO%bOQO'#DwOOQO'#Fg'#FgOOQO'#Dr'#DrOOQO'#Fj'#FjOOQO'#D{'#D{OOQO'#F^'#F^OOQO'#FW'#FWQ`QPOOO%jQPO'#CaO`QPO'#CdO`QPO'#CjO`QPO'#ClO`QPO'#CnO`QPO'#CpO%oQPO'#CsO%oQPO'#CuO`QPO'#CwO%oQPO'#CyO`QPO'#C|O%tQPO'#DOO%oQPO'#D`O%oQPO'#DcO&]QPO'#DeO&eQPO'#DlO&mQPO'#DpO&rQPO'#D|O*sQPO'#EOO.tQPO'#EQO2uQPO'#ESO6vQPO'#EUO:wQPO'#EWO>xQPO'#EYOByQPO'#E[OFzQPO'#E^OJ{QPO'#E`ON|QPO'#EbO!$}QPO'#EdO!)OQPO'#EfO!-PQPO'#EhO!1QQPO'#EjO!5RQPO'#ElO!9SQPO'#EnO!=TQPO'#EpO!AUQPO'#ErO!EVQPO'#EtO!IWQPO'#EvO!MXQPO'#ExO##YQPO'#EzO#'ZQPO'#E|O#+[QPO'#FOO#/]QPO'#FQO#3^QPO'#FSO#7_QPO'#FUOOOO'#FY'#FYO#;`OQO,5:SOOQO,5:S,5:SO#;hOQO,5:VOOQO,5:V,5:VO#;pOQO,5:cOOQO,5:c,5:cOOQO-E9U-E9UO#;xQPO,58{O#?yQPO'#CfO#@WQPO,59OOOQO,59U,59UOOQO,59W,59WOOQO,59Y,59YOOQO,59[,59[OOQO'#Cc'#CcOOQO,59_,59_O`QPO,59aO`QPO,59cO#@cQPO,59eOOQO,59h,59hO#@hQPO,59jO`QPO,59mO`QPO,59oO`QPO,59qO`QPO,59sO`QPO,59uO#DiQPO,59wO#HmQPO,59zO#HrQPO,59}O#HzQPO,5:PO#IPQPO,5:TOOQO,5:W,5:WO%oQPO,5:YO%oQPO,5:[OOQO,5:h,5:hOOQO,5:j,5:jOOQO,5:l,5:lOOQO,5:n,5:nOOQO,5:p,5:pOOQO,5:r,5:rOOQO,5:t,5:tOOQO,5:v,5:vOOQO,5:x,5:xOOQO,5:z,5:zOOQO,5:|,5:|OOQO,5;O,5;OOOQO,5;Q,5;QOOQO,5;S,5;SOOQO,5;U,5;UOOQO,5;W,5;WOOQO,5;Y,5;YOOQO,5;[,5;[OOQO,5;^,5;^OOQO,5;`,5;`OOQO,5;b,5;bOOQO,5;d,5;dOOQO,5;f,5;fOOQO,5;h,5;hOOQO,5;j,5;jOOQO,5;l,5;lOOQO,5;n,5;nOOQO,5;p,5;pOOOO-E9W-E9WOOQO1G/n1G/nOOQO1G/q1G/qOOQO1G/}1G/}OOQO1G.g1G.gO#IUQPO1G.jO`QPO'#FXOOQO1G.j1G.jO`QPO1G.jO#IaQPO1G.{OOQO1G.}1G.}O%oQPO1G/POOQO'#DQ'#DQOOQO1G/U1G/UOOQO1G/X1G/XOOQO1G/Z1G/ZOOQO1G/]1G/]OOQO1G/_1G/_OOQO1G/a1G/aOOQO'#D_'#D_OOQO1G/c1G/cO#IfQPO1G/cO%oQPO1G/fOOQO1G/i1G/iO%oQPO1G/iOOQO1G/k1G/kOOQO1G/o1G/oOOQO1G/t1G/tOOQO1G/v1G/vOOQO-E9V-E9VOOQO7+$U7+$UO`QPO7+$UOOQO,5;s,5;sO#MgQPO7+$UOOQO7+$g7+$gOOQO7+$k7+$kOOQO7+$}7+$}OOQO7+%Q7+%QO#MlQPO7+%TO#MqQPO<<GpOOQO<<Gp<<GpOOQO<<Ho<<HoOOQOAN=[AN=[",
  stateData: "#NO~O$POSPOSQOSROS~OX[O_]Oa^Oc_Oe`Of`OhaOjbOlcOndOqeOsfO!TgO!WhO!YiO!ajO!ekO!gSO!hSO!iSO!jSO!lSO!mSO!nSO!qlO!smO!unO!woO!ypO!{qO!}rO#PsO#RtO#TuO#VvO#XwO#ZxO#]yO#_zO#a{O#c|O#e}O#g!OO#i!PO#k!QO#m!RO#o!SO#q!TO#s!UO#u!VO#w!WO#y!XO$RZO$WPO$YQO$]RO~O$W![O$X!YO~O$X!YO$Y!^O~O$X!YO$[!`O~OU!bO~O$S!iO~Ov!pOx!qOz!rO|!sO!O!tO!Q!uO$S!iO~O!Z!xO!^!yO~O!c!{O$S!iO~O!c!|O~O$S!iOX!pX_!pXa!pXc!pXe!pXf!pXh!pXj!pXl!pXn!pXq!pXs!pX!T!pX!W!pX!Y!pX!a!pX!e!pX!g!pX!h!pX!i!pX!j!pX!l!pX!m!pX!n!pX!q!pX!s!pX!u!pX!w!pX!y!pX!{!pX!}!pX#P!pX#R!pX#T!pX#V!pX#X!pX#Z!pX#]!pX#_!pX#a!pX#c!pX#e!pX#g!pX#i!pX#k!pX#m!pX#o!pX#q!pX#s!pX#u!pX#w!pX#y!pX#}!pX$R!pX$W!pX$Y!pX$]!pXZ!pX[!pX]!pX~O$S!iOX!rX_!rXa!rXc!rXe!rXf!rXh!rXj!rXl!rXn!rXq!rXs!rX!T!rX!W!rX!Y!rX!a!rX!e!rX!g!rX!h!rX!i!rX!j!rX!l!rX!m!rX!n!rX!q!rX!s!rX!u!rX!w!rX!y!rX!{!rX!}!rX#P!rX#R!rX#T!rX#V!rX#X!rX#Z!rX#]!rX#_!rX#a!rX#c!rX#e!rX#g!rX#i!rX#k!rX#m!rX#o!rX#q!rX#s!rX#u!rX#w!rX#y!rX#}!rX$R!rX$W!rX$Y!rX$]!rXZ!rX[!rX]!rX~O$S!iOX!tX_!tXa!tXc!tXe!tXf!tXh!tXj!tXl!tXn!tXq!tXs!tX!T!tX!W!tX!Y!tX!a!tX!e!tX!g!tX!h!tX!i!tX!j!tX!l!tX!m!tX!n!tX!q!tX!s!tX!u!tX!w!tX!y!tX!{!tX!}!tX#P!tX#R!tX#T!tX#V!tX#X!tX#Z!tX#]!tX#_!tX#a!tX#c!tX#e!tX#g!tX#i!tX#k!tX#m!tX#o!tX#q!tX#s!tX#u!tX#w!tX#y!tX#}!tX$R!tX$W!tX$Y!tX$]!tXZ!tX[!tX]!tX~O$S!iOX!vX_!vXa!vXc!vXe!vXf!vXh!vXj!vXl!vXn!vXq!vXs!vX!T!vX!W!vX!Y!vX!a!vX!e!vX!g!vX!h!vX!i!vX!j!vX!l!vX!m!vX!n!vX!q!vX!s!vX!u!vX!w!vX!y!vX!{!vX!}!vX#P!vX#R!vX#T!vX#V!vX#X!vX#Z!vX#]!vX#_!vX#a!vX#c!vX#e!vX#g!vX#i!vX#k!vX#m!vX#o!vX#q!vX#s!vX#u!vX#w!vX#y!vX#}!vX$R!vX$W!vX$Y!vX$]!vXZ!vX[!vX]!vX~O$S!iOX!xX_!xXa!xXc!xXe!xXf!xXh!xXj!xXl!xXn!xXq!xXs!xX!T!xX!W!xX!Y!xX!a!xX!e!xX!g!xX!h!xX!i!xX!j!xX!l!xX!m!xX!n!xX!q!xX!s!xX!u!xX!w!xX!y!xX!{!xX!}!xX#P!xX#R!xX#T!xX#V!xX#X!xX#Z!xX#]!xX#_!xX#a!xX#c!xX#e!xX#g!xX#i!xX#k!xX#m!xX#o!xX#q!xX#s!xX#u!xX#w!xX#y!xX#}!xX$R!xX$W!xX$Y!xX$]!xXZ!xX[!xX]!xX~O$S!iOX!zX_!zXa!zXc!zXe!zXf!zXh!zXj!zXl!zXn!zXq!zXs!zX!T!zX!W!zX!Y!zX!a!zX!e!zX!g!zX!h!zX!i!zX!j!zX!l!zX!m!zX!n!zX!q!zX!s!zX!u!zX!w!zX!y!zX!{!zX!}!zX#P!zX#R!zX#T!zX#V!zX#X!zX#Z!zX#]!zX#_!zX#a!zX#c!zX#e!zX#g!zX#i!zX#k!zX#m!zX#o!zX#q!zX#s!zX#u!zX#w!zX#y!zX#}!zX$R!zX$W!zX$Y!zX$]!zXZ!zX[!zX]!zX~O$S!iOX!|X_!|Xa!|Xc!|Xe!|Xf!|Xh!|Xj!|Xl!|Xn!|Xq!|Xs!|X!T!|X!W!|X!Y!|X!a!|X!e!|X!g!|X!h!|X!i!|X!j!|X!l!|X!m!|X!n!|X!q!|X!s!|X!u!|X!w!|X!y!|X!{!|X!}!|X#P!|X#R!|X#T!|X#V!|X#X!|X#Z!|X#]!|X#_!|X#a!|X#c!|X#e!|X#g!|X#i!|X#k!|X#m!|X#o!|X#q!|X#s!|X#u!|X#w!|X#y!|X#}!|X$R!|X$W!|X$Y!|X$]!|XZ!|X[!|X]!|X~O$S!iOX#OX_#OXa#OXc#OXe#OXf#OXh#OXj#OXl#OXn#OXq#OXs#OX!T#OX!W#OX!Y#OX!a#OX!e#OX!g#OX!h#OX!i#OX!j#OX!l#OX!m#OX!n#OX!q#OX!s#OX!u#OX!w#OX!y#OX!{#OX!}#OX#P#OX#R#OX#T#OX#V#OX#X#OX#Z#OX#]#OX#_#OX#a#OX#c#OX#e#OX#g#OX#i#OX#k#OX#m#OX#o#OX#q#OX#s#OX#u#OX#w#OX#y#OX#}#OX$R#OX$W#OX$Y#OX$]#OXZ#OX[#OX]#OX~O$S!iOX#QX_#QXa#QXc#QXe#QXf#QXh#QXj#QXl#QXn#QXq#QXs#QX!T#QX!W#QX!Y#QX!a#QX!e#QX!g#QX!h#QX!i#QX!j#QX!l#QX!m#QX!n#QX!q#QX!s#QX!u#QX!w#QX!y#QX!{#QX!}#QX#P#QX#R#QX#T#QX#V#QX#X#QX#Z#QX#]#QX#_#QX#a#QX#c#QX#e#QX#g#QX#i#QX#k#QX#m#QX#o#QX#q#QX#s#QX#u#QX#w#QX#y#QX#}#QX$R#QX$W#QX$Y#QX$]#QXZ#QX[#QX]#QX~O$S!iOX#SX_#SXa#SXc#SXe#SXf#SXh#SXj#SXl#SXn#SXq#SXs#SX!T#SX!W#SX!Y#SX!a#SX!e#SX!g#SX!h#SX!i#SX!j#SX!l#SX!m#SX!n#SX!q#SX!s#SX!u#SX!w#SX!y#SX!{#SX!}#SX#P#SX#R#SX#T#SX#V#SX#X#SX#Z#SX#]#SX#_#SX#a#SX#c#SX#e#SX#g#SX#i#SX#k#SX#m#SX#o#SX#q#SX#s#SX#u#SX#w#SX#y#SX#}#SX$R#SX$W#SX$Y#SX$]#SXZ#SX[#SX]#SX~O$S!iOX#UX_#UXa#UXc#UXe#UXf#UXh#UXj#UXl#UXn#UXq#UXs#UX!T#UX!W#UX!Y#UX!a#UX!e#UX!g#UX!h#UX!i#UX!j#UX!l#UX!m#UX!n#UX!q#UX!s#UX!u#UX!w#UX!y#UX!{#UX!}#UX#P#UX#R#UX#T#UX#V#UX#X#UX#Z#UX#]#UX#_#UX#a#UX#c#UX#e#UX#g#UX#i#UX#k#UX#m#UX#o#UX#q#UX#s#UX#u#UX#w#UX#y#UX#}#UX$R#UX$W#UX$Y#UX$]#UXZ#UX[#UX]#UX~O$S!iOX#WX_#WXa#WXc#WXe#WXf#WXh#WXj#WXl#WXn#WXq#WXs#WX!T#WX!W#WX!Y#WX!a#WX!e#WX!g#WX!h#WX!i#WX!j#WX!l#WX!m#WX!n#WX!q#WX!s#WX!u#WX!w#WX!y#WX!{#WX!}#WX#P#WX#R#WX#T#WX#V#WX#X#WX#Z#WX#]#WX#_#WX#a#WX#c#WX#e#WX#g#WX#i#WX#k#WX#m#WX#o#WX#q#WX#s#WX#u#WX#w#WX#y#WX#}#WX$R#WX$W#WX$Y#WX$]#WXZ#WX[#WX]#WX~O$S!iOX#YX_#YXa#YXc#YXe#YXf#YXh#YXj#YXl#YXn#YXq#YXs#YX!T#YX!W#YX!Y#YX!a#YX!e#YX!g#YX!h#YX!i#YX!j#YX!l#YX!m#YX!n#YX!q#YX!s#YX!u#YX!w#YX!y#YX!{#YX!}#YX#P#YX#R#YX#T#YX#V#YX#X#YX#Z#YX#]#YX#_#YX#a#YX#c#YX#e#YX#g#YX#i#YX#k#YX#m#YX#o#YX#q#YX#s#YX#u#YX#w#YX#y#YX#}#YX$R#YX$W#YX$Y#YX$]#YXZ#YX[#YX]#YX~O$S!iOX#[X_#[Xa#[Xc#[Xe#[Xf#[Xh#[Xj#[Xl#[Xn#[Xq#[Xs#[X!T#[X!W#[X!Y#[X!a#[X!e#[X!g#[X!h#[X!i#[X!j#[X!l#[X!m#[X!n#[X!q#[X!s#[X!u#[X!w#[X!y#[X!{#[X!}#[X#P#[X#R#[X#T#[X#V#[X#X#[X#Z#[X#]#[X#_#[X#a#[X#c#[X#e#[X#g#[X#i#[X#k#[X#m#[X#o#[X#q#[X#s#[X#u#[X#w#[X#y#[X#}#[X$R#[X$W#[X$Y#[X$]#[XZ#[X[#[X]#[X~O$S!iOX#^X_#^Xa#^Xc#^Xe#^Xf#^Xh#^Xj#^Xl#^Xn#^Xq#^Xs#^X!T#^X!W#^X!Y#^X!a#^X!e#^X!g#^X!h#^X!i#^X!j#^X!l#^X!m#^X!n#^X!q#^X!s#^X!u#^X!w#^X!y#^X!{#^X!}#^X#P#^X#R#^X#T#^X#V#^X#X#^X#Z#^X#]#^X#_#^X#a#^X#c#^X#e#^X#g#^X#i#^X#k#^X#m#^X#o#^X#q#^X#s#^X#u#^X#w#^X#y#^X#}#^X$R#^X$W#^X$Y#^X$]#^XZ#^X[#^X]#^X~O$S!iOX#`X_#`Xa#`Xc#`Xe#`Xf#`Xh#`Xj#`Xl#`Xn#`Xq#`Xs#`X!T#`X!W#`X!Y#`X!a#`X!e#`X!g#`X!h#`X!i#`X!j#`X!l#`X!m#`X!n#`X!q#`X!s#`X!u#`X!w#`X!y#`X!{#`X!}#`X#P#`X#R#`X#T#`X#V#`X#X#`X#Z#`X#]#`X#_#`X#a#`X#c#`X#e#`X#g#`X#i#`X#k#`X#m#`X#o#`X#q#`X#s#`X#u#`X#w#`X#y#`X#}#`X$R#`X$W#`X$Y#`X$]#`XZ#`X[#`X]#`X~O$S!iOX#bX_#bXa#bXc#bXe#bXf#bXh#bXj#bXl#bXn#bXq#bXs#bX!T#bX!W#bX!Y#bX!a#bX!e#bX!g#bX!h#bX!i#bX!j#bX!l#bX!m#bX!n#bX!q#bX!s#bX!u#bX!w#bX!y#bX!{#bX!}#bX#P#bX#R#bX#T#bX#V#bX#X#bX#Z#bX#]#bX#_#bX#a#bX#c#bX#e#bX#g#bX#i#bX#k#bX#m#bX#o#bX#q#bX#s#bX#u#bX#w#bX#y#bX#}#bX$R#bX$W#bX$Y#bX$]#bXZ#bX[#bX]#bX~O$S!iOX#dX_#dXa#dXc#dXe#dXf#dXh#dXj#dXl#dXn#dXq#dXs#dX!T#dX!W#dX!Y#dX!a#dX!e#dX!g#dX!h#dX!i#dX!j#dX!l#dX!m#dX!n#dX!q#dX!s#dX!u#dX!w#dX!y#dX!{#dX!}#dX#P#dX#R#dX#T#dX#V#dX#X#dX#Z#dX#]#dX#_#dX#a#dX#c#dX#e#dX#g#dX#i#dX#k#dX#m#dX#o#dX#q#dX#s#dX#u#dX#w#dX#y#dX#}#dX$R#dX$W#dX$Y#dX$]#dXZ#dX[#dX]#dX~O$S!iOX#fX_#fXa#fXc#fXe#fXf#fXh#fXj#fXl#fXn#fXq#fXs#fX!T#fX!W#fX!Y#fX!a#fX!e#fX!g#fX!h#fX!i#fX!j#fX!l#fX!m#fX!n#fX!q#fX!s#fX!u#fX!w#fX!y#fX!{#fX!}#fX#P#fX#R#fX#T#fX#V#fX#X#fX#Z#fX#]#fX#_#fX#a#fX#c#fX#e#fX#g#fX#i#fX#k#fX#m#fX#o#fX#q#fX#s#fX#u#fX#w#fX#y#fX#}#fX$R#fX$W#fX$Y#fX$]#fXZ#fX[#fX]#fX~O$S!iOX#hX_#hXa#hXc#hXe#hXf#hXh#hXj#hXl#hXn#hXq#hXs#hX!T#hX!W#hX!Y#hX!a#hX!e#hX!g#hX!h#hX!i#hX!j#hX!l#hX!m#hX!n#hX!q#hX!s#hX!u#hX!w#hX!y#hX!{#hX!}#hX#P#hX#R#hX#T#hX#V#hX#X#hX#Z#hX#]#hX#_#hX#a#hX#c#hX#e#hX#g#hX#i#hX#k#hX#m#hX#o#hX#q#hX#s#hX#u#hX#w#hX#y#hX#}#hX$R#hX$W#hX$Y#hX$]#hXZ#hX[#hX]#hX~O$S!iOX#jX_#jXa#jXc#jXe#jXf#jXh#jXj#jXl#jXn#jXq#jXs#jX!T#jX!W#jX!Y#jX!a#jX!e#jX!g#jX!h#jX!i#jX!j#jX!l#jX!m#jX!n#jX!q#jX!s#jX!u#jX!w#jX!y#jX!{#jX!}#jX#P#jX#R#jX#T#jX#V#jX#X#jX#Z#jX#]#jX#_#jX#a#jX#c#jX#e#jX#g#jX#i#jX#k#jX#m#jX#o#jX#q#jX#s#jX#u#jX#w#jX#y#jX#}#jX$R#jX$W#jX$Y#jX$]#jXZ#jX[#jX]#jX~O$S!iOX#lX_#lXa#lXc#lXe#lXf#lXh#lXj#lXl#lXn#lXq#lXs#lX!T#lX!W#lX!Y#lX!a#lX!e#lX!g#lX!h#lX!i#lX!j#lX!l#lX!m#lX!n#lX!q#lX!s#lX!u#lX!w#lX!y#lX!{#lX!}#lX#P#lX#R#lX#T#lX#V#lX#X#lX#Z#lX#]#lX#_#lX#a#lX#c#lX#e#lX#g#lX#i#lX#k#lX#m#lX#o#lX#q#lX#s#lX#u#lX#w#lX#y#lX#}#lX$R#lX$W#lX$Y#lX$]#lXZ#lX[#lX]#lX~O$S!iOX#nX_#nXa#nXc#nXe#nXf#nXh#nXj#nXl#nXn#nXq#nXs#nX!T#nX!W#nX!Y#nX!a#nX!e#nX!g#nX!h#nX!i#nX!j#nX!l#nX!m#nX!n#nX!q#nX!s#nX!u#nX!w#nX!y#nX!{#nX!}#nX#P#nX#R#nX#T#nX#V#nX#X#nX#Z#nX#]#nX#_#nX#a#nX#c#nX#e#nX#g#nX#i#nX#k#nX#m#nX#o#nX#q#nX#s#nX#u#nX#w#nX#y#nX#}#nX$R#nX$W#nX$Y#nX$]#nXZ#nX[#nX]#nX~O$S!iOX#pX_#pXa#pXc#pXe#pXf#pXh#pXj#pXl#pXn#pXq#pXs#pX!T#pX!W#pX!Y#pX!a#pX!e#pX!g#pX!h#pX!i#pX!j#pX!l#pX!m#pX!n#pX!q#pX!s#pX!u#pX!w#pX!y#pX!{#pX!}#pX#P#pX#R#pX#T#pX#V#pX#X#pX#Z#pX#]#pX#_#pX#a#pX#c#pX#e#pX#g#pX#i#pX#k#pX#m#pX#o#pX#q#pX#s#pX#u#pX#w#pX#y#pX#}#pX$R#pX$W#pX$Y#pX$]#pXZ#pX[#pX]#pX~O$S!iOX#rX_#rXa#rXc#rXe#rXf#rXh#rXj#rXl#rXn#rXq#rXs#rX!T#rX!W#rX!Y#rX!a#rX!e#rX!g#rX!h#rX!i#rX!j#rX!l#rX!m#rX!n#rX!q#rX!s#rX!u#rX!w#rX!y#rX!{#rX!}#rX#P#rX#R#rX#T#rX#V#rX#X#rX#Z#rX#]#rX#_#rX#a#rX#c#rX#e#rX#g#rX#i#rX#k#rX#m#rX#o#rX#q#rX#s#rX#u#rX#w#rX#y#rX#}#rX$R#rX$W#rX$Y#rX$]#rXZ#rX[#rX]#rX~O$S!iOX#tX_#tXa#tXc#tXe#tXf#tXh#tXj#tXl#tXn#tXq#tXs#tX!T#tX!W#tX!Y#tX!a#tX!e#tX!g#tX!h#tX!i#tX!j#tX!l#tX!m#tX!n#tX!q#tX!s#tX!u#tX!w#tX!y#tX!{#tX!}#tX#P#tX#R#tX#T#tX#V#tX#X#tX#Z#tX#]#tX#_#tX#a#tX#c#tX#e#tX#g#tX#i#tX#k#tX#m#tX#o#tX#q#tX#s#tX#u#tX#w#tX#y#tX#}#tX$R#tX$W#tX$Y#tX$]#tXZ#tX[#tX]#tX~O$S!iOX#vX_#vXa#vXc#vXe#vXf#vXh#vXj#vXl#vXn#vXq#vXs#vX!T#vX!W#vX!Y#vX!a#vX!e#vX!g#vX!h#vX!i#vX!j#vX!l#vX!m#vX!n#vX!q#vX!s#vX!u#vX!w#vX!y#vX!{#vX!}#vX#P#vX#R#vX#T#vX#V#vX#X#vX#Z#vX#]#vX#_#vX#a#vX#c#vX#e#vX#g#vX#i#vX#k#vX#m#vX#o#vX#q#vX#s#vX#u#vX#w#vX#y#vX#}#vX$R#vX$W#vX$Y#vX$]#vXZ#vX[#vX]#vX~O$S!iOX#xX_#xXa#xXc#xXe#xXf#xXh#xXj#xXl#xXn#xXq#xXs#xX!T#xX!W#xX!Y#xX!a#xX!e#xX!g#xX!h#xX!i#xX!j#xX!l#xX!m#xX!n#xX!q#xX!s#xX!u#xX!w#xX!y#xX!{#xX!}#xX#P#xX#R#xX#T#xX#V#xX#X#xX#Z#xX#]#xX#_#xX#a#xX#c#xX#e#xX#g#xX#i#xX#k#xX#m#xX#o#xX#q#xX#s#xX#u#xX#w#xX#y#xX#}#xX$R#xX$W#xX$Y#xX$]#xXZ#xX[#xX]#xX~O$W#lO$X!YO~O$X!YO$Y#mO~O$X!YO$[#nO~O$S!iOXTa_TaaTacTaeTafTahTajTalTanTaqTasTa!TTa!WTa!YTa!aTa!eTa!gTa!hTa!iTa!jTa!lTa!mTa!nTa!qTa!sTa!uTa!wTa!yTa!{Ta!}Ta#PTa#RTa#TTa#VTa#XTa#ZTa#]Ta#_Ta#aTa#cTa#eTa#gTa#iTa#kTa#mTa#oTa#qTa#sTa#uTa#wTa#yTa#}Ta$RTa$WTa$YTa$]TaZTa[Ta]Ta~OZYX[YX]YX~P`OZ#qO[#sO]#rO~Oo#vO~O$T#wOXra_raaracraerafrahrajralranraqrasra!Tra!Wra!Yra!ara!era!gra!hra!ira!jra!lra!mra!nra!qra!sra!ura!wra!yra!{ra!}ra#Pra#Rra#Tra#Vra#Xra#Zra#]ra#_ra#ara#cra#era#gra#ira#kra#mra#ora#qra#sra#ura#wra#yra#}ra$Rra$Wra$Yra$]raZra[ra]ra~O$S!iO$T$OOX!Pa_!Paa!Pac!Pae!Paf!Pah!Paj!Pal!Pan!Paq!Pas!Pa!T!Pa!W!Pa!Y!Pa!a!Pa!e!Pa!g!Pa!h!Pa!i!Pa!j!Pa!l!Pa!m!Pa!n!Pa!q!Pa!s!Pa!u!Pa!w!Pa!y!Pa!{!Pa!}!Pa#P!Pa#R!Pa#T!Pa#V!Pa#X!Pa#Z!Pa#]!Pa#_!Pa#a!Pa#c!Pa#e!Pa#g!Pa#i!Pa#k!Pa#m!Pa#o!Pa#q!Pa#s!Pa#u!Pa#w!Pa#y!Pa#}!Pa$R!Pa$W!Pa$Y!Pa$]!PaZ!Pa[!Pa]!Pa~O!U$RO~O$T$SO$U$TO~O$WPO~O$YQO~OZ#qO[$[O]$ZO~O]$_O~O$S!iOX!Pi_!Pia!Pic!Pie!Pif!Pih!Pij!Pil!Pin!Piq!Pis!Pi!T!Pi!W!Pi!Y!Pi!a!Pi!e!Pi!g!Pi!h!Pi!i!Pi!j!Pi!l!Pi!m!Pi!n!Pi!q!Pi!s!Pi!u!Pi!w!Pi!y!Pi!{!Pi!}!Pi#P!Pi#R!Pi#T!Pi#V!Pi#X!Pi#Z!Pi#]!Pi#_!Pi#a!Pi#c!Pi#e!Pi#g!Pi#i!Pi#k!Pi#m!Pi#o!Pi#q!Pi#s!Pi#u!Pi#w!Pi#y!Pi#}!Pi$R!Pi$W!Pi$Y!Pi$]!PiZ!Pi[!Pi]!Pi~O]$eO~O$V$fO~O]$gO~OQP!j!i$X$[!g~",
  goto: ",v$_PPPPP$`P$v$`P'mPPP$`P$`P$`P$`PP$`P$`P$`P$`PP$`P$`P'|$`P$`P$`P$`P$`P$`P(P$`PP$`P$`PP(S$`P(m$`P$`P$`P$`PPPP)WPPP$`)nP)nP)nP)nP)nP)nP)nP)nP)nP)nP)nP)nP)nP)nP)nP)nP)nP)nP)nP)nP)nP)nP)nP)nP)nP)nP)nP)nP*U*d*jPPP*xPPPPPPPP+xPP,`yWOY[]^_`ce!c!k!l!p!q!r!s!t#q#s$[Q!jaQ!kbQ!mdQ!ofQ!vgQ!whQ!zjQ!}lQ#OmQ#PnQ#QoQ#RpQ#SqQ#TrQ#UsQ#VtQ#WuQ#XvQ#YwQ#ZxQ#[yQ#]zQ#^{Q#_|Q#`}Q#a!OQ#b!PQ#c!QQ#d!RQ#e!SQ#f!TQ#g!UQ#h!VQ#i!WQ#j!XQ#o!bQ$P!uQ$W!{Q$X!|Q$`#vQ$a$QQ$b$RR$c$TQ!d[Q#t!kQ$]#qQ$^#sR$d$[R#x!oR$Q!uxSOY[]^_`ce!c!k!l!p!q!r!s!t#q#s$[R$U!xxSOY[]^_`ce!c!k!l!p!q!r!s!t#q#s$[R$V!yySOY[]^_`ce!c!k!l!p!q!r!s!t#q#s$[yUOY[]^_`ce!c!k!l!p!q!r!s!t#q#s$[QYOS!aY!cZ!c[!k#q#s$[Q#p!dR$Y#pQ!ZPQ!]QQ!_RV#k!Z!]!_`XOY[!c!k#q#s$[Q!e]Q!f^Q!g_Q!h`Q!lcQ!neQ#u!lQ#y!pQ#z!qQ#{!rQ#|!sR#}!tyTOY[]^_`ce!c!k!l!p!q!r!s!t#q#s$[yVOY[]^_`ce!c!k!l!p!q!r!s!t#q#s$[",
  nodeNames: "⚠ LineComment BlockComment StringLiteral Rel InlineStatement inline VariableName IfStatement if Body then else end IffStatement iff NotStatement not XorStatement xor AndOrStatement and or FromStatement from ModuleStatement module ForallStatement forall ForInStatement for in ImpliesStatement implies DefineStatement def AssignOp ImportDefinitionStatement abort ExportDefinitionStatement export ConfigDefinitionStatement config DeleteDefinitionStatement delete InsertDefinitionStatement insert OutputDefinitionStatement output AssignOp WithUseStatement with use ConstraintStatement ic RawStringLiteral LineStarter raw MultilineRawStringLiteral DocStringLiteral doc MultilineStringLiteral EntityStatement entity EntityTypeStatement type ValueTypeStatement value ExpressionStatement Number BooleanLiteral DateLiteral DatetimeLiteral MultilineBlockComment RelnameLiteral RelnameStringLiteral ValueTypeLiteral TypeStatement IntType Int StringType String AnyType Any NumberType Number CharType Char MissingType Missing FloatingType Floating UnsignedIntType UnsignedInt SignedIntType SignedInt RationalType Rational FixedDecimalType FixedDecimal RelNameType RelName EntityType Entity AutoNumberType AutoNumber HashType Hash FilePosType FilePos DateType Date DateTimeType DateTime YearType Year MonthType Month WeekType Week DayType Day HourType Hour MinuteType Minute SecondType Second MillisecondType Millisecond MicrosecondType Microsecond NanosecondType Nanosecond",
  maxTerm: 152,
  nodeProps: [
    ["group", -10,58,61,69,70,71,72,73,74,75,76,"Expression",-28,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,"Type"]
  ],
  skippedNodes: [0,1,2,3],
  repeatNodeCount: 3,
  tokenData: "#;S~RuOX#fXY&VYZ&|Z]#f]^&V^p#fpq&Vqr#frs'ast#ftu1auw#fwx2Wx!O#f!O!P:[!P!Q?_!Q!RKc!R![!<s![!]!>S!]!_#f!_!`#0X!`!b#f!b!c#1O!c!}#1u!}#Q#f#Q#R#3b#R#S#7{#S#T#f#T#o#1u#o#p#9f#p#q#f#q#r#:]#r4w#f4w5b#1u5b5i#f5i6S#1u6S~#fQ#kY$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls~#fQ$`S$XQXY$ZYZ$Z]^$Zpq$ZQ$oTOY%OYZ%qZr%Ors%vs~%OQ%RYOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls~#fQ%vO$XQQ%ySOY%OYZ%qZr%Os~%OR&^Y$PP$XQOX#fXY&VYZ&|Z]#f]^&V^p#fpq&Vqr#frs$ls~#fR'TS$PP$XQXY&|YZ&|]^&|pq&|~'fVR~OY'{YZ/YZr'{rs/as#O'{#O#P0l#P~'{~(S[$W~R~OX(xXY(xYZ$ZZ](x]^(x^p(xpq(xqr(xrs)us#O(x#O#P*Z#P~(x~)P[$XQR~OX(xXY(xYZ$ZZ](x]^(x^p(xpq(xqr(xrs)us#O(x#O#P*Z#P~(x~)zTR~OY%OYZ%qZr%Ors%vs~%O~*`Y$XQOX(xXY(xYZ+OZ](x]^(x^p(xpq(xqr(xrs,os~(x~+V[$XQR~OX+{XY+OYZ$ZZ]+{]^+O^p+{pq+Oqr+{rs,ds#O+{#O#P,i#P~+{~,QUR~OY+{Zr+{rs,ds#O+{#O#P,i#P~+{~,iOR~~,lPO~+{~,tVR~OY-ZYZ%qZr-Zrs.Us#O-Z#O#P.g#P~-Z~-`[R~OX(xXY(xYZ$ZZ](x]^(x^p(xpq(xqr(xrs)us#O(x#O#P*Z#P~(x~.ZSR~OY%OYZ%qZr%Os~%O~.jYOX(xXY(xYZ+OZ](x]^(x^p(xpq(xqr(xrs,os~(x~/aO$W~$XQ~/fTR~OY%OYZ%qZr%Ors/us~%O~/zR$Y~Or0Trs0Ys~0T~0YO$W~~0]Prs0`~0cROr0Trs0Ys~0T~0qY$W~OX(xXY(xYZ+OZ](x]^(x^p(xpq(xqr(xrs,os~(xR1hY!YP$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls~#f~2_^$XQR~OX2WXY2WYZ$ZZ]2W]^2W^p2Wpq2Wqr2Wrs3Zsw2Wwx4|x#O2W#O#P5s#P~2W~3`XR~OY3{YZ%qZr3{rs8Ssw3{wx8tx#O3{#O#P9i#P~3{~4Q^R~OX2WXY2WYZ$ZZ]2W]^2W^p2Wpq2Wqr2Wrs3Zsw2Wwx4|x#O2W#O#P5s#P~2W~5TY$XQR~OX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls~#f~5xY$XQOX2WXY2WYZ6hZ]2W]^2W^p2Wpq2Wqr2Wrs3Zs~2W~6o[$XQR~OX7eXY6hYZ$ZZ]7e]^6h^p7epq6hqw7ewx,dx#O7e#O#P7|#P~7e~7jUR~OY7eZw7ewx,dx#O7e#O#P7|#P~7e~8PPO~7e~8XXR~OY3{YZ%qZr3{rs7esw3{wx8tx#O3{#O#P9i#P~3{~8yYR~OX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls~#f~9lYOX2WXY2WYZ6hZ]2W]^2W^p2Wpq2Wqr2Wrs3Zs~2WR:a[$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![;V![~#fR;^`$XQ!gPOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![;V![!g#f!g!h<`!h#X#f#X#Y<`#Y~#fR<e`$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls{#f{|=g|}#f}!O=g!O!Q#f!Q![>b![~#fR=l[$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![>b![~#fR>i[$XQ!gPOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![>b![~#f~?d^$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$lsz#fz{@`{!P#f!P!QHr!Q~#f~@i[$]~$XQ$[QOXA_XYA_YZBYZ]A_]^A_^pA_pqA_qrA_rsCrszA_z{ET{~A_RAd[$XQOXA_XYA_YZBYZ]A_]^A_^pA_pqA_qrA_rsCrszA_z{ET{~A_RB_Y$XQOXB}XYBYYZBYZ]B}]^BY^pB}pqBYqzB}z{CZ{~B}PCQROzB}z{CZ{~B}PC^TOzB}z{CZ{!PB}!P!QCm!Q~B}PCrOQPRCuVOYD[YZF{ZrD[rsGZszD[z{Gs{~D[RD_[OXA_XYA_YZBYZ]A_]^A_^pA_pqA_qrA_rsCrszA_z{ET{~A_REY^$XQOXA_XYA_YZBYZ]A_]^A_^pA_pqA_qrA_rsCrszA_z{ET{!PA_!P!QFU!Q~A_RF]YQP$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls~#fRGQR$XQOzB}z{CZ{~B}RG^VOYD[YZF{ZrD[rsB}szD[z{Gs{~D[RGv^OXA_XYA_YZBYZ]A_]^A_^pA_pqA_qrA_rsCrszA_z{ET{!PA_!P!QFU!Q~A_RHyYPP$XQOXHrXYHrYZ$ZZ]Hr]^Hr^pHrpqHrqrHrrsIis~HrRInTPPOYI}YZ%qZrI}rsJrs~I}RJSYPPOXHrXYHrYZ$ZZ]Hr]^Hr^pHrpqHrqrHrrsIis~HrRJwTPPOYI}YZ%qZrI}rsKWs~I}PK]QPPOYKWZ~KWRKjf$XQ!gPOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!O#f!O!PMO!P!Q#f!Q![NV![!g#f!g!h<`!h#X#f#X#Y<`#Y#c#f#c#d!8k#d#l#f#l#m!:c#m~#fRMT`$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![MO![!g#f!g!h<`!h#X#f#X#Y<`#Y~#fRN^b$XQ!gPOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!O#f!O!PMO!P!Q#f!Q![! f![!g#f!g!h<`!h#X#f#X#Y<`#Y~#fR! mb$XQ!gPOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!O#f!O!PMO!P!Q#f!Q![!!u![!g#f!g!h<`!h#X#f#X#Y<`#Y~#fR!!|c$XQ!gPOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls}#f}!O!$X!O!PMO!P!Q#f!Q![!7[![!g#f!g!h<`!h#X#f#X#Y<`#Y~#fR!$^[$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![!%S![~#fR!%X[$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![!%}![~#fR!&S[$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls}#f}!O!&x!O~#fR!&}[$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![!'s![~#fR!'x[$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![!(n![~#fR!(u[!iP$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!v#f!v!w!)k!w~#fR!)p[$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![!*f![~#fR!*k[$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![!+a![~#fR!+f[$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls![#f![!]!,[!]~#fR!,a[$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![!-V![~#fR!-[[$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![!.Q![~#fR!.V[$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls![#f![!]!.{!]~#fR!/Q[$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![!/v![~#fR!/{[$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![!0q![~#fR!0vb$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls{#f{|!2O|}#f}!O!2O!O!Q#f!Q![!2y![!|#f!|!}!6e!}~#fR!2T[$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![!2y![~#fR!3O[$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![!3t![~#fR!3y[$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls![#f![!]!4o!]~#fR!4t[$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![!5j![~#fR!5o[$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![!6e![~#fR!6lY!jP$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls~#fR!7cb$XQ!gPOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!O#f!O!PMO!P!Q#f!Q![!7[![!g#f!g!h<`!h#X#f#X#Y<`#Y~#fR!8p[$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q!Y!9f!Y~#fR!9m[$XQ!gPOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q!Y!9f!Y~#fR!:h`$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![!;j![!c#f!c!i!;j!i#T#f#T#Z!;j#Z~#fR!;q`$XQ!gPOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![!;j![!c#f!c!i!;j!i#T#f#T#Z!;j#Z~#fR!<zb$XQ!gPOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!O#f!O!PMO!P!Q#f!Q![NV![!g#f!g!h<`!h#X#f#X#Y<`#Y~#fR!>Xe$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs!?js!c#f!c!}#,z!}#O#.g#O#R#f#R#S#,z#S#T#f#T#o#,z#o4w#f4w5b#,z5b5i#f5i6S#,z6S~#fR!?mZOY%OYZ!@`Z]%O]^!FQ^r%Ors!Ids#O%O#O#P!J[#P#Q%O#Q#R!FQ#R~%OR!@eT$XQYZ!@t]^!@trs!AW#O#P!Al#Q#R!@tP!@wTYZ!@t]^!@trs!AW#O#P!Al#Q#R!@tP!A]T!mPYZ!@t]^!@trs!AW#O#P!Al#Q#R!@tP!AoeYZ!@t]^!@trs!AW!Q!R!CQ!R!S!CQ!S!T!CQ!T!U!CQ!U!Y!Cg!w!x!C|#O#P!Al#Q#R!@t#T#U!@t#U#V!@t#X#Y!@t#Y#Z!@t#b#c!@t#f#g!@t#h#i!@t#i#j!EO#j#k!@t#l#m!EhP!CTUYZ!@t]^!@trs!AW!Q!Y!Cg#O#P!Al#Q#R!@tP!CjUYZ!@t]^!@trs!AW!Q!Y!@t#O#P!Al#Q#R!@tP!DPR!Q![!DY!c!i!DY#T#Z!DYP!D]R!Q![!Df!c!i!Df#T#Z!DfP!DiR!Q![!Dr!c!i!Dr#T#Z!DrP!DuR!Q![!EO!c!i!EO#T#Z!EOP!ERR!Q![!E[!c!i!E[#T#Z!E[P!E_R!Q![!Eh!c!i!Eh#T#Z!EhP!EkR!Q![!Et!c!i!Et#T#Z!EtP!EwR!Q![!@t!c!i!@t#T#Z!@tR!FT^OX#fXY#fYZ!GPZ]#f]^!Gk^p#fpq#fqr#frs!Hls#O#f#O#P# T#P#Q#f#Q#R!Gk#R~#fR!GUV$XQXY$ZYZ!GP]^!GPpq$Zrs!AW#O#P!Al#Q#R!@tR!Gp^$XQOX#fXY#fYZ!GPZ]#f]^!Gk^p#fpq#fqr#frs!Hls#O#f#O#P# T#P#Q#f#Q#R!Gk#R~#fR!HqZ!mPOY%OYZ!@`Z]%O]^!FQ^r%Ors!Ids#O%O#O#P!J[#P#Q%O#Q#R!FQ#R~%OR!IiZ!mPOY%OYZ!@`Z]%O]^!FQ^r%Ors!AWs#O%O#O#P!J[#P#Q%O#Q#R!FQ#R~%OR!J_vOX#fXY#fYZ!GPZ]#f]^!Gk^p#fpq#fqr#frs!Hls!Q#f!Q!R!Lu!R!S!Lu!S!T!Lu!T!U!Lu!U!Y!M|!Y!w#f!w!x##p!x#O#f#O#P# T#P#Q#f#Q#R!Gk#R#T#f#T#U!Gk#U#V!Gk#V#X#f#X#Y!Gk#Y#Z!Gk#Z#b#f#b#c!Gk#c#f#f#f#g!Gk#g#h#f#h#i!Gk#i#j#(^#j#k!Gk#k#l#f#l#m#*l#m~#fR!Lz`$XQOX#fXY#fYZ!GPZ]#f]^!Gk^p#fpq#fqr#frs!Hls!Q#f!Q!Y!M|!Y#O#f#O#P# T#P#Q#f#Q#R!Gk#R~#fR!NR`$XQOX#fXY#fYZ!GPZ]#f]^!Gk^p#fpq#fqr#frs!Hls!Q#f!Q!Y!Gk!Y#O#f#O#P# T#P#Q#f#Q#R!Gk#R~#fR# Yv$XQOX#fXY#fYZ!GPZ]#f]^!Gk^p#fpq#fqr#frs!Hls!Q#f!Q!R!Lu!R!S!Lu!S!T!Lu!T!U!Lu!U!Y!M|!Y!w#f!w!x##p!x#O#f#O#P# T#P#Q#f#Q#R!Gk#R#T#f#T#U!Gk#U#V!Gk#V#X#f#X#Y!Gk#Y#Z!Gk#Z#b#f#b#c!Gk#c#f#f#f#g!Gk#g#h#f#h#i!Gk#i#j#(^#j#k!Gk#k#l#f#l#m#*l#m~#fR##u`$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![#$w![!c#f!c!i#$w!i#T#f#T#Z#$w#Z~#fR#$|`$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![#&O![!c#f!c!i#&O!i#T#f#T#Z#&O#Z~#fR#&T`$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![#'V![!c#f!c!i#'V!i#T#f#T#Z#'V#Z~#fR#'[`$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![#(^![!c#f!c!i#(^!i#T#f#T#Z#(^#Z~#fR#(c`$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![#)e![!c#f!c!i#)e!i#T#f#T#Z#)e#Z~#fR#)j`$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![#*l![!c#f!c!i#*l!i#T#f#T#Z#*l#Z~#fR#*q`$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![#+s![!c#f!c!i#+s!i#T#f#T#Z#+s#Z~#fR#+x`$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![!Gk![!c#f!c!i!Gk!i#T#f#T#Z!Gk#Z~#fR#-Rf!lP$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![#,z![!c#f!c!}#,z!}#R#f#R#S#,z#S#T#f#T#o#,z#o4w#f4w5b#,z5b5i#f5i6S#,z6S~#fR#.l[$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls#P#f#P#Q#/b#Q~#fR#/iY!lP$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls~#fR#0`Y$TP$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls~#fR#1VY$RP$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls~#fR#1|f$SP$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![#1u![!c#f!c!}#1u!}#R#f#R#S#1u#S#T#f#T#o#1u#o4w#f4w5b#1u5b5i#f5i6S#1u6S~#fR#3gd$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!c#f!c!}#4u!}#R#f#R#S#6b#S#T#f#T#o#4u#o4w#f4w5b#4u5b5i#f5i6S#4u6S~#fR#4|f!nP$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![#4u![!c#f!c!}#4u!}#R#f#R#S#4u#S#T#f#T#o#4u#o4w#f4w5b#4u5b5i#f5i6S#4u6S~#fR#6gf$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![#4u![!c#f!c!}#4u!}#R#f#R#S#4u#S#T#f#T#o#4u#o4w#f4w5b#4u5b5i#f5i6S#4u6S~#fR#8Qf$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls!Q#f!Q![#1u![!c#f!c!}#1u!}#R#f#R#S#1u#S#T#f#T#o#1u#o4w#f4w5b#1u5b5i#f5i6S#1u6S~#fR#9mY$UP$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls~#fR#:dY$VP$XQOX#fXY#fYZ$ZZ]#f]^#f^p#fpq#fqr#frs$ls~#f",
  tokenizers: [0, 1],
  topRules: {"Rel":[0,4]},
  specialized: [{term: 142, get: value => spec_identifier[value] || -1}],
  tokenPrec: 6294
});

const autocompleteList = [
    { label: "Any", type: "type" },
    { label: "AutoNumber", type: "type" },
    { label: "Boolean", type: "type" },
    { label: "Char", type: "type" },
    { label: "Day", type: "type" },
    { label: "Date", type: "type" },
    { label: "DateTime", type: "type" },
    { label: "Year", type: "type" },
    { label: "Month", type: "type" },
    { label: "Week", type: "type" },
    { label: "Hour", type: "type" },
    { label: "Minute", type: "type" },
    { label: "Second", type: "type" },
    { label: "Millisecond", type: "type" },
    { label: "Microsecond", type: "type" },
    { label: "Nanosecond", type: "type" },
    { label: "Entity", type: "type" },
    { label: "Int", type: "type" },
    { label: "Number", type: "type" },
    { label: "Missing", type: "type" },
    { label: "Floating", type: "type" },
    { label: "UnsignedInt", type: "type" },
    { label: "SignedInt", type: "type" },
    { label: "Rational", type: "type" },
    { label: "FixedDecimal", type: "type" },
    { label: "Hash", type: "type" },
    { label: "FilePos", type: "type" },
    { label: "String", type: "type" },
    { label: "def", type: "keyword" },
    { label: "output", type: "interface" },
    { label: "insert", type: "interface" },
    { label: "delete", type: "interface" },
    { label: "export", type: "interface" },
    { label: "from", type: "keyword" },
    { label: "if", type: "keyword" },
    { label: "iff", type: "keyword" },
    { label: "then", type: "keyword" },
    { label: "else", type: "keyword" },
    { label: "end", type: "keyword" },
    { label: "exists", type: "keyword" },
    { label: "where", type: "keyword" },
    { label: "with", type: "keyword" },
    { label: "select", type: "keyword" },
    { label: "implies", type: "keyword" },
    { label: "use", type: "keyword" },
    { label: "forall", type: "keyword" },
    { label: "in", type: "keyword" },
    { label: "ic", type: "keyword" },
    { label: "not", type: "keyword" },
    { label: "and", type: "keyword" },
    { label: "or", type: "keyword" },
    { label: "xor", type: "keyword" },
    { label: "union", type: "keyword" },
    { label: "_flatten", type: "function" },
    { label: "abelian_group", type: "function" },
    { label: "abs", type: "function" },
    { label: "absorption_laws", type: "function" },
    { label: "acos", type: "function" },
    { label: "acosh", type: "function" },
    { label: "acot", type: "function" },
    { label: "add", type: "function" },
    { label: "antisymmetric", type: "function" },
    { label: "approximate_abelian_group", type: "function" },
    { label: "approximate_commutative_monoid", type: "function" },
    { label: "approximate_group", type: "function" },
    { label: "approximate_monoid", type: "function" },
    { label: "approximate_ring", type: "function" },
    { label: "approximate_semiring", type: "function" },
    { label: "approximately_associative", type: "function" },
    { label: "approximately_commutative", type: "function" },
    { label: "approximately_distributive", type: "function" },
    { label: "approximately_has_inverse", type: "function" },
    { label: "approximately_left_distributive", type: "function" },
    { label: "approximately_right_distributive", type: "function" },
    { label: "approximately_zero_annihilation", type: "function" },
    { label: "argmax", type: "function" },
    { label: "argmin", type: "function" },
    { label: "arity", type: "function" },
    { label: "asin", type: "function" },
    { label: "asinh", type: "function" },
    { label: "associative", type: "function" },
    { label: "atan", type: "function" },
    { label: "atanh", type: "function" },
    { label: "auto_number", type: "function" },
    { label: "binary_operator", type: "function" },
    { label: "binary_relation", type: "function" },
    { label: "binary_relation_substitution_laws", type: "function" },
    { label: "bitwise_and", type: "function" },
    { label: "bitwise_left_shift", type: "function" },
    { label: "bitwise_not", type: "function" },
    { label: "bitwise_or", type: "function" },
    { label: "bitwise_right_shift", type: "function" },
    { label: "bitwise_unsigned_right_shift", type: "function" },
    { label: "bitwise_xor", type: "function" },
    { label: "boolean_and", type: "function" },
    { label: "boolean_false", type: "function" },
    { label: "boolean_not", type: "function" },
    { label: "boolean_or", type: "function" },
    { label: "boolean_true", type: "function" },
    { label: "bottom", type: "function" },
    { label: "bounded_lattice", type: "function" },
    { label: "bounded_semilattice", type: "function" },
    { label: "byte", type: "function" },
    { label: "capture_group_by_index", type: "function" },
    { label: "capture_group_by_name", type: "function" },
    { label: "cart", type: "function" },
    { label: "cbrt", type: "function" },
    { label: "ceil", type: "function" },
    { label: "char", type: "function" },
    { label: "clamp", type: "function" },
    { label: "commutative", type: "function" },
    { label: "commutative_monoid", type: "function" },
    { label: "comparable", type: "function" },
    { label: "complement", type: "function" },
    { label: "concat", type: "function" },
    { label: "cos", type: "function" },
    { label: "cosh", type: "function" },
    { label: "cot", type: "function" },
    { label: "count", type: "function" },
    { label: "date_add", type: "function" },
    { label: "date_day", type: "function" },
    { label: "date_dayname", type: "function" },
    { label: "date_dayofquarter", type: "function" },
    { label: "date_dayofweek", type: "function" },
    { label: "date_dayofweekofmonth", type: "function" },
    { label: "date_dayofyear", type: "function" },
    { label: "date_daysinmonth", type: "function" },
    { label: "date_isleapyear", type: "function" },
    { label: "date_month", type: "function" },
    { label: "date_monthname", type: "function" },
    { label: "date_quarterofyear", type: "function" },
    { label: "date_subtract", type: "function" },
    { label: "date_week", type: "function" },
    { label: "date_year", type: "function" },
    { label: "dates_period_days", type: "function" },
    { label: "datetime_add", type: "function" },
    { label: "datetime_day", type: "function" },
    { label: "datetime_day_", type: "function" },
    { label: "datetime_dayname", type: "function" },
    { label: "datetime_dayofquarter", type: "function" },
    { label: "datetime_dayofweek", type: "function" },
    { label: "datetime_dayofweekofmonth", type: "function" },
    { label: "datetime_dayofyear", type: "function" },
    { label: "datetime_daysinmonth", type: "function" },
    { label: "datetime_hour", type: "function" },
    { label: "datetime_hour_", type: "function" },
    { label: "datetime_isleapyear", type: "function" },
    { label: "datetime_minute", type: "function" },
    { label: "datetime_minute_", type: "function" },
    { label: "datetime_month", type: "function" },
    { label: "datetime_month_", type: "function" },
    { label: "datetime_monthname", type: "function" },
    { label: "datetime_now", type: "function" },
    { label: "datetime_quarterofyear", type: "function" },
    { label: "datetime_second", type: "function" },
    { label: "datetime_subtract", type: "function" },
    { label: "datetime_to_nanoseconds", type: "function" },
    { label: "datetime_week", type: "function" },
    { label: "datetime_week_", type: "function" },
    { label: "datetime_year", type: "function" },
    { label: "datetime_year_", type: "function" },
    { label: "datetimes_period_milliseconds", type: "function" },
    { label: "decimal", type: "function" },
    { label: "decimal_bit_length", type: "function" },
    { label: "decimal_int_convert", type: "function" },
    { label: "decimal_precision", type: "function" },
    { label: "decode_base", type: "function" },
    { label: "default_value", type: "function" },
    { label: "deg", type: "function" },
    { label: "denominator", type: "function" },
    { label: "describe", type: "function" },
    { label: "diff", type: "function" },
    { label: "disjoint", type: "function" },
    { label: "distributive", type: "function" },
    { label: "divide", type: "function" },
    { label: "docstring", type: "function" },
    { label: "domain", type: "function" },
    { label: "dot_join", type: "function" },
    { label: "double_metaphone", type: "function" },
    { label: "empty", type: "function" },
    { label: "encode_base", type: "function" },
    { label: "epoch_milliseconds", type: "function" },
    { label: "eq", type: "function" },
    { label: "equal", type: "function" },
    { label: "equivalence_relation", type: "function" },
    { label: "erf", type: "function" },
    { label: "erfinv", type: "function" },
    { label: "escape_regex_metachars", type: "function" },
    { label: "export_csv", type: "function" },
    { label: "export_json", type: "function" },
    { label: "factorial", type: "function" },
    { label: "filepos", type: "function" },
    { label: "filepos_value", type: "function" },
    { label: "first", type: "function" },
    { label: "float", type: "function" },
    { label: "float_int_convert", type: "function" },
    { label: "floor", type: "function" },
    { label: "floor_divide", type: "function" },
    { label: "floor_to_int", type: "function" },
    { label: "format_date", type: "function" },
    { label: "format_datetime", type: "function" },
    { label: "formula_card_est", type: "function" },
    { label: "frequency", type: "function" },
    { label: "function", type: "function" },
    { label: "geometric_mean", type: "function" },
    { label: "glm_generic", type: "function" },
    { label: "glm_linear_regression", type: "function" },
    { label: "glm_logistic_regression", type: "function" },
    { label: "glm_predict", type: "function" },
    { label: "glm_probit_regression", type: "function" },
    { label: "graphviz", type: "function" },
    { label: "group", type: "function" },
    { label: "gt", type: "function" },
    { label: "gt_eq", type: "function" },
    { label: "harmonic_mean", type: "function" },
    { label: "has_identity", type: "function" },
    { label: "has_left_identity", type: "function" },
    { label: "has_left_zero", type: "function" },
    { label: "has_maximal_element", type: "function" },
    { label: "has_minimal_element", type: "function" },
    { label: "has_right_identity", type: "function" },
    { label: "has_right_zero", type: "function" },
    { label: "hash", type: "function" },
    { label: "hash_value_uint", type: "function" },
    { label: "haversine", type: "function" },
    { label: "help", type: "function" },
    { label: "html", type: "function" },
    { label: "ic", type: "function" },
    { label: "idempotent", type: "function" },
    { label: "identity", type: "function" },
    { label: "int", type: "function" },
    { label: "int_float_convert", type: "function" },
    { label: "int_spread_by_even", type: "function" },
    { label: "int_spread_by_ratio", type: "function" },
    { label: "intersect", type: "function" },
    { label: "irreflexive", type: "function" },
    { label: "is_", type: "function" },
    { label: "jacobian", type: "function" },
    { label: "join_bounded_lattice", type: "function" },
    { label: "last", type: "function" },
    { label: "lattice", type: "function" },
    { label: "left_distributive", type: "function" },
    { label: "left_identity", type: "function" },
    { label: "left_override", type: "function" },
    { label: "left_zero", type: "function" },
    { label: "levenshtein", type: "function" },
    { label: "like_match", type: "function" },
    { label: "linear_regression", type: "function" },
    { label: "linear_regression_objective", type: "function" },
    { label: "linear_regression_predict", type: "function" },
    { label: "lined_csv", type: "function" },
    { label: "load_csv", type: "function" },
    { label: "load_csv_row_wise", type: "function" },
    { label: "load_json", type: "function" },
    { label: "log", type: "function" },
    { label: "log_card_est", type: "function" },
    { label: "lowercase", type: "function" },
    { label: "lr_random_initial_point", type: "function" },
    { label: "lt", type: "function" },
    { label: "lt_eq", type: "function" },
    { label: "mae", type: "function" },
    { label: "markdown", type: "function" },
    { label: "max", type: "function" },
    { label: "max_k", type: "function" },
    { label: "maximal_element", type: "function" },
    { label: "maximum", type: "function" },
    { label: "mean", type: "function" },
    { label: "mean_normalization", type: "function" },
    { label: "median", type: "function" },
    { label: "meet_bounded_lattice", type: "function" },
    { label: "metaphone", type: "function" },
    { label: "min", type: "function" },
    { label: "min_k", type: "function" },
    { label: "min_max_normalization", type: "function" },
    { label: "minimal_element", type: "function" },
    { label: "minimize_initial_point", type: "function" },
    { label: "minimum", type: "function" },
    { label: "missing", type: "function" },
    { label: "mlpack_adaboost", type: "function" },
    { label: "mlpack_adaboost_predict", type: "function" },
    { label: "mlpack_approx_kfn", type: "function" },
    { label: "mlpack_approx_kfn_build", type: "function" },
    { label: "mlpack_dbscan", type: "function" },
    { label: "mlpack_decision_tree", type: "function" },
    { label: "mlpack_decision_tree_predict", type: "function" },
    { label: "mlpack_det", type: "function" },
    { label: "mlpack_det_build", type: "function" },
    { label: "mlpack_emst", type: "function" },
    { label: "mlpack_fastmks", type: "function" },
    { label: "mlpack_fastmks_build", type: "function" },
    { label: "mlpack_gmm_generate", type: "function" },
    { label: "mlpack_gmm_probability", type: "function" },
    { label: "mlpack_gmm_train", type: "function" },
    { label: "mlpack_hoeffding_tree", type: "function" },
    { label: "mlpack_hoeffding_tree_predict", type: "function" },
    { label: "mlpack_kernel_pca", type: "function" },
    { label: "mlpack_kfn", type: "function" },
    { label: "mlpack_kfn_build", type: "function" },
    { label: "mlpack_kmeans", type: "function" },
    { label: "mlpack_kmeans_centroids", type: "function" },
    { label: "mlpack_knn", type: "function" },
    { label: "mlpack_knn_build", type: "function" },
    { label: "mlpack_krann", type: "function" },
    { label: "mlpack_krann_build", type: "function" },
    { label: "mlpack_lars", type: "function" },
    { label: "mlpack_lars_predict", type: "function" },
    { label: "mlpack_linear_regression", type: "function" },
    { label: "mlpack_linear_regression_predict", type: "function" },
    { label: "mlpack_linear_svm", type: "function" },
    { label: "mlpack_linear_svm_predict", type: "function" },
    { label: "mlpack_logistic_regression", type: "function" },
    { label: "mlpack_logistic_regression_predict", type: "function" },
    { label: "mlpack_lsh", type: "function" },
    { label: "mlpack_lsh_build", type: "function" },
    { label: "mlpack_mean_shift", type: "function" },
    { label: "mlpack_nbc", type: "function" },
    { label: "mlpack_nbc_predict", type: "function" },
    { label: "mlpack_nmf", type: "function" },
    { label: "mlpack_pca", type: "function" },
    { label: "mlpack_perceptron", type: "function" },
    { label: "mlpack_perceptron_predict", type: "function" },
    { label: "mlpack_preprocess_split", type: "function" },
    { label: "mlpack_radical", type: "function" },
    { label: "mlpack_random_forest", type: "function" },
    { label: "mlpack_random_forest_predict", type: "function" },
    { label: "mlpack_softmax_regression", type: "function" },
    { label: "mlpack_softmax_regression_predict", type: "function" },
    { label: "mode", type: "function" },
    { label: "modulo", type: "function" },
    { label: "monoid", type: "function" },
    { label: "mse", type: "function" },
    { label: "multiply", type: "function" },
    { label: "murmurhash", type: "function" },
    { label: "nanoseconds_to_datetime", type: "function" },
    { label: "natural_exp", type: "function" },
    { label: "natural_log", type: "function" },
    { label: "neq", type: "function" },
    { label: "not", type: "function" },
    { label: "nullary_relation", type: "function" },
    { label: "num_bytes", type: "function" },
    { label: "num_chars", type: "function" },
    { label: "numerator", type: "function" },
    { label: "pack", type: "function" },
    { label: "parse_date", type: "function" },
    { label: "parse_datetime", type: "function" },
    { label: "parse_decimal", type: "function" },
    { label: "parse_float", type: "function" },
    { label: "parse_int", type: "function" },
    { label: "parse_json", type: "function" },
    { label: "parse_uuid", type: "function" },
    { label: "partial_order", type: "function" },
    { label: "partial_order_and_bounded_lattice", type: "function" },
    { label: "partial_order_and_join_bounded_lattice", type: "function" },
    { label: "partial_order_and_lattice", type: "function" },
    { label: "partial_order_and_meet_bounded_lattice", type: "function" },
    { label: "pattern_match", type: "function" },
    { label: "percentile", type: "function" },
    { label: "percentile_nearest", type: "function" },
    { label: "period_add", type: "function" },
    { label: "period_day_to_int", type: "function" },
    { label: "period_max", type: "function" },
    { label: "period_min", type: "function" },
    { label: "pi_float", type: "function" },
    { label: "pivot", type: "function" },
    { label: "pop_standard_deviation", type: "function" },
    { label: "pop_variance", type: "function" },
    { label: "pop_zscore_normalization", type: "function" },
    { label: "power", type: "function" },
    { label: "prefix_join", type: "function" },
    { label: "preorder", type: "function" },
    { label: "product", type: "function" },
    { label: "proper_subset", type: "function" },
    { label: "proper_superset", type: "function" },
    { label: "rad", type: "function" },
    { label: "random_mersenne_twister", type: "function" },
    { label: "random_threefry_float", type: "function" },
    { label: "random_threefry_uint", type: "function" },
    { label: "random_uint", type: "function" },
    { label: "range", type: "function" },
    { label: "rational", type: "function" },
    { label: "rational_convert", type: "function" },
    { label: "reflexive", type: "function" },
    { label: "regex_compile", type: "function" },
    { label: "regex_match", type: "function" },
    { label: "regex_match_all", type: "function" },
    { label: "rel", type: "function" },
    { label: "relname_string", type: "function" },
    { label: "remainder", type: "function" },
    { label: "reverse_sort", type: "function" },
    { label: "right_distributive", type: "function" },
    { label: "right_identity", type: "function" },
    { label: "right_override", type: "function" },
    { label: "right_zero", type: "function" },
    { label: "ring", type: "function" },
    { label: "rmse", type: "function" },
    { label: "round", type: "function" },
    { label: "sample_standard_deviation", type: "function" },
    { label: "sample_variance", type: "function" },
    { label: "sample_zscore_normalization", type: "function" },
    { label: "second", type: "function" },
    { label: "semilattice", type: "function" },
    { label: "semiring", type: "function" },
    { label: "sign", type: "function" },
    { label: "sin", type: "function" },
    { label: "sinh", type: "function" },
    { label: "sort", type: "function" },
    { label: "soundex", type: "function" },
    { label: "spread", type: "function" },
    { label: "sqrt", type: "function" },
    { label: "squared", type: "function" },
    { label: "squared_deviation", type: "function" },
    { label: "strict_partial_order", type: "function" },
    { label: "strict_total_order", type: "function" },
    { label: "string", type: "function" },
    { label: "string_join", type: "function" },
    { label: "string_length", type: "function" },
    { label: "string_replace", type: "function" },
    { label: "string_replace_multiple", type: "function" },
    { label: "string_split", type: "function" },
    { label: "string_trim", type: "function" },
    { label: "subset", type: "function" },
    { label: "substring", type: "function" },
    { label: "substring_bytes", type: "function" },
    { label: "subtract", type: "function" },
    { label: "suffix_join", type: "function" },
    { label: "sum", type: "function" },
    { label: "sum_int", type: "function" },
    { label: "superset", type: "function" },
    { label: "svg", type: "function" },
    { label: "symmetric", type: "function" },
    { label: "table", type: "function" },
    { label: "tan", type: "function" },
    { label: "tanh", type: "function" },
    { label: "ternary_relation", type: "function" },
    { label: "top", type: "function" },
    { label: "total", type: "function" },
    { label: "total_order", type: "function" },
    { label: "transitive", type: "function" },
    { label: "transpose", type: "function" },
    { label: "trunc", type: "function" },
    { label: "trunc_divide", type: "function" },
    { label: "trunc_to_int", type: "function" },
    { label: "uint", type: "function" },
    { label: "unary_operator", type: "function" },
    { label: "unary_relation", type: "function" },
    { label: "unary_relation_substitution_laws", type: "function" },
    { label: "union", type: "function" },
    { label: "unit_normalization", type: "function" },
    { label: "unix_epoch", type: "function" },
    { label: "unpack", type: "function" },
    { label: "uppercase", type: "function" },
    { label: "uuid_string", type: "function" },
    { label: "vega", type: "function" },
    { label: "vegalite", type: "function" },
    { label: "vegalite_utils", type: "function" },
    { label: "view_json", type: "function" },
    { label: "weighted_mean", type: "function" },
    { label: "xgboost_classifier", type: "function" },
    { label: "xgboost_classifier_predict", type: "function" },
    { label: "xgboost_classifier_probabilities", type: "function" },
    { label: "xgboost_feature_importances", type: "function" },
    { label: "xgboost_regressor", type: "function" },
    { label: "xgboost_regressor_predict", type: "function" },
    { label: "zero_annihilation", type: "function" },
    { label: "zero_of_operator", type: "function" },
    { label: "zip", type: "function" },
    { label: "registered", type: "variable", info: "Registered Sign / Registered Trade Mark Sign", apply: "®" },
    { label: "degree", type: "variable", info: "Degree Sign", apply: "°" },
    { label: "pm", type: "variable", info: "Plus-Minus Sign / Plus-Or-Minus Sign", apply: "±" },
    { label: "\\^2", info: "Superscript Two / Superscript Digit Two", apply: "²" },
    { label: "\\^3", info: "Superscript Three / Superscript Digit Three", apply: "³" },
    { label: "\\^1", info: "Superscript One / Superscript Digit One", apply: "¹" },
    { label: "\\1/4", type: "variable", info: "Vulgar Fraction One Quarter / Fraction One Quarter", apply: "¼" },
    { label: "\\1/2", type: "variable", info: "Vulgar Fraction One Half / Fraction One Half", apply: "½" },
    { label: "\\3/4", type: "variable", info: "Vulgar Fraction Three Quarters / Fraction Three Quarters", apply: "¾" },
    { label: "\\questiondown", type: "variable", info: "Inverted Question Mark", apply: "¿" },
    { label: "\\times", type: "variable", info: "Multiplication Sign", apply: "×" },
    { label: "\\div", type: "variable", info: "Division Sign", apply: "÷" },
    { label: "\\Alpha", type: "variable", info: "Greek Capital Letter Alpha", apply: "Α" },
    { label: "\\Beta", type: "variable", info: "Greek Capital Letter Beta", apply: "Β" },
    { label: "\\Gamma", type: "variable", info: "Greek Capital Letter Gamma", apply: "Γ" },
    { label: "\\Delta", type: "variable", info: "Greek Capital Letter Delta", apply: "Δ" },
    { label: "\\Epsilon", type: "variable", info: "Greek Capital Letter Epsilon", apply: "Ε" },
    { label: "\\Zeta", type: "variable", info: "Greek Capital Letter Zeta", apply: "Ζ" },
    { label: "\\Eta", type: "variable", info: "Greek Capital Letter Eta", apply: "Η" },
    { label: "\\Theta", type: "variable", info: "Greek Capital Letter Theta", apply: "Θ" },
    { label: "\\Iota", type: "variable", info: "Greek Capital Letter Iota", apply: "Ι" },
    { label: "\\Kappa", type: "variable", info: "Greek Capital Letter Kappa", apply: "Κ" },
    { label: "\\Lambda", type: "variable", info: "Greek Capital Letter Lamda / Greek Capital Letter Lambda", apply: "Λ" },
    { label: "\\upMu", type: "variable", info: "Greek Capital Letter Mu", apply: "Μ" },
    { label: "\\upNu", type: "variable", info: "Greek Capital Letter Nu", apply: "Ν" },
    { label: "\\Xi", type: "variable", info: "Greek Capital Letter Xi", apply: "Ξ" },
    { label: "\\upOmicron", type: "variable", info: "Greek Capital Letter Omicron", apply: "Ο" },
    { label: "\\Pi", type: "variable", info: "Greek Capital Letter Pi", apply: "Π" },
    { label: "\\Rho", type: "variable", info: "Greek Capital Letter Rho", apply: "Ρ" },
    { label: "\\Sigma", type: "variable", info: "Greek Capital Letter Sigma", apply: "Σ" },
    { label: "\\Tau", type: "variable", info: "Greek Capital Letter Tau", apply: "Τ" },
    { label: "\\Upsilon", type: "variable", info: "Greek Capital Letter Upsilon", apply: "Υ" },
    { label: "\\Phi", type: "variable", info: "Greek Capital Letter Phi", apply: "Φ" },
    { label: "\\Chi", type: "variable", info: "Greek Capital Letter Chi", apply: "Χ" },
    { label: "\\Psi", type: "variable", info: "Greek Capital Letter Psi", apply: "Ψ" },
    { label: "\\Omega", type: "variable", info: "Greek Capital Letter Omega", apply: "Ω" },
    { label: "\\alpha", type: "variable", info: "Greek Small Letter Alpha", apply: "α" },
    { label: "\\beta", type: "variable", info: "Greek Small Letter Beta", apply: "β" },
    { label: "\\gamma", type: "variable", info: "Greek Small Letter Gamma", apply: "γ" },
    { label: "\\delta", type: "variable", info: "Greek Small Letter Delta", apply: "δ" },
    { label: "\\varepsilon", type: "variable", info: "Greek Small Letter Epsilon", apply: "ε" },
    { label: "\\zeta", type: "variable", info: "Greek Small Letter Zeta", apply: "ζ" },
    { label: "\\eta", type: "variable", info: "Greek Small Letter Eta", apply: "η" },
    { label: "\\theta", type: "variable", info: "Greek Small Letter Theta", apply: "θ" },
    { label: "\\iota", type: "variable", info: "Greek Small Letter Iota", apply: "ι" },
    { label: "\\kappa", type: "variable", info: "Greek Small Letter Kappa", apply: "κ" },
    { label: "\\lambda", type: "variable", info: "Greek Small Letter Lamda / Greek Small Letter Lambda", apply: "λ" },
    { label: "\\mu", type: "variable", info: "Greek Small Letter Mu", apply: "μ" },
    { label: "\\nu", type: "variable", info: "Greek Small Letter Nu", apply: "ν" },
    { label: "\\xi", type: "variable", info: "Greek Small Letter Xi", apply: "ξ" },
    { label: "\\upomicron", type: "variable", info: "Greek Small Letter Omicron", apply: "ο" },
    { label: "\\pi", type: "variable", info: "Greek Small Letter Pi", apply: "π" },
    { label: "\\rho", type: "variable", info: "Greek Small Letter Rho", apply: "ρ" },
    { label: "\\varsigma", type: "variable", info: "Greek Small Letter Final Sigma", apply: "ς" },
    { label: "\\sigma", type: "variable", info: "Greek Small Letter Sigma", apply: "σ" },
    { label: "\\tau", type: "variable", info: "Greek Small Letter Tau", apply: "τ" },
    { label: "\\upsilon", type: "variable", info: "Greek Small Letter Upsilon", apply: "υ" },
    { label: "\\varphi", type: "variable", info: "Greek Small Letter Phi", apply: "φ" },
    { label: "\\chi", type: "variable", info: "Greek Small Letter Chi", apply: "χ" },
    { label: "\\psi", type: "variable", info: "Greek Small Letter Psi", apply: "ψ" },
    { label: "\\omega", type: "variable", info: "Greek Small Letter Omega", apply: "ω" },
    { label: "\\upvarbeta", type: "variable", info: "Greek Beta Symbol / Greek Small Letter Curled Beta", apply: "ϐ" },
    { label: "\\vartheta", type: "variable", info: "Greek Theta Symbol / Greek Small Letter Script Theta", apply: "ϑ" },
    { label: "\\phi", type: "variable", info: "Greek Phi Symbol / Greek Small Letter Script Phi", apply: "ϕ" },
    { label: "\\varpi", type: "variable", info: "Greek Pi Symbol / Greek Small Letter Omega Pi", apply: "ϖ" },
    { label: "\\upoldKoppa", type: "variable", info: "Greek Letter Archaic Koppa", apply: "Ϙ" },
    { label: "\\upoldkoppa", type: "variable", info: "Greek Small Letter Archaic Koppa", apply: "ϙ" },
    { label: "\\Stigma", type: "variable", info: "Greek Letter Stigma / Greek Capital Letter Stigma", apply: "Ϛ" },
    { label: "\\upstigma", type: "variable", info: "Greek Small Letter Stigma", apply: "ϛ" },
    { label: "\\Digamma", type: "variable", info: "Greek Letter Digamma / Greek Capital Letter Digamma", apply: "Ϝ" },
    { label: "\\digamma", type: "variable", info: "Greek Small Letter Digamma", apply: "ϝ" },
    { label: "\\Koppa", type: "variable", info: "Greek Letter Koppa / Greek Capital Letter Koppa", apply: "Ϟ" },
    { label: "\\upkoppa", type: "variable", info: "Greek Small Letter Koppa", apply: "ϟ" },
    { label: "\\Sampi", type: "variable", info: "Greek Letter Sampi / Greek Capital Letter Sampi", apply: "Ϡ" },
    { label: "\\upsampi", type: "variable", info: "Greek Small Letter Sampi", apply: "ϡ" },
    { label: "\\varkappa", type: "variable", info: "Greek Kappa Symbol / Greek Small Letter Script Kappa", apply: "ϰ" },
    { label: "\\varrho", type: "variable", info: "Greek Rho Symbol / Greek Small Letter Tailed Rho", apply: "ϱ" },
    { label: "\\varTheta", type: "variable", info: "Greek Capital Theta Symbol", apply: "ϴ" },
    { label: "\\epsilon", type: "variable", info: "Greek Lunate Epsilon Symbol", apply: "ϵ" },
    { label: "\\backepsilon", type: "variable", info: "Greek Reversed Lunate Epsilon Symbol", apply: "϶" },
    { label: "\\^0", info: "Superscript Zero / Superscript Digit Zero", apply: "⁰" },
    { label: "\\^i", info: "Superscript Latin Small Letter I", apply: "ⁱ" },
    { label: "\\^4", info: "Superscript Four / Superscript Digit Four", apply: "⁴" },
    { label: "\\^5", info: "Superscript Five / Superscript Digit Five", apply: "⁵" },
    { label: "\\^6", info: "Superscript Six / Superscript Digit Six", apply: "⁶" },
    { label: "\\^7", info: "Superscript Seven / Superscript Digit Seven", apply: "⁷" },
    { label: "\\^8", info: "Superscript Eight / Superscript Digit Eight", apply: "⁸" },
    { label: "\\^9", info: "Superscript Nine / Superscript Digit Nine", apply: "⁹" },
    { label: "\\^+", info: "Superscript Plus Sign", apply: "⁺" },
    { label: "\\^-", info: "Superscript Minus / Superscript Hyphen-Minus", apply: "⁻" },
    { label: "\\^=", info: "Superscript Equals Sign", apply: "⁼" },
    { label: "\\^(", info: "Superscript Left Parenthesis / Superscript Opening Parenthesis", apply: "⁽" },
    { label: "\\^)", info: "Superscript Right Parenthesis / Superscript Closing Parenthesis", apply: "⁾" },
    { label: "\\^n", info: "Superscript Latin Small Letter N", apply: "ⁿ" },
    { label: "\\_0", type: "variable", info: "Subscript Zero / Subscript Digit Zero", apply: "₀" },
    { label: "\\_1", type: "variable", info: "Subscript One / Subscript Digit One", apply: "₁" },
    { label: "\\_2", type: "variable", info: "Subscript Two / Subscript Digit Two", apply: "₂" },
    { label: "\\_3", type: "variable", info: "Subscript Three / Subscript Digit Three", apply: "₃" },
    { label: "\\_4", type: "variable", info: "Subscript Four / Subscript Digit Four", apply: "₄" },
    { label: "\\_5", type: "variable", info: "Subscript Five / Subscript Digit Five", apply: "₅" },
    { label: "\\_6", type: "variable", info: "Subscript Six / Subscript Digit Six", apply: "₆" },
    { label: "\\_7", type: "variable", info: "Subscript Seven / Subscript Digit Seven", apply: "₇" },
    { label: "\\_8", type: "variable", info: "Subscript Eight / Subscript Digit Eight", apply: "₈" },
    { label: "\\_9", type: "variable", info: "Subscript Nine / Subscript Digit Nine", apply: "₉" },
    { label: "\\forall", type: "variable", info: "For All", apply: "∀" },
    { label: "\\complement", type: "variable", info: "Complement", apply: "∁" },
    { label: "\\partial", type: "variable", info: "Partial Differential", apply: "∂" },
    { label: "\\exists", type: "variable", info: "There Exists", apply: "∃" },
    { label: "\\nexists", type: "variable", info: "There Does Not Exist", apply: "∄" },
    { label: "\\emptyset", type: "variable", info: "Empty Set", apply: "∅" },
    { label: "\\increment", type: "variable", info: "Increment", apply: "∆" },
    { label: "\\nabla", type: "variable", info: "Nabla", apply: "∇" },
    { label: "\\in", type: "variable", info: "Element Of", apply: "∈" },
    { label: "\\notin", type: "variable", info: "Not An Element Of", apply: "∉" },
    { label: "\\sqrt", type: "variable", info: "Square Root", apply: "√" },
    { label: "\\cbrt", type: "variable", info: "Cube Root", apply: "∛" },
    { label: "\\fourthroot", type: "variable", info: "Fourth Root", apply: "∜" },
    { label: "\\propto", type: "variable", info: "Proportional To", apply: "∝" },
    { label: "\\infty", type: "variable", info: "Infinity", apply: "∞" },
    { label: "\\cap", type: "variable", info: "Intersection", apply: "∩" },
    { label: "\\cup", type: "variable", info: "Union", apply: "∪" },
    { label: "\\therefore", type: "variable", info: "Therefore", apply: "∴" },
    { label: "\\because", type: "variable", info: "Because", apply: "∵" },
    { label: "\\leq", type: "variable", info: "Less-Than Or Equal To / Less Than Or Equal To", apply: "≤" },
    { label: "\\geq", type: "variable", info: "Greater-Than Or Equal To / Greater Than Or Equal To", apply: "≥" },
    { label: "\\subset", type: "variable", info: "Subset Of", apply: "⊂" },
    { label: "\\supset", type: "variable", info: "Superset Of", apply: "⊃" },
    { label: "\\nsubset", type: "variable", info: "Not A Subset Of", apply: "⊄" },
    { label: "\\nsupset", type: "variable", info: "Not A Superset Of", apply: "⊅" },
    { label: "\\subseteq", type: "variable", info: "Subset Of Or Equal To", apply: "⊆" },
    { label: "\\supseteq", type: "variable", info: "Superset Of Or Equal To", apply: "⊇" },
    { label: "\\nsubseteq", type: "variable", info: "Neither A Subset Of Nor Equal To", apply: "⊈" },
    { label: "\\nsupseteq", type: "variable", info: "Neither A Superset Of Nor Equal To", apply: "⊉" },
    { label: "\\bowtie", type: "variable", info: "Bowtie", apply: "⋈" },
    { label: "\\ltimes", type: "variable", info: "Left Normal Factor Semidirect Product", apply: "⋉" },
    { label: "\\rtimes", type: "variable", info: "Right Normal Factor Semidirect Product", apply: "⋊" },
    { label: "\\vdots", type: "variable", info: "Vertical Ellipsis", apply: "⋮" },
    { label: "\\cdots", type: "variable", info: "Midline Horizontal Ellipsis", apply: "⋯" },
    { label: "\\adots", type: "variable", info: "Up Right Diagonal Ellipsis", apply: "⋰" },
    { label: "\\ddots", type: "variable", info: "Down Right Diagonal Ellipsis", apply: "⋱" }
];

const relLanguage = LRLanguage.define({
    parser: parser.configure({
        props: [
            // indentNodeProp.add({
            //   Application: delimitedIndent({closing: ")", align: false})
            // }),
            // foldNodeProp.add({
            //   Application: foldInside
            // }),
            styleTags({
                'use forall for in iff if then else end where with select implies': tags.controlKeyword,
                'not and or xor': tags.operatorKeyword,
                'as from inline ic doc raw entity type value': tags.keyword,
                'output insert delete abort export': tags.emphasis,
                'def': tags.definitionKeyword,
                'module': tags.moduleKeyword,
                'Any String Int Number Char Missing Float Floating UnsignedInt SignedInt Rational FixedDecimal RelName Entity AutoNumber Hash FilePos Date DateTime Year Month Week Day Hour Minute Second Millisecond Microsecond Nanosecond Boolean': tags.typeName,
                Number: tags.number,
                BooleanLiteral: tags.bool,
                StringLiteral: tags.string,
                MultilineStringLiteral: tags.string,
                MultilineRawStringLiteral: tags.string,
                AssignOp: tags.definitionOperator,
                LineComment: tags.lineComment,
                BlockComment: tags.blockComment,
                MultilineBlockComment: tags.blockComment,
                VariableName: tags.definition(tags.variableName),
                Atom: tags.atom,
                RelnameLiteral: tags.literal,
                RelnameStringLiteral: tags.literal,
                ValueTypeLiteral: tags.literal,
                DefineStatement: tags.atom,
                DateLiteral: tags.string,
                DateTimeLiteral: tags.string,
                '( )': tags.paren,
                '[ ]': tags.squareBracket,
                '{ }': tags.brace,
                ':': tags.derefOperator,
                ', ;': tags.separator
            })
        ]
    }),
    languageData: {
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`", '"""'] },
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
        // indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
        wordChars: "$"
    }
});
// Autocomplete
const relCompletion = relLanguage.data.of({
    autocomplete: completeFromList(autocompleteList)
});
function rel() {
    return new LanguageSupport(relLanguage, [relCompletion]);
}

export { rel, relCompletion, relLanguage };
