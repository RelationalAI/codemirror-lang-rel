'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var lr = require('@lezer/lr');
var language = require('@codemirror/language');
var highlight = require('@lezer/highlight');
var autocomplete = require('@codemirror/autocomplete');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_identifier = {__proto__:null,inline:12, function:18, in:22, where:24, if:28, then:32, else:34, end:36, iff:40, not:44, xor:48, and:52, or:54, from:58, module:70, forall:74, foreach:78, for:82, implies:86, def:90, abort:94, export:98, config:102, delete:106, insert:110, output:114, with:118, use:120, ic:124, raw:130, doc:136, entity:142, type:146, value:150, true:156, false:156, Int:176, String:180, Any:184, Number:188, Char:192, Missing:196, Floating:200, UnsignedInt:204, SignedInt:208, Rational:212, FixedDecimal:216, RelName:220, Entity:224, AutoNumber:228, Hash:232, FilePos:236, Date:240, DateTime:244, Year:248, Month:252, Week:256, Day:260, Hour:264, Minute:268, Second:272, Millisecond:276, Microsecond:280, Nanosecond:284};
const parser = lr.LRParser.deserialize({
  version: 14,
  states: "8SO`QPOOO%aOQO'#DpO%iOQO'#DsO%qOQO'#EQOOQO'#Fv'#FvOOQO'#Dz'#DzO%yQPO'#ETOOQO'#F{'#F{OOQO'#EU'#EUOOQO'#Fh'#FhOOQO'#Fa'#FaQ`QPOOO&UQPO'#CaO&^QPO'#CfO`QPO'#CiO`QPO'#CoO`QPO'#CqO`QPO'#CsO`QPO'#CuO%yQPO'#CxO&^QPO'#DOO`QPO'#DQO&cQPO'#DSO&^QPO'#DUO`QPO'#DWO&hQPO'#DYO&^QPO'#DhO&^QPO'#DkO+[QPO'#DmO+dQPO'#DtO+lQPO'#DxO+qQPO'#EVO0RQPO'#EXO4cQPO'#EZO8sQPO'#E]O=TQPO'#E_OAeQPO'#EaOEuQPO'#EcOJVQPO'#EeONgQPO'#EgO!$wQPO'#EiO!)XQPO'#EkO!-iQPO'#EmO!1yQPO'#EoO!6ZQPO'#EqO!:kQPO'#EsO!>{QPO'#EuO!C]QPO'#EwO!GmQPO'#EyO!K}QPO'#E{O#!_QPO'#E}O#&oQPO'#FPO#+PQPO'#FRO#/aQPO'#FTO#3qQPO'#FVO#8RQPO'#FXO#<cQPO'#FZO#@sQPO'#F]O#ETQPO'#F_OOOO'#Fd'#FdO#IeOQO,5:[OOQO,5:[,5:[O#ImOQO,5:_OOQO,5:_,5:_O#IuOQO,5:lOOQO,5:l,5:lOOQO'#Cc'#CcOOQO'#C}'#C}OOQO'#C{'#C{O#I}QPO'#CzO#JVQPO,5:oOOQO-E9_-E9_O#J_QPO,58{O#NoQPO,59OO$%PQPO,59QO$)aQPO'#CkO$)nQPO,59TOOQO,59Z,59ZOOQO,59],59]OOQO,59_,59_OOQO,59a,59aOOQO,59d,59dO`QPO,59jO`QPO,59lO%yQPO,59nO$)yQPO,59pOOQO,59r,59rOOQO,59t,59tO`QPO,59vO`QPO,59xO`QPO,59zO`QPO,59|O`QPO,5:OO`QPO,5:QO$*OQPO,5:SO$*TQSO,5:VO$*]QPO,5:XO$*bQPO,5:]OOQO,5:`,5:`O&^QPO,5:bO&^QPO,5:dOOQO,5:q,5:qOOQO,5:s,5:sOOQO,5:u,5:uOOQO,5:w,5:wOOQO,5:y,5:yOOQO,5:{,5:{OOQO,5:},5:}OOQO,5;P,5;POOQO,5;R,5;ROOQO,5;T,5;TOOQO,5;V,5;VOOQO,5;X,5;XOOQO,5;Z,5;ZOOQO,5;],5;]OOQO,5;_,5;_OOQO,5;a,5;aOOQO,5;c,5;cOOQO,5;e,5;eOOQO,5;g,5;gOOQO,5;i,5;iOOQO,5;k,5;kOOQO,5;m,5;mOOQO,5;o,5;oOOQO,5;q,5;qOOQO,5;s,5;sOOQO,5;u,5;uOOQO,5;w,5;wOOQO,5;y,5;yOOOO-E9b-E9bOOQO1G/v1G/vOOQO1G/y1G/yOOQO1G0W1G0WO%yQPO'#FcO$*gQPO,59fOOQO1G0Z1G0ZOOQO1G.g1G.gOOQO1G.j1G.jO`QPO1G.lO$/QQPO1G.oO`QPO'#FbOOQO1G.o1G.oO`QPO1G.oO$/]QPO1G/UOOQO1G/W1G/WO$/bQPO1G/YO&^QPO1G/[OOQO1G/b1G/bOOQO1G/d1G/dOOQO1G/f1G/fOOQO1G/h1G/hOOQO1G/j1G/jOOQO1G/l1G/lO%yQPO1G/nOOQO1G/q1G/qO&^QPO1G/qOOQO1G/s1G/sOOQO1G/w1G/wOOQO1G/|1G/|OOQO1G0O1G0OOOQO,5;},5;}OOQO-E9a-E9aOOQO7+$W7+$WOOQO-E9`-E9`OOQO7+$Z7+$ZO`QPO7+$ZOOQO,5;|,5;|O$/gQPO7+$ZOOQO7+$p7+$pOOQO7+$t7+$tOOQO7+$v7+$vOOQO7+%Y7+%YO$/lQPO7+%]O$/qQPO<<GuOOQO<<Gu<<GuOOQO<<Hw<<HwOOQOAN=aAN=a",
  stateData: "$0U~O$ZOSPOSQOSROS~OZ]O^^Od_Of`OhaOjbOkbOmcOpSOsdOueOwfOygO{hO}iO!]jO!`kO!blO!imO!mnO!oSO!pSO!qSO!rSO!sSO!uSO!vSO!zoO!|pO#OqO#QrO#SsO#UtO#WuO#YvO#[wO#^xO#`yO#bzO#d{O#f|O#h}O#j!OO#l!PO#n!QO#p!RO#r!SO#t!TO#v!UO#x!VO#z!WO#|!XO$O!YO$Q!ZO$S![O$][O$cUO$gPO$iQO$lRO$mUO~O$g!_O$h!]O~O$h!]O$i!aO~O$h!]O$k!cO~Op!fO$^!dO$_!eO~OU!jOX!kO~O$^!dO~O$c!vO~O!P!zO!R!{O!T!|O!V!}O!X#OO!Z#PO$^!dOZ|X^|Xd|Xf|Xh|Xj|Xk|Xm|Xp|Xs|Xu|Xw|Xy|X{|X}|X!]|X!`|X!b|X!i|X!m|X!o|X!p|X!q|X!r|X!s|X!u|X!v|X!z|X!||X#O|X#Q|X#S|X#U|X#W|X#Y|X#[|X#^|X#`|X#b|X#d|X#f|X#h|X#j|X#l|X#n|X#p|X#r|X#t|X#v|X#x|X#z|X#||X$O|X$Q|X$S|X$X|X$]|X$c|X$g|X$i|X$l|X$m|X`|Xa|Xb|X~O!c#SO!f#TO~O!k#VO$^!dO~O!k#WO~O$^!dOZ!yX^!yXd!yXf!yXh!yXj!yXk!yXm!yXp!yXs!yXu!yXw!yXy!yX{!yX}!yX!]!yX!`!yX!b!yX!i!yX!m!yX!o!yX!p!yX!q!yX!r!yX!s!yX!u!yX!v!yX!z!yX!|!yX#O!yX#Q!yX#S!yX#U!yX#W!yX#Y!yX#[!yX#^!yX#`!yX#b!yX#d!yX#f!yX#h!yX#j!yX#l!yX#n!yX#p!yX#r!yX#t!yX#v!yX#x!yX#z!yX#|!yX$O!yX$Q!yX$S!yX$X!yX$]!yX$c!yX$g!yX$i!yX$l!yX$m!yX`!yXa!yXb!yX~O$^!dOZ!{X^!{Xd!{Xf!{Xh!{Xj!{Xk!{Xm!{Xp!{Xs!{Xu!{Xw!{Xy!{X{!{X}!{X!]!{X!`!{X!b!{X!i!{X!m!{X!o!{X!p!{X!q!{X!r!{X!s!{X!u!{X!v!{X!z!{X!|!{X#O!{X#Q!{X#S!{X#U!{X#W!{X#Y!{X#[!{X#^!{X#`!{X#b!{X#d!{X#f!{X#h!{X#j!{X#l!{X#n!{X#p!{X#r!{X#t!{X#v!{X#x!{X#z!{X#|!{X$O!{X$Q!{X$S!{X$X!{X$]!{X$c!{X$g!{X$i!{X$l!{X$m!{X`!{Xa!{Xb!{X~O$^!dOZ!}X^!}Xd!}Xf!}Xh!}Xj!}Xk!}Xm!}Xp!}Xs!}Xu!}Xw!}Xy!}X{!}X}!}X!]!}X!`!}X!b!}X!i!}X!m!}X!o!}X!p!}X!q!}X!r!}X!s!}X!u!}X!v!}X!z!}X!|!}X#O!}X#Q!}X#S!}X#U!}X#W!}X#Y!}X#[!}X#^!}X#`!}X#b!}X#d!}X#f!}X#h!}X#j!}X#l!}X#n!}X#p!}X#r!}X#t!}X#v!}X#x!}X#z!}X#|!}X$O!}X$Q!}X$S!}X$X!}X$]!}X$c!}X$g!}X$i!}X$l!}X$m!}X`!}Xa!}Xb!}X~O$^!dOZ#PX^#PXd#PXf#PXh#PXj#PXk#PXm#PXp#PXs#PXu#PXw#PXy#PX{#PX}#PX!]#PX!`#PX!b#PX!i#PX!m#PX!o#PX!p#PX!q#PX!r#PX!s#PX!u#PX!v#PX!z#PX!|#PX#O#PX#Q#PX#S#PX#U#PX#W#PX#Y#PX#[#PX#^#PX#`#PX#b#PX#d#PX#f#PX#h#PX#j#PX#l#PX#n#PX#p#PX#r#PX#t#PX#v#PX#x#PX#z#PX#|#PX$O#PX$Q#PX$S#PX$X#PX$]#PX$c#PX$g#PX$i#PX$l#PX$m#PX`#PXa#PXb#PX~O$^!dOZ#RX^#RXd#RXf#RXh#RXj#RXk#RXm#RXp#RXs#RXu#RXw#RXy#RX{#RX}#RX!]#RX!`#RX!b#RX!i#RX!m#RX!o#RX!p#RX!q#RX!r#RX!s#RX!u#RX!v#RX!z#RX!|#RX#O#RX#Q#RX#S#RX#U#RX#W#RX#Y#RX#[#RX#^#RX#`#RX#b#RX#d#RX#f#RX#h#RX#j#RX#l#RX#n#RX#p#RX#r#RX#t#RX#v#RX#x#RX#z#RX#|#RX$O#RX$Q#RX$S#RX$X#RX$]#RX$c#RX$g#RX$i#RX$l#RX$m#RX`#RXa#RXb#RX~O$^!dOZ#TX^#TXd#TXf#TXh#TXj#TXk#TXm#TXp#TXs#TXu#TXw#TXy#TX{#TX}#TX!]#TX!`#TX!b#TX!i#TX!m#TX!o#TX!p#TX!q#TX!r#TX!s#TX!u#TX!v#TX!z#TX!|#TX#O#TX#Q#TX#S#TX#U#TX#W#TX#Y#TX#[#TX#^#TX#`#TX#b#TX#d#TX#f#TX#h#TX#j#TX#l#TX#n#TX#p#TX#r#TX#t#TX#v#TX#x#TX#z#TX#|#TX$O#TX$Q#TX$S#TX$X#TX$]#TX$c#TX$g#TX$i#TX$l#TX$m#TX`#TXa#TXb#TX~O$^!dOZ#VX^#VXd#VXf#VXh#VXj#VXk#VXm#VXp#VXs#VXu#VXw#VXy#VX{#VX}#VX!]#VX!`#VX!b#VX!i#VX!m#VX!o#VX!p#VX!q#VX!r#VX!s#VX!u#VX!v#VX!z#VX!|#VX#O#VX#Q#VX#S#VX#U#VX#W#VX#Y#VX#[#VX#^#VX#`#VX#b#VX#d#VX#f#VX#h#VX#j#VX#l#VX#n#VX#p#VX#r#VX#t#VX#v#VX#x#VX#z#VX#|#VX$O#VX$Q#VX$S#VX$X#VX$]#VX$c#VX$g#VX$i#VX$l#VX$m#VX`#VXa#VXb#VX~O$^!dOZ#XX^#XXd#XXf#XXh#XXj#XXk#XXm#XXp#XXs#XXu#XXw#XXy#XX{#XX}#XX!]#XX!`#XX!b#XX!i#XX!m#XX!o#XX!p#XX!q#XX!r#XX!s#XX!u#XX!v#XX!z#XX!|#XX#O#XX#Q#XX#S#XX#U#XX#W#XX#Y#XX#[#XX#^#XX#`#XX#b#XX#d#XX#f#XX#h#XX#j#XX#l#XX#n#XX#p#XX#r#XX#t#XX#v#XX#x#XX#z#XX#|#XX$O#XX$Q#XX$S#XX$X#XX$]#XX$c#XX$g#XX$i#XX$l#XX$m#XX`#XXa#XXb#XX~O$^!dOZ#ZX^#ZXd#ZXf#ZXh#ZXj#ZXk#ZXm#ZXp#ZXs#ZXu#ZXw#ZXy#ZX{#ZX}#ZX!]#ZX!`#ZX!b#ZX!i#ZX!m#ZX!o#ZX!p#ZX!q#ZX!r#ZX!s#ZX!u#ZX!v#ZX!z#ZX!|#ZX#O#ZX#Q#ZX#S#ZX#U#ZX#W#ZX#Y#ZX#[#ZX#^#ZX#`#ZX#b#ZX#d#ZX#f#ZX#h#ZX#j#ZX#l#ZX#n#ZX#p#ZX#r#ZX#t#ZX#v#ZX#x#ZX#z#ZX#|#ZX$O#ZX$Q#ZX$S#ZX$X#ZX$]#ZX$c#ZX$g#ZX$i#ZX$l#ZX$m#ZX`#ZXa#ZXb#ZX~O$^!dOZ#]X^#]Xd#]Xf#]Xh#]Xj#]Xk#]Xm#]Xp#]Xs#]Xu#]Xw#]Xy#]X{#]X}#]X!]#]X!`#]X!b#]X!i#]X!m#]X!o#]X!p#]X!q#]X!r#]X!s#]X!u#]X!v#]X!z#]X!|#]X#O#]X#Q#]X#S#]X#U#]X#W#]X#Y#]X#[#]X#^#]X#`#]X#b#]X#d#]X#f#]X#h#]X#j#]X#l#]X#n#]X#p#]X#r#]X#t#]X#v#]X#x#]X#z#]X#|#]X$O#]X$Q#]X$S#]X$X#]X$]#]X$c#]X$g#]X$i#]X$l#]X$m#]X`#]Xa#]Xb#]X~O$^!dOZ#_X^#_Xd#_Xf#_Xh#_Xj#_Xk#_Xm#_Xp#_Xs#_Xu#_Xw#_Xy#_X{#_X}#_X!]#_X!`#_X!b#_X!i#_X!m#_X!o#_X!p#_X!q#_X!r#_X!s#_X!u#_X!v#_X!z#_X!|#_X#O#_X#Q#_X#S#_X#U#_X#W#_X#Y#_X#[#_X#^#_X#`#_X#b#_X#d#_X#f#_X#h#_X#j#_X#l#_X#n#_X#p#_X#r#_X#t#_X#v#_X#x#_X#z#_X#|#_X$O#_X$Q#_X$S#_X$X#_X$]#_X$c#_X$g#_X$i#_X$l#_X$m#_X`#_Xa#_Xb#_X~O$^!dOZ#aX^#aXd#aXf#aXh#aXj#aXk#aXm#aXp#aXs#aXu#aXw#aXy#aX{#aX}#aX!]#aX!`#aX!b#aX!i#aX!m#aX!o#aX!p#aX!q#aX!r#aX!s#aX!u#aX!v#aX!z#aX!|#aX#O#aX#Q#aX#S#aX#U#aX#W#aX#Y#aX#[#aX#^#aX#`#aX#b#aX#d#aX#f#aX#h#aX#j#aX#l#aX#n#aX#p#aX#r#aX#t#aX#v#aX#x#aX#z#aX#|#aX$O#aX$Q#aX$S#aX$X#aX$]#aX$c#aX$g#aX$i#aX$l#aX$m#aX`#aXa#aXb#aX~O$^!dOZ#cX^#cXd#cXf#cXh#cXj#cXk#cXm#cXp#cXs#cXu#cXw#cXy#cX{#cX}#cX!]#cX!`#cX!b#cX!i#cX!m#cX!o#cX!p#cX!q#cX!r#cX!s#cX!u#cX!v#cX!z#cX!|#cX#O#cX#Q#cX#S#cX#U#cX#W#cX#Y#cX#[#cX#^#cX#`#cX#b#cX#d#cX#f#cX#h#cX#j#cX#l#cX#n#cX#p#cX#r#cX#t#cX#v#cX#x#cX#z#cX#|#cX$O#cX$Q#cX$S#cX$X#cX$]#cX$c#cX$g#cX$i#cX$l#cX$m#cX`#cXa#cXb#cX~O$^!dOZ#eX^#eXd#eXf#eXh#eXj#eXk#eXm#eXp#eXs#eXu#eXw#eXy#eX{#eX}#eX!]#eX!`#eX!b#eX!i#eX!m#eX!o#eX!p#eX!q#eX!r#eX!s#eX!u#eX!v#eX!z#eX!|#eX#O#eX#Q#eX#S#eX#U#eX#W#eX#Y#eX#[#eX#^#eX#`#eX#b#eX#d#eX#f#eX#h#eX#j#eX#l#eX#n#eX#p#eX#r#eX#t#eX#v#eX#x#eX#z#eX#|#eX$O#eX$Q#eX$S#eX$X#eX$]#eX$c#eX$g#eX$i#eX$l#eX$m#eX`#eXa#eXb#eX~O$^!dOZ#gX^#gXd#gXf#gXh#gXj#gXk#gXm#gXp#gXs#gXu#gXw#gXy#gX{#gX}#gX!]#gX!`#gX!b#gX!i#gX!m#gX!o#gX!p#gX!q#gX!r#gX!s#gX!u#gX!v#gX!z#gX!|#gX#O#gX#Q#gX#S#gX#U#gX#W#gX#Y#gX#[#gX#^#gX#`#gX#b#gX#d#gX#f#gX#h#gX#j#gX#l#gX#n#gX#p#gX#r#gX#t#gX#v#gX#x#gX#z#gX#|#gX$O#gX$Q#gX$S#gX$X#gX$]#gX$c#gX$g#gX$i#gX$l#gX$m#gX`#gXa#gXb#gX~O$^!dOZ#iX^#iXd#iXf#iXh#iXj#iXk#iXm#iXp#iXs#iXu#iXw#iXy#iX{#iX}#iX!]#iX!`#iX!b#iX!i#iX!m#iX!o#iX!p#iX!q#iX!r#iX!s#iX!u#iX!v#iX!z#iX!|#iX#O#iX#Q#iX#S#iX#U#iX#W#iX#Y#iX#[#iX#^#iX#`#iX#b#iX#d#iX#f#iX#h#iX#j#iX#l#iX#n#iX#p#iX#r#iX#t#iX#v#iX#x#iX#z#iX#|#iX$O#iX$Q#iX$S#iX$X#iX$]#iX$c#iX$g#iX$i#iX$l#iX$m#iX`#iXa#iXb#iX~O$^!dOZ#kX^#kXd#kXf#kXh#kXj#kXk#kXm#kXp#kXs#kXu#kXw#kXy#kX{#kX}#kX!]#kX!`#kX!b#kX!i#kX!m#kX!o#kX!p#kX!q#kX!r#kX!s#kX!u#kX!v#kX!z#kX!|#kX#O#kX#Q#kX#S#kX#U#kX#W#kX#Y#kX#[#kX#^#kX#`#kX#b#kX#d#kX#f#kX#h#kX#j#kX#l#kX#n#kX#p#kX#r#kX#t#kX#v#kX#x#kX#z#kX#|#kX$O#kX$Q#kX$S#kX$X#kX$]#kX$c#kX$g#kX$i#kX$l#kX$m#kX`#kXa#kXb#kX~O$^!dOZ#mX^#mXd#mXf#mXh#mXj#mXk#mXm#mXp#mXs#mXu#mXw#mXy#mX{#mX}#mX!]#mX!`#mX!b#mX!i#mX!m#mX!o#mX!p#mX!q#mX!r#mX!s#mX!u#mX!v#mX!z#mX!|#mX#O#mX#Q#mX#S#mX#U#mX#W#mX#Y#mX#[#mX#^#mX#`#mX#b#mX#d#mX#f#mX#h#mX#j#mX#l#mX#n#mX#p#mX#r#mX#t#mX#v#mX#x#mX#z#mX#|#mX$O#mX$Q#mX$S#mX$X#mX$]#mX$c#mX$g#mX$i#mX$l#mX$m#mX`#mXa#mXb#mX~O$^!dOZ#oX^#oXd#oXf#oXh#oXj#oXk#oXm#oXp#oXs#oXu#oXw#oXy#oX{#oX}#oX!]#oX!`#oX!b#oX!i#oX!m#oX!o#oX!p#oX!q#oX!r#oX!s#oX!u#oX!v#oX!z#oX!|#oX#O#oX#Q#oX#S#oX#U#oX#W#oX#Y#oX#[#oX#^#oX#`#oX#b#oX#d#oX#f#oX#h#oX#j#oX#l#oX#n#oX#p#oX#r#oX#t#oX#v#oX#x#oX#z#oX#|#oX$O#oX$Q#oX$S#oX$X#oX$]#oX$c#oX$g#oX$i#oX$l#oX$m#oX`#oXa#oXb#oX~O$^!dOZ#qX^#qXd#qXf#qXh#qXj#qXk#qXm#qXp#qXs#qXu#qXw#qXy#qX{#qX}#qX!]#qX!`#qX!b#qX!i#qX!m#qX!o#qX!p#qX!q#qX!r#qX!s#qX!u#qX!v#qX!z#qX!|#qX#O#qX#Q#qX#S#qX#U#qX#W#qX#Y#qX#[#qX#^#qX#`#qX#b#qX#d#qX#f#qX#h#qX#j#qX#l#qX#n#qX#p#qX#r#qX#t#qX#v#qX#x#qX#z#qX#|#qX$O#qX$Q#qX$S#qX$X#qX$]#qX$c#qX$g#qX$i#qX$l#qX$m#qX`#qXa#qXb#qX~O$^!dOZ#sX^#sXd#sXf#sXh#sXj#sXk#sXm#sXp#sXs#sXu#sXw#sXy#sX{#sX}#sX!]#sX!`#sX!b#sX!i#sX!m#sX!o#sX!p#sX!q#sX!r#sX!s#sX!u#sX!v#sX!z#sX!|#sX#O#sX#Q#sX#S#sX#U#sX#W#sX#Y#sX#[#sX#^#sX#`#sX#b#sX#d#sX#f#sX#h#sX#j#sX#l#sX#n#sX#p#sX#r#sX#t#sX#v#sX#x#sX#z#sX#|#sX$O#sX$Q#sX$S#sX$X#sX$]#sX$c#sX$g#sX$i#sX$l#sX$m#sX`#sXa#sXb#sX~O$^!dOZ#uX^#uXd#uXf#uXh#uXj#uXk#uXm#uXp#uXs#uXu#uXw#uXy#uX{#uX}#uX!]#uX!`#uX!b#uX!i#uX!m#uX!o#uX!p#uX!q#uX!r#uX!s#uX!u#uX!v#uX!z#uX!|#uX#O#uX#Q#uX#S#uX#U#uX#W#uX#Y#uX#[#uX#^#uX#`#uX#b#uX#d#uX#f#uX#h#uX#j#uX#l#uX#n#uX#p#uX#r#uX#t#uX#v#uX#x#uX#z#uX#|#uX$O#uX$Q#uX$S#uX$X#uX$]#uX$c#uX$g#uX$i#uX$l#uX$m#uX`#uXa#uXb#uX~O$^!dOZ#wX^#wXd#wXf#wXh#wXj#wXk#wXm#wXp#wXs#wXu#wXw#wXy#wX{#wX}#wX!]#wX!`#wX!b#wX!i#wX!m#wX!o#wX!p#wX!q#wX!r#wX!s#wX!u#wX!v#wX!z#wX!|#wX#O#wX#Q#wX#S#wX#U#wX#W#wX#Y#wX#[#wX#^#wX#`#wX#b#wX#d#wX#f#wX#h#wX#j#wX#l#wX#n#wX#p#wX#r#wX#t#wX#v#wX#x#wX#z#wX#|#wX$O#wX$Q#wX$S#wX$X#wX$]#wX$c#wX$g#wX$i#wX$l#wX$m#wX`#wXa#wXb#wX~O$^!dOZ#yX^#yXd#yXf#yXh#yXj#yXk#yXm#yXp#yXs#yXu#yXw#yXy#yX{#yX}#yX!]#yX!`#yX!b#yX!i#yX!m#yX!o#yX!p#yX!q#yX!r#yX!s#yX!u#yX!v#yX!z#yX!|#yX#O#yX#Q#yX#S#yX#U#yX#W#yX#Y#yX#[#yX#^#yX#`#yX#b#yX#d#yX#f#yX#h#yX#j#yX#l#yX#n#yX#p#yX#r#yX#t#yX#v#yX#x#yX#z#yX#|#yX$O#yX$Q#yX$S#yX$X#yX$]#yX$c#yX$g#yX$i#yX$l#yX$m#yX`#yXa#yXb#yX~O$^!dOZ#{X^#{Xd#{Xf#{Xh#{Xj#{Xk#{Xm#{Xp#{Xs#{Xu#{Xw#{Xy#{X{#{X}#{X!]#{X!`#{X!b#{X!i#{X!m#{X!o#{X!p#{X!q#{X!r#{X!s#{X!u#{X!v#{X!z#{X!|#{X#O#{X#Q#{X#S#{X#U#{X#W#{X#Y#{X#[#{X#^#{X#`#{X#b#{X#d#{X#f#{X#h#{X#j#{X#l#{X#n#{X#p#{X#r#{X#t#{X#v#{X#x#{X#z#{X#|#{X$O#{X$Q#{X$S#{X$X#{X$]#{X$c#{X$g#{X$i#{X$l#{X$m#{X`#{Xa#{Xb#{X~O$^!dOZ#}X^#}Xd#}Xf#}Xh#}Xj#}Xk#}Xm#}Xp#}Xs#}Xu#}Xw#}Xy#}X{#}X}#}X!]#}X!`#}X!b#}X!i#}X!m#}X!o#}X!p#}X!q#}X!r#}X!s#}X!u#}X!v#}X!z#}X!|#}X#O#}X#Q#}X#S#}X#U#}X#W#}X#Y#}X#[#}X#^#}X#`#}X#b#}X#d#}X#f#}X#h#}X#j#}X#l#}X#n#}X#p#}X#r#}X#t#}X#v#}X#x#}X#z#}X#|#}X$O#}X$Q#}X$S#}X$X#}X$]#}X$c#}X$g#}X$i#}X$l#}X$m#}X`#}Xa#}Xb#}X~O$^!dOZ$PX^$PXd$PXf$PXh$PXj$PXk$PXm$PXp$PXs$PXu$PXw$PXy$PX{$PX}$PX!]$PX!`$PX!b$PX!i$PX!m$PX!o$PX!p$PX!q$PX!r$PX!s$PX!u$PX!v$PX!z$PX!|$PX#O$PX#Q$PX#S$PX#U$PX#W$PX#Y$PX#[$PX#^$PX#`$PX#b$PX#d$PX#f$PX#h$PX#j$PX#l$PX#n$PX#p$PX#r$PX#t$PX#v$PX#x$PX#z$PX#|$PX$O$PX$Q$PX$S$PX$X$PX$]$PX$c$PX$g$PX$i$PX$l$PX$m$PX`$PXa$PXb$PX~O$^!dOZ$RX^$RXd$RXf$RXh$RXj$RXk$RXm$RXp$RXs$RXu$RXw$RXy$RX{$RX}$RX!]$RX!`$RX!b$RX!i$RX!m$RX!o$RX!p$RX!q$RX!r$RX!s$RX!u$RX!v$RX!z$RX!|$RX#O$RX#Q$RX#S$RX#U$RX#W$RX#Y$RX#[$RX#^$RX#`$RX#b$RX#d$RX#f$RX#h$RX#j$RX#l$RX#n$RX#p$RX#r$RX#t$RX#v$RX#x$RX#z$RX#|$RX$O$RX$Q$RX$S$RX$X$RX$]$RX$c$RX$g$RX$i$RX$l$RX$m$RX`$RXa$RXb$RX~O$g#vO$h!]O~O$h!]O$i#wO~O$h!]O$k#xO~O$`#yO$a#yO~O$b#{O$n#{O~O$^!dOZTa^TadTafTahTajTakTamTapTasTauTawTayTa{Ta}Ta!]Ta!`Ta!bTa!iTa!mTa!oTa!pTa!qTa!rTa!sTa!uTa!vTa!zTa!|Ta#OTa#QTa#STa#UTa#WTa#YTa#[Ta#^Ta#`Ta#bTa#dTa#fTa#hTa#jTa#lTa#nTa#pTa#rTa#tTa#vTa#xTa#zTa#|Ta$OTa$QTa$STa$XTa$]Ta$cTa$gTa$iTa$lTa$mTa`TaaTabTa~O$^!dOZWa^WadWafWahWajWakWamWapWasWauWawWayWa{Wa}Wa!]Wa!`Wa!bWa!iWa!mWa!oWa!pWa!qWa!rWa!sWa!uWa!vWa!zWa!|Wa#OWa#QWa#SWa#UWa#WWa#YWa#[Wa#^Wa#`Wa#bWa#dWa#fWa#hWa#jWa#lWa#nWa#pWa#rWa#tWa#vWa#xWa#zWa#|Wa$OWa$QWa$SWa$XWa$]Wa$cWa$gWa$iWa$lWa$mWa`WaaWabWa~O[$OOZYa^YadYafYahYajYakYamYapYasYauYawYayYa{Ya}Ya!]Ya!`Ya!bYa!iYa!mYa!oYa!pYa!qYa!rYa!sYa!uYa!vYa!zYa!|Ya#OYa#QYa#SYa#UYa#WYa#YYa#[Ya#^Ya#`Ya#bYa#dYa#fYa#hYa#jYa#lYa#nYa#pYa#rYa#tYa#vYa#xYa#zYa#|Ya$OYa$QYa$SYa$XYa$]Ya$cYa$gYa$iYa$lYa$mYa`YaaYabYa~O`_Xa_Xb_X~P`O`$QOa$SOb$RO~OZ$WO~O!^$_O~O$d$`O$e$aO~O$gPO~O$iQO~O$`#yO$a#yO$bna$nnaZna^nadnafnahnajnaknamnapnasnaunawnayna{na}na!]na!`na!bna!ina!mna!ona!pna!qna!rna!sna!una!vna!zna!|na#Ona#Qna#Sna#Una#Wna#Yna#[na#^na#`na#bna#dna#fna#hna#jna#lna#nna#pna#rna#tna#vna#xna#zna#|na$Ona$Qna$Sna$Xna$]na$cna$gna$ina$lna$mna`naanabna~O`$QOa$kOb$jO~Ob$nO~O$b$oO~Ob$tO~O$f$uO~Ob$vO~OQP$h!s$k!r!o!r$^!v!q!b!v~",
  goto: ".[$pPPPPP$qP%Z$qP$qPP$qP(RPPP$qP$qP$qP$qPP$qP(b(nP(w$qP$qP$qP$qP$qP$qP$qP$qP$qP$qP$qP$qP$qPP$qP$qPP)O$qP)k$qP$qP$qP$qPPPPP*WPP$q$q*pP*pP*pP*pP*pP*pP*pP*pP*pP*pP*pP*pP*pP*pP*pP*pP*pP*pP*pP*pP*pP*pP*pP*pP*pP*pP*pP*pP+Y+h+n+tPPP,SPPPPPPPPPPPPP-YPPPP-r}XOZ^_`abeh!m!t!u!z!{!|!}#O#P$O$Q$S$kY!fUc!v#y$_Q!l]Q!tdQ!wgQ!yiQ#QjQ#RkQ#UmQ#XoQ#YpQ#ZqQ#[rQ#]sQ#^tQ#_uQ#`vQ#awQ#bxQ#cyQ#dzQ#e{Q#f|Q#g}Q#h!OQ#i!PQ#j!QQ#k!RQ#l!SQ#m!TQ#n!UQ#o!VQ#p!WQ#q!XQ#r!YQ#s!ZQ#t![Q#|!jQ#}!kQ$d#VQ$e#WQ$p$WR$r$aQ!n^Q$T!tQ$l$QQ$m$SR$s$kQ!hUQ!scQ$V!vR$q$_W!gUc!v$_R$f#yZ!fUc!v#y$_|SOZ^_`abeh!m!t!u!z!{!|!}#O#P$O$Q$S$kR$b#S|SOZ^_`abeh!m!t!u!z!{!|!}#O#P$O$Q$S$kR$c#T}SOZ^_`abeh!m!t!u!z!{!|!}#O#P$O$Q$S$k}VOZ^_`abeh!m!t!u!z!{!|!}#O#P$O$Q$S$kQZOS!iZ!mZ!m^!t$Q$S$kQ$P!nR$i$PQ#z!gR$g#zQ!^PQ!`QQ!bRV#u!^!`!b`YOZ^!m!t$Q$S$kQ!o_Q!p`Q!qaQ!rbQ!ueQ!xhQ$U!uQ$X!zQ$Y!{Q$Z!|Q$[!}Q$]#OQ$^#PR$h$O}TOZ^_`abeh!m!t!u!z!{!|!}#O#P$O$Q$S$k}WOZ^_`abeh!m!t!u!z!{!|!}#O#P$O$Q$S$k",
  nodeNames: "⚠ LineComment BlockComment StringLiteral Rel InlineStatement inline VariableName InlineFunction function InStatement in where IfStatement if Body then else end IffStatement iff NotStatement not XorStatement xor AndOrStatement and or FromStatement from MultipleArguments RelArgument RelnameLiteral EmptyRelation ModuleStatement module ForallStatement forall ForEachStatement foreach ForInStatement for ImpliesStatement implies DefineStatement def ImportDefinitionStatement abort ExportDefinitionStatement export ConfigDefinitionStatement config DeleteDefinitionStatement delete InsertDefinitionStatement insert OutputDefinitionStatement output WithUseStatement with use ConstraintStatement ic RawStringLiteral LineStart raw MultilineRawStringLiteral DocStringLiteral doc MultilineStringLiteral EntityStatement entity EntityTypeStatement type ValueTypeStatement value ExpressionStatement Number BooleanLiteral Operator DateLiteral DatetimeLiteral MultilineBlockComment RelnameStringLiteral ValueTypeLiteral ParenStatement TypeStatement IntType Int StringType String AnyType Any NumberType Number CharType Char MissingType Missing FloatingType Floating UnsignedIntType UnsignedInt SignedIntType SignedInt RationalType Rational FixedDecimalType FixedDecimal RelNameType RelName EntityType Entity AutoNumberType AutoNumber HashType Hash FilePosType FilePos DateType Date DateTimeType DateTime YearType Year MonthType Month WeekType Week DayType Day HourType Hour MinuteType Minute SecondType Second MillisecondType Millisecond MicrosecondType Microsecond NanosecondType Nanosecond",
  maxTerm: 169,
  nodeProps: [
    ["group", -11,32,66,69,77,78,79,80,81,82,83,84,"Expression",-28,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133,135,137,139,141,"Type"]
  ],
  skippedNodes: [0,1,2,3],
  repeatNodeCount: 4,
  tokenData: "$%Z~R#^OX'}XY*nYZ+eZ]'}]^*n^p'}pq*nqr+xrs-jsu'}uv,svw'}wx7jxy?nyz@ez{,s{|A[|}CS}!O,s!O!PCy!P!QJP!Q!R!(V!R![!Gg![!]!Hv!]!^#;R!^!_#;x!_!`#=|!`!a#>u!a!b'}!b!c#?r!c!}#@i!}#O#BU#O#P'}#P#Q#B{#Q#R#Cr#R#S#Ha#S#T'}#T#U#Iz#U#c#@i#c#d#N}#d#o#@i#o#p$!p#p#q'}#q#r$$d#r$r'}$r$s,s$s%o'}%o%p,s%p&a'}&a&b,s&b4w'}4w5b#@i5b5i'}5i6S#@i6S%#t'}%#t%#u,s%#u%#v'}%#v%#w,s%#w%%U'}%%U%%V,s%%V%%W'}%%W%%X,s%%X%%Y'}%%Y%%Z,s%%Z%%['}%%[%%],s%%]%&b'}%&b%&c,s%&c%'R'}%'R%'S,s%'S%'T,s%'T%'U,s%'U%'V,s%'V%'h'}%'h%'i,s%'i%'t'}%'t%'u,s%'u%(^'}%(^%(_,s%(_%(`,s%(`%(a,s%(a%(b'}%(b%(c,s%(c%(d,s%(d%(x'}%(x%(y,s%(y%(z,s%(z%({,s%({%(|,s%(|%)Q'}%)Q%)R,s%)R%)S,s%)S%)U'}%)U%)V,s%)V%)W,s%)W%)c'}%)c%)d,s%)d%)e,s%)e%)f,s%)f%)g'}%)g%)h,s%)h%)i'}%)i%)j,s%)j%*]'}%*]%*^,s%*^~'}Q(SY$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts~'}Q(wS$hQXY(rYZ(r]^(rpq(rQ)WTOY)gYZ*YZr)grs*_s~)gQ)jYOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts~'}Q*_O$hQQ*bSOY)gYZ*YZr)gs~)gV*uY$ZT$hQOX'}XY*nYZ+eZ]'}]^*n^p'}pq*nqr'}rs)Ts~'}V+lS$ZT$hQXY+eYZ+e]^+epq+eR+}[$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!_'}!_!`,s!`~'}R,zY$hQ!qPOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts~'}~-oVR~OY.UYZ5cZr.Urs5js#O.U#O#P6u#P~.U~.][$g~R~OX/RXY/RYZ(rZ]/R]^/R^p/Rpq/Rqr/Rrs0Os#O/R#O#P0d#P~/R~/Y[$hQR~OX/RXY/RYZ(rZ]/R]^/R^p/Rpq/Rqr/Rrs0Os#O/R#O#P0d#P~/R~0TTR~OY)gYZ*YZr)grs*_s~)g~0iY$hQOX/RXY/RYZ1XZ]/R]^/R^p/Rpq/Rqr/Rrs2xs~/R~1`[$hQR~OX2UXY1XYZ(rZ]2U]^1X^p2Upq1Xqr2Urs2ms#O2U#O#P2r#P~2U~2ZUR~OY2UZr2Urs2ms#O2U#O#P2r#P~2U~2rOR~~2uPO~2U~2}VR~OY3dYZ*YZr3drs4_s#O3d#O#P4p#P~3d~3i[R~OX/RXY/RYZ(rZ]/R]^/R^p/Rpq/Rqr/Rrs0Os#O/R#O#P0d#P~/R~4dSR~OY)gYZ*YZr)gs~)g~4sYOX/RXY/RYZ1XZ]/R]^/R^p/Rpq/Rqr/Rrs2xs~/R~5jO$g~$hQ~5oTR~OY)gYZ*YZr)grs6Os~)g~6TR$i~Or6^rs6cs~6^~6cO$g~~6fPrs6i~6lROr6^rs6cs~6^~6zY$g~OX/RXY/RYZ1XZ]/R]^/R^p/Rpq/Rqr/Rrs2xs~/R~7q^$hQR~OX7jXY7jYZ(rZ]7j]^7j^p7jpq7jqr7jrs8msw7jwx:`x#O7j#O#P;V#P~7j~8rXR~OY9_YZ*YZr9_rs=fsw9_wx>Wx#O9_#O#P>{#P~9_~9d^R~OX7jXY7jYZ(rZ]7j]^7j^p7jpq7jqr7jrs8msw7jwx:`x#O7j#O#P;V#P~7j~:gY$hQR~OX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts~'}~;[Y$hQOX7jXY7jYZ;zZ]7j]^7j^p7jpq7jqr7jrs8ms~7j~<R[$hQR~OX<wXY;zYZ(rZ]<w]^;z^p<wpq;zqw<wwx2mx#O<w#O#P=`#P~<w~<|UR~OY<wZw<wwx2mx#O<w#O#P=`#P~<w~=cPO~<w~=kXR~OY9_YZ*YZr9_rs<wsw9_wx>Wx#O9_#O#P>{#P~9_~>]YR~OX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts~'}~?OYOX7jXY7jYZ;zZ]7j]^7j^p7jpq7jqr7jrs8ms~7jR?uY$mP$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts~'}R@lY$nP$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts~'}RAc[$hQ!qPOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts{'}{|BX|~'}RB^[$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!`'}!`!a,s!a~'}RCZY$`P$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts~'}RDQ^$hQ!qPOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!O'}!O!PD|!P!Q'}!Q![Ew![~'}RER[$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!O'}!O!P,s!P~'}RFO`$hQ!oPOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![Ew![!g'}!g!hGQ!h#X'}#X#YGQ#Y~'}RGV`$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts{'}{|HX|}'}}!OHX!O!Q'}!Q![IS![~'}RH^[$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![IS![~'}RIZ[$hQ!oPOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![IS![~'}~JW^$hQ!qPOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Tsz'}z{KS{!P'}!P!Q!%f!Q~'}~K][$l~$hQ$kQOXLRXYLRYZL|Z]LR]^LR^pLRpqLRqrLRrsNfszLRz{! w{~LRVLW[$hQOXLRXYLRYZL|Z]LR]^LR^pLRpqLRqrLRrsNfszLRz{! w{~LRVMRY$hQOXMqXYL|YZL|Z]Mq]^L|^pMqpqL|qzMqz{M}{~MqTMtROzMqz{M}{~MqTNQTOzMqz{M}{!PMq!P!QNa!Q~MqTNfOQTVNiVOY! OYZ!#oZr! Ors!#}sz! Oz{!$g{~! OV! R[OXLRXYLRYZL|Z]LR]^LR^pLRpqLRqrLRrsNfszLRz{! w{~LRV! |^$hQOXLRXYLRYZL|Z]LR]^LR^pLRpqLRqrLRrsNfszLRz{! w{!PLR!P!Q!!x!Q~LRV!#PYQT$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts~'}V!#tR$hQOzMqz{M}{~MqV!$QVOY! OYZ!#oZr! OrsMqsz! Oz{!$g{~! OV!$j^OXLRXYLRYZL|Z]LR]^LR^pLRpqLRqrLRrsNfszLRz{! w{!PLR!P!Q!!x!Q~LRV!%mYPT$hQOX!%fXY!%fYZ(rZ]!%f]^!%f^p!%fpq!%fqr!%frs!&]s~!%fV!&bTPTOY!&qYZ*YZr!&qrs!'fs~!&qV!&vYPTOX!%fXY!%fYZ(rZ]!%f]^!%f^p!%fpq!%fqr!%frs!&]s~!%fV!'kTPTOY!&qYZ*YZr!&qrs!'zs~!&qT!(PQPTOY!'zZ~!'zR!(^f$hQ!oPOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!O'}!O!P!)r!P!Q'}!Q![!*y![!g'}!g!hGQ!h#X'}#X#YGQ#Y#c'}#c#d!C_#d#l'}#l#m!EV#m~'}R!)w`$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![!)r![!g'}!g!hGQ!h#X'}#X#YGQ#Y~'}R!+Qb$hQ!oPOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!O'}!O!P!)r!P!Q'}!Q![!,Y![!g'}!g!hGQ!h#X'}#X#YGQ#Y~'}R!,ab$hQ!oPOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!O'}!O!P!)r!P!Q'}!Q![!-i![!g'}!g!hGQ!h#X'}#X#YGQ#Y~'}R!-pc$hQ!oPOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts}'}}!O!.{!O!P!)r!P!Q'}!Q![!BO![!g'}!g!hGQ!h#X'}#X#YGQ#Y~'}R!/Q[$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![!/v![~'}R!/{[$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![!0q![~'}R!0v[$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts}'}}!O!1l!O~'}R!1q[$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![!2g![~'}R!2l[$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![!3b![~'}R!3i[$hQ!rPOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!v'}!v!w!4_!w~'}R!4d[$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![!5Y![~'}R!5_[$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![!6T![~'}R!6Y[$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!['}![!]!7O!]~'}R!7T[$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![!7y![~'}R!8O[$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![!8t![~'}R!8y[$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!['}![!]!9o!]~'}R!9t[$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![!:j![~'}R!:o[$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![!;e![~'}R!;jb$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts{'}{|!<r|}'}}!O!<r!O!Q'}!Q![!=m![!|'}!|!}!AX!}~'}R!<w[$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![!=m![~'}R!=r[$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![!>h![~'}R!>m[$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!['}![!]!?c!]~'}R!?h[$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![!@^![~'}R!@c[$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![!AX![~'}R!A`Y$hQ!sPOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts~'}R!BVb$hQ!oPOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!O'}!O!P!)r!P!Q'}!Q![!BO![!g'}!g!hGQ!h#X'}#X#YGQ#Y~'}R!Cd[$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q!Y!DY!Y~'}R!Da[$hQ!oPOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q!Y!DY!Y~'}R!E[`$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![!F^![!c'}!c!i!F^!i#T'}#T#Z!F^#Z~'}R!Fe`$hQ!oPOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![!F^![!c'}!c!i!F^!i#T'}#T#Z!F^#Z~'}R!Gnb$hQ!oPOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!O'}!O!P!)r!P!Q'}!Q![!*y![!g'}!g!hGQ!h#X'}#X#YGQ#Y~'}R!H{g$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs!Jds!`'}!`!a,s!a!c'}!c!}#7t!}#O#9a#O#R'}#R#S#7t#S#T'}#T#o#7t#o4w'}4w5b#7t5b5i'}5i6S#7t6S~'}R!JgZOY)gYZ!KYZ])g]^#!z^r)grs#&^s#O)g#O#P#'U#P#Q)g#Q#R#!z#R~)gR!K_T$hQYZ!Kn]^!Knrs!LQ#O#P!Lf#Q#R!KnP!KqTYZ!Kn]^!Knrs!LQ#O#P!Lf#Q#R!KnP!LVT!uPYZ!Kn]^!Knrs!LQ#O#P!Lf#Q#R!KnP!LieYZ!Kn]^!Knrs!LQ!Q!R!Mz!R!S!Mz!S!T!Mz!T!U!Mz!U!Y!Na!w!x!Nv#O#P!Lf#Q#R!Kn#T#U!Kn#U#V!Kn#X#Y!Kn#Y#Z!Kn#b#c!Kn#f#g!Kn#h#i!Kn#i#j# x#j#k!Kn#l#m#!bP!M}UYZ!Kn]^!Knrs!LQ!Q!Y!Na#O#P!Lf#Q#R!KnP!NdUYZ!Kn]^!Knrs!LQ!Q!Y!Kn#O#P!Lf#Q#R!KnP!NyR!Q![# S!c!i# S#T#Z# SP# VR!Q![# `!c!i# `#T#Z# `P# cR!Q![# l!c!i# l#T#Z# lP# oR!Q![# x!c!i# x#T#Z# xP# {R!Q![#!U!c!i#!U#T#Z#!UP#!XR!Q![#!b!c!i#!b#T#Z#!bP#!eR!Q![#!n!c!i#!n#T#Z#!nP#!qR!Q![!Kn!c!i!Kn#T#Z!KnR#!}^OX'}XY'}YZ##yZ]'}]^#$e^p'}pq'}qr'}rs#%fs#O'}#O#P#+}#P#Q'}#Q#R#$e#R~'}R#$OV$hQXY(rYZ##y]^##ypq(rrs!LQ#O#P!Lf#Q#R!KnR#$j^$hQOX'}XY'}YZ##yZ]'}]^#$e^p'}pq'}qr'}rs#%fs#O'}#O#P#+}#P#Q'}#Q#R#$e#R~'}R#%kZ!uPOY)gYZ!KYZ])g]^#!z^r)grs#&^s#O)g#O#P#'U#P#Q)g#Q#R#!z#R~)gR#&cZ!uPOY)gYZ!KYZ])g]^#!z^r)grs!LQs#O)g#O#P#'U#P#Q)g#Q#R#!z#R~)gR#'XvOX'}XY'}YZ##yZ]'}]^#$e^p'}pq'}qr'}rs#%fs!Q'}!Q!R#)o!R!S#)o!S!T#)o!T!U#)o!U!Y#*v!Y!w'}!w!x#.j!x#O'}#O#P#+}#P#Q'}#Q#R#$e#R#T'}#T#U#$e#U#V#$e#V#X'}#X#Y#$e#Y#Z#$e#Z#b'}#b#c#$e#c#f'}#f#g#$e#g#h'}#h#i#$e#i#j#3W#j#k#$e#k#l'}#l#m#5f#m~'}R#)t`$hQOX'}XY'}YZ##yZ]'}]^#$e^p'}pq'}qr'}rs#%fs!Q'}!Q!Y#*v!Y#O'}#O#P#+}#P#Q'}#Q#R#$e#R~'}R#*{`$hQOX'}XY'}YZ##yZ]'}]^#$e^p'}pq'}qr'}rs#%fs!Q'}!Q!Y#$e!Y#O'}#O#P#+}#P#Q'}#Q#R#$e#R~'}R#,Sv$hQOX'}XY'}YZ##yZ]'}]^#$e^p'}pq'}qr'}rs#%fs!Q'}!Q!R#)o!R!S#)o!S!T#)o!T!U#)o!U!Y#*v!Y!w'}!w!x#.j!x#O'}#O#P#+}#P#Q'}#Q#R#$e#R#T'}#T#U#$e#U#V#$e#V#X'}#X#Y#$e#Y#Z#$e#Z#b'}#b#c#$e#c#f'}#f#g#$e#g#h'}#h#i#$e#i#j#3W#j#k#$e#k#l'}#l#m#5f#m~'}R#.o`$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![#/q![!c'}!c!i#/q!i#T'}#T#Z#/q#Z~'}R#/v`$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![#0x![!c'}!c!i#0x!i#T'}#T#Z#0x#Z~'}R#0}`$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![#2P![!c'}!c!i#2P!i#T'}#T#Z#2P#Z~'}R#2U`$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![#3W![!c'}!c!i#3W!i#T'}#T#Z#3W#Z~'}R#3]`$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![#4_![!c'}!c!i#4_!i#T'}#T#Z#4_#Z~'}R#4d`$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![#5f![!c'}!c!i#5f!i#T'}#T#Z#5f#Z~'}R#5k`$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![#6m![!c'}!c!i#6m!i#T'}#T#Z#6m#Z~'}R#6r`$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![#$e![!c'}!c!i#$e!i#T'}#T#Z#$e#Z~'}R#7{fpP$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![#7t![!c'}!c!}#7t!}#R'}#R#S#7t#S#T'}#T#o#7t#o4w'}4w5b#7t5b5i'}5i6S#7t6S~'}R#9f[$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts#P'}#P#Q#:[#Q~'}R#:cYpP$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts~'}R#;YY$aP$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts~'}R#<P`$hQ!qPOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts{'}{|#=R|!['}![!],s!]!_'}!_!`,s!`~'}R#=W[$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts{'}{|,s|~'}V#>VY$dS$hQ!qPOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts~'}R#>|[$hQ!qPOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!_'}!_!`,s!`~'}R#?yY$]P$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts~'}R#@pf$hQ$^POX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![#@i![!c'}!c!}#@i!}#R'}#R#S#@i#S#T'}#T#o#@i#o4w'}4w5b#@i5b5i'}5i6S#@i6S~'}R#B]Y$cP$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts~'}R#CSY$bP$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts~'}R#C{d$hQ!qP!bPOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!c'}!c!}#EZ!}#R'}#R#S#Fv#S#T'}#T#o#EZ#o4w'}4w5b#EZ5b5i'}5i6S#EZ6S~'}R#Ebf$hQ!vPOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![#EZ![!c'}!c!}#EZ!}#R'}#R#S#EZ#S#T'}#T#o#EZ#o4w'}4w5b#EZ5b5i'}5i6S#EZ6S~'}R#F{f$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![#EZ![!c'}!c!}#EZ!}#R'}#R#S#EZ#S#T'}#T#o#EZ#o4w'}4w5b#EZ5b5i'}5i6S#EZ6S~'}R#Hff$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![#@i![!c'}!c!}#@i!}#R'}#R#S#@i#S#T'}#T#o#@i#o4w'}4w5b#@i5b5i'}5i6S#@i6S~'}R#JRh$hQ$^POX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![#@i![!c'}!c!}#@i!}#R'}#R#S#@i#S#T'}#T#b#@i#b#c#Km#c#o#@i#o4w'}4w5b#@i5b5i'}5i6S#@i6S~'}R#Kth$hQ$^POX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![#@i![!c'}!c!}#@i!}#R'}#R#S#@i#S#T'}#T#W#@i#W#X#M`#X#o#@i#o4w'}4w5b#@i5b5i'}5i6S#@i6S~'}R#Mif$hQ$^P!qPOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![#@i![!c'}!c!}#@i!}#R'}#R#S#@i#S#T'}#T#o#@i#o4w'}4w5b#@i5b5i'}5i6S#@i6S~'}R$ Uh$hQ$^POX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts!Q'}!Q![#@i![!c'}!c!}#@i!}#R'}#R#S#@i#S#T'}#T#f#@i#f#g#M`#g#o#@i#o4w'}4w5b#@i5b5i'}5i6S#@i6S~'}V$!w[$eS$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts#q'}#q#r$#m#r~'}R$#tY$_P$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts~'}R$$kY$fP$hQOX'}XY'}YZ(rZ]'}]^'}^p'}pq'}qr'}rs)Ts~'}",
  tokenizers: [0, 1, 2],
  topRules: {"Rel":[0,4]},
  specialized: [{term: 152, get: value => spec_identifier[value] || -1}],
  tokenPrec: 7030
});

const autocompleteList = [
    { label: "Any", type: "type" },
    { label: "AutoNumber", type: "type" },
    { label: "Boolean", type: "type" },
    { label: "Char", type: "type" },
    { label: "Day", type: "type" },
    { label: "Date", type: "type" },
    { label: "DateTime", type: "type" },
    { label: "Year", type: "type" },
    { label: "Month", type: "type" },
    { label: "Week", type: "type" },
    { label: "Hour", type: "type" },
    { label: "Minute", type: "type" },
    { label: "Second", type: "type" },
    { label: "Millisecond", type: "type" },
    { label: "Microsecond", type: "type" },
    { label: "Nanosecond", type: "type" },
    { label: "Entity", type: "type" },
    { label: "Int", type: "type" },
    { label: "Number", type: "type" },
    { label: "Missing", type: "type" },
    { label: "Floating", type: "type" },
    { label: "UnsignedInt", type: "type" },
    { label: "SignedInt", type: "type" },
    { label: "Rational", type: "type" },
    { label: "FixedDecimal", type: "type" },
    { label: "Hash", type: "type" },
    { label: "FilePos", type: "type" },
    { label: "String", type: "type" },
    { label: "def", type: "keyword" },
    { label: "output", type: "interface" },
    { label: "insert", type: "interface" },
    { label: "delete", type: "interface" },
    { label: "export", type: "interface" },
    { label: "from", type: "keyword" },
    { label: "if", type: "keyword" },
    { label: "iff", type: "keyword" },
    { label: "then", type: "keyword" },
    { label: "else", type: "keyword" },
    { label: "end", type: "keyword" },
    { label: "exists", type: "keyword" },
    { label: "where", type: "keyword" },
    { label: "with", type: "keyword" },
    { label: "select", type: "keyword" },
    { label: "implies", type: "keyword" },
    { label: "use", type: "keyword" },
    { label: "forall", type: "keyword" },
    { label: "in", type: "keyword" },
    { label: "ic", type: "keyword" },
    { label: "not", type: "keyword" },
    { label: "and", type: "keyword" },
    { label: "or", type: "keyword" },
    { label: "xor", type: "keyword" },
    { label: "union", type: "keyword" },
    { label: "_flatten", type: "function" },
    { label: "abelian_group", type: "function" },
    { label: "abs", type: "function" },
    { label: "absorption_laws", type: "function" },
    { label: "acos", type: "function" },
    { label: "acosh", type: "function" },
    { label: "acot", type: "function" },
    { label: "add", type: "function" },
    { label: "antisymmetric", type: "function" },
    { label: "approximate_abelian_group", type: "function" },
    { label: "approximate_commutative_monoid", type: "function" },
    { label: "approximate_group", type: "function" },
    { label: "approximate_monoid", type: "function" },
    { label: "approximate_ring", type: "function" },
    { label: "approximate_semiring", type: "function" },
    { label: "approximately_associative", type: "function" },
    { label: "approximately_commutative", type: "function" },
    { label: "approximately_distributive", type: "function" },
    { label: "approximately_has_inverse", type: "function" },
    { label: "approximately_left_distributive", type: "function" },
    { label: "approximately_right_distributive", type: "function" },
    { label: "approximately_zero_annihilation", type: "function" },
    { label: "argmax", type: "function" },
    { label: "argmin", type: "function" },
    { label: "arity", type: "function" },
    { label: "asin", type: "function" },
    { label: "asinh", type: "function" },
    { label: "associative", type: "function" },
    { label: "atan", type: "function" },
    { label: "atanh", type: "function" },
    { label: "auto_number", type: "function" },
    { label: "binary_operator", type: "function" },
    { label: "binary_relation", type: "function" },
    { label: "binary_relation_substitution_laws", type: "function" },
    { label: "bitwise_and", type: "function" },
    { label: "bitwise_left_shift", type: "function" },
    { label: "bitwise_not", type: "function" },
    { label: "bitwise_or", type: "function" },
    { label: "bitwise_right_shift", type: "function" },
    { label: "bitwise_unsigned_right_shift", type: "function" },
    { label: "bitwise_xor", type: "function" },
    { label: "boolean_and", type: "function" },
    { label: "boolean_false", type: "function" },
    { label: "boolean_not", type: "function" },
    { label: "boolean_or", type: "function" },
    { label: "boolean_true", type: "function" },
    { label: "bottom", type: "function" },
    { label: "bounded_lattice", type: "function" },
    { label: "bounded_semilattice", type: "function" },
    { label: "byte", type: "function" },
    { label: "capture_group_by_index", type: "function" },
    { label: "capture_group_by_name", type: "function" },
    { label: "cart", type: "function" },
    { label: "cbrt", type: "function" },
    { label: "ceil", type: "function" },
    { label: "char", type: "function" },
    { label: "clamp", type: "function" },
    { label: "commutative", type: "function" },
    { label: "commutative_monoid", type: "function" },
    { label: "comparable", type: "function" },
    { label: "complement", type: "function" },
    { label: "concat", type: "function" },
    { label: "cos", type: "function" },
    { label: "cosh", type: "function" },
    { label: "cot", type: "function" },
    { label: "count", type: "function" },
    { label: "date_add", type: "function" },
    { label: "date_day", type: "function" },
    { label: "date_dayname", type: "function" },
    { label: "date_dayofquarter", type: "function" },
    { label: "date_dayofweek", type: "function" },
    { label: "date_dayofweekofmonth", type: "function" },
    { label: "date_dayofyear", type: "function" },
    { label: "date_daysinmonth", type: "function" },
    { label: "date_isleapyear", type: "function" },
    { label: "date_month", type: "function" },
    { label: "date_monthname", type: "function" },
    { label: "date_quarterofyear", type: "function" },
    { label: "date_subtract", type: "function" },
    { label: "date_week", type: "function" },
    { label: "date_year", type: "function" },
    { label: "dates_period_days", type: "function" },
    { label: "datetime_add", type: "function" },
    { label: "datetime_day", type: "function" },
    { label: "datetime_day_", type: "function" },
    { label: "datetime_dayname", type: "function" },
    { label: "datetime_dayofquarter", type: "function" },
    { label: "datetime_dayofweek", type: "function" },
    { label: "datetime_dayofweekofmonth", type: "function" },
    { label: "datetime_dayofyear", type: "function" },
    { label: "datetime_daysinmonth", type: "function" },
    { label: "datetime_hour", type: "function" },
    { label: "datetime_hour_", type: "function" },
    { label: "datetime_isleapyear", type: "function" },
    { label: "datetime_minute", type: "function" },
    { label: "datetime_minute_", type: "function" },
    { label: "datetime_month", type: "function" },
    { label: "datetime_month_", type: "function" },
    { label: "datetime_monthname", type: "function" },
    { label: "datetime_now", type: "function" },
    { label: "datetime_quarterofyear", type: "function" },
    { label: "datetime_second", type: "function" },
    { label: "datetime_subtract", type: "function" },
    { label: "datetime_to_nanoseconds", type: "function" },
    { label: "datetime_week", type: "function" },
    { label: "datetime_week_", type: "function" },
    { label: "datetime_year", type: "function" },
    { label: "datetime_year_", type: "function" },
    { label: "datetimes_period_milliseconds", type: "function" },
    { label: "decimal", type: "function" },
    { label: "decimal_bit_length", type: "function" },
    { label: "decimal_int_convert", type: "function" },
    { label: "decimal_precision", type: "function" },
    { label: "decode_base", type: "function" },
    { label: "default_value", type: "function" },
    { label: "deg", type: "function" },
    { label: "denominator", type: "function" },
    { label: "describe", type: "function" },
    { label: "diff", type: "function" },
    { label: "disjoint", type: "function" },
    { label: "distributive", type: "function" },
    { label: "divide", type: "function" },
    { label: "docstring", type: "function" },
    { label: "domain", type: "function" },
    { label: "dot_join", type: "function" },
    { label: "double_metaphone", type: "function" },
    { label: "empty", type: "function" },
    { label: "encode_base", type: "function" },
    { label: "epoch_milliseconds", type: "function" },
    { label: "eq", type: "function" },
    { label: "equal", type: "function" },
    { label: "equivalence_relation", type: "function" },
    { label: "erf", type: "function" },
    { label: "erfinv", type: "function" },
    { label: "escape_regex_metachars", type: "function" },
    { label: "export_csv", type: "function" },
    { label: "export_json", type: "function" },
    { label: "factorial", type: "function" },
    { label: "filepos", type: "function" },
    { label: "filepos_value", type: "function" },
    { label: "first", type: "function" },
    { label: "float", type: "function" },
    { label: "float_int_convert", type: "function" },
    { label: "floor", type: "function" },
    { label: "floor_divide", type: "function" },
    { label: "floor_to_int", type: "function" },
    { label: "format_date", type: "function" },
    { label: "format_datetime", type: "function" },
    { label: "formula_card_est", type: "function" },
    { label: "frequency", type: "function" },
    { label: "function", type: "function" },
    { label: "geometric_mean", type: "function" },
    { label: "glm_generic", type: "function" },
    { label: "glm_linear_regression", type: "function" },
    { label: "glm_logistic_regression", type: "function" },
    { label: "glm_predict", type: "function" },
    { label: "glm_probit_regression", type: "function" },
    { label: "graphviz", type: "function" },
    { label: "group", type: "function" },
    { label: "gt", type: "function" },
    { label: "gt_eq", type: "function" },
    { label: "harmonic_mean", type: "function" },
    { label: "has_identity", type: "function" },
    { label: "has_left_identity", type: "function" },
    { label: "has_left_zero", type: "function" },
    { label: "has_maximal_element", type: "function" },
    { label: "has_minimal_element", type: "function" },
    { label: "has_right_identity", type: "function" },
    { label: "has_right_zero", type: "function" },
    { label: "hash", type: "function" },
    { label: "hash_value_uint", type: "function" },
    { label: "haversine", type: "function" },
    { label: "help", type: "function" },
    { label: "html", type: "function" },
    { label: "ic", type: "function" },
    { label: "idempotent", type: "function" },
    { label: "identity", type: "function" },
    { label: "int", type: "function" },
    { label: "int_float_convert", type: "function" },
    { label: "int_spread_by_even", type: "function" },
    { label: "int_spread_by_ratio", type: "function" },
    { label: "intersect", type: "function" },
    { label: "irreflexive", type: "function" },
    { label: "is_", type: "function" },
    { label: "jacobian", type: "function" },
    { label: "join_bounded_lattice", type: "function" },
    { label: "last", type: "function" },
    { label: "lattice", type: "function" },
    { label: "left_distributive", type: "function" },
    { label: "left_identity", type: "function" },
    { label: "left_override", type: "function" },
    { label: "left_zero", type: "function" },
    { label: "levenshtein", type: "function" },
    { label: "like_match", type: "function" },
    { label: "linear_regression", type: "function" },
    { label: "linear_regression_objective", type: "function" },
    { label: "linear_regression_predict", type: "function" },
    { label: "lined_csv", type: "function" },
    { label: "load_csv", type: "function" },
    { label: "load_csv_row_wise", type: "function" },
    { label: "load_json", type: "function" },
    { label: "log", type: "function" },
    { label: "log_card_est", type: "function" },
    { label: "lowercase", type: "function" },
    { label: "lr_random_initial_point", type: "function" },
    { label: "lt", type: "function" },
    { label: "lt_eq", type: "function" },
    { label: "mae", type: "function" },
    { label: "markdown", type: "function" },
    { label: "max", type: "function" },
    { label: "max_k", type: "function" },
    { label: "maximal_element", type: "function" },
    { label: "maximum", type: "function" },
    { label: "mean", type: "function" },
    { label: "mean_normalization", type: "function" },
    { label: "median", type: "function" },
    { label: "meet_bounded_lattice", type: "function" },
    { label: "metaphone", type: "function" },
    { label: "min", type: "function" },
    { label: "min_k", type: "function" },
    { label: "min_max_normalization", type: "function" },
    { label: "minimal_element", type: "function" },
    { label: "minimize_initial_point", type: "function" },
    { label: "minimum", type: "function" },
    { label: "missing", type: "function" },
    { label: "mlpack_adaboost", type: "function" },
    { label: "mlpack_adaboost_predict", type: "function" },
    { label: "mlpack_approx_kfn", type: "function" },
    { label: "mlpack_approx_kfn_build", type: "function" },
    { label: "mlpack_dbscan", type: "function" },
    { label: "mlpack_decision_tree", type: "function" },
    { label: "mlpack_decision_tree_predict", type: "function" },
    { label: "mlpack_det", type: "function" },
    { label: "mlpack_det_build", type: "function" },
    { label: "mlpack_emst", type: "function" },
    { label: "mlpack_fastmks", type: "function" },
    { label: "mlpack_fastmks_build", type: "function" },
    { label: "mlpack_gmm_generate", type: "function" },
    { label: "mlpack_gmm_probability", type: "function" },
    { label: "mlpack_gmm_train", type: "function" },
    { label: "mlpack_hoeffding_tree", type: "function" },
    { label: "mlpack_hoeffding_tree_predict", type: "function" },
    { label: "mlpack_kernel_pca", type: "function" },
    { label: "mlpack_kfn", type: "function" },
    { label: "mlpack_kfn_build", type: "function" },
    { label: "mlpack_kmeans", type: "function" },
    { label: "mlpack_kmeans_centroids", type: "function" },
    { label: "mlpack_knn", type: "function" },
    { label: "mlpack_knn_build", type: "function" },
    { label: "mlpack_krann", type: "function" },
    { label: "mlpack_krann_build", type: "function" },
    { label: "mlpack_lars", type: "function" },
    { label: "mlpack_lars_predict", type: "function" },
    { label: "mlpack_linear_regression", type: "function" },
    { label: "mlpack_linear_regression_predict", type: "function" },
    { label: "mlpack_linear_svm", type: "function" },
    { label: "mlpack_linear_svm_predict", type: "function" },
    { label: "mlpack_logistic_regression", type: "function" },
    { label: "mlpack_logistic_regression_predict", type: "function" },
    { label: "mlpack_lsh", type: "function" },
    { label: "mlpack_lsh_build", type: "function" },
    { label: "mlpack_mean_shift", type: "function" },
    { label: "mlpack_nbc", type: "function" },
    { label: "mlpack_nbc_predict", type: "function" },
    { label: "mlpack_nmf", type: "function" },
    { label: "mlpack_pca", type: "function" },
    { label: "mlpack_perceptron", type: "function" },
    { label: "mlpack_perceptron_predict", type: "function" },
    { label: "mlpack_preprocess_split", type: "function" },
    { label: "mlpack_radical", type: "function" },
    { label: "mlpack_random_forest", type: "function" },
    { label: "mlpack_random_forest_predict", type: "function" },
    { label: "mlpack_softmax_regression", type: "function" },
    { label: "mlpack_softmax_regression_predict", type: "function" },
    { label: "mode", type: "function" },
    { label: "modulo", type: "function" },
    { label: "monoid", type: "function" },
    { label: "mse", type: "function" },
    { label: "multiply", type: "function" },
    { label: "murmurhash", type: "function" },
    { label: "nanoseconds_to_datetime", type: "function" },
    { label: "natural_exp", type: "function" },
    { label: "natural_log", type: "function" },
    { label: "neq", type: "function" },
    { label: "not", type: "function" },
    { label: "nullary_relation", type: "function" },
    { label: "num_bytes", type: "function" },
    { label: "num_chars", type: "function" },
    { label: "numerator", type: "function" },
    { label: "pack", type: "function" },
    { label: "parse_date", type: "function" },
    { label: "parse_datetime", type: "function" },
    { label: "parse_decimal", type: "function" },
    { label: "parse_float", type: "function" },
    { label: "parse_int", type: "function" },
    { label: "parse_json", type: "function" },
    { label: "parse_uuid", type: "function" },
    { label: "partial_order", type: "function" },
    { label: "partial_order_and_bounded_lattice", type: "function" },
    { label: "partial_order_and_join_bounded_lattice", type: "function" },
    { label: "partial_order_and_lattice", type: "function" },
    { label: "partial_order_and_meet_bounded_lattice", type: "function" },
    { label: "pattern_match", type: "function" },
    { label: "percentile", type: "function" },
    { label: "percentile_nearest", type: "function" },
    { label: "period_add", type: "function" },
    { label: "period_day_to_int", type: "function" },
    { label: "period_max", type: "function" },
    { label: "period_min", type: "function" },
    { label: "pi_float", type: "function" },
    { label: "pivot", type: "function" },
    { label: "pop_standard_deviation", type: "function" },
    { label: "pop_variance", type: "function" },
    { label: "pop_zscore_normalization", type: "function" },
    { label: "power", type: "function" },
    { label: "prefix_join", type: "function" },
    { label: "preorder", type: "function" },
    { label: "product", type: "function" },
    { label: "proper_subset", type: "function" },
    { label: "proper_superset", type: "function" },
    { label: "rad", type: "function" },
    { label: "random_mersenne_twister", type: "function" },
    { label: "random_threefry_float", type: "function" },
    { label: "random_threefry_uint", type: "function" },
    { label: "random_uint", type: "function" },
    { label: "range", type: "function" },
    { label: "rational", type: "function" },
    { label: "rational_convert", type: "function" },
    { label: "reflexive", type: "function" },
    { label: "regex_compile", type: "function" },
    { label: "regex_match", type: "function" },
    { label: "regex_match_all", type: "function" },
    { label: "rel", type: "function" },
    { label: "relname_string", type: "function" },
    { label: "remainder", type: "function" },
    { label: "reverse_sort", type: "function" },
    { label: "right_distributive", type: "function" },
    { label: "right_identity", type: "function" },
    { label: "right_override", type: "function" },
    { label: "right_zero", type: "function" },
    { label: "ring", type: "function" },
    { label: "rmse", type: "function" },
    { label: "round", type: "function" },
    { label: "sample_standard_deviation", type: "function" },
    { label: "sample_variance", type: "function" },
    { label: "sample_zscore_normalization", type: "function" },
    { label: "second", type: "function" },
    { label: "semilattice", type: "function" },
    { label: "semiring", type: "function" },
    { label: "sign", type: "function" },
    { label: "sin", type: "function" },
    { label: "sinh", type: "function" },
    { label: "sort", type: "function" },
    { label: "soundex", type: "function" },
    { label: "spread", type: "function" },
    { label: "sqrt", type: "function" },
    { label: "squared", type: "function" },
    { label: "squared_deviation", type: "function" },
    { label: "strict_partial_order", type: "function" },
    { label: "strict_total_order", type: "function" },
    { label: "string", type: "function" },
    { label: "string_join", type: "function" },
    { label: "string_length", type: "function" },
    { label: "string_replace", type: "function" },
    { label: "string_replace_multiple", type: "function" },
    { label: "string_split", type: "function" },
    { label: "string_trim", type: "function" },
    { label: "subset", type: "function" },
    { label: "substring", type: "function" },
    { label: "substring_bytes", type: "function" },
    { label: "subtract", type: "function" },
    { label: "suffix_join", type: "function" },
    { label: "sum", type: "function" },
    { label: "sum_int", type: "function" },
    { label: "superset", type: "function" },
    { label: "svg", type: "function" },
    { label: "symmetric", type: "function" },
    { label: "table", type: "function" },
    { label: "tan", type: "function" },
    { label: "tanh", type: "function" },
    { label: "ternary_relation", type: "function" },
    { label: "top", type: "function" },
    { label: "total", type: "function" },
    { label: "total_order", type: "function" },
    { label: "transitive", type: "function" },
    { label: "transpose", type: "function" },
    { label: "trunc", type: "function" },
    { label: "trunc_divide", type: "function" },
    { label: "trunc_to_int", type: "function" },
    { label: "uint", type: "function" },
    { label: "unary_operator", type: "function" },
    { label: "unary_relation", type: "function" },
    { label: "unary_relation_substitution_laws", type: "function" },
    { label: "union", type: "function" },
    { label: "unit_normalization", type: "function" },
    { label: "unix_epoch", type: "function" },
    { label: "unpack", type: "function" },
    { label: "uppercase", type: "function" },
    { label: "uuid_string", type: "function" },
    { label: "vega", type: "function" },
    { label: "vegalite", type: "function" },
    { label: "vegalite_utils", type: "function" },
    { label: "view_json", type: "function" },
    { label: "weighted_mean", type: "function" },
    { label: "xgboost_classifier", type: "function" },
    { label: "xgboost_classifier_predict", type: "function" },
    { label: "xgboost_classifier_probabilities", type: "function" },
    { label: "xgboost_feature_importances", type: "function" },
    { label: "xgboost_regressor", type: "function" },
    { label: "xgboost_regressor_predict", type: "function" },
    { label: "zero_annihilation", type: "function" },
    { label: "zero_of_operator", type: "function" },
    { label: "zip", type: "function" },
    { label: "registered", type: "variable", info: "Registered Sign / Registered Trade Mark Sign", apply: "®" },
    { label: "degree", type: "variable", info: "Degree Sign", apply: "°" },
    { label: "pm", type: "variable", info: "Plus-Minus Sign / Plus-Or-Minus Sign", apply: "±" },
    { label: "\\^2", info: "Superscript Two / Superscript Digit Two", apply: "²" },
    { label: "\\^3", info: "Superscript Three / Superscript Digit Three", apply: "³" },
    { label: "\\^1", info: "Superscript One / Superscript Digit One", apply: "¹" },
    { label: "\\1/4", type: "variable", info: "Vulgar Fraction One Quarter / Fraction One Quarter", apply: "¼" },
    { label: "\\1/2", type: "variable", info: "Vulgar Fraction One Half / Fraction One Half", apply: "½" },
    { label: "\\3/4", type: "variable", info: "Vulgar Fraction Three Quarters / Fraction Three Quarters", apply: "¾" },
    { label: "\\questiondown", type: "variable", info: "Inverted Question Mark", apply: "¿" },
    { label: "\\times", type: "variable", info: "Multiplication Sign", apply: "×" },
    { label: "\\div", type: "variable", info: "Division Sign", apply: "÷" },
    { label: "\\Alpha", type: "variable", info: "Greek Capital Letter Alpha", apply: "Α" },
    { label: "\\Beta", type: "variable", info: "Greek Capital Letter Beta", apply: "Β" },
    { label: "\\Gamma", type: "variable", info: "Greek Capital Letter Gamma", apply: "Γ" },
    { label: "\\Delta", type: "variable", info: "Greek Capital Letter Delta", apply: "Δ" },
    { label: "\\Epsilon", type: "variable", info: "Greek Capital Letter Epsilon", apply: "Ε" },
    { label: "\\Zeta", type: "variable", info: "Greek Capital Letter Zeta", apply: "Ζ" },
    { label: "\\Eta", type: "variable", info: "Greek Capital Letter Eta", apply: "Η" },
    { label: "\\Theta", type: "variable", info: "Greek Capital Letter Theta", apply: "Θ" },
    { label: "\\Iota", type: "variable", info: "Greek Capital Letter Iota", apply: "Ι" },
    { label: "\\Kappa", type: "variable", info: "Greek Capital Letter Kappa", apply: "Κ" },
    { label: "\\Lambda", type: "variable", info: "Greek Capital Letter Lamda / Greek Capital Letter Lambda", apply: "Λ" },
    { label: "\\upMu", type: "variable", info: "Greek Capital Letter Mu", apply: "Μ" },
    { label: "\\upNu", type: "variable", info: "Greek Capital Letter Nu", apply: "Ν" },
    { label: "\\Xi", type: "variable", info: "Greek Capital Letter Xi", apply: "Ξ" },
    { label: "\\upOmicron", type: "variable", info: "Greek Capital Letter Omicron", apply: "Ο" },
    { label: "\\Pi", type: "variable", info: "Greek Capital Letter Pi", apply: "Π" },
    { label: "\\Rho", type: "variable", info: "Greek Capital Letter Rho", apply: "Ρ" },
    { label: "\\Sigma", type: "variable", info: "Greek Capital Letter Sigma", apply: "Σ" },
    { label: "\\Tau", type: "variable", info: "Greek Capital Letter Tau", apply: "Τ" },
    { label: "\\Upsilon", type: "variable", info: "Greek Capital Letter Upsilon", apply: "Υ" },
    { label: "\\Phi", type: "variable", info: "Greek Capital Letter Phi", apply: "Φ" },
    { label: "\\Chi", type: "variable", info: "Greek Capital Letter Chi", apply: "Χ" },
    { label: "\\Psi", type: "variable", info: "Greek Capital Letter Psi", apply: "Ψ" },
    { label: "\\Omega", type: "variable", info: "Greek Capital Letter Omega", apply: "Ω" },
    { label: "\\alpha", type: "variable", info: "Greek Small Letter Alpha", apply: "α" },
    { label: "\\beta", type: "variable", info: "Greek Small Letter Beta", apply: "β" },
    { label: "\\gamma", type: "variable", info: "Greek Small Letter Gamma", apply: "γ" },
    { label: "\\delta", type: "variable", info: "Greek Small Letter Delta", apply: "δ" },
    { label: "\\varepsilon", type: "variable", info: "Greek Small Letter Epsilon", apply: "ε" },
    { label: "\\zeta", type: "variable", info: "Greek Small Letter Zeta", apply: "ζ" },
    { label: "\\eta", type: "variable", info: "Greek Small Letter Eta", apply: "η" },
    { label: "\\theta", type: "variable", info: "Greek Small Letter Theta", apply: "θ" },
    { label: "\\iota", type: "variable", info: "Greek Small Letter Iota", apply: "ι" },
    { label: "\\kappa", type: "variable", info: "Greek Small Letter Kappa", apply: "κ" },
    { label: "\\lambda", type: "variable", info: "Greek Small Letter Lamda / Greek Small Letter Lambda", apply: "λ" },
    { label: "\\mu", type: "variable", info: "Greek Small Letter Mu", apply: "μ" },
    { label: "\\nu", type: "variable", info: "Greek Small Letter Nu", apply: "ν" },
    { label: "\\xi", type: "variable", info: "Greek Small Letter Xi", apply: "ξ" },
    { label: "\\upomicron", type: "variable", info: "Greek Small Letter Omicron", apply: "ο" },
    { label: "\\pi", type: "variable", info: "Greek Small Letter Pi", apply: "π" },
    { label: "\\rho", type: "variable", info: "Greek Small Letter Rho", apply: "ρ" },
    { label: "\\varsigma", type: "variable", info: "Greek Small Letter Final Sigma", apply: "ς" },
    { label: "\\sigma", type: "variable", info: "Greek Small Letter Sigma", apply: "σ" },
    { label: "\\tau", type: "variable", info: "Greek Small Letter Tau", apply: "τ" },
    { label: "\\upsilon", type: "variable", info: "Greek Small Letter Upsilon", apply: "υ" },
    { label: "\\varphi", type: "variable", info: "Greek Small Letter Phi", apply: "φ" },
    { label: "\\chi", type: "variable", info: "Greek Small Letter Chi", apply: "χ" },
    { label: "\\psi", type: "variable", info: "Greek Small Letter Psi", apply: "ψ" },
    { label: "\\omega", type: "variable", info: "Greek Small Letter Omega", apply: "ω" },
    { label: "\\upvarbeta", type: "variable", info: "Greek Beta Symbol / Greek Small Letter Curled Beta", apply: "ϐ" },
    { label: "\\vartheta", type: "variable", info: "Greek Theta Symbol / Greek Small Letter Script Theta", apply: "ϑ" },
    { label: "\\phi", type: "variable", info: "Greek Phi Symbol / Greek Small Letter Script Phi", apply: "ϕ" },
    { label: "\\varpi", type: "variable", info: "Greek Pi Symbol / Greek Small Letter Omega Pi", apply: "ϖ" },
    { label: "\\upoldKoppa", type: "variable", info: "Greek Letter Archaic Koppa", apply: "Ϙ" },
    { label: "\\upoldkoppa", type: "variable", info: "Greek Small Letter Archaic Koppa", apply: "ϙ" },
    { label: "\\Stigma", type: "variable", info: "Greek Letter Stigma / Greek Capital Letter Stigma", apply: "Ϛ" },
    { label: "\\upstigma", type: "variable", info: "Greek Small Letter Stigma", apply: "ϛ" },
    { label: "\\Digamma", type: "variable", info: "Greek Letter Digamma / Greek Capital Letter Digamma", apply: "Ϝ" },
    { label: "\\digamma", type: "variable", info: "Greek Small Letter Digamma", apply: "ϝ" },
    { label: "\\Koppa", type: "variable", info: "Greek Letter Koppa / Greek Capital Letter Koppa", apply: "Ϟ" },
    { label: "\\upkoppa", type: "variable", info: "Greek Small Letter Koppa", apply: "ϟ" },
    { label: "\\Sampi", type: "variable", info: "Greek Letter Sampi / Greek Capital Letter Sampi", apply: "Ϡ" },
    { label: "\\upsampi", type: "variable", info: "Greek Small Letter Sampi", apply: "ϡ" },
    { label: "\\varkappa", type: "variable", info: "Greek Kappa Symbol / Greek Small Letter Script Kappa", apply: "ϰ" },
    { label: "\\varrho", type: "variable", info: "Greek Rho Symbol / Greek Small Letter Tailed Rho", apply: "ϱ" },
    { label: "\\varTheta", type: "variable", info: "Greek Capital Theta Symbol", apply: "ϴ" },
    { label: "\\epsilon", type: "variable", info: "Greek Lunate Epsilon Symbol", apply: "ϵ" },
    { label: "\\backepsilon", type: "variable", info: "Greek Reversed Lunate Epsilon Symbol", apply: "϶" },
    { label: "\\^0", info: "Superscript Zero / Superscript Digit Zero", apply: "⁰" },
    { label: "\\^i", info: "Superscript Latin Small Letter I", apply: "ⁱ" },
    { label: "\\^4", info: "Superscript Four / Superscript Digit Four", apply: "⁴" },
    { label: "\\^5", info: "Superscript Five / Superscript Digit Five", apply: "⁵" },
    { label: "\\^6", info: "Superscript Six / Superscript Digit Six", apply: "⁶" },
    { label: "\\^7", info: "Superscript Seven / Superscript Digit Seven", apply: "⁷" },
    { label: "\\^8", info: "Superscript Eight / Superscript Digit Eight", apply: "⁸" },
    { label: "\\^9", info: "Superscript Nine / Superscript Digit Nine", apply: "⁹" },
    { label: "\\^+", info: "Superscript Plus Sign", apply: "⁺" },
    { label: "\\^-", info: "Superscript Minus / Superscript Hyphen-Minus", apply: "⁻" },
    { label: "\\^=", info: "Superscript Equals Sign", apply: "⁼" },
    { label: "\\^(", info: "Superscript Left Parenthesis / Superscript Opening Parenthesis", apply: "⁽" },
    { label: "\\^)", info: "Superscript Right Parenthesis / Superscript Closing Parenthesis", apply: "⁾" },
    { label: "\\^n", info: "Superscript Latin Small Letter N", apply: "ⁿ" },
    { label: "\\_0", type: "variable", info: "Subscript Zero / Subscript Digit Zero", apply: "₀" },
    { label: "\\_1", type: "variable", info: "Subscript One / Subscript Digit One", apply: "₁" },
    { label: "\\_2", type: "variable", info: "Subscript Two / Subscript Digit Two", apply: "₂" },
    { label: "\\_3", type: "variable", info: "Subscript Three / Subscript Digit Three", apply: "₃" },
    { label: "\\_4", type: "variable", info: "Subscript Four / Subscript Digit Four", apply: "₄" },
    { label: "\\_5", type: "variable", info: "Subscript Five / Subscript Digit Five", apply: "₅" },
    { label: "\\_6", type: "variable", info: "Subscript Six / Subscript Digit Six", apply: "₆" },
    { label: "\\_7", type: "variable", info: "Subscript Seven / Subscript Digit Seven", apply: "₇" },
    { label: "\\_8", type: "variable", info: "Subscript Eight / Subscript Digit Eight", apply: "₈" },
    { label: "\\_9", type: "variable", info: "Subscript Nine / Subscript Digit Nine", apply: "₉" },
    { label: "\\forall", type: "variable", info: "For All", apply: "∀" },
    { label: "\\complement", type: "variable", info: "Complement", apply: "∁" },
    { label: "\\partial", type: "variable", info: "Partial Differential", apply: "∂" },
    { label: "\\exists", type: "variable", info: "There Exists", apply: "∃" },
    { label: "\\nexists", type: "variable", info: "There Does Not Exist", apply: "∄" },
    { label: "\\emptyset", type: "variable", info: "Empty Set", apply: "∅" },
    { label: "\\increment", type: "variable", info: "Increment", apply: "∆" },
    { label: "\\nabla", type: "variable", info: "Nabla", apply: "∇" },
    { label: "\\in", type: "variable", info: "Element Of", apply: "∈" },
    { label: "\\notin", type: "variable", info: "Not An Element Of", apply: "∉" },
    { label: "\\sqrt", type: "variable", info: "Square Root", apply: "√" },
    { label: "\\cbrt", type: "variable", info: "Cube Root", apply: "∛" },
    { label: "\\fourthroot", type: "variable", info: "Fourth Root", apply: "∜" },
    { label: "\\propto", type: "variable", info: "Proportional To", apply: "∝" },
    { label: "\\infty", type: "variable", info: "Infinity", apply: "∞" },
    { label: "\\cap", type: "variable", info: "Intersection", apply: "∩" },
    { label: "\\cup", type: "variable", info: "Union", apply: "∪" },
    { label: "\\therefore", type: "variable", info: "Therefore", apply: "∴" },
    { label: "\\because", type: "variable", info: "Because", apply: "∵" },
    { label: "\\leq", type: "variable", info: "Less-Than Or Equal To / Less Than Or Equal To", apply: "≤" },
    { label: "\\geq", type: "variable", info: "Greater-Than Or Equal To / Greater Than Or Equal To", apply: "≥" },
    { label: "\\subset", type: "variable", info: "Subset Of", apply: "⊂" },
    { label: "\\supset", type: "variable", info: "Superset Of", apply: "⊃" },
    { label: "\\nsubset", type: "variable", info: "Not A Subset Of", apply: "⊄" },
    { label: "\\nsupset", type: "variable", info: "Not A Superset Of", apply: "⊅" },
    { label: "\\subseteq", type: "variable", info: "Subset Of Or Equal To", apply: "⊆" },
    { label: "\\supseteq", type: "variable", info: "Superset Of Or Equal To", apply: "⊇" },
    { label: "\\nsubseteq", type: "variable", info: "Neither A Subset Of Nor Equal To", apply: "⊈" },
    { label: "\\nsupseteq", type: "variable", info: "Neither A Superset Of Nor Equal To", apply: "⊉" },
    { label: "\\bowtie", type: "variable", info: "Bowtie", apply: "⋈" },
    { label: "\\ltimes", type: "variable", info: "Left Normal Factor Semidirect Product", apply: "⋉" },
    { label: "\\rtimes", type: "variable", info: "Right Normal Factor Semidirect Product", apply: "⋊" },
    { label: "\\vdots", type: "variable", info: "Vertical Ellipsis", apply: "⋮" },
    { label: "\\cdots", type: "variable", info: "Midline Horizontal Ellipsis", apply: "⋯" },
    { label: "\\adots", type: "variable", info: "Up Right Diagonal Ellipsis", apply: "⋰" },
    { label: "\\ddots", type: "variable", info: "Down Right Diagonal Ellipsis", apply: "⋱" }
];

const relLanguage = language.LRLanguage.define({
    parser: parser.configure({
        props: [
            // indentNodeProp.add({
            //   Application: delimitedIndent({closing: ")", align: false})
            // }),
            // foldNodeProp.add({
            //   Application: foldInside
            // }),
            highlight.styleTags({
                'use forall for in iff if then else end where with select implies': highlight.tags.controlKeyword,
                'not and or xor': highlight.tags.operatorKeyword,
                'as from inline function ic doc raw entity type value': highlight.tags.keyword,
                'output insert delete abort export': highlight.tags.emphasis,
                'def': highlight.tags.definitionKeyword,
                'module': highlight.tags.moduleKeyword,
                'Any String Int Number Char Missing Float Floating UnsignedInt SignedInt Rational FixedDecimal RelName Entity AutoNumber Hash FilePos Date DateTime Year Month Week Day Hour Minute Second Millisecond Microsecond Nanosecond Boolean': highlight.tags.typeName,
                Number: highlight.tags.number,
                BooleanLiteral: highlight.tags.bool,
                StringLiteral: highlight.tags.string,
                MultilineStringLiteral: highlight.tags.string,
                MultilineRawStringLiteral: highlight.tags.string,
                AssignOp: highlight.tags.definitionOperator,
                LineComment: highlight.tags.lineComment,
                BlockComment: highlight.tags.blockComment,
                MultilineBlockComment: highlight.tags.blockComment,
                VariableName: highlight.tags.definition(highlight.tags.variableName),
                Atom: highlight.tags.atom,
                RelnameLiteral: highlight.tags.literal,
                RelnameStringLiteral: highlight.tags.literal,
                ValueTypeLiteral: highlight.tags.literal,
                DefineStatement: highlight.tags.atom,
                DateLiteral: highlight.tags.string,
                DateTimeLiteral: highlight.tags.string,
                Operator: highlight.tags.operatorKeyword,
                '( )': highlight.tags.paren,
                '[ ]': highlight.tags.squareBracket,
                '{ }': highlight.tags.brace,
                ':': highlight.tags.derefOperator,
                ', ;': highlight.tags.separator
            })
        ]
    }),
    languageData: {
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`", '"""'] },
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
        // indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
        wordChars: "$"
    }
});
// Autocomplete
const relCompletion = relLanguage.data.of({
    autocomplete: autocomplete.completeFromList(autocompleteList)
});
function rel() {
    return new language.LanguageSupport(relLanguage, [relCompletion]);
}

exports.rel = rel;
exports.relCompletion = relCompletion;
exports.relLanguage = relLanguage;
