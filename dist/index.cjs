'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var lr = require('@lezer/lr');
var language = require('@codemirror/language');
var highlight = require('@lezer/highlight');
var autocomplete = require('@codemirror/autocomplete');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_identifier = {__proto__:null,inline:12, function:18, in:22, where:24, if:28, then:32, else:34, end:36, iff:40, not:44, xor:48, and:52, or:54, from:58, module:70, forall:74, foreach:78, for:82, implies:86, def:90, abort:94, export:98, config:102, delete:106, insert:110, output:114, with:118, use:120, ic:124, raw:130, doc:136, entity:142, type:146, value:150, true:156, false:156, Int:174, String:178, Any:182, Number:186, Char:190, Missing:194, Floating:198, UnsignedInt:202, SignedInt:206, Rational:210, FixedDecimal:214, RelName:218, Entity:222, AutoNumber:226, Hash:230, FilePos:234, Date:238, DateTime:242, Year:246, Month:250, Week:254, Day:258, Hour:262, Minute:266, Second:270, Millisecond:274, Microsecond:278, Nanosecond:282};
const parser = lr.LRParser.deserialize({
  version: 14,
  states: "7pO`QPOOO%ZOQO'#DpO%cOQO'#DsO%kOQO'#EQOOQO'#Fu'#FuOOQO'#Dz'#DzOOQO'#Fx'#FxOOQO'#ET'#ETOOQO'#Fg'#FgOOQO'#F`'#F`Q`QPOOO%sQPO'#CaO%{QPO'#CfO`QPO'#CiO`QPO'#CoO`QPO'#CqO`QPO'#CsO`QPO'#CuO&QQPO'#CxO%{QPO'#DOO`QPO'#DQO&]QPO'#DSO%{QPO'#DUO`QPO'#DWO&bQPO'#DYO%{QPO'#DhO%{QPO'#DkO+OQPO'#DmO+WQPO'#DtO+`QPO'#DxO+eQPO'#EUO/oQPO'#EWO3yQPO'#EYO8TQPO'#E[O<_QPO'#E^O@iQPO'#E`ODsQPO'#EbOH}QPO'#EdOMXQPO'#EfO!#cQPO'#EhO!'mQPO'#EjO!+wQPO'#ElO!0RQPO'#EnO!4]QPO'#EpO!8gQPO'#ErO!<qQPO'#EtO!@{QPO'#EvO!EVQPO'#ExO!IaQPO'#EzO!MkQPO'#E|O##uQPO'#FOO#(PQPO'#FQO#,ZQPO'#FSO#0eQPO'#FUO#4oQPO'#FWO#8yQPO'#FYO#=TQPO'#F[O#A_QPO'#F^OOOO'#Fc'#FcO#EiOQO,5:[OOQO,5:[,5:[O#EqOQO,5:_OOQO,5:_,5:_O#EyOQO,5:lOOQO,5:l,5:lOOQO-E9^-E9^O#FRQPO,58{O#J]QPO,59OOOQO'#Cc'#CcO#NgQPO,59QO$$qQPO'#CkO$%OQPO,59TOOQO,59Z,59ZOOQO,59],59]OOQO,59_,59_OOQO,59a,59aOOQO'#C}'#C}OOQO'#C{'#C{O$%ZQPO'#CzOOQO,59d,59dO`QPO,59jO`QPO,59lO&QQPO,59nO$%cQPO,59pOOQO,59r,59rOOQO,59t,59tO`QPO,59vO`QPO,59xO`QPO,59zO`QPO,59|O`QPO,5:OO`QPO,5:QO$%hQPO,5:SO$%mQSO,5:VO$%uQPO,5:XO$%zQPO,5:]OOQO,5:`,5:`O%{QPO,5:bO%{QPO,5:dOOQO,5:p,5:pOOQO,5:r,5:rOOQO,5:t,5:tOOQO,5:v,5:vOOQO,5:x,5:xOOQO,5:z,5:zOOQO,5:|,5:|OOQO,5;O,5;OOOQO,5;Q,5;QOOQO,5;S,5;SOOQO,5;U,5;UOOQO,5;W,5;WOOQO,5;Y,5;YOOQO,5;[,5;[OOQO,5;^,5;^OOQO,5;`,5;`OOQO,5;b,5;bOOQO,5;d,5;dOOQO,5;f,5;fOOQO,5;h,5;hOOQO,5;j,5;jOOQO,5;l,5;lOOQO,5;n,5;nOOQO,5;p,5;pOOQO,5;r,5;rOOQO,5;t,5;tOOQO,5;v,5;vOOQO,5;x,5;xOOOO-E9a-E9aOOQO1G/v1G/vOOQO1G/y1G/yOOQO1G0W1G0WOOQO1G.g1G.gOOQO1G.j1G.jO`QPO1G.lO$&PQPO1G.oO`QPO'#FaOOQO1G.o1G.oO`QPO1G.oO&QQPO'#FbO$&[QPO,59fO$*lQPO1G/UOOQO1G/W1G/WO$*qQPO1G/YO%{QPO1G/[OOQO1G/b1G/bOOQO1G/d1G/dOOQO1G/f1G/fOOQO1G/h1G/hOOQO1G/j1G/jOOQO1G/l1G/lO&QQPO1G/nOOQO1G/q1G/qO%{QPO1G/qOOQO1G/s1G/sOOQO1G/w1G/wOOQO1G/|1G/|OOQO1G0O1G0OOOQO7+$W7+$WOOQO-E9_-E9_OOQO7+$Z7+$ZO`QPO7+$ZOOQO,5;{,5;{O$*vQPO7+$ZOOQO,5;|,5;|OOQO-E9`-E9`OOQO7+$p7+$pOOQO7+$t7+$tOOQO7+$v7+$vOOQO7+%Y7+%YO$*{QPO7+%]O$+QQPO<<GuOOQO<<Gu<<GuOOQO<<Hw<<HwOOQOAN=aAN=a",
  stateData: "$+e~O$YOSPOSQOSROS~OZ[O^]Od^Of_Oh`OjaOkaOmbOpSOscOudOweOyfO{gO}hO!]iO!`jO!bkO!ilO!mmO!oSO!pSO!qSO!rSO!sSO!uSO!vSO!ynO!{oO!}pO#PqO#RrO#TsO#VtO#XuO#ZvO#]wO#_xO#ayO#czO#e{O#g|O#i}O#k!OO#m!PO#o!QO#q!RO#s!SO#u!TO#w!UO#y!VO#{!WO#}!XO$P!YO$R!ZO$[ZO$fPO$hQO$kRO~O$f!^O$g![O~O$g![O$h!`O~O$g![O$j!bO~OU!dOX!eO~O$]!fO~Op!oO$]!fO$^!nO~O$b!tO~O!P!xO!R!yO!T!zO!V!{O!X!|O!Z!}O$]!fOZ|X^|Xd|Xf|Xh|Xj|Xk|Xm|Xp|Xs|Xu|Xw|Xy|X{|X}|X!]|X!`|X!b|X!i|X!m|X!o|X!p|X!q|X!r|X!s|X!u|X!v|X!y|X!{|X!}|X#P|X#R|X#T|X#V|X#X|X#Z|X#]|X#_|X#a|X#c|X#e|X#g|X#i|X#k|X#m|X#o|X#q|X#s|X#u|X#w|X#y|X#{|X#}|X$P|X$R|X$W|X$[|X$f|X$h|X$k|X`|Xa|Xb|X~O!c#QO!f#RO~O!k#TO$]!fO~O!k#UO~O$]!fOZ!xX^!xXd!xXf!xXh!xXj!xXk!xXm!xXp!xXs!xXu!xXw!xXy!xX{!xX}!xX!]!xX!`!xX!b!xX!i!xX!m!xX!o!xX!p!xX!q!xX!r!xX!s!xX!u!xX!v!xX!y!xX!{!xX!}!xX#P!xX#R!xX#T!xX#V!xX#X!xX#Z!xX#]!xX#_!xX#a!xX#c!xX#e!xX#g!xX#i!xX#k!xX#m!xX#o!xX#q!xX#s!xX#u!xX#w!xX#y!xX#{!xX#}!xX$P!xX$R!xX$W!xX$[!xX$f!xX$h!xX$k!xX`!xXa!xXb!xX~O$]!fOZ!zX^!zXd!zXf!zXh!zXj!zXk!zXm!zXp!zXs!zXu!zXw!zXy!zX{!zX}!zX!]!zX!`!zX!b!zX!i!zX!m!zX!o!zX!p!zX!q!zX!r!zX!s!zX!u!zX!v!zX!y!zX!{!zX!}!zX#P!zX#R!zX#T!zX#V!zX#X!zX#Z!zX#]!zX#_!zX#a!zX#c!zX#e!zX#g!zX#i!zX#k!zX#m!zX#o!zX#q!zX#s!zX#u!zX#w!zX#y!zX#{!zX#}!zX$P!zX$R!zX$W!zX$[!zX$f!zX$h!zX$k!zX`!zXa!zXb!zX~O$]!fOZ!|X^!|Xd!|Xf!|Xh!|Xj!|Xk!|Xm!|Xp!|Xs!|Xu!|Xw!|Xy!|X{!|X}!|X!]!|X!`!|X!b!|X!i!|X!m!|X!o!|X!p!|X!q!|X!r!|X!s!|X!u!|X!v!|X!y!|X!{!|X!}!|X#P!|X#R!|X#T!|X#V!|X#X!|X#Z!|X#]!|X#_!|X#a!|X#c!|X#e!|X#g!|X#i!|X#k!|X#m!|X#o!|X#q!|X#s!|X#u!|X#w!|X#y!|X#{!|X#}!|X$P!|X$R!|X$W!|X$[!|X$f!|X$h!|X$k!|X`!|Xa!|Xb!|X~O$]!fOZ#OX^#OXd#OXf#OXh#OXj#OXk#OXm#OXp#OXs#OXu#OXw#OXy#OX{#OX}#OX!]#OX!`#OX!b#OX!i#OX!m#OX!o#OX!p#OX!q#OX!r#OX!s#OX!u#OX!v#OX!y#OX!{#OX!}#OX#P#OX#R#OX#T#OX#V#OX#X#OX#Z#OX#]#OX#_#OX#a#OX#c#OX#e#OX#g#OX#i#OX#k#OX#m#OX#o#OX#q#OX#s#OX#u#OX#w#OX#y#OX#{#OX#}#OX$P#OX$R#OX$W#OX$[#OX$f#OX$h#OX$k#OX`#OXa#OXb#OX~O$]!fOZ#QX^#QXd#QXf#QXh#QXj#QXk#QXm#QXp#QXs#QXu#QXw#QXy#QX{#QX}#QX!]#QX!`#QX!b#QX!i#QX!m#QX!o#QX!p#QX!q#QX!r#QX!s#QX!u#QX!v#QX!y#QX!{#QX!}#QX#P#QX#R#QX#T#QX#V#QX#X#QX#Z#QX#]#QX#_#QX#a#QX#c#QX#e#QX#g#QX#i#QX#k#QX#m#QX#o#QX#q#QX#s#QX#u#QX#w#QX#y#QX#{#QX#}#QX$P#QX$R#QX$W#QX$[#QX$f#QX$h#QX$k#QX`#QXa#QXb#QX~O$]!fOZ#SX^#SXd#SXf#SXh#SXj#SXk#SXm#SXp#SXs#SXu#SXw#SXy#SX{#SX}#SX!]#SX!`#SX!b#SX!i#SX!m#SX!o#SX!p#SX!q#SX!r#SX!s#SX!u#SX!v#SX!y#SX!{#SX!}#SX#P#SX#R#SX#T#SX#V#SX#X#SX#Z#SX#]#SX#_#SX#a#SX#c#SX#e#SX#g#SX#i#SX#k#SX#m#SX#o#SX#q#SX#s#SX#u#SX#w#SX#y#SX#{#SX#}#SX$P#SX$R#SX$W#SX$[#SX$f#SX$h#SX$k#SX`#SXa#SXb#SX~O$]!fOZ#UX^#UXd#UXf#UXh#UXj#UXk#UXm#UXp#UXs#UXu#UXw#UXy#UX{#UX}#UX!]#UX!`#UX!b#UX!i#UX!m#UX!o#UX!p#UX!q#UX!r#UX!s#UX!u#UX!v#UX!y#UX!{#UX!}#UX#P#UX#R#UX#T#UX#V#UX#X#UX#Z#UX#]#UX#_#UX#a#UX#c#UX#e#UX#g#UX#i#UX#k#UX#m#UX#o#UX#q#UX#s#UX#u#UX#w#UX#y#UX#{#UX#}#UX$P#UX$R#UX$W#UX$[#UX$f#UX$h#UX$k#UX`#UXa#UXb#UX~O$]!fOZ#WX^#WXd#WXf#WXh#WXj#WXk#WXm#WXp#WXs#WXu#WXw#WXy#WX{#WX}#WX!]#WX!`#WX!b#WX!i#WX!m#WX!o#WX!p#WX!q#WX!r#WX!s#WX!u#WX!v#WX!y#WX!{#WX!}#WX#P#WX#R#WX#T#WX#V#WX#X#WX#Z#WX#]#WX#_#WX#a#WX#c#WX#e#WX#g#WX#i#WX#k#WX#m#WX#o#WX#q#WX#s#WX#u#WX#w#WX#y#WX#{#WX#}#WX$P#WX$R#WX$W#WX$[#WX$f#WX$h#WX$k#WX`#WXa#WXb#WX~O$]!fOZ#YX^#YXd#YXf#YXh#YXj#YXk#YXm#YXp#YXs#YXu#YXw#YXy#YX{#YX}#YX!]#YX!`#YX!b#YX!i#YX!m#YX!o#YX!p#YX!q#YX!r#YX!s#YX!u#YX!v#YX!y#YX!{#YX!}#YX#P#YX#R#YX#T#YX#V#YX#X#YX#Z#YX#]#YX#_#YX#a#YX#c#YX#e#YX#g#YX#i#YX#k#YX#m#YX#o#YX#q#YX#s#YX#u#YX#w#YX#y#YX#{#YX#}#YX$P#YX$R#YX$W#YX$[#YX$f#YX$h#YX$k#YX`#YXa#YXb#YX~O$]!fOZ#[X^#[Xd#[Xf#[Xh#[Xj#[Xk#[Xm#[Xp#[Xs#[Xu#[Xw#[Xy#[X{#[X}#[X!]#[X!`#[X!b#[X!i#[X!m#[X!o#[X!p#[X!q#[X!r#[X!s#[X!u#[X!v#[X!y#[X!{#[X!}#[X#P#[X#R#[X#T#[X#V#[X#X#[X#Z#[X#]#[X#_#[X#a#[X#c#[X#e#[X#g#[X#i#[X#k#[X#m#[X#o#[X#q#[X#s#[X#u#[X#w#[X#y#[X#{#[X#}#[X$P#[X$R#[X$W#[X$[#[X$f#[X$h#[X$k#[X`#[Xa#[Xb#[X~O$]!fOZ#^X^#^Xd#^Xf#^Xh#^Xj#^Xk#^Xm#^Xp#^Xs#^Xu#^Xw#^Xy#^X{#^X}#^X!]#^X!`#^X!b#^X!i#^X!m#^X!o#^X!p#^X!q#^X!r#^X!s#^X!u#^X!v#^X!y#^X!{#^X!}#^X#P#^X#R#^X#T#^X#V#^X#X#^X#Z#^X#]#^X#_#^X#a#^X#c#^X#e#^X#g#^X#i#^X#k#^X#m#^X#o#^X#q#^X#s#^X#u#^X#w#^X#y#^X#{#^X#}#^X$P#^X$R#^X$W#^X$[#^X$f#^X$h#^X$k#^X`#^Xa#^Xb#^X~O$]!fOZ#`X^#`Xd#`Xf#`Xh#`Xj#`Xk#`Xm#`Xp#`Xs#`Xu#`Xw#`Xy#`X{#`X}#`X!]#`X!`#`X!b#`X!i#`X!m#`X!o#`X!p#`X!q#`X!r#`X!s#`X!u#`X!v#`X!y#`X!{#`X!}#`X#P#`X#R#`X#T#`X#V#`X#X#`X#Z#`X#]#`X#_#`X#a#`X#c#`X#e#`X#g#`X#i#`X#k#`X#m#`X#o#`X#q#`X#s#`X#u#`X#w#`X#y#`X#{#`X#}#`X$P#`X$R#`X$W#`X$[#`X$f#`X$h#`X$k#`X`#`Xa#`Xb#`X~O$]!fOZ#bX^#bXd#bXf#bXh#bXj#bXk#bXm#bXp#bXs#bXu#bXw#bXy#bX{#bX}#bX!]#bX!`#bX!b#bX!i#bX!m#bX!o#bX!p#bX!q#bX!r#bX!s#bX!u#bX!v#bX!y#bX!{#bX!}#bX#P#bX#R#bX#T#bX#V#bX#X#bX#Z#bX#]#bX#_#bX#a#bX#c#bX#e#bX#g#bX#i#bX#k#bX#m#bX#o#bX#q#bX#s#bX#u#bX#w#bX#y#bX#{#bX#}#bX$P#bX$R#bX$W#bX$[#bX$f#bX$h#bX$k#bX`#bXa#bXb#bX~O$]!fOZ#dX^#dXd#dXf#dXh#dXj#dXk#dXm#dXp#dXs#dXu#dXw#dXy#dX{#dX}#dX!]#dX!`#dX!b#dX!i#dX!m#dX!o#dX!p#dX!q#dX!r#dX!s#dX!u#dX!v#dX!y#dX!{#dX!}#dX#P#dX#R#dX#T#dX#V#dX#X#dX#Z#dX#]#dX#_#dX#a#dX#c#dX#e#dX#g#dX#i#dX#k#dX#m#dX#o#dX#q#dX#s#dX#u#dX#w#dX#y#dX#{#dX#}#dX$P#dX$R#dX$W#dX$[#dX$f#dX$h#dX$k#dX`#dXa#dXb#dX~O$]!fOZ#fX^#fXd#fXf#fXh#fXj#fXk#fXm#fXp#fXs#fXu#fXw#fXy#fX{#fX}#fX!]#fX!`#fX!b#fX!i#fX!m#fX!o#fX!p#fX!q#fX!r#fX!s#fX!u#fX!v#fX!y#fX!{#fX!}#fX#P#fX#R#fX#T#fX#V#fX#X#fX#Z#fX#]#fX#_#fX#a#fX#c#fX#e#fX#g#fX#i#fX#k#fX#m#fX#o#fX#q#fX#s#fX#u#fX#w#fX#y#fX#{#fX#}#fX$P#fX$R#fX$W#fX$[#fX$f#fX$h#fX$k#fX`#fXa#fXb#fX~O$]!fOZ#hX^#hXd#hXf#hXh#hXj#hXk#hXm#hXp#hXs#hXu#hXw#hXy#hX{#hX}#hX!]#hX!`#hX!b#hX!i#hX!m#hX!o#hX!p#hX!q#hX!r#hX!s#hX!u#hX!v#hX!y#hX!{#hX!}#hX#P#hX#R#hX#T#hX#V#hX#X#hX#Z#hX#]#hX#_#hX#a#hX#c#hX#e#hX#g#hX#i#hX#k#hX#m#hX#o#hX#q#hX#s#hX#u#hX#w#hX#y#hX#{#hX#}#hX$P#hX$R#hX$W#hX$[#hX$f#hX$h#hX$k#hX`#hXa#hXb#hX~O$]!fOZ#jX^#jXd#jXf#jXh#jXj#jXk#jXm#jXp#jXs#jXu#jXw#jXy#jX{#jX}#jX!]#jX!`#jX!b#jX!i#jX!m#jX!o#jX!p#jX!q#jX!r#jX!s#jX!u#jX!v#jX!y#jX!{#jX!}#jX#P#jX#R#jX#T#jX#V#jX#X#jX#Z#jX#]#jX#_#jX#a#jX#c#jX#e#jX#g#jX#i#jX#k#jX#m#jX#o#jX#q#jX#s#jX#u#jX#w#jX#y#jX#{#jX#}#jX$P#jX$R#jX$W#jX$[#jX$f#jX$h#jX$k#jX`#jXa#jXb#jX~O$]!fOZ#lX^#lXd#lXf#lXh#lXj#lXk#lXm#lXp#lXs#lXu#lXw#lXy#lX{#lX}#lX!]#lX!`#lX!b#lX!i#lX!m#lX!o#lX!p#lX!q#lX!r#lX!s#lX!u#lX!v#lX!y#lX!{#lX!}#lX#P#lX#R#lX#T#lX#V#lX#X#lX#Z#lX#]#lX#_#lX#a#lX#c#lX#e#lX#g#lX#i#lX#k#lX#m#lX#o#lX#q#lX#s#lX#u#lX#w#lX#y#lX#{#lX#}#lX$P#lX$R#lX$W#lX$[#lX$f#lX$h#lX$k#lX`#lXa#lXb#lX~O$]!fOZ#nX^#nXd#nXf#nXh#nXj#nXk#nXm#nXp#nXs#nXu#nXw#nXy#nX{#nX}#nX!]#nX!`#nX!b#nX!i#nX!m#nX!o#nX!p#nX!q#nX!r#nX!s#nX!u#nX!v#nX!y#nX!{#nX!}#nX#P#nX#R#nX#T#nX#V#nX#X#nX#Z#nX#]#nX#_#nX#a#nX#c#nX#e#nX#g#nX#i#nX#k#nX#m#nX#o#nX#q#nX#s#nX#u#nX#w#nX#y#nX#{#nX#}#nX$P#nX$R#nX$W#nX$[#nX$f#nX$h#nX$k#nX`#nXa#nXb#nX~O$]!fOZ#pX^#pXd#pXf#pXh#pXj#pXk#pXm#pXp#pXs#pXu#pXw#pXy#pX{#pX}#pX!]#pX!`#pX!b#pX!i#pX!m#pX!o#pX!p#pX!q#pX!r#pX!s#pX!u#pX!v#pX!y#pX!{#pX!}#pX#P#pX#R#pX#T#pX#V#pX#X#pX#Z#pX#]#pX#_#pX#a#pX#c#pX#e#pX#g#pX#i#pX#k#pX#m#pX#o#pX#q#pX#s#pX#u#pX#w#pX#y#pX#{#pX#}#pX$P#pX$R#pX$W#pX$[#pX$f#pX$h#pX$k#pX`#pXa#pXb#pX~O$]!fOZ#rX^#rXd#rXf#rXh#rXj#rXk#rXm#rXp#rXs#rXu#rXw#rXy#rX{#rX}#rX!]#rX!`#rX!b#rX!i#rX!m#rX!o#rX!p#rX!q#rX!r#rX!s#rX!u#rX!v#rX!y#rX!{#rX!}#rX#P#rX#R#rX#T#rX#V#rX#X#rX#Z#rX#]#rX#_#rX#a#rX#c#rX#e#rX#g#rX#i#rX#k#rX#m#rX#o#rX#q#rX#s#rX#u#rX#w#rX#y#rX#{#rX#}#rX$P#rX$R#rX$W#rX$[#rX$f#rX$h#rX$k#rX`#rXa#rXb#rX~O$]!fOZ#tX^#tXd#tXf#tXh#tXj#tXk#tXm#tXp#tXs#tXu#tXw#tXy#tX{#tX}#tX!]#tX!`#tX!b#tX!i#tX!m#tX!o#tX!p#tX!q#tX!r#tX!s#tX!u#tX!v#tX!y#tX!{#tX!}#tX#P#tX#R#tX#T#tX#V#tX#X#tX#Z#tX#]#tX#_#tX#a#tX#c#tX#e#tX#g#tX#i#tX#k#tX#m#tX#o#tX#q#tX#s#tX#u#tX#w#tX#y#tX#{#tX#}#tX$P#tX$R#tX$W#tX$[#tX$f#tX$h#tX$k#tX`#tXa#tXb#tX~O$]!fOZ#vX^#vXd#vXf#vXh#vXj#vXk#vXm#vXp#vXs#vXu#vXw#vXy#vX{#vX}#vX!]#vX!`#vX!b#vX!i#vX!m#vX!o#vX!p#vX!q#vX!r#vX!s#vX!u#vX!v#vX!y#vX!{#vX!}#vX#P#vX#R#vX#T#vX#V#vX#X#vX#Z#vX#]#vX#_#vX#a#vX#c#vX#e#vX#g#vX#i#vX#k#vX#m#vX#o#vX#q#vX#s#vX#u#vX#w#vX#y#vX#{#vX#}#vX$P#vX$R#vX$W#vX$[#vX$f#vX$h#vX$k#vX`#vXa#vXb#vX~O$]!fOZ#xX^#xXd#xXf#xXh#xXj#xXk#xXm#xXp#xXs#xXu#xXw#xXy#xX{#xX}#xX!]#xX!`#xX!b#xX!i#xX!m#xX!o#xX!p#xX!q#xX!r#xX!s#xX!u#xX!v#xX!y#xX!{#xX!}#xX#P#xX#R#xX#T#xX#V#xX#X#xX#Z#xX#]#xX#_#xX#a#xX#c#xX#e#xX#g#xX#i#xX#k#xX#m#xX#o#xX#q#xX#s#xX#u#xX#w#xX#y#xX#{#xX#}#xX$P#xX$R#xX$W#xX$[#xX$f#xX$h#xX$k#xX`#xXa#xXb#xX~O$]!fOZ#zX^#zXd#zXf#zXh#zXj#zXk#zXm#zXp#zXs#zXu#zXw#zXy#zX{#zX}#zX!]#zX!`#zX!b#zX!i#zX!m#zX!o#zX!p#zX!q#zX!r#zX!s#zX!u#zX!v#zX!y#zX!{#zX!}#zX#P#zX#R#zX#T#zX#V#zX#X#zX#Z#zX#]#zX#_#zX#a#zX#c#zX#e#zX#g#zX#i#zX#k#zX#m#zX#o#zX#q#zX#s#zX#u#zX#w#zX#y#zX#{#zX#}#zX$P#zX$R#zX$W#zX$[#zX$f#zX$h#zX$k#zX`#zXa#zXb#zX~O$]!fOZ#|X^#|Xd#|Xf#|Xh#|Xj#|Xk#|Xm#|Xp#|Xs#|Xu#|Xw#|Xy#|X{#|X}#|X!]#|X!`#|X!b#|X!i#|X!m#|X!o#|X!p#|X!q#|X!r#|X!s#|X!u#|X!v#|X!y#|X!{#|X!}#|X#P#|X#R#|X#T#|X#V#|X#X#|X#Z#|X#]#|X#_#|X#a#|X#c#|X#e#|X#g#|X#i#|X#k#|X#m#|X#o#|X#q#|X#s#|X#u#|X#w#|X#y#|X#{#|X#}#|X$P#|X$R#|X$W#|X$[#|X$f#|X$h#|X$k#|X`#|Xa#|Xb#|X~O$]!fOZ$OX^$OXd$OXf$OXh$OXj$OXk$OXm$OXp$OXs$OXu$OXw$OXy$OX{$OX}$OX!]$OX!`$OX!b$OX!i$OX!m$OX!o$OX!p$OX!q$OX!r$OX!s$OX!u$OX!v$OX!y$OX!{$OX!}$OX#P$OX#R$OX#T$OX#V$OX#X$OX#Z$OX#]$OX#_$OX#a$OX#c$OX#e$OX#g$OX#i$OX#k$OX#m$OX#o$OX#q$OX#s$OX#u$OX#w$OX#y$OX#{$OX#}$OX$P$OX$R$OX$W$OX$[$OX$f$OX$h$OX$k$OX`$OXa$OXb$OX~O$]!fOZ$QX^$QXd$QXf$QXh$QXj$QXk$QXm$QXp$QXs$QXu$QXw$QXy$QX{$QX}$QX!]$QX!`$QX!b$QX!i$QX!m$QX!o$QX!p$QX!q$QX!r$QX!s$QX!u$QX!v$QX!y$QX!{$QX!}$QX#P$QX#R$QX#T$QX#V$QX#X$QX#Z$QX#]$QX#_$QX#a$QX#c$QX#e$QX#g$QX#i$QX#k$QX#m$QX#o$QX#q$QX#s$QX#u$QX#w$QX#y$QX#{$QX#}$QX$P$QX$R$QX$W$QX$[$QX$f$QX$h$QX$k$QX`$QXa$QXb$QX~O$f#tO$g![O~O$g![O$h#uO~O$g![O$j#vO~O$]!fOZTa^TadTafTahTajTakTamTapTasTauTawTayTa{Ta}Ta!]Ta!`Ta!bTa!iTa!mTa!oTa!pTa!qTa!rTa!sTa!uTa!vTa!yTa!{Ta!}Ta#PTa#RTa#TTa#VTa#XTa#ZTa#]Ta#_Ta#aTa#cTa#eTa#gTa#iTa#kTa#mTa#oTa#qTa#sTa#uTa#wTa#yTa#{Ta#}Ta$PTa$RTa$WTa$[Ta$fTa$hTa$kTa`TaaTabTa~O$]!fOZWa^WadWafWahWajWakWamWapWasWauWawWayWa{Wa}Wa!]Wa!`Wa!bWa!iWa!mWa!oWa!pWa!qWa!rWa!sWa!uWa!vWa!yWa!{Wa!}Wa#PWa#RWa#TWa#VWa#XWa#ZWa#]Wa#_Wa#aWa#cWa#eWa#gWa#iWa#kWa#mWa#oWa#qWa#sWa#uWa#wWa#yWa#{Wa#}Wa$PWa$RWa$WWa$[Wa$fWa$hWa$kWa`WaaWabWa~O[#yOZYa^YadYafYahYajYakYamYapYasYauYawYayYa{Ya}Ya!]Ya!`Ya!bYa!iYa!mYa!oYa!pYa!qYa!rYa!sYa!uYa!vYa!yYa!{Ya!}Ya#PYa#RYa#TYa#VYa#XYa#ZYa#]Ya#_Ya#aYa#cYa#eYa#gYa#iYa#kYa#mYa#oYa#qYa#sYa#uYa#wYa#yYa#{Ya#}Ya$PYa$RYa$WYa$[Ya$fYa$hYa$kYa`YaaYabYa~O`_Xa_Xb_X~P`O`#{Oa#}Ob#|O~O$_$OO$`$OO~OZ$TO~O!^$[O~O$c$]O$d$^O~O$fPO~O$hQO~O`#{Oa$fOb$eO~O$_$OO$`$OOZna^nadnafnahnajnaknamnapnasnaunawnayna{na}na!]na!`na!bna!ina!mna!ona!pna!qna!rna!sna!una!vna!yna!{na!}na#Pna#Rna#Tna#Vna#Xna#Zna#]na#_na#ana#cna#ena#gna#ina#kna#mna#ona#qna#sna#una#wna#yna#{na#}na$Pna$Rna$Wna$[na$fna$hna$kna`naanabna$ana~Ob$kO~O$a$lO~Ob$qO~O$e$rO~Ob$sO~OQP$g!s$j!r!o!r$]!v!q!b!v~",
  goto: ".R$mPPPPP$nP%W$nP$nPP$nP'}PPP$nP$nP$nP$nPP$nP(^(gP(o$nP$nP$nP$nP$nP$nP$nP$nP$nP$nP$nP$nP$nPP$nP$nPP(u$nP)b$nP$nP$nP$nPPPPP)}PP$n*gP*gP*gP*gP*gP*gP*gP*gP*gP*gP*gP*gP*gP*gP*gP*gP*gP*gP*gP*gP*gP*gP*gP*gP*gP*gP*gP*gP+P+_+e+kPPP+yPPPPPPPPPPPPP-PPP-i}WOY]^_`adg!h!r!s!x!y!z!{!|!}#y#{#}$fQ!g[W!ob!t$O$[Q!rcQ!ufQ!whQ#OiQ#PjQ#SlQ#VnQ#WoQ#XpQ#YqQ#ZrQ#[sQ#]tQ#^uQ#_vQ#`wQ#axQ#byQ#czQ#d{Q#e|Q#f}Q#g!OQ#h!PQ#i!QQ#j!RQ#k!SQ#l!TQ#m!UQ#n!VQ#o!WQ#p!XQ#q!YQ#r!ZQ#w!dQ#x!eQ$a#TQ$b#UQ$m$TR$o$^Q!i]Q$Q!rQ$g#{Q$h#}R$p$fQ!qbQ$S!tR$n$[U!pb!t$[R$i$OX!ob!t$O$[|SOY]^_`adg!h!r!s!x!y!z!{!|!}#y#{#}$fR$_#Q|SOY]^_`adg!h!r!s!x!y!z!{!|!}#y#{#}$fR$`#R}SOY]^_`adg!h!r!s!x!y!z!{!|!}#y#{#}$f}UOY]^_`adg!h!r!s!x!y!z!{!|!}#y#{#}$fQYOS!cY!hZ!h]!r#{#}$fQ#z!iR$d#zQ$P!pR$j$PQ!]PQ!_QQ!aRV#s!]!_!a`XOY]!h!r#{#}$fQ!j^Q!k_Q!l`Q!maQ!sdQ!vgQ$R!sQ$U!xQ$V!yQ$W!zQ$X!{Q$Y!|Q$Z!}R$c#y}TOY]^_`adg!h!r!s!x!y!z!{!|!}#y#{#}$f}VOY]^_`adg!h!r!s!x!y!z!{!|!}#y#{#}$f",
  nodeNames: "⚠ LineComment BlockComment StringLiteral Rel InlineStatement inline VariableName InlineFunction function InStatement in where IfStatement if Body then else end IffStatement iff NotStatement not XorStatement xor AndOrStatement and or FromStatement from MultipleArguments RelArgument RelnameLiteral EmptyRelation ModuleStatement module ForallStatement forall ForEachStatement foreach ForInStatement for ImpliesStatement implies DefineStatement def ImportDefinitionStatement abort ExportDefinitionStatement export ConfigDefinitionStatement config DeleteDefinitionStatement delete InsertDefinitionStatement insert OutputDefinitionStatement output WithUseStatement with use ConstraintStatement ic RawStringLiteral LineStart raw MultilineRawStringLiteral DocStringLiteral doc MultilineStringLiteral EntityStatement entity EntityTypeStatement type ValueTypeStatement value ExpressionStatement Number BooleanLiteral Operator DateLiteral DatetimeLiteral MultilineBlockComment RelnameStringLiteral ValueTypeLiteral TypeStatement IntType Int StringType String AnyType Any NumberType Number CharType Char MissingType Missing FloatingType Floating UnsignedIntType UnsignedInt SignedIntType SignedInt RationalType Rational FixedDecimalType FixedDecimal RelNameType RelName EntityType Entity AutoNumberType AutoNumber HashType Hash FilePosType FilePos DateType Date DateTimeType DateTime YearType Year MonthType Month WeekType Week DayType Day HourType Hour MinuteType Minute SecondType Second MillisecondType Millisecond MicrosecondType Microsecond NanosecondType Nanosecond",
  maxTerm: 166,
  nodeProps: [
    ["group", -11,32,66,69,77,78,79,80,81,82,83,84,"Expression",-28,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,"Type"]
  ],
  skippedNodes: [0,1,2,3],
  repeatNodeCount: 4,
  tokenData: "$#j~R#]OX'zXY*kYZ+bZ]'z]^*k^p'zpq*kqr+urs-gsu'zuv,pvw'zwx7gxz'zz{,p{|?k|}Ac}!O,p!O!PBY!P!QH`!Q!R!&f!R![!Ev![!]!GV!]!^#9b!^!_#:X!_!`#<]!`!a#=U!a!b'z!b!c#>R!c!}#>x!}#O#@e#O#P'z#P#Q#A[#Q#R#BR#R#S#Fp#S#T'z#T#U#HZ#U#c#>x#c#d#M^#d#o#>x#o#p$ P#p#q'z#q#r$!s#r$r'z$r$s,p$s%o'z%o%p,p%p&a'z&a&b,p&b4w'z4w5b#>x5b5i'z5i6S#>x6S%#t'z%#t%#u,p%#u%#v'z%#v%#w,p%#w%%U'z%%U%%V,p%%V%%W'z%%W%%X,p%%X%%Y'z%%Y%%Z,p%%Z%%['z%%[%%],p%%]%&b'z%&b%&c,p%&c%'R'z%'R%'S,p%'S%'T,p%'T%'U,p%'U%'V,p%'V%'h'z%'h%'i,p%'i%'t'z%'t%'u,p%'u%(^'z%(^%(_,p%(_%(`,p%(`%(a,p%(a%(b'z%(b%(c,p%(c%(d,p%(d%(x'z%(x%(y,p%(y%(z,p%(z%({,p%({%(|,p%(|%)Q'z%)Q%)R,p%)R%)S,p%)S%)U'z%)U%)V,p%)V%)W,p%)W%)c'z%)c%)d,p%)d%)e,p%)e%)f,p%)f%)g'z%)g%)h,p%)h%)i'z%)i%)j,p%)j%*]'z%*]%*^,p%*^~'zQ(PY$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs~'zQ(tS$gQXY(oYZ(o]^(opq(oQ)TTOY)dYZ*VZr)drs*[s~)dQ)gYOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs~'zQ*[O$gQQ*_SOY)dYZ*VZr)ds~)dV*rY$YT$gQOX'zXY*kYZ+bZ]'z]^*k^p'zpq*kqr'zrs)Qs~'zV+iS$YT$gQXY+bYZ+b]^+bpq+bR+z[$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!_'z!_!`,p!`~'zR,wY$gQ!qPOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs~'z~-lVR~OY.RYZ5`Zr.Rrs5gs#O.R#O#P6r#P~.R~.Y[$f~R~OX/OXY/OYZ(oZ]/O]^/O^p/Opq/Oqr/Ors/{s#O/O#O#P0a#P~/O~/V[$gQR~OX/OXY/OYZ(oZ]/O]^/O^p/Opq/Oqr/Ors/{s#O/O#O#P0a#P~/O~0QTR~OY)dYZ*VZr)drs*[s~)d~0fY$gQOX/OXY/OYZ1UZ]/O]^/O^p/Opq/Oqr/Ors2us~/O~1][$gQR~OX2RXY1UYZ(oZ]2R]^1U^p2Rpq1Uqr2Rrs2js#O2R#O#P2o#P~2R~2WUR~OY2RZr2Rrs2js#O2R#O#P2o#P~2R~2oOR~~2rPO~2R~2zVR~OY3aYZ*VZr3ars4[s#O3a#O#P4m#P~3a~3f[R~OX/OXY/OYZ(oZ]/O]^/O^p/Opq/Oqr/Ors/{s#O/O#O#P0a#P~/O~4aSR~OY)dYZ*VZr)ds~)d~4pYOX/OXY/OYZ1UZ]/O]^/O^p/Opq/Oqr/Ors2us~/O~5gO$f~$gQ~5lTR~OY)dYZ*VZr)drs5{s~)d~6QR$h~Or6Zrs6`s~6Z~6`O$f~~6cPrs6f~6iROr6Zrs6`s~6Z~6wY$f~OX/OXY/OYZ1UZ]/O]^/O^p/Opq/Oqr/Ors2us~/O~7n^$gQR~OX7gXY7gYZ(oZ]7g]^7g^p7gpq7gqr7grs8jsw7gwx:]x#O7g#O#P;S#P~7g~8oXR~OY9[YZ*VZr9[rs=csw9[wx>Tx#O9[#O#P>x#P~9[~9a^R~OX7gXY7gYZ(oZ]7g]^7g^p7gpq7gqr7grs8jsw7gwx:]x#O7g#O#P;S#P~7g~:dY$gQR~OX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs~'z~;XY$gQOX7gXY7gYZ;wZ]7g]^7g^p7gpq7gqr7grs8js~7g~<O[$gQR~OX<tXY;wYZ(oZ]<t]^;w^p<tpq;wqw<twx2jx#O<t#O#P=]#P~<t~<yUR~OY<tZw<twx2jx#O<t#O#P=]#P~<t~=`PO~<t~=hXR~OY9[YZ*VZr9[rs<tsw9[wx>Tx#O9[#O#P>x#P~9[~>YYR~OX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs~'z~>{YOX7gXY7gYZ;wZ]7g]^7g^p7gpq7gqr7grs8js~7gR?r[$gQ!qPOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs{'z{|@h|~'zR@m[$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!`'z!`!a,p!a~'zRAjY$_P$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs~'zRBa^$gQ!qPOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!O'z!O!PC]!P!Q'z!Q![DW![~'zRCb[$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!O'z!O!P,p!P~'zRD_`$gQ!oPOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![DW![!g'z!g!hEa!h#X'z#X#YEa#Y~'zREf`$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs{'z{|Fh|}'z}!OFh!O!Q'z!Q![Gc![~'zRFm[$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![Gc![~'zRGj[$gQ!oPOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![Gc![~'z~Hg^$gQ!qPOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qsz'zz{Ic{!P'z!P!Q!#u!Q~'z~Il[$k~$gQ$jQOXJbXYJbYZK]Z]Jb]^Jb^pJbpqJbqrJbrsLuszJbz{NW{~JbVJg[$gQOXJbXYJbYZK]Z]Jb]^Jb^pJbpqJbqrJbrsLuszJbz{NW{~JbVKbY$gQOXLQXYK]YZK]Z]LQ]^K]^pLQpqK]qzLQz{L^{~LQTLTROzLQz{L^{~LQTLaTOzLQz{L^{!PLQ!P!QLp!Q~LQTLuOQTVLxVOYM_YZ!!OZrM_rs!!^szM_z{!!v{~M_VMb[OXJbXYJbYZK]Z]Jb]^Jb^pJbpqJbqrJbrsLuszJbz{NW{~JbVN]^$gQOXJbXYJbYZK]Z]Jb]^Jb^pJbpqJbqrJbrsLuszJbz{NW{!PJb!P!Q! X!Q~JbV! `YQT$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs~'zV!!TR$gQOzLQz{L^{~LQV!!aVOYM_YZ!!OZrM_rsLQszM_z{!!v{~M_V!!y^OXJbXYJbYZK]Z]Jb]^Jb^pJbpqJbqrJbrsLuszJbz{NW{!PJb!P!Q! X!Q~JbV!#|YPT$gQOX!#uXY!#uYZ(oZ]!#u]^!#u^p!#upq!#uqr!#urs!$ls~!#uV!$qTPTOY!%QYZ*VZr!%Qrs!%us~!%QV!%VYPTOX!#uXY!#uYZ(oZ]!#u]^!#u^p!#upq!#uqr!#urs!$ls~!#uV!%zTPTOY!%QYZ*VZr!%Qrs!&Zs~!%QT!&`QPTOY!&ZZ~!&ZR!&mf$gQ!oPOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!O'z!O!P!(R!P!Q'z!Q![!)Y![!g'z!g!hEa!h#X'z#X#YEa#Y#c'z#c#d!An#d#l'z#l#m!Cf#m~'zR!(W`$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![!(R![!g'z!g!hEa!h#X'z#X#YEa#Y~'zR!)ab$gQ!oPOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!O'z!O!P!(R!P!Q'z!Q![!*i![!g'z!g!hEa!h#X'z#X#YEa#Y~'zR!*pb$gQ!oPOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!O'z!O!P!(R!P!Q'z!Q![!+x![!g'z!g!hEa!h#X'z#X#YEa#Y~'zR!,Pc$gQ!oPOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs}'z}!O!-[!O!P!(R!P!Q'z!Q![!@_![!g'z!g!hEa!h#X'z#X#YEa#Y~'zR!-a[$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![!.V![~'zR!.[[$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![!/Q![~'zR!/V[$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs}'z}!O!/{!O~'zR!0Q[$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![!0v![~'zR!0{[$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![!1q![~'zR!1x[$gQ!rPOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!v'z!v!w!2n!w~'zR!2s[$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![!3i![~'zR!3n[$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![!4d![~'zR!4i[$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!['z![!]!5_!]~'zR!5d[$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![!6Y![~'zR!6_[$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![!7T![~'zR!7Y[$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!['z![!]!8O!]~'zR!8T[$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![!8y![~'zR!9O[$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![!9t![~'zR!9yb$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs{'z{|!;R|}'z}!O!;R!O!Q'z!Q![!;|![!|'z!|!}!?h!}~'zR!;W[$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![!;|![~'zR!<R[$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![!<w![~'zR!<|[$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!['z![!]!=r!]~'zR!=w[$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![!>m![~'zR!>r[$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![!?h![~'zR!?oY$gQ!sPOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs~'zR!@fb$gQ!oPOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!O'z!O!P!(R!P!Q'z!Q![!@_![!g'z!g!hEa!h#X'z#X#YEa#Y~'zR!As[$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q!Y!Bi!Y~'zR!Bp[$gQ!oPOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q!Y!Bi!Y~'zR!Ck`$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![!Dm![!c'z!c!i!Dm!i#T'z#T#Z!Dm#Z~'zR!Dt`$gQ!oPOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![!Dm![!c'z!c!i!Dm!i#T'z#T#Z!Dm#Z~'zR!E}b$gQ!oPOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!O'z!O!P!(R!P!Q'z!Q![!)Y![!g'z!g!hEa!h#X'z#X#YEa#Y~'zR!G[g$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs!Hss!`'z!`!a,p!a!c'z!c!}#6T!}#O#7p#O#R'z#R#S#6T#S#T'z#T#o#6T#o4w'z4w5b#6T5b5i'z5i6S#6T6S~'zR!HvZOY)dYZ!IiZ])d]^# Z^r)drs#$ms#O)d#O#P#%e#P#Q)d#Q#R# Z#R~)dR!InT$gQYZ!I}]^!I}rs!Ja#O#P!Ju#Q#R!I}P!JQTYZ!I}]^!I}rs!Ja#O#P!Ju#Q#R!I}P!JfT!uPYZ!I}]^!I}rs!Ja#O#P!Ju#Q#R!I}P!JxeYZ!I}]^!I}rs!Ja!Q!R!LZ!R!S!LZ!S!T!LZ!T!U!LZ!U!Y!Lp!w!x!MV#O#P!Ju#Q#R!I}#T#U!I}#U#V!I}#X#Y!I}#Y#Z!I}#b#c!I}#f#g!I}#h#i!I}#i#j!NX#j#k!I}#l#m!NqP!L^UYZ!I}]^!I}rs!Ja!Q!Y!Lp#O#P!Ju#Q#R!I}P!LsUYZ!I}]^!I}rs!Ja!Q!Y!I}#O#P!Ju#Q#R!I}P!MYR!Q![!Mc!c!i!Mc#T#Z!McP!MfR!Q![!Mo!c!i!Mo#T#Z!MoP!MrR!Q![!M{!c!i!M{#T#Z!M{P!NOR!Q![!NX!c!i!NX#T#Z!NXP!N[R!Q![!Ne!c!i!Ne#T#Z!NeP!NhR!Q![!Nq!c!i!Nq#T#Z!NqP!NtR!Q![!N}!c!i!N}#T#Z!N}P# QR!Q![!I}!c!i!I}#T#Z!I}R# ^^OX'zXY'zYZ#!YZ]'z]^#!t^p'zpq'zqr'zrs##us#O'z#O#P#*^#P#Q'z#Q#R#!t#R~'zR#!_V$gQXY(oYZ#!Y]^#!Ypq(ors!Ja#O#P!Ju#Q#R!I}R#!y^$gQOX'zXY'zYZ#!YZ]'z]^#!t^p'zpq'zqr'zrs##us#O'z#O#P#*^#P#Q'z#Q#R#!t#R~'zR##zZ!uPOY)dYZ!IiZ])d]^# Z^r)drs#$ms#O)d#O#P#%e#P#Q)d#Q#R# Z#R~)dR#$rZ!uPOY)dYZ!IiZ])d]^# Z^r)drs!Jas#O)d#O#P#%e#P#Q)d#Q#R# Z#R~)dR#%hvOX'zXY'zYZ#!YZ]'z]^#!t^p'zpq'zqr'zrs##us!Q'z!Q!R#(O!R!S#(O!S!T#(O!T!U#(O!U!Y#)V!Y!w'z!w!x#,y!x#O'z#O#P#*^#P#Q'z#Q#R#!t#R#T'z#T#U#!t#U#V#!t#V#X'z#X#Y#!t#Y#Z#!t#Z#b'z#b#c#!t#c#f'z#f#g#!t#g#h'z#h#i#!t#i#j#1g#j#k#!t#k#l'z#l#m#3u#m~'zR#(T`$gQOX'zXY'zYZ#!YZ]'z]^#!t^p'zpq'zqr'zrs##us!Q'z!Q!Y#)V!Y#O'z#O#P#*^#P#Q'z#Q#R#!t#R~'zR#)[`$gQOX'zXY'zYZ#!YZ]'z]^#!t^p'zpq'zqr'zrs##us!Q'z!Q!Y#!t!Y#O'z#O#P#*^#P#Q'z#Q#R#!t#R~'zR#*cv$gQOX'zXY'zYZ#!YZ]'z]^#!t^p'zpq'zqr'zrs##us!Q'z!Q!R#(O!R!S#(O!S!T#(O!T!U#(O!U!Y#)V!Y!w'z!w!x#,y!x#O'z#O#P#*^#P#Q'z#Q#R#!t#R#T'z#T#U#!t#U#V#!t#V#X'z#X#Y#!t#Y#Z#!t#Z#b'z#b#c#!t#c#f'z#f#g#!t#g#h'z#h#i#!t#i#j#1g#j#k#!t#k#l'z#l#m#3u#m~'zR#-O`$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![#.Q![!c'z!c!i#.Q!i#T'z#T#Z#.Q#Z~'zR#.V`$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![#/X![!c'z!c!i#/X!i#T'z#T#Z#/X#Z~'zR#/^`$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![#0`![!c'z!c!i#0`!i#T'z#T#Z#0`#Z~'zR#0e`$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![#1g![!c'z!c!i#1g!i#T'z#T#Z#1g#Z~'zR#1l`$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![#2n![!c'z!c!i#2n!i#T'z#T#Z#2n#Z~'zR#2s`$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![#3u![!c'z!c!i#3u!i#T'z#T#Z#3u#Z~'zR#3z`$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![#4|![!c'z!c!i#4|!i#T'z#T#Z#4|#Z~'zR#5R`$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![#!t![!c'z!c!i#!t!i#T'z#T#Z#!t#Z~'zR#6[fpP$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![#6T![!c'z!c!}#6T!}#R'z#R#S#6T#S#T'z#T#o#6T#o4w'z4w5b#6T5b5i'z5i6S#6T6S~'zR#7u[$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs#P'z#P#Q#8k#Q~'zR#8rYpP$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs~'zR#9iY$`P$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs~'zR#:``$gQ!qPOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs{'z{|#;b|!['z![!],p!]!_'z!_!`,p!`~'zR#;g[$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs{'z{|,p|~'zV#<fY$cS$gQ!qPOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs~'zR#=][$gQ!qPOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!_'z!_!`,p!`~'zR#>YY$[P$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs~'zR#?Pf$gQ$]POX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![#>x![!c'z!c!}#>x!}#R'z#R#S#>x#S#T'z#T#o#>x#o4w'z4w5b#>x5b5i'z5i6S#>x6S~'zR#@lY$bP$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs~'zR#AcY$aP$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs~'zR#B[d$gQ!qP!bPOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!c'z!c!}#Cj!}#R'z#R#S#EV#S#T'z#T#o#Cj#o4w'z4w5b#Cj5b5i'z5i6S#Cj6S~'zR#Cqf$gQ!vPOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![#Cj![!c'z!c!}#Cj!}#R'z#R#S#Cj#S#T'z#T#o#Cj#o4w'z4w5b#Cj5b5i'z5i6S#Cj6S~'zR#E[f$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![#Cj![!c'z!c!}#Cj!}#R'z#R#S#Cj#S#T'z#T#o#Cj#o4w'z4w5b#Cj5b5i'z5i6S#Cj6S~'zR#Fuf$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![#>x![!c'z!c!}#>x!}#R'z#R#S#>x#S#T'z#T#o#>x#o4w'z4w5b#>x5b5i'z5i6S#>x6S~'zR#Hbh$gQ$]POX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![#>x![!c'z!c!}#>x!}#R'z#R#S#>x#S#T'z#T#b#>x#b#c#I|#c#o#>x#o4w'z4w5b#>x5b5i'z5i6S#>x6S~'zR#JTh$gQ$]POX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![#>x![!c'z!c!}#>x!}#R'z#R#S#>x#S#T'z#T#W#>x#W#X#Ko#X#o#>x#o4w'z4w5b#>x5b5i'z5i6S#>x6S~'zR#Kxf$gQ$]P!qPOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![#>x![!c'z!c!}#>x!}#R'z#R#S#>x#S#T'z#T#o#>x#o4w'z4w5b#>x5b5i'z5i6S#>x6S~'zR#Meh$gQ$]POX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs!Q'z!Q![#>x![!c'z!c!}#>x!}#R'z#R#S#>x#S#T'z#T#f#>x#f#g#Ko#g#o#>x#o4w'z4w5b#>x5b5i'z5i6S#>x6S~'zV$ W[$dS$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs#q'z#q#r$ |#r~'zR$!TY$^P$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs~'zR$!zY$eP$gQOX'zXY'zYZ(oZ]'z]^'z^p'zpq'zqr'zrs)Qs~'z",
  tokenizers: [0, 1, 2],
  topRules: {"Rel":[0,4]},
  specialized: [{term: 151, get: value => spec_identifier[value] || -1}],
  tokenPrec: 6815
});

const autocompleteList = [
    { label: "Any", type: "type" },
    { label: "AutoNumber", type: "type" },
    { label: "Boolean", type: "type" },
    { label: "Char", type: "type" },
    { label: "Day", type: "type" },
    { label: "Date", type: "type" },
    { label: "DateTime", type: "type" },
    { label: "Year", type: "type" },
    { label: "Month", type: "type" },
    { label: "Week", type: "type" },
    { label: "Hour", type: "type" },
    { label: "Minute", type: "type" },
    { label: "Second", type: "type" },
    { label: "Millisecond", type: "type" },
    { label: "Microsecond", type: "type" },
    { label: "Nanosecond", type: "type" },
    { label: "Entity", type: "type" },
    { label: "Int", type: "type" },
    { label: "Number", type: "type" },
    { label: "Missing", type: "type" },
    { label: "Floating", type: "type" },
    { label: "UnsignedInt", type: "type" },
    { label: "SignedInt", type: "type" },
    { label: "Rational", type: "type" },
    { label: "FixedDecimal", type: "type" },
    { label: "Hash", type: "type" },
    { label: "FilePos", type: "type" },
    { label: "String", type: "type" },
    { label: "def", type: "keyword" },
    { label: "output", type: "interface" },
    { label: "insert", type: "interface" },
    { label: "delete", type: "interface" },
    { label: "export", type: "interface" },
    { label: "from", type: "keyword" },
    { label: "if", type: "keyword" },
    { label: "iff", type: "keyword" },
    { label: "then", type: "keyword" },
    { label: "else", type: "keyword" },
    { label: "end", type: "keyword" },
    { label: "exists", type: "keyword" },
    { label: "where", type: "keyword" },
    { label: "with", type: "keyword" },
    { label: "select", type: "keyword" },
    { label: "implies", type: "keyword" },
    { label: "use", type: "keyword" },
    { label: "forall", type: "keyword" },
    { label: "in", type: "keyword" },
    { label: "ic", type: "keyword" },
    { label: "not", type: "keyword" },
    { label: "and", type: "keyword" },
    { label: "or", type: "keyword" },
    { label: "xor", type: "keyword" },
    { label: "union", type: "keyword" },
    { label: "_flatten", type: "function" },
    { label: "abelian_group", type: "function" },
    { label: "abs", type: "function" },
    { label: "absorption_laws", type: "function" },
    { label: "acos", type: "function" },
    { label: "acosh", type: "function" },
    { label: "acot", type: "function" },
    { label: "add", type: "function" },
    { label: "antisymmetric", type: "function" },
    { label: "approximate_abelian_group", type: "function" },
    { label: "approximate_commutative_monoid", type: "function" },
    { label: "approximate_group", type: "function" },
    { label: "approximate_monoid", type: "function" },
    { label: "approximate_ring", type: "function" },
    { label: "approximate_semiring", type: "function" },
    { label: "approximately_associative", type: "function" },
    { label: "approximately_commutative", type: "function" },
    { label: "approximately_distributive", type: "function" },
    { label: "approximately_has_inverse", type: "function" },
    { label: "approximately_left_distributive", type: "function" },
    { label: "approximately_right_distributive", type: "function" },
    { label: "approximately_zero_annihilation", type: "function" },
    { label: "argmax", type: "function" },
    { label: "argmin", type: "function" },
    { label: "arity", type: "function" },
    { label: "asin", type: "function" },
    { label: "asinh", type: "function" },
    { label: "associative", type: "function" },
    { label: "atan", type: "function" },
    { label: "atanh", type: "function" },
    { label: "auto_number", type: "function" },
    { label: "binary_operator", type: "function" },
    { label: "binary_relation", type: "function" },
    { label: "binary_relation_substitution_laws", type: "function" },
    { label: "bitwise_and", type: "function" },
    { label: "bitwise_left_shift", type: "function" },
    { label: "bitwise_not", type: "function" },
    { label: "bitwise_or", type: "function" },
    { label: "bitwise_right_shift", type: "function" },
    { label: "bitwise_unsigned_right_shift", type: "function" },
    { label: "bitwise_xor", type: "function" },
    { label: "boolean_and", type: "function" },
    { label: "boolean_false", type: "function" },
    { label: "boolean_not", type: "function" },
    { label: "boolean_or", type: "function" },
    { label: "boolean_true", type: "function" },
    { label: "bottom", type: "function" },
    { label: "bounded_lattice", type: "function" },
    { label: "bounded_semilattice", type: "function" },
    { label: "byte", type: "function" },
    { label: "capture_group_by_index", type: "function" },
    { label: "capture_group_by_name", type: "function" },
    { label: "cart", type: "function" },
    { label: "cbrt", type: "function" },
    { label: "ceil", type: "function" },
    { label: "char", type: "function" },
    { label: "clamp", type: "function" },
    { label: "commutative", type: "function" },
    { label: "commutative_monoid", type: "function" },
    { label: "comparable", type: "function" },
    { label: "complement", type: "function" },
    { label: "concat", type: "function" },
    { label: "cos", type: "function" },
    { label: "cosh", type: "function" },
    { label: "cot", type: "function" },
    { label: "count", type: "function" },
    { label: "date_add", type: "function" },
    { label: "date_day", type: "function" },
    { label: "date_dayname", type: "function" },
    { label: "date_dayofquarter", type: "function" },
    { label: "date_dayofweek", type: "function" },
    { label: "date_dayofweekofmonth", type: "function" },
    { label: "date_dayofyear", type: "function" },
    { label: "date_daysinmonth", type: "function" },
    { label: "date_isleapyear", type: "function" },
    { label: "date_month", type: "function" },
    { label: "date_monthname", type: "function" },
    { label: "date_quarterofyear", type: "function" },
    { label: "date_subtract", type: "function" },
    { label: "date_week", type: "function" },
    { label: "date_year", type: "function" },
    { label: "dates_period_days", type: "function" },
    { label: "datetime_add", type: "function" },
    { label: "datetime_day", type: "function" },
    { label: "datetime_day_", type: "function" },
    { label: "datetime_dayname", type: "function" },
    { label: "datetime_dayofquarter", type: "function" },
    { label: "datetime_dayofweek", type: "function" },
    { label: "datetime_dayofweekofmonth", type: "function" },
    { label: "datetime_dayofyear", type: "function" },
    { label: "datetime_daysinmonth", type: "function" },
    { label: "datetime_hour", type: "function" },
    { label: "datetime_hour_", type: "function" },
    { label: "datetime_isleapyear", type: "function" },
    { label: "datetime_minute", type: "function" },
    { label: "datetime_minute_", type: "function" },
    { label: "datetime_month", type: "function" },
    { label: "datetime_month_", type: "function" },
    { label: "datetime_monthname", type: "function" },
    { label: "datetime_now", type: "function" },
    { label: "datetime_quarterofyear", type: "function" },
    { label: "datetime_second", type: "function" },
    { label: "datetime_subtract", type: "function" },
    { label: "datetime_to_nanoseconds", type: "function" },
    { label: "datetime_week", type: "function" },
    { label: "datetime_week_", type: "function" },
    { label: "datetime_year", type: "function" },
    { label: "datetime_year_", type: "function" },
    { label: "datetimes_period_milliseconds", type: "function" },
    { label: "decimal", type: "function" },
    { label: "decimal_bit_length", type: "function" },
    { label: "decimal_int_convert", type: "function" },
    { label: "decimal_precision", type: "function" },
    { label: "decode_base", type: "function" },
    { label: "default_value", type: "function" },
    { label: "deg", type: "function" },
    { label: "denominator", type: "function" },
    { label: "describe", type: "function" },
    { label: "diff", type: "function" },
    { label: "disjoint", type: "function" },
    { label: "distributive", type: "function" },
    { label: "divide", type: "function" },
    { label: "docstring", type: "function" },
    { label: "domain", type: "function" },
    { label: "dot_join", type: "function" },
    { label: "double_metaphone", type: "function" },
    { label: "empty", type: "function" },
    { label: "encode_base", type: "function" },
    { label: "epoch_milliseconds", type: "function" },
    { label: "eq", type: "function" },
    { label: "equal", type: "function" },
    { label: "equivalence_relation", type: "function" },
    { label: "erf", type: "function" },
    { label: "erfinv", type: "function" },
    { label: "escape_regex_metachars", type: "function" },
    { label: "export_csv", type: "function" },
    { label: "export_json", type: "function" },
    { label: "factorial", type: "function" },
    { label: "filepos", type: "function" },
    { label: "filepos_value", type: "function" },
    { label: "first", type: "function" },
    { label: "float", type: "function" },
    { label: "float_int_convert", type: "function" },
    { label: "floor", type: "function" },
    { label: "floor_divide", type: "function" },
    { label: "floor_to_int", type: "function" },
    { label: "format_date", type: "function" },
    { label: "format_datetime", type: "function" },
    { label: "formula_card_est", type: "function" },
    { label: "frequency", type: "function" },
    { label: "function", type: "function" },
    { label: "geometric_mean", type: "function" },
    { label: "glm_generic", type: "function" },
    { label: "glm_linear_regression", type: "function" },
    { label: "glm_logistic_regression", type: "function" },
    { label: "glm_predict", type: "function" },
    { label: "glm_probit_regression", type: "function" },
    { label: "graphviz", type: "function" },
    { label: "group", type: "function" },
    { label: "gt", type: "function" },
    { label: "gt_eq", type: "function" },
    { label: "harmonic_mean", type: "function" },
    { label: "has_identity", type: "function" },
    { label: "has_left_identity", type: "function" },
    { label: "has_left_zero", type: "function" },
    { label: "has_maximal_element", type: "function" },
    { label: "has_minimal_element", type: "function" },
    { label: "has_right_identity", type: "function" },
    { label: "has_right_zero", type: "function" },
    { label: "hash", type: "function" },
    { label: "hash_value_uint", type: "function" },
    { label: "haversine", type: "function" },
    { label: "help", type: "function" },
    { label: "html", type: "function" },
    { label: "ic", type: "function" },
    { label: "idempotent", type: "function" },
    { label: "identity", type: "function" },
    { label: "int", type: "function" },
    { label: "int_float_convert", type: "function" },
    { label: "int_spread_by_even", type: "function" },
    { label: "int_spread_by_ratio", type: "function" },
    { label: "intersect", type: "function" },
    { label: "irreflexive", type: "function" },
    { label: "is_", type: "function" },
    { label: "jacobian", type: "function" },
    { label: "join_bounded_lattice", type: "function" },
    { label: "last", type: "function" },
    { label: "lattice", type: "function" },
    { label: "left_distributive", type: "function" },
    { label: "left_identity", type: "function" },
    { label: "left_override", type: "function" },
    { label: "left_zero", type: "function" },
    { label: "levenshtein", type: "function" },
    { label: "like_match", type: "function" },
    { label: "linear_regression", type: "function" },
    { label: "linear_regression_objective", type: "function" },
    { label: "linear_regression_predict", type: "function" },
    { label: "lined_csv", type: "function" },
    { label: "load_csv", type: "function" },
    { label: "load_csv_row_wise", type: "function" },
    { label: "load_json", type: "function" },
    { label: "log", type: "function" },
    { label: "log_card_est", type: "function" },
    { label: "lowercase", type: "function" },
    { label: "lr_random_initial_point", type: "function" },
    { label: "lt", type: "function" },
    { label: "lt_eq", type: "function" },
    { label: "mae", type: "function" },
    { label: "markdown", type: "function" },
    { label: "max", type: "function" },
    { label: "max_k", type: "function" },
    { label: "maximal_element", type: "function" },
    { label: "maximum", type: "function" },
    { label: "mean", type: "function" },
    { label: "mean_normalization", type: "function" },
    { label: "median", type: "function" },
    { label: "meet_bounded_lattice", type: "function" },
    { label: "metaphone", type: "function" },
    { label: "min", type: "function" },
    { label: "min_k", type: "function" },
    { label: "min_max_normalization", type: "function" },
    { label: "minimal_element", type: "function" },
    { label: "minimize_initial_point", type: "function" },
    { label: "minimum", type: "function" },
    { label: "missing", type: "function" },
    { label: "mlpack_adaboost", type: "function" },
    { label: "mlpack_adaboost_predict", type: "function" },
    { label: "mlpack_approx_kfn", type: "function" },
    { label: "mlpack_approx_kfn_build", type: "function" },
    { label: "mlpack_dbscan", type: "function" },
    { label: "mlpack_decision_tree", type: "function" },
    { label: "mlpack_decision_tree_predict", type: "function" },
    { label: "mlpack_det", type: "function" },
    { label: "mlpack_det_build", type: "function" },
    { label: "mlpack_emst", type: "function" },
    { label: "mlpack_fastmks", type: "function" },
    { label: "mlpack_fastmks_build", type: "function" },
    { label: "mlpack_gmm_generate", type: "function" },
    { label: "mlpack_gmm_probability", type: "function" },
    { label: "mlpack_gmm_train", type: "function" },
    { label: "mlpack_hoeffding_tree", type: "function" },
    { label: "mlpack_hoeffding_tree_predict", type: "function" },
    { label: "mlpack_kernel_pca", type: "function" },
    { label: "mlpack_kfn", type: "function" },
    { label: "mlpack_kfn_build", type: "function" },
    { label: "mlpack_kmeans", type: "function" },
    { label: "mlpack_kmeans_centroids", type: "function" },
    { label: "mlpack_knn", type: "function" },
    { label: "mlpack_knn_build", type: "function" },
    { label: "mlpack_krann", type: "function" },
    { label: "mlpack_krann_build", type: "function" },
    { label: "mlpack_lars", type: "function" },
    { label: "mlpack_lars_predict", type: "function" },
    { label: "mlpack_linear_regression", type: "function" },
    { label: "mlpack_linear_regression_predict", type: "function" },
    { label: "mlpack_linear_svm", type: "function" },
    { label: "mlpack_linear_svm_predict", type: "function" },
    { label: "mlpack_logistic_regression", type: "function" },
    { label: "mlpack_logistic_regression_predict", type: "function" },
    { label: "mlpack_lsh", type: "function" },
    { label: "mlpack_lsh_build", type: "function" },
    { label: "mlpack_mean_shift", type: "function" },
    { label: "mlpack_nbc", type: "function" },
    { label: "mlpack_nbc_predict", type: "function" },
    { label: "mlpack_nmf", type: "function" },
    { label: "mlpack_pca", type: "function" },
    { label: "mlpack_perceptron", type: "function" },
    { label: "mlpack_perceptron_predict", type: "function" },
    { label: "mlpack_preprocess_split", type: "function" },
    { label: "mlpack_radical", type: "function" },
    { label: "mlpack_random_forest", type: "function" },
    { label: "mlpack_random_forest_predict", type: "function" },
    { label: "mlpack_softmax_regression", type: "function" },
    { label: "mlpack_softmax_regression_predict", type: "function" },
    { label: "mode", type: "function" },
    { label: "modulo", type: "function" },
    { label: "monoid", type: "function" },
    { label: "mse", type: "function" },
    { label: "multiply", type: "function" },
    { label: "murmurhash", type: "function" },
    { label: "nanoseconds_to_datetime", type: "function" },
    { label: "natural_exp", type: "function" },
    { label: "natural_log", type: "function" },
    { label: "neq", type: "function" },
    { label: "not", type: "function" },
    { label: "nullary_relation", type: "function" },
    { label: "num_bytes", type: "function" },
    { label: "num_chars", type: "function" },
    { label: "numerator", type: "function" },
    { label: "pack", type: "function" },
    { label: "parse_date", type: "function" },
    { label: "parse_datetime", type: "function" },
    { label: "parse_decimal", type: "function" },
    { label: "parse_float", type: "function" },
    { label: "parse_int", type: "function" },
    { label: "parse_json", type: "function" },
    { label: "parse_uuid", type: "function" },
    { label: "partial_order", type: "function" },
    { label: "partial_order_and_bounded_lattice", type: "function" },
    { label: "partial_order_and_join_bounded_lattice", type: "function" },
    { label: "partial_order_and_lattice", type: "function" },
    { label: "partial_order_and_meet_bounded_lattice", type: "function" },
    { label: "pattern_match", type: "function" },
    { label: "percentile", type: "function" },
    { label: "percentile_nearest", type: "function" },
    { label: "period_add", type: "function" },
    { label: "period_day_to_int", type: "function" },
    { label: "period_max", type: "function" },
    { label: "period_min", type: "function" },
    { label: "pi_float", type: "function" },
    { label: "pivot", type: "function" },
    { label: "pop_standard_deviation", type: "function" },
    { label: "pop_variance", type: "function" },
    { label: "pop_zscore_normalization", type: "function" },
    { label: "power", type: "function" },
    { label: "prefix_join", type: "function" },
    { label: "preorder", type: "function" },
    { label: "product", type: "function" },
    { label: "proper_subset", type: "function" },
    { label: "proper_superset", type: "function" },
    { label: "rad", type: "function" },
    { label: "random_mersenne_twister", type: "function" },
    { label: "random_threefry_float", type: "function" },
    { label: "random_threefry_uint", type: "function" },
    { label: "random_uint", type: "function" },
    { label: "range", type: "function" },
    { label: "rational", type: "function" },
    { label: "rational_convert", type: "function" },
    { label: "reflexive", type: "function" },
    { label: "regex_compile", type: "function" },
    { label: "regex_match", type: "function" },
    { label: "regex_match_all", type: "function" },
    { label: "rel", type: "function" },
    { label: "relname_string", type: "function" },
    { label: "remainder", type: "function" },
    { label: "reverse_sort", type: "function" },
    { label: "right_distributive", type: "function" },
    { label: "right_identity", type: "function" },
    { label: "right_override", type: "function" },
    { label: "right_zero", type: "function" },
    { label: "ring", type: "function" },
    { label: "rmse", type: "function" },
    { label: "round", type: "function" },
    { label: "sample_standard_deviation", type: "function" },
    { label: "sample_variance", type: "function" },
    { label: "sample_zscore_normalization", type: "function" },
    { label: "second", type: "function" },
    { label: "semilattice", type: "function" },
    { label: "semiring", type: "function" },
    { label: "sign", type: "function" },
    { label: "sin", type: "function" },
    { label: "sinh", type: "function" },
    { label: "sort", type: "function" },
    { label: "soundex", type: "function" },
    { label: "spread", type: "function" },
    { label: "sqrt", type: "function" },
    { label: "squared", type: "function" },
    { label: "squared_deviation", type: "function" },
    { label: "strict_partial_order", type: "function" },
    { label: "strict_total_order", type: "function" },
    { label: "string", type: "function" },
    { label: "string_join", type: "function" },
    { label: "string_length", type: "function" },
    { label: "string_replace", type: "function" },
    { label: "string_replace_multiple", type: "function" },
    { label: "string_split", type: "function" },
    { label: "string_trim", type: "function" },
    { label: "subset", type: "function" },
    { label: "substring", type: "function" },
    { label: "substring_bytes", type: "function" },
    { label: "subtract", type: "function" },
    { label: "suffix_join", type: "function" },
    { label: "sum", type: "function" },
    { label: "sum_int", type: "function" },
    { label: "superset", type: "function" },
    { label: "svg", type: "function" },
    { label: "symmetric", type: "function" },
    { label: "table", type: "function" },
    { label: "tan", type: "function" },
    { label: "tanh", type: "function" },
    { label: "ternary_relation", type: "function" },
    { label: "top", type: "function" },
    { label: "total", type: "function" },
    { label: "total_order", type: "function" },
    { label: "transitive", type: "function" },
    { label: "transpose", type: "function" },
    { label: "trunc", type: "function" },
    { label: "trunc_divide", type: "function" },
    { label: "trunc_to_int", type: "function" },
    { label: "uint", type: "function" },
    { label: "unary_operator", type: "function" },
    { label: "unary_relation", type: "function" },
    { label: "unary_relation_substitution_laws", type: "function" },
    { label: "union", type: "function" },
    { label: "unit_normalization", type: "function" },
    { label: "unix_epoch", type: "function" },
    { label: "unpack", type: "function" },
    { label: "uppercase", type: "function" },
    { label: "uuid_string", type: "function" },
    { label: "vega", type: "function" },
    { label: "vegalite", type: "function" },
    { label: "vegalite_utils", type: "function" },
    { label: "view_json", type: "function" },
    { label: "weighted_mean", type: "function" },
    { label: "xgboost_classifier", type: "function" },
    { label: "xgboost_classifier_predict", type: "function" },
    { label: "xgboost_classifier_probabilities", type: "function" },
    { label: "xgboost_feature_importances", type: "function" },
    { label: "xgboost_regressor", type: "function" },
    { label: "xgboost_regressor_predict", type: "function" },
    { label: "zero_annihilation", type: "function" },
    { label: "zero_of_operator", type: "function" },
    { label: "zip", type: "function" },
    { label: "registered", type: "variable", info: "Registered Sign / Registered Trade Mark Sign", apply: "®" },
    { label: "degree", type: "variable", info: "Degree Sign", apply: "°" },
    { label: "pm", type: "variable", info: "Plus-Minus Sign / Plus-Or-Minus Sign", apply: "±" },
    { label: "\\^2", info: "Superscript Two / Superscript Digit Two", apply: "²" },
    { label: "\\^3", info: "Superscript Three / Superscript Digit Three", apply: "³" },
    { label: "\\^1", info: "Superscript One / Superscript Digit One", apply: "¹" },
    { label: "\\1/4", type: "variable", info: "Vulgar Fraction One Quarter / Fraction One Quarter", apply: "¼" },
    { label: "\\1/2", type: "variable", info: "Vulgar Fraction One Half / Fraction One Half", apply: "½" },
    { label: "\\3/4", type: "variable", info: "Vulgar Fraction Three Quarters / Fraction Three Quarters", apply: "¾" },
    { label: "\\questiondown", type: "variable", info: "Inverted Question Mark", apply: "¿" },
    { label: "\\times", type: "variable", info: "Multiplication Sign", apply: "×" },
    { label: "\\div", type: "variable", info: "Division Sign", apply: "÷" },
    { label: "\\Alpha", type: "variable", info: "Greek Capital Letter Alpha", apply: "Α" },
    { label: "\\Beta", type: "variable", info: "Greek Capital Letter Beta", apply: "Β" },
    { label: "\\Gamma", type: "variable", info: "Greek Capital Letter Gamma", apply: "Γ" },
    { label: "\\Delta", type: "variable", info: "Greek Capital Letter Delta", apply: "Δ" },
    { label: "\\Epsilon", type: "variable", info: "Greek Capital Letter Epsilon", apply: "Ε" },
    { label: "\\Zeta", type: "variable", info: "Greek Capital Letter Zeta", apply: "Ζ" },
    { label: "\\Eta", type: "variable", info: "Greek Capital Letter Eta", apply: "Η" },
    { label: "\\Theta", type: "variable", info: "Greek Capital Letter Theta", apply: "Θ" },
    { label: "\\Iota", type: "variable", info: "Greek Capital Letter Iota", apply: "Ι" },
    { label: "\\Kappa", type: "variable", info: "Greek Capital Letter Kappa", apply: "Κ" },
    { label: "\\Lambda", type: "variable", info: "Greek Capital Letter Lamda / Greek Capital Letter Lambda", apply: "Λ" },
    { label: "\\upMu", type: "variable", info: "Greek Capital Letter Mu", apply: "Μ" },
    { label: "\\upNu", type: "variable", info: "Greek Capital Letter Nu", apply: "Ν" },
    { label: "\\Xi", type: "variable", info: "Greek Capital Letter Xi", apply: "Ξ" },
    { label: "\\upOmicron", type: "variable", info: "Greek Capital Letter Omicron", apply: "Ο" },
    { label: "\\Pi", type: "variable", info: "Greek Capital Letter Pi", apply: "Π" },
    { label: "\\Rho", type: "variable", info: "Greek Capital Letter Rho", apply: "Ρ" },
    { label: "\\Sigma", type: "variable", info: "Greek Capital Letter Sigma", apply: "Σ" },
    { label: "\\Tau", type: "variable", info: "Greek Capital Letter Tau", apply: "Τ" },
    { label: "\\Upsilon", type: "variable", info: "Greek Capital Letter Upsilon", apply: "Υ" },
    { label: "\\Phi", type: "variable", info: "Greek Capital Letter Phi", apply: "Φ" },
    { label: "\\Chi", type: "variable", info: "Greek Capital Letter Chi", apply: "Χ" },
    { label: "\\Psi", type: "variable", info: "Greek Capital Letter Psi", apply: "Ψ" },
    { label: "\\Omega", type: "variable", info: "Greek Capital Letter Omega", apply: "Ω" },
    { label: "\\alpha", type: "variable", info: "Greek Small Letter Alpha", apply: "α" },
    { label: "\\beta", type: "variable", info: "Greek Small Letter Beta", apply: "β" },
    { label: "\\gamma", type: "variable", info: "Greek Small Letter Gamma", apply: "γ" },
    { label: "\\delta", type: "variable", info: "Greek Small Letter Delta", apply: "δ" },
    { label: "\\varepsilon", type: "variable", info: "Greek Small Letter Epsilon", apply: "ε" },
    { label: "\\zeta", type: "variable", info: "Greek Small Letter Zeta", apply: "ζ" },
    { label: "\\eta", type: "variable", info: "Greek Small Letter Eta", apply: "η" },
    { label: "\\theta", type: "variable", info: "Greek Small Letter Theta", apply: "θ" },
    { label: "\\iota", type: "variable", info: "Greek Small Letter Iota", apply: "ι" },
    { label: "\\kappa", type: "variable", info: "Greek Small Letter Kappa", apply: "κ" },
    { label: "\\lambda", type: "variable", info: "Greek Small Letter Lamda / Greek Small Letter Lambda", apply: "λ" },
    { label: "\\mu", type: "variable", info: "Greek Small Letter Mu", apply: "μ" },
    { label: "\\nu", type: "variable", info: "Greek Small Letter Nu", apply: "ν" },
    { label: "\\xi", type: "variable", info: "Greek Small Letter Xi", apply: "ξ" },
    { label: "\\upomicron", type: "variable", info: "Greek Small Letter Omicron", apply: "ο" },
    { label: "\\pi", type: "variable", info: "Greek Small Letter Pi", apply: "π" },
    { label: "\\rho", type: "variable", info: "Greek Small Letter Rho", apply: "ρ" },
    { label: "\\varsigma", type: "variable", info: "Greek Small Letter Final Sigma", apply: "ς" },
    { label: "\\sigma", type: "variable", info: "Greek Small Letter Sigma", apply: "σ" },
    { label: "\\tau", type: "variable", info: "Greek Small Letter Tau", apply: "τ" },
    { label: "\\upsilon", type: "variable", info: "Greek Small Letter Upsilon", apply: "υ" },
    { label: "\\varphi", type: "variable", info: "Greek Small Letter Phi", apply: "φ" },
    { label: "\\chi", type: "variable", info: "Greek Small Letter Chi", apply: "χ" },
    { label: "\\psi", type: "variable", info: "Greek Small Letter Psi", apply: "ψ" },
    { label: "\\omega", type: "variable", info: "Greek Small Letter Omega", apply: "ω" },
    { label: "\\upvarbeta", type: "variable", info: "Greek Beta Symbol / Greek Small Letter Curled Beta", apply: "ϐ" },
    { label: "\\vartheta", type: "variable", info: "Greek Theta Symbol / Greek Small Letter Script Theta", apply: "ϑ" },
    { label: "\\phi", type: "variable", info: "Greek Phi Symbol / Greek Small Letter Script Phi", apply: "ϕ" },
    { label: "\\varpi", type: "variable", info: "Greek Pi Symbol / Greek Small Letter Omega Pi", apply: "ϖ" },
    { label: "\\upoldKoppa", type: "variable", info: "Greek Letter Archaic Koppa", apply: "Ϙ" },
    { label: "\\upoldkoppa", type: "variable", info: "Greek Small Letter Archaic Koppa", apply: "ϙ" },
    { label: "\\Stigma", type: "variable", info: "Greek Letter Stigma / Greek Capital Letter Stigma", apply: "Ϛ" },
    { label: "\\upstigma", type: "variable", info: "Greek Small Letter Stigma", apply: "ϛ" },
    { label: "\\Digamma", type: "variable", info: "Greek Letter Digamma / Greek Capital Letter Digamma", apply: "Ϝ" },
    { label: "\\digamma", type: "variable", info: "Greek Small Letter Digamma", apply: "ϝ" },
    { label: "\\Koppa", type: "variable", info: "Greek Letter Koppa / Greek Capital Letter Koppa", apply: "Ϟ" },
    { label: "\\upkoppa", type: "variable", info: "Greek Small Letter Koppa", apply: "ϟ" },
    { label: "\\Sampi", type: "variable", info: "Greek Letter Sampi / Greek Capital Letter Sampi", apply: "Ϡ" },
    { label: "\\upsampi", type: "variable", info: "Greek Small Letter Sampi", apply: "ϡ" },
    { label: "\\varkappa", type: "variable", info: "Greek Kappa Symbol / Greek Small Letter Script Kappa", apply: "ϰ" },
    { label: "\\varrho", type: "variable", info: "Greek Rho Symbol / Greek Small Letter Tailed Rho", apply: "ϱ" },
    { label: "\\varTheta", type: "variable", info: "Greek Capital Theta Symbol", apply: "ϴ" },
    { label: "\\epsilon", type: "variable", info: "Greek Lunate Epsilon Symbol", apply: "ϵ" },
    { label: "\\backepsilon", type: "variable", info: "Greek Reversed Lunate Epsilon Symbol", apply: "϶" },
    { label: "\\^0", info: "Superscript Zero / Superscript Digit Zero", apply: "⁰" },
    { label: "\\^i", info: "Superscript Latin Small Letter I", apply: "ⁱ" },
    { label: "\\^4", info: "Superscript Four / Superscript Digit Four", apply: "⁴" },
    { label: "\\^5", info: "Superscript Five / Superscript Digit Five", apply: "⁵" },
    { label: "\\^6", info: "Superscript Six / Superscript Digit Six", apply: "⁶" },
    { label: "\\^7", info: "Superscript Seven / Superscript Digit Seven", apply: "⁷" },
    { label: "\\^8", info: "Superscript Eight / Superscript Digit Eight", apply: "⁸" },
    { label: "\\^9", info: "Superscript Nine / Superscript Digit Nine", apply: "⁹" },
    { label: "\\^+", info: "Superscript Plus Sign", apply: "⁺" },
    { label: "\\^-", info: "Superscript Minus / Superscript Hyphen-Minus", apply: "⁻" },
    { label: "\\^=", info: "Superscript Equals Sign", apply: "⁼" },
    { label: "\\^(", info: "Superscript Left Parenthesis / Superscript Opening Parenthesis", apply: "⁽" },
    { label: "\\^)", info: "Superscript Right Parenthesis / Superscript Closing Parenthesis", apply: "⁾" },
    { label: "\\^n", info: "Superscript Latin Small Letter N", apply: "ⁿ" },
    { label: "\\_0", type: "variable", info: "Subscript Zero / Subscript Digit Zero", apply: "₀" },
    { label: "\\_1", type: "variable", info: "Subscript One / Subscript Digit One", apply: "₁" },
    { label: "\\_2", type: "variable", info: "Subscript Two / Subscript Digit Two", apply: "₂" },
    { label: "\\_3", type: "variable", info: "Subscript Three / Subscript Digit Three", apply: "₃" },
    { label: "\\_4", type: "variable", info: "Subscript Four / Subscript Digit Four", apply: "₄" },
    { label: "\\_5", type: "variable", info: "Subscript Five / Subscript Digit Five", apply: "₅" },
    { label: "\\_6", type: "variable", info: "Subscript Six / Subscript Digit Six", apply: "₆" },
    { label: "\\_7", type: "variable", info: "Subscript Seven / Subscript Digit Seven", apply: "₇" },
    { label: "\\_8", type: "variable", info: "Subscript Eight / Subscript Digit Eight", apply: "₈" },
    { label: "\\_9", type: "variable", info: "Subscript Nine / Subscript Digit Nine", apply: "₉" },
    { label: "\\forall", type: "variable", info: "For All", apply: "∀" },
    { label: "\\complement", type: "variable", info: "Complement", apply: "∁" },
    { label: "\\partial", type: "variable", info: "Partial Differential", apply: "∂" },
    { label: "\\exists", type: "variable", info: "There Exists", apply: "∃" },
    { label: "\\nexists", type: "variable", info: "There Does Not Exist", apply: "∄" },
    { label: "\\emptyset", type: "variable", info: "Empty Set", apply: "∅" },
    { label: "\\increment", type: "variable", info: "Increment", apply: "∆" },
    { label: "\\nabla", type: "variable", info: "Nabla", apply: "∇" },
    { label: "\\in", type: "variable", info: "Element Of", apply: "∈" },
    { label: "\\notin", type: "variable", info: "Not An Element Of", apply: "∉" },
    { label: "\\sqrt", type: "variable", info: "Square Root", apply: "√" },
    { label: "\\cbrt", type: "variable", info: "Cube Root", apply: "∛" },
    { label: "\\fourthroot", type: "variable", info: "Fourth Root", apply: "∜" },
    { label: "\\propto", type: "variable", info: "Proportional To", apply: "∝" },
    { label: "\\infty", type: "variable", info: "Infinity", apply: "∞" },
    { label: "\\cap", type: "variable", info: "Intersection", apply: "∩" },
    { label: "\\cup", type: "variable", info: "Union", apply: "∪" },
    { label: "\\therefore", type: "variable", info: "Therefore", apply: "∴" },
    { label: "\\because", type: "variable", info: "Because", apply: "∵" },
    { label: "\\leq", type: "variable", info: "Less-Than Or Equal To / Less Than Or Equal To", apply: "≤" },
    { label: "\\geq", type: "variable", info: "Greater-Than Or Equal To / Greater Than Or Equal To", apply: "≥" },
    { label: "\\subset", type: "variable", info: "Subset Of", apply: "⊂" },
    { label: "\\supset", type: "variable", info: "Superset Of", apply: "⊃" },
    { label: "\\nsubset", type: "variable", info: "Not A Subset Of", apply: "⊄" },
    { label: "\\nsupset", type: "variable", info: "Not A Superset Of", apply: "⊅" },
    { label: "\\subseteq", type: "variable", info: "Subset Of Or Equal To", apply: "⊆" },
    { label: "\\supseteq", type: "variable", info: "Superset Of Or Equal To", apply: "⊇" },
    { label: "\\nsubseteq", type: "variable", info: "Neither A Subset Of Nor Equal To", apply: "⊈" },
    { label: "\\nsupseteq", type: "variable", info: "Neither A Superset Of Nor Equal To", apply: "⊉" },
    { label: "\\bowtie", type: "variable", info: "Bowtie", apply: "⋈" },
    { label: "\\ltimes", type: "variable", info: "Left Normal Factor Semidirect Product", apply: "⋉" },
    { label: "\\rtimes", type: "variable", info: "Right Normal Factor Semidirect Product", apply: "⋊" },
    { label: "\\vdots", type: "variable", info: "Vertical Ellipsis", apply: "⋮" },
    { label: "\\cdots", type: "variable", info: "Midline Horizontal Ellipsis", apply: "⋯" },
    { label: "\\adots", type: "variable", info: "Up Right Diagonal Ellipsis", apply: "⋰" },
    { label: "\\ddots", type: "variable", info: "Down Right Diagonal Ellipsis", apply: "⋱" }
];

const relLanguage = language.LRLanguage.define({
    parser: parser.configure({
        props: [
            // indentNodeProp.add({
            //   Application: delimitedIndent({closing: ")", align: false})
            // }),
            // foldNodeProp.add({
            //   Application: foldInside
            // }),
            highlight.styleTags({
                'use forall for in iff if then else end where with select implies': highlight.tags.controlKeyword,
                'not and or xor': highlight.tags.operatorKeyword,
                'as from inline function ic doc raw entity type value': highlight.tags.keyword,
                'output insert delete abort export': highlight.tags.emphasis,
                'def': highlight.tags.definitionKeyword,
                'module': highlight.tags.moduleKeyword,
                'Any String Int Number Char Missing Float Floating UnsignedInt SignedInt Rational FixedDecimal RelName Entity AutoNumber Hash FilePos Date DateTime Year Month Week Day Hour Minute Second Millisecond Microsecond Nanosecond Boolean': highlight.tags.typeName,
                Number: highlight.tags.number,
                BooleanLiteral: highlight.tags.bool,
                StringLiteral: highlight.tags.string,
                MultilineStringLiteral: highlight.tags.string,
                MultilineRawStringLiteral: highlight.tags.string,
                AssignOp: highlight.tags.definitionOperator,
                LineComment: highlight.tags.lineComment,
                BlockComment: highlight.tags.blockComment,
                MultilineBlockComment: highlight.tags.blockComment,
                VariableName: highlight.tags.definition(highlight.tags.variableName),
                Atom: highlight.tags.atom,
                RelnameLiteral: highlight.tags.literal,
                RelnameStringLiteral: highlight.tags.literal,
                ValueTypeLiteral: highlight.tags.literal,
                DefineStatement: highlight.tags.atom,
                DateLiteral: highlight.tags.string,
                DateTimeLiteral: highlight.tags.string,
                Operator: highlight.tags.operatorKeyword,
                '( )': highlight.tags.paren,
                '[ ]': highlight.tags.squareBracket,
                '{ }': highlight.tags.brace,
                ':': highlight.tags.derefOperator,
                ', ;': highlight.tags.separator
            })
        ]
    }),
    languageData: {
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`", '"""'] },
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
        // indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
        wordChars: "$"
    }
});
// Autocomplete
const relCompletion = relLanguage.data.of({
    autocomplete: autocomplete.completeFromList(autocompleteList)
});
function rel() {
    return new language.LanguageSupport(relLanguage, [relCompletion]);
}

exports.rel = rel;
exports.relCompletion = relCompletion;
exports.relLanguage = relLanguage;
