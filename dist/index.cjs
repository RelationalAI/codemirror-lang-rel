'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var lr = require('@lezer/lr');
var language = require('@codemirror/language');
var highlight = require('@lezer/highlight');
var autocomplete = require('@codemirror/autocomplete');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_BasicId = {__proto__:null,doc:14, inline:23, function:25, ondemand:27, def:58, Any:62, String:64, Int:66, Number:68, Char:70, Missing:72, Float:74, Floating:76, UnsignedInt:78, SignedInt:80, Rational:82, FixedDecimal:84, RelName:86, Entity:88, AutoNumber:90, Hash:92, FilePos:94, Date:96, DateTime:98, Year:100, Month:102, Week:104, Day:106, Hour:108, Minute:110, Second:112, Millisecond:114, Microsecond:116, Nanosecond:118, Pattern:120, Boolean:122, type:124, entity:126, value:128, output:138, insert:140, delete:142, abort:144, export:146, in:160, exists:180, where:186, for:188, from:190, and:192, or:196, implies:200, not:206, iff:210, xor:216, if:318, then:320, else:322, end:324, forall:326, ic:336, module:340, with:344, use:346, as:350};
const spec_Operator = {__proto__:null,"∈":163, "∧":195, "∨":199, "⇒":203, "⇐":205, "¬":209, "≡":213, "⇔":215, "≢":219, "⇎":221, "⊻":223, "<:":225, ":>":227, "<++":229, "++>":231, ".":235, "^":247, "-":249, "/":251, "%":253, "*":255, "÷":257, "×":259, "⊗":261, "⊙":263, "+":265, "∩":267, "⊕":269, "∪":271, "⊓":273, "⊔":275, "=":277, "!=":279, "≈":281, "∼":283, "→":285, "←":287, "≼":289, "≽":291, "≺":293, "≻":295, "≠":297, "<":299, ">":301, "<=":303, "≤":305, ">=":307, "≥":309, "⊆":311, "⊇":313, "⊂":315, "⊃":317};
const parser = lr.LRParser.deserialize({
  version: 14,
  states: "!2hO]QPOOOwQPO'#CfOOQO'#GT'#GTO!SQPO'#GbO!SQPO'#GbOOQO'#Ga'#GaOOQO'#GS'#GSQ]QPOOO!hQPO'#CaO!pQPO'#FwO#RQQO'#F}O']QPO,59QOOQO'#Gd'#GdOOQO-E:R-E:RO'tQPO,5<|OOQO-E:Q-E:QOOQO,58{,58{O(YQPO,58zO*{QPO,5<cO+QQPO,5<dO-uQPO,5<eO(YQPO,5<gO.VQSO'#CnOOQO'#Cn'#CnO.hQWO'#CpO.sQ`O'#CtOOQO'#Ck'#CkO4eQQO'#GrO4oQQO'#GrO4vQQO'#EQO>dQQO'#DrO>kQPO'#DqOOQO'#D{'#D{O>pQPO'#E[OAhQQO'#EXO#RQQO'#EXOEmQQO'#EWOGXQQO'#EVOHpQQO'#EUOIvQPO'#GzOKTQPO'#ESOOQO'#ET'#ETOL_QPO'#EtOOQO'#ES'#ESOLdQQO'#ERO!(QQQO'#EQOOQO'#EQ'#EQO!!nQQO'#EQO!(_QQO'#EQO!(lQPO'#EQOOQO'#Dz'#DzO!(qQPO'#DyOOQO'#Gs'#GsOOQO'#Gr'#GrOOQO'#Gt'#GtO!)PQQO'#EXO!-WQQO'#EQO#RQQO'#EQO!1RQPO,5<iO!1WQQO1G.lO!2sQPO'#GrO!2zQPO'#GrO!3RQQO'#DoO!4UQPO'#DrO!4]QPO'#CzOOQO'#Cz'#CzO!4dQPO1G.fO(YQPO1G1}O(YQPO1G2OO!4rQQO'#FvO!7aQQO'#DxOOQO'#GY'#GYO!:OQPO'#GuOOQO'#Gu'#GuO!:^QPO1G2PO!4dQPO1G2PO!:fQPO1G2ROOQO,59Y,59YO!:pQSO,59YOOQO,59Z,59ZOOQO,59_,59_OOQO'#Cq'#CqOOQO'#GU'#GUO!:xQWO,59[OOQO,59[,59[OOQO'#Cu'#CuO!;TQ`O'#CuOOQO'#GV'#GVO!;`Q`O,59`OOQO,59`,59`O!;nQPO'#GXO!<qQQO,5:]O!AWQPO,5:ZO!AfQPO,5:vOOQO,5:l,5:lO!AnQPO,5:lO!AsQPO,5:lO!BOQQO,5:vO!ElQQO,5:lO!I`QQO,5:lO!-WQQO,5:lO!-WQQO,5:lO!-WQQO,5:lO!-WQQO,5:lO!-WQQO,5:lO!-WQQO,5:lO!MSQPO'#EZOOQO,5:s,5:sO!)PQQO,5:sO!)PQQO,5:sO!)PQQO,5:sO!)PQQO,5:sO!)PQQO,5:sO!)PQQO,5:rO!)PQQO,5:qO!)PQQO,5:pO!)PQQO,5=fO!MXQQO,5;`O#RQQO,5;`O# vQPO,5:mO#'_QQO,5:lO#'iQQO,5:fO#*yQPO,5:lO#+OQPO,5:lO!MXQQO,5:lO#+ZQQO'#G[O#-uQPO,5:eO4vQQO'#EQO#.TQQO'#EQO#3UQQO,5:lO#3lQPO,5:lO#6TQQO1G2TO#6[QPO'#GfOOQO'#Cj'#CjO#6dQPO7+$WO#6iQPO,5:]O#6sQPO,5:ZO#6xQQO'#FvO#9gQPO7+$QO#9oQPO7+'iO#:mQPO7+'jO#<{QQO'#DzOOQO,5<b,5<bO#>hQPO,5<bOOQO,5:d,5:dO#>mQPO,5:dOOQO-E:W-E:WOOQO,5=a,5=aO#RQQO7+'kO#RQQO7+'kO#>rQPO7+'kO#>zQPO7+'mO#?UQPO7+'mOOQO7+'m7+'mOOQO1G.t1G.tOOQO-E:S-E:SOOQO1G.v1G.vOOQO,59a,59aO#?]Q`O,59aOOQO-E:T-E:TOOQO1G.z1G.zOOQO'#Dr'#DrOOQO,5<s,5<sOOQO-E:V-E:VOOQO1G/u1G/uOOQO1G0b1G0bOOQO1G0W1G0WO#?eQPO1G0WO#@hQQO1G0bO#@rQQO'#EWO#@|QQO'#HOO#AhQPO'#EwOOQO'#Ex'#ExO#A|QPO'#EyOOQO'#Ew'#EwO#BRQPO'#EvOOQO'#Ev'#EvO#BgQPO'#HPO#BlQPO1G0WO#GeQQO1G0WO#HOQQO1G0WO#MlQQO1G0WO#MvQQO1G0WO#NQQQO1G0WO!)PQQO,5:uP!MXQQO,5:uOOQO1G0_1G0_O$%RQQO1G0_O$'lQQO1G0_O$'|QQO1G0_O$)wQQO1G0_O$+xQQO1G0^O$-|QQO1G0]O$/eQQO1G0[O$0kQPO1G3QO!MXQQO'#E[OOQO1G0z1G0zOOQO1G0X1G0XO#'iQQO1G0QO$4eQQO1G0QO$5zQPO1G0WO$6PQPO1G0WOOQO,5<v,5<vOOQO-E:Y-E:YO#RQQO1G0WO$6UQPO'#GQO$6|QPO'#HUOOQO7+'o7+'oO!1WQQO'#GWO$7qQPO,5=QOOQO<<Gr<<GrO#RQQO<<GlO#RQQO<<GlO$7yQPO<<KTO$8RQPO<<KUO$9kQQO,5:fOOQO1G1|1G1|OOQO1G0O1G0OOOQO<<KV<<KVO$;TQPO<<KVO#RQQO<<KVO#RQQO<<KVO$;YQPO<<KXOOQO<<KX<<KXOOQO1G.{1G.{OOQO7+%r7+%rOOQO,5:],5:]O$<bQQO,5:sO$<rQQO,5=jO!MXQQO,5;eO$=SQQO,5;eO$@sQQO,5=kO$AWQQO1G0aP$BvQQO'#E[OOQO1G0a1G0aO$D[QQO'#DyO!AiQPO,5:vO$EqQQO7+%lOLdQQO7+%rO$GWQPO7+%rO$IlQQO,5<lO#3qQQO'#G]O$IsQPO,5=pOOQO,5<r,5<rOOQO-E:U-E:UOOQOAN=WAN=WO$JhQPOAN=WO#RQQOAN@oO#RQQOAN@oO#RQQOAN@pO#RQQOAN@pOOQOAN@qAN@qO$JmQPOAN@qOOQOAN@sAN@sO$JrQQO1G3UOOQO1G1P1G1POOQO'#Ez'#EzO$L[QQO'#EzO$LfQPO1G3VO$M{QQO,5:eO% bQPO<<I^O#RQQO<<I^OOQO1G2W1G2WOOQO,5<w,5<wOOQO-E:Z-E:ZOOQOG22rG22rOOQOG26ZG26ZO% gQPOG26ZOOQOG26[G26[O% lQPOG26[OOQOG26]G26]O$@sQQO'#GZO% qQPO7+(qOOQOAN>xAN>xO% yQPOAN>xOOQOLD+uLD+uOOQOLD+vLD+vOOQO,5<u,5<uOOQO-E:X-E:XOOQOG24dG24dO%%|QQO'#GrO%'cQQO'#GrO%+hQQO'#DrO>kQPO'#DqO>kQPO'#DqO%+uQQO'#EXO%+uQQO'#EXO$=SQQO'#EXO%/fQQO'#EQO%5YQQO'#EQO%9wQQO'#EQO%/oQQO'#EQO%/|QQO'#EQO%5gQQO'#EQOLdQQO'#EXO$=SQQO'#EXO#RQQO'#EXOLdQQO'#EXO%:UQQO'#EXO$<rQQO'#EXO%:fQQO'#EXO!BOQQO'#EXO%:vQQO'#EXO$@vQQO'#EXO%>dQQO'#EXO#'iQQO'#EQO%:fQQO,5:vP$<rQQO,5:vP!)PQQO,5:vP%:UQQO,5:vO$@vQQO,5:vO%>dQQO,5:vP%:vQQO,5:vO#'iQQO,5:lO#'iQQO,5:lO#'iQQO,5:lO#'iQQO,5:lO#'iQQO,5:lO#'iQQO,5:lO%:UQQO,5:sO$<rQQO,5:sO%:fQQO,5:sO!BOQQO,5:sO%:vQQO,5:sO$@vQQO,5:sO%>dQQO,5:sO%:UQQO,5:sO$<rQQO,5:sO%:fQQO,5:sO!BOQQO,5:sO%:vQQO,5:sO$@vQQO,5:sO%>dQQO,5:sO%:UQQO,5:sO$<rQQO,5:sO%:fQQO,5:sO!BOQQO,5:sO%:vQQO,5:sO$@vQQO,5:sO%>dQQO,5:sO%:UQQO,5:sO$<rQQO,5:sO%:fQQO,5:sO!BOQQO,5:sO%:vQQO,5:sO$@vQQO,5:sO%>dQQO,5:sO%:UQQO,5:sO$<rQQO,5:sO%:fQQO,5:sO!BOQQO,5:sO%:vQQO,5:sO$@vQQO,5:sO%>dQQO,5:sO%:UQQO,5:rO$<rQQO,5:rO%:UQQO,5:qO$<rQQO,5:qO%:UQQO,5:pO%:UQQO,5=fOLdQQO,5;`O%BxQQO,5:lO# {QQO,5:lO%CPQQO,5:lO!-WQQO,5:fO%CgQQO,5:lO%GeQQO'#DzO%HyQQO1G0bP%IyQQO1G0bP%JyQQO1G0bP%LwQQO1G0bO%MkQQO1G0bO%NyQQO1G0bP&!UQQO1G0bO&!iQQO'#EWO&&tQQO1G0WO&'_QQO1G0WO&+pQQO1G0WO&+zQQO1G0WO&,UQQO1G0WO%:UQQO,5:uO$<rQQO,5:uO%:fQQO,5:uO!BOQQO,5:uO%:vQQO,5:uO$@vQQO,5:uO%>dQQO,5:uO&-kQQO,5:uO&/{QQO1G0_O&0YQQO1G0_O&2ZQQO1G0_O&3iQQO1G0_O&3sQQO1G0_O&5UQQO1G0_O&5fQQO1G0_O&7TQQO1G0_O&7eQQO1G0_O&8hQQO1G0_O&9pQQO1G0_O&;RQQO1G0_O&<aQQO1G0_O&=lQQO1G0_O&=|QQO1G0_O&>^QQO1G0_O&ATQQO1G0_O&AeQQO1G0_O&AuQQO1G0_O&BVQQO1G0_O&BgQQO1G0_O&BwQQO1G0_O&CkQQO1G0_O&DnQQO1G0_O&EOQQO1G0_O&EYQQO1G0_O&EmQQO1G0_O&E}QQO1G0_O&F[QQO1G0^O&G|QQO1G0^O&HpQQO1G0]O&H}QQO1G0]O&IoQQO1G0[O&I|QPO1G3QO!-WQQO1G0QO&JbQQO1G0QO&MSQQO,5:fO&NeQQO,5:sO&NxQQO,5=kO' ]QQO1G0aO'!PQQO1G0aO'#oQQO1G0aO'%oQQO1G0aO'%yQQO1G0aO'&^QQO1G0aO'&nQQO1G0aP'(fQQO'#E[P'(pQQO'#E[O'*OQQO'#E[O',SQQO'#E[P',ZQQO'#E[O'-oQQO'#E[O'-|QQO'#E[O'.WQQO7+%lO'0xQQO'#EzO&NxQQO'#GZO'1SQPO7+(qO'(wQPO'#E[O'1[QPO'#E[O'1jQPO'#E[O'1xQQO'#EXO'3XQQO'#EWO'3{QQO'#EWO'4oQQO'#EVO'4|QQO'#EVO'5nQQO'#EUO'5{QPO'#GzO'6aQPO'#ESO'6uQPO'#EtO'6zQPO'#EZO'7PQPO'#EZO'7UQPO'#EZO'7ZQPO'#EZO'7`QPO'#EZO'7eQPO'#EZO'7jQPO'#EZO&-kQQO,5;`O&-kQQO,5;`O'7oQQO'#G[O$LnQPO,5:eO'8iQPO'#HPP&-kQQO,5:uP&-kQQO,5:uO&-kQQO,5:uO&-kQQO,5:uO&-kQQO,5:uO'8nQQO'#DyO'8xQPO1G3VO'9QQQO,5:eP&-kQQO,5:uO':eQQO,5:sO';nQQO,5:sO'<RQPO'#ESO'<gQPO'#DyO#RQQO,5;`O'=tQPO'#ESO'>VQPO'#EtOLdQQO,5;`O'>[QPO'#Et",
  stateData: "'>q~O%SOSPOSQOS~OVWO$rYO%VPOm%UP!a%UP!b%UP$n%UP$p%UP~OZ[O[[O][O~O%VPOm%UX!a%UX!b%UX$n%UX$p%UX~OW`OX`O~OmaO!acO!bbO$ndO$peO~OUkO`jOajOjjOkjOljOo!UOp!UOq!UOr!UOs!UOt!UOu!UOv!UOw!UOx!UOy!UOz!UO{!UO|!UO}!UO!O!UO!P!UO!Q!UO!R!UO!S!UO!T!UO!U!UO!V!UO!W!UO!X!UO!Y!UO!Z!UO![!UO!]!UO!^!UO!_!UO!`!VO!a!VO!b!VO!d!SO!g!WO!h!WO!i!WO!j!WO!k!WO!ppO!qpO!|sO#Z!XO#[!XO#p!YO$e!ZO$i!RO%XmO%ZfO%^!OO%_gO%`hO%biO%m|O%osO%t!QO%v!RO~O%X!]OmYa!aYa!bYa$nYa$pYa%VYa~O%VPOm%Ua!a%Ua!b%Ua$n%Ua$p%Ua~OU!^Oo!UOp!UOq!UOr!UOs!UOt!UOu!UOv!UOw!UOx!UOy!UOz!UO{!UO|!UO}!UO!O!UO!P!UO!Q!UO!R!UO!S!UO!T!UO!U!UO!V!UO!W!UO!X!UO!Y!UO!Z!UO![!UO!]!UO!^!UO!_!UO!`!VO!a!VO!b!VO!g!WO!h!WO!i!WO!j!WO!k!WO%X!`O~O!`!eO~O!`!fO~OU!^Oo!UOp!UOq!UOr!UOs!UOt!UOu!UOv!UOw!UOx!UOy!UOz!UO{!UO|!UO}!UO!O!UO!P!UO!Q!UO!R!UO!S!UO!T!UO!U!UO!V!UO!W!UO!X!UO!Y!UO!Z!UO![!UO!]!UO!^!UO!_!UO!`!VO!a!VO!b!VO!g!WO!h!WO!i!WO!j!WO!k!WO~O%X!gO%k!hO%t%iP%w%iP~P+VO%[!pO%]!oO%^!oO%`hO%biO~Of!sO%`!vO%a!sO~Of!wO%`!xO%b!{O%c!wO~O!r%fX!s%fX#P%fX#Q%fX#R%fX#S%fX#T%fX#U%fX#V%fX#W%fX#X%fX#Y%fX#]%fX#^%fX#_%fX#`%fX#a%fX#b%fX#c%fX#d%fX#e%fX#f%fX#g%fX#i%fX#o%fX#p%fX#q%fX#r%fX#s%fX#t%fX#u%fX#v%fX#w%fX#x%fX#y%fX#z%fX#{%fX#|%fX#}%fX$O%fX$P%fX$Q%fX$R%fX$S%fX$T%fX$U%fX$V%fX$W%fX$X%fX$Y%fX$Z%fX$[%fX$]%fX$^%fX$_%fX$`%fX$a%fX$b%fX$c%fX$d%fX$s%fX%X%fX%d%fX%k%fX%l%fX%p%fX%q%fX%e%fX%u%fX$f%fX%j%fXV%fXm%fX!a%fX!b%fX$n%fX$p%fX$r%fX%Q%fX%V%fX$g%fX$h%fX~O%Z!fX%Z%fX~P/RO%Z!|O~P/ROUkO`jOajOjjOkjOljOo!UOp!UOq!UOr!UOs!UOt!UOu!UOv!UOw!UOx!UOy!UOz!UO{!UO|!UO}!UO!O!UO!P!UO!Q!UO!R!UO!S!UO!T!UO!U!UO!V!UO!W!UO!X!UO!Y!UO!Z!UO![!UO!]!UO!^!UO!_!UO!`!VO!a!VO!b!VO!d#OO!g!WO!h!WO!i!WO!j!WO!k!WO!ppO!qpO!|'bO#Z'fO#['fO#p!YO$e!ZO$i!RO%XmO%ZfO%^!OO%_gO%`hO%biO%d#RO%e#QO%m|O%o'bO%q#RO%t!QO%v!RO~O#Q!tX#R!tX#S!tX#T!tX#U!tX#V!tX#W!tX#X!tX#Y!tX#]!tX#^!tX#_!tX#`!tX#a!tX#b!tX#c!tX#d!tX#e!tX#f!tX#g!tX#i!tX#o!tX#p!tX#q!tX#r!tX#s!tX#t!tX#u!tX#v!tX#w!tX#x!tX#y!tX#z!tX#{!tX#|!tX#}!tX$O!tX$P!tX$Q!tX$R!tX$S!tX$T!tX$U!tX$V!tX$W!tX$X!tX$Y!tX$Z!tX$[!tX$]!tX$^!tX$_!tX$`!tX$a!tX$b!tX$c!tX$d!tX$s!tX%X!tX%d!tX%k!tX%p!tX%q!tX%e!tX%u!tX$f!tX%j!tXV!tXm!tX!a!tX!b!tX$n!tX$p!tX$r!tX%Q!tX%V!tX$g!tX#P!tX$h!tX~O%Z!fX~P9ZO%Z!|O~O#P#TO%Z#OX%e#OX~O#i#WO#o#XO#p#YO#q#XO#r#XO#s#XO#t#XO#u#XO#v#XO#w#XO#x#YO#y#YO#z#YO#{#ZO#|#YO#}#ZO$O#[O$P#[O$Q#[O$R#[O$S#]O$T#[O$U#[O$V#[O$W#[O$X#[O$Y#[O$Z#[O$[#[O$]#[O$^#[O$_#[O$`#[O$a#[O$b#[O$c#[O$d#[O%X#VO%k#UO~O#Q!{X#R!{X#S!{X#T!{X#U!{X#V!{X#W!{X#X!{X#Y!{X#]!{X#^!{X#_!{X#`!{X#a!{X#b!{X#c!{X#d!{X#e!{X#f!{X#g!{X$s!{X%d!{X%p!{X%q!{X%e!{X%u!{X$f!{X%j!{XV!{Xm!{X!a!{X!b!{X$n!{X$p!{X$r!{X%Q!{X%V!{X$g!{X$h!{X~P>{O#S#`O#T#`O#U#aO#V#aO#W#bO#X#bO#Y#bO#]#cO#^#cO#_#cO#`#dO#a#dO#b#dO#c#dO#Q!zX#R!zX#d!zX#e!zX#f!zX#g!zX%p!zX%q!zX~O$s!zX%d!zX%u!zX$f!zXV!zXm!zX!a!zX!b!zX$n!zX$p!zX$r!zX%Q!zX%V!zX$g!zX$h!zX~PDVO#Q!yX#R!yX#f!yX#g!yX%d!yX%p!yX%q!yX~O#d#eO#e#eO$s!yX%u!yX$f!yXV!yXm!yX!a!yX!b!yX$n!yX$p!yX$r!yX%Q!yX%V!yX$g!yX$h!yX~PFpO#Q!xX#R!xX%d!xX%p!xX%q!xX~O#f#fO#g#fO$s!xX%u!xX$f!xXV!xXm!xX!a!xX!b!xX$n!xX$p!xX$r!xX%Q!xX%V!xX$g!xX$h!xX~PH_O%d#gO#Q%nX#R%nX$s%nX%p%nX%q%nX%u%nX$f%nXV%nXm%nX!a%nX!b%nX$n%nX$p%nX$r%nX%Q%nX%V%nX$g%nX$h%nX~O#Q#iO#R#iO%p#iO%q#hO$s!vX$f!vXV!vXm!vX!a!vX!b!vX$n!vX$p!vX$r!vX%Q!vX%V!vX%u!vX$g!vX$h!vX~O%Z#jO~OUkO`jOajOjjOkjOljOo!UOp!UOq!UOr!UOs!UOt!UOu!UOv!UOw!UOx!UOy!UOz!UO{!UO|!UO}!UO!O!UO!P!UO!Q!UO!R!UO!S!UO!T!UO!U!UO!V!UO!W!UO!X!UO!Y!UO!Z!UO![!UO!]!UO!^!UO!_!UO!`!VO!a!VO!b!VO!d!SO!g!WO!h!WO!i!WO!j!WO!k!WO!ppO!qpO!|'bO#Z'fO#['fO#p!YO$e!ZO$i!RO%XmO%ZfO%^!OO%_gO%`hO%biO%m|O%o'bO%t!QO%v!RO~O#P!nX#Q!tX#R!tX#S!tX#T!tX#U!tX#V!tX#W!tX#X!tX#Y!tX#]!tX#^!tX#_!tX#`!tX#a!tX#b!tX#c!tX#d!tX#e!tX#f!tX#g!tX#i!tX#o!tX#p!tX#q!tX#r!tX#s!tX#t!tX#u!tX#v!tX#w!tX#x!tX#y!tX#z!tX#{!tX#|!tX#}!tX$O!tX$P!tX$Q!tX$R!tX$S!tX$T!tX$U!tX$V!tX$W!tX$X!tX$Y!tX$Z!tX$[!tX$]!tX$^!tX$_!tX$`!tX$a!tX$b!tX$c!tX$d!tX$s!tX%X!tX%Z!nX%d!nX%d!tX%k!tX%p!tX%q!tX%e!nX%e!tX%u!tX$f!tX%j!tXV!tXm!tX!a!tX!b!tX$n!tX$p!tX$r!tX%Q!tX%V!tX$g!tX$h!tX~O!r#mO!s#mO%l#lO~P!!nO%d#nO%q#nO%u#QO~P#RO%X#pO~O%d#qO#P!mX%Z!mX%e!mX~OU'SO`jOajOjjOkjOljOo!UOp!UOq!UOr!UOs!UOt!UOu!UOv!UOw!UOx!UOy!UOz!UO{!UO|!UO}!UO!O!UO!P!UO!Q!UO!R!UO!S!UO!T!UO!U!UO!V!UO!W!UO!X!UO!Y!UO!Z!UO![!UO!]!UO!^!UO!_!UO!`!VO!a!VO!b!VO!g!WO!h!WO!i!WO!j!WO!k!WO!ppO!qpO!|sO#Z!XO#[!XO#p!YO$e!ZO$i!RO%X#sO%ZfO%^!OO%_gO%`hO%biO%m|O%osO%t!QO%v!RO~OU'SO`jOajOjjOkjOljOo!UOp!UOq!UOr!UOs!UOt!UOu!UOv!UOw!UOx!UOy!UOz!UO{!UO|!UO}!UO!O!UO!P!UO!Q!UO!R!UO!S!UO!T!UO!U!UO!V!UO!W!UO!X!UO!Y!UO!Z!UO![!UO!]!UO!^!UO!_!UO!`!VO!a!VO!b!VO!g!WO!h!WO!i!WO!j!WO!k!WO!ppO!qpO#p!YO$e!ZO$i!RO%X#sO%ZfO%^!OO%_gO%`hO%biO%m|O%t!QO%v!RO~O$s#wO~O`jOajOjjOkjOljO%ZfO%_gO%`hO%biO~O%X%fX%k%fX%t%fX%w%fXV%fXm%fX!a%fX!b%fX$h%fX$n%fX$p%fX$r%fX%V%fX%Q%fX~O%Z!fX~P!1uO%Z!|O~P!1uO!d#|O~O%XnX%knX%tnX%wnXVnXmnX!anX!bnX$hnX$nnX$pnX$rnX%VnX%QnX~O%Z!fX~P!3WO%Z!|O~P!3WO%X#}O%k!hO%t%iP%w%iP~OU!VOo!UOp!UOq!UOr!UOs!UOt!UOu!UOv!UOw!UOx!UOy!UOz!UO{!UO|!UO}!UO!O!UO!P!UO!Q!UO!R!UO!S!UO!T!UO!U!UO!V!UO!W!UO!X!UO!Y!UO!Z!UO![!UO!]!UO!^!UO!_!UO!`!VO!a!VO!b!VO!d#OO!ppO!qpO%e$SO~P!1WOU!VOo!UOp!UOq!UOr!UOs!UOt!UOu!UOv!UOw!UOx!UOy!UOz!UO{!UO|!UO}!UO!O!UO!P!UO!Q!UO!R!UO!S!UO!T!UO!U!UO!V!UO!W!UO!X!UO!Y!UO!Z!UO![!UO!]!UO!^!UO!_!UO!`!VO!a!VO!b!VO!d!SO!ppO!qpO%j$UO~P!1WO%X#}O%k!hO%t%iX%w%iX~O%t$ZO%w$YO~O$h$_O%k!hO~P]O%]$`O%^$`O~Of!sO%`$bO%a!sO~Of$cO%`$dO%c$cO~Of!wO%`!xO%b$fO%c!wO~OU$gO%X!`O~O%Z!|O%X!ea%k!eaV!eam!ea!a!ea!b!ea$n!ea$p!ea$r!ea%Q!ea%V!ea$h!ea~O#Q!ea#R!ea#S!ea#T!ea#U!ea#V!ea#W!ea#X!ea#Y!ea#]!ea#^!ea#_!ea#`!ea#a!ea#b!ea#c!ea#d!ea#e!ea#f!ea#g!ea#i!ea#o!ea#p!ea#q!ea#r!ea#s!ea#t!ea#u!ea#v!ea#w!ea#x!ea#y!ea#z!ea#{!ea#|!ea#}!ea$O!ea$P!ea$Q!ea$R!ea$S!ea$T!ea$U!ea$V!ea$W!ea$X!ea$Y!ea$Z!ea$[!ea$]!ea$^!ea$_!ea$`!ea$a!ea$b!ea$c!ea$d!ea$s!ea%d!ea%p!ea%q!ea%e!ea%u!ea$f!ea%j!ea$g!ea#P!ea~P!;vO%e$jO#P!nX%Z!nX%d!nX~O%Z(vO%e$kO~O%e$lO~O%d$mO%e$lO%q$mO~OUkOo!UOp!UOq!UOr!UOs!UOt!UOu!UOv!UOw!UOx!UOy!UOz!UO{!UO|!UO}!UO!O!UO!P!UO!Q!UO!R!UO!S!UO!T!UO!U!UO!V!UO!W!UO!X!UO!Y!UO!Z!UO![!UO!]!UO!^!UO!_!UO!`!VO!a!VO!b!VO!g!WO!h!WO!i!WO!j!WO!k!WO!ppO!qpO!|'XO#Z'iO#['iO#p'mO$e!ZO$i!RO%X#sO%^!OO%m|O%o'XO%t!QO%v!RO~P!1WOUkOo!UOp!UOq!UOr!UOs!UOt!UOu!UOv!UOw!UOx!UOy!UOz!UO{!UO|!UO}!UO!O!UO!P!UO!Q!UO!R!UO!S!UO!T!UO!U!UO!V!UO!W!UO!X!UO!Y!UO!Z!UO![!UO!]!UO!^!UO!_!UO!`!VO!a!VO!b!VO!d$uO!g!WO!h!WO!i!WO!j!WO!k!WO!ppO!qpO!|sO#Z!XO#[!XO#p!YO$e!ZO$i!RO%XmO%^!OO%j$lO%m|O%osO%t!QO%v!RO~P!1WOUkOo!UOp!UOq!UOr!UOs!UOt!UOu!UOv!UOw!UOx!UOy!UOz!UO{!UO|!UO}!UO!O!UO!P!UO!Q!UO!R!UO!S!UO!T!UO!U!UO!V!UO!W!UO!X!UO!Y!UO!Z!UO![!UO!]!UO!^!UO!_!UO!`!VO!a!VO!b!VO!d$uO!g!WO!h!WO!i!WO!j!WO!k!WO!ppO!qpO!|'bO#Z'fO#['fO#p!YO$e!ZO$i!RO%XmO%^!OO%e$lO%m|O%o'bO%t!QO%v!RO~P!1WO%Z%OO~OU!VOo!UOp!UOq!UOr!UOs!UOt!UOu!UOv!UOw!UOx!UOy!UOz!UO{!UO|!UO}!UO!O!UO!P!UO!Q!UO!R!UO!S!UO!T!UO!U!UO!V!UO!W!UO!X!UO!Y!UO!Z!UO![!UO!]!UO!^!UO!_!UO!`!VO!a!VO!b!VO!d!SO!ppO!qpO%X%ZO~P!1WO%e%]O~O!r%^O!s%^O#P!na#Q!ta#R!ta#S!ta#T!ta#U!ta#V!ta#W!ta#X!ta#Y!ta#]!ta#^!ta#_!ta#`!ta#a!ta#b!ta#c!ta#d!ta#e!ta#f!ta#g!ta#i!ta#o!ta#p!ta#q!ta#r!ta#s!ta#t!ta#u!ta#v!ta#w!ta#x!ta#y!ta#z!ta#{!ta#|!ta#}!ta$O!ta$P!ta$Q!ta$R!ta$S!ta$T!ta$U!ta$V!ta$W!ta$X!ta$Y!ta$Z!ta$[!ta$]!ta$^!ta$_!ta$`!ta$a!ta$b!ta$c!ta$d!ta$s!ta%X!ta%Z!na%d!na%k!ta%p!ta%q!ta%e!ta%u!ta$f!ta%j!taV!tam!ta!a!ta!b!ta$n!ta$p!ta$r!ta%Q!ta%V!ta$g!ta$h!ta~O%d!ta%e!na~P# {OUkOo!UOp!UOq!UOr!UOs!UOt!UOu!UOv!UOw!UOx!UOy!UOz!UO{!UO|!UO}!UO!O!UO!P!UO!Q!UO!R!UO!S!UO!T!UO!U!UO!V!UO!W!UO!X!UO!Y!UO!Z!UO![!UO!]!UO!^!UO!_!UO!`!VO!a!VO!b!VO!g!WO!h!WO!i!WO!j!WO!k!WO!ppO!qpO#p'mO$e!ZO$i!RO%X#sO%^!OO%m|O%t!QO%v!RO~P!1WO%u$lO~O%d%`O%q%`O%u$lO~OU!VOo!UOp!UOq!UOr!UOs!UOt!UOu!UOv!UOw!UOx!UOy!UOz!UO{!UO|!UO}!UO!O!UO!P!UO!Q!UO!R!UO!S!UO!T!UO!U!UO!V!UO!W!UO!X!UO!Y!UO!Z!UO![!UO!]!UO!^!UO!_!UO!`!VO!a!VO!b!VO!d!SO!ppO!qpO~P!1WO%d#qO#P!ma%Z!ma%e!ma~O%l#QO%Z!tX~P9ZO#Q!ta#R!ta#S!ta#T!ta#U!ta#V!ta#W!ta#X!ta#Y!ta#]!ta#^!ta#_!ta#`!ta#a!ta#b!ta#c!ta#d!ta#e!ta#f!ta#g!ta#p!ta#q!ta#r!ta#s!ta#t!ta#u!ta#v!ta#w!ta#x!ta#y!ta#z!ta#{!ta#|!ta#}!ta$O!ta$P!ta$Q!ta$R!ta$S!ta$T!ta$U!ta$V!ta$W!ta$X!ta$Y!ta$Z!ta$[!ta$]!ta$^!ta$_!ta$`!ta$a!ta$b!ta$c!ta$d!ta$s!ta%p!ta%q!ta%e!ta%u!ta$f!ta%j!taV!tam!ta!a!ta!b!ta$n!ta$p!ta$r!ta%Q!ta%V!ta$g!ta$h!ta~O#i#WO#o#XO%X#VO%k#UO%d!ta#P!ta~P#._O$f%dO~OU!VOo!UOp!UOq!UOr!UOs!UOt!UOu!UOv!UOw!UOx!UOy!UOz!UO{!UO|!UO}!UO!O!UO!P!UO!Q!UO!R!UO!S!UO!T!UO!U!UO!V!UO!W!UO!X!UO!Y!UO!Z!UO![!UO!]!UO!^!UO!_!UO!`!VO!a!VO!b!VO!d%eO~O%l%gO~P#3qO%d%hO%e%YX~O%e%jO~O%t!ea%w!ea~P!;vO%e$jO~OU!VOo!UOp!UOq!UOr!UOs!UOt!UOu!UOv!UOw!UOx!UOy!UOz!UO{!UO|!UO}!UO!O!UO!P!UO!Q!UO!R!UO!S!UO!T!UO!U!UO!V!UO!W!UO!X!UO!Y!UO!Z!UO![!UO!]!UO!^!UO!_!UO!`!VO!a!VO!b!VO!d!SO!ppO!qpO%e$SO~P!1WO%t%lO%w%kO~O%X#}O%k!hOV$kqm$kq!a$kq!b$kq$n$kq$p$kq$r$kq%Q$kq%V$kq%t%iP%w%iP$h$kq~O%X#}O%k!hOV$lqm$lq!a$lq!b$lq$n$lq$p$lq$r$lq%Q$lq%V$lq%t%iP%w%iP$h$lq~O%d!nX%e!nX#P!nX#Q!nX#R!nX#S!nX#T!nX#U!nX#V!nX#W!nX#X!nX#Y!nX#]!nX#^!nX#_!nX#`!nX#a!nX#b!nX#c!nX%p!nX~O!r(zO!s(zO%l%oO%j!nX$s!nX%q!nX#d!nX#e!nX#f!nX#g!nX%u!nX$f!nXV!nXm!nX!a!nX!b!nX$n!nX$p!nX$r!nX%Q!nX%V!nX$g!nX$h!nX~P#;kO%e%pO~O%j%qO~O%t%uO%w%tO~O$h%wO%k!hO~P]O$h%wO~P]Of%xO%c%xO~O%e%yO~O#S(OO#T(OO#U(VO#V(VO#W(^O#X(^O#Y(^O#](eO#^(eO#_(eO#`(lO#a(lO#b(lO#c(lO~O%Z#Oi%e#Oi~P#?jO%d#nX%j!zX~PDVO#f(sO#g(sO#Q%rX#R%rX%j%rX%p%rX%q%rX%e%rX~O#Q%}O#R%}O%p%}O%q%|O%j#kX%e#kX~O%Z&OO~O#P!nX%Z!nX%d!nX%d#nX%j#jX%e#jX~O%d&PO~O%j%yO~O#i#WO#o#XO%X#VO%k#UO#Q!ti#R!ti#S!ti#T!ti#U!ti#V!ti#W!ti#X!ti#Y!ti#]!ti#^!ti#_!ti#`!ti#a!ti#b!ti#c!ti#d!ti#e!ti#f!ti#g!ti#p!ti#x!ti#y!ti#z!ti#{!ti#|!ti#}!ti$O!ti$P!ti$Q!ti$R!ti$S!ti$T!ti$U!ti$V!ti$W!ti$X!ti$Y!ti$Z!ti$[!ti$]!ti$^!ti$_!ti$`!ti$a!ti$b!ti$c!ti$d!ti$s!ti%d!ti%p!ti%q!ti%e!ti%u!ti$f!ti%j!tiV!tim!ti!a!ti!b!ti$n!ti$p!ti$r!ti%Q!ti%V!ti$g!ti#P!ti$h!ti~O#q!ti#r!ti#s!ti#t!ti#u!ti#v!ti#w!ti~P#BqO#q#XO#r#XO#s#XO#t#XO#u#XO#v#XO#w#XO~P#BqO#i#WO#o#XO#p#YO#q#XO#r#XO#s#XO#t#XO#u#XO#v#XO#w#XO#x#YO#y#YO#z#YO#|#YO%X#VO%k#UO#Q!ti#R!ti#S!ti#T!ti#U!ti#V!ti#W!ti#X!ti#Y!ti#]!ti#^!ti#_!ti#`!ti#a!ti#b!ti#c!ti#d!ti#e!ti#f!ti#g!ti$O!ti$P!ti$Q!ti$R!ti$S!ti$T!ti$U!ti$V!ti$W!ti$X!ti$Y!ti$Z!ti$[!ti$]!ti$^!ti$_!ti$`!ti$a!ti$b!ti$c!ti$d!ti$s!ti%d!ti%p!ti%q!ti%e!ti%u!ti$f!ti%j!tiV!tim!ti!a!ti!b!ti$n!ti$p!ti$r!ti%Q!ti%V!ti$g!ti#P!ti$h!ti~O#{!ti#}!ti~P#HiO#{#ZO#}#ZO~P#HiO#Q!ti#R!ti#S!ti#T!ti#U!ti#V!ti#W!ti#X!ti#Y!ti#]!ti#^!ti#_!ti#`!ti#a!ti#b!ti#c!ti#d!ti#e!ti#f!ti#g!ti$s!ti%d!ti%p!ti%q!ti%e!ti%u!ti$f!ti%j!tiV!tim!ti!a!ti!b!ti$n!ti$p!ti$r!ti%Q!ti%V!ti$g!ti#P!ti$h!ti~P>{O#Q!{i#R!{i#U!{i#V!{i#W!{i#X!{i#Y!{i#]!{i#^!{i#_!{i#`!{i#a!{i#b!{i#c!{i#d!{i#e!{i#f!{i#g!{i$s!{i%p!{i%q!{i%u!{i$f!{i%j!{iV!{im!{i!a!{i!b!{i$n!{i$p!{i$r!{i%Q!{i%V!{i$g!{i$h!{i~O#S#`O#T#`O%d!{i~P$!rO#S#`O#T#`O#U#aO#V#aO#W#bO#X#bO#Q!{i#R!{i#`!{i#a!{i#b!{i#c!{i#d!{i#e!{i#f!{i#g!{i$s!{i%d!{i%p!{i%q!{i%u!{i$f!{i%j!{iV!{im!{i!a!{i!b!{i$n!{i$p!{i$r!{i%Q!{i%V!{i$g!{i$h!{i~O#Y!{i#]!{i#^!{i#_!{i~P$%`O#Y#bO#]#cO#^#cO#_#cO~P$%`O#Q!{i#R!{i#d!{i#e!{i#f!{i#g!{i$s!{i%p!{i%q!{i%u!{i$f!{i%j!{iV!{im!{i!a!{i!b!{i$n!{i$p!{i$r!{i%Q!{i%V!{i$g!{i$h!{i~O#S#`O#T#`O#U#aO#V#aO#W#bO#X#bO#Y#bO#]#cO#^#cO#_#cO#`#dO#a#dO#b#dO#c#dO%d!{i~P$(^O#S#`O#T#`O#U#aO#V#aO#W#bO#X#bO#Y#bO#]#cO#^#cO#_#cO#`#dO#a#dO#b#dO#c#dO~O#Q!zi#R!zi#d!zi#e!zi#f!zi#g!zi$s!zi%d!zi%p!zi%q!zi%u!zi$f!ziV!zim!zi!a!zi!b!zi$n!zi$p!zi$r!zi%Q!zi%V!zi$g!zi$h!zi~P$*zO#Q!yi#R!yi#f!yi#g!yi%d!yi%p!yi%q!yi~O#d#eO#e#eO$s!yi%u!yi$f!yiV!yim!yi!a!yi!b!yi$n!yi$p!yi$r!yi%Q!yi%V!yi$g!yi$h!yi~P$-eO#Q!xi#R!xi%d!xi%p!xi%q!xi~O#f#fO#g#fO$s!xi%u!xi$f!xiV!xim!xi!a!xi!b!xi$n!xi$p!xi$r!xi%Q!xi%V!xi$g!xi$h!xi~P$/SO%d#gO#Q%ni#R%ni$s%ni%p%ni%q%ni%u%ni$f%niV%nim%ni!a%ni!b%ni$n%ni$p%ni$r%ni%Q%ni%V%ni$g%ni$h%ni~O#i'uO#o'vO#p'wO#q'vO#r'vO#s'vO#t'vO#u'vO#v'vO#w'vO#x'wO#y'wO#z'wO#{'xO#|'wO#}'xO$O'yO$P'yO$Q'yO$R'yO$S'zO$T'yO$U'yO$V'yO$W'yO$X'yO$Y'yO$Z'yO$['yO$]'yO$^'yO$_'yO$`'yO$a'yO$b'yO$c'yO$d'yO%X#VO%k#UO~O#P!ni%Z!ni%d!ni%e!ni#S!ni#T!ni#U!ni#V!ni#W!ni#X!ni#Y!ni#]!ni#^!ni#_!ni#`!ni#a!ni#b!ni#c!ni#Q!ni#R!ni%p!ni~P$1xO%u%yO~O%Z&WO~O$u&YOV$tXm$tX!a$tX!b$tX$n$tX$p$tX$r$tX%Q$tX%V$tX%d$tX$h$tX~O%d&ZOV%xXm%xX!a%xX!b%xX$n%xX$p%xX$r%xX%Q%xX%V%xX$h%xX~O%d%hO%e%Ya~O%t&bO%w&aO~O%t&dO%w&cO~O%d!na%e!na#P!na#Q!na#R!na#S!na#T!na#U!na#V!na#W!na#X!na#Y!na#]!na#^!na#_!na#`!na#a!na#b!na#c!na%p!na~O!r*WO!s*WO%j!na$s!na%q!na#d!na#e!na#f!na#g!na%u!na$f!naV!nam!na!a!na!b!na$n!na$p!na$r!na%Q!na%V!na$g!na$h!na~P$8ZO%u&eO~O$h&gO~P]O#S!{a#T!{a#U!{a#V!{a#W!{a#X!{a#Y!{a#]!{a#^!{a#_!{a#`!{a#a!{a#b!{a#c!{a%e!{a~O#Q)cO#R)cO%p)cO%Z!{a~P$;aO!|'cO#Z'gO#['gO%o'cO~P!-WOUkOo!UOp!UOq!UOr!UOs!UOt!UOu!UOv!UOw!UOx!UOy!UOz!UO{!UO|!UO}!UO!O!UO!P!UO!Q!UO!R!UO!S!UO!T!UO!U!UO!V!UO!W!UO!X!UO!Y!UO!Z!UO![!UO!]!UO!^!UO!_!UO!`!VO!a!VO!b!VO!d!SO!g!WO!h!WO!i!WO!j!WO!k!WO!ppO!qpO!|'cO#Z'gO#['gO#p!YO$e!ZO$i!RO%XmO%^!OO%m|O%o'cO%t!QO%v!RO~P!1WO!d&jO!|'dO#Z'kO#['kO%o'dO~P!-WO#Q!}i#R!}i#d!}i#e!}i#f!}i#g!}i$s!}i%d!}i%p!}i%q!}i%u!}i$f!}i%j!}iV!}im!}i!a!}i!b!}i$n!}i$p!}i$r!}i%Q!}i%V!}i$g!}i$h!}i~P$*zO#P'pO~Q#OX#P!mX#Q!mX#R!mX#S!mX#T!mX#U!mX#V!mX#W!mX#X!mX#Y!mX#]!mX#^!mX#_!mX#`!mX#a!mX#b!mX#c!mX%p!mX%e!mX~O%d+UO#d!mX#e!mX#f!mX#g!mX$s!mX%q!mX%u!mX$f!mX%j!mXV!mXm!mX!a!mX!b!mX$n!mX$p!mX$r!mX%Q!mX%V!mX$g!mX$h!mX~P$B}O#P!nq%Z!nq%d!nq%e!nq#S!nq#T!nq#U!nq#V!nq#W!nq#X!nq#Y!nq#]!nq#^!nq#_!nq#`!nq#a!nq#b!nq#c!nq#Q!nq#R!nq%p!nq~P$1xO$g&oO~OU!VOo!UOp!UOq!UOr!UOs!UOt!UOu!UOv!UOw!UOx!UOy!UOz!UO{!UO|!UO}!UO!O!UO!P!UO!Q!UO!R!UO!S!UO!T!UO!U!UO!V!UO!W!UO!X!UO!Y!UO!Z!UO![!UO!]!UO!^!UO!_!UO!`!VO!a!VO!b!VO~O!d&pO~P$G]O%d&ZOV%xam%xa!a%xa!b%xa$n%xa$p%xa$r%xa%Q%xa%V%xa$h%xa~O%u&sO~O%u&xO~O#f(sO#g(sO#Q%ri#R%ri%j%ri%p%ri%q%ri%e%ri~O#S(QO#T(QO#U(XO#V(XO#W(`O#X(`O#Y(`O#](gO#^(gO#_(gO#`(nO#a(nO#b(nO#c(nO~O%d#nX%j#nX~P$K^O%d&yO%j%si~O%d+UO#P!ma$s!ma%q!ma%e!ma%u!ma$f!ma%j!maV!mam!ma!a!ma!b!ma$n!ma$p!ma$r!ma%Q!ma%V!ma$g!ma$h!ma~O#Q!ma#R!ma#S!ma#T!ma#U!ma#V!ma#W!ma#X!ma#Y!ma#]!ma#^!ma#_!ma#`!ma#a!ma#b!ma#c!ma#d!ma#e!ma#f!ma#g!ma%p!ma~P$LnO%e&{O~O%u&}O~O%u'OO~O%d&yO%j%sq~O$h'RO~O#Q%fX#R%fX#S%fX#T%fX#U%fX#V%fX#W%fX#X%fX#Y%fX#]%fX#^%fX#_%fX#`%fX#a%fX#b%fX#c%fX#i%fX#o%fX#p%fX#q%fX#r%fX#s%fX#t%fX#u%fX#v%fX#w%fX#x%fX#y%fX#z%fX#{%fX#|%fX#}%fX$O%fX$P%fX$Q%fX$R%fX$S%fX$T%fX$U%fX$V%fX$W%fX$X%fX$Y%fX$Z%fX$[%fX$]%fX$^%fX$_%fX$`%fX$a%fX$b%fX$c%fX$d%fX%X%fX%d%fX%k%fX%l%fX%p%fX%e%fX#P%fX~O#d%fX#e%fX#f%fX#g%fX$s%fX%Z!fX%q%fX%u%fX$f%fX%j%fXV%fXm%fX!a%fX!b%fX$n%fX$p%fX$r%fX%Q%fX%V%fX$g%fX$h%fX~P%!OO%Z!|O!r%fX!s%fX~P%!OO#S!tX#T!tX#U!tX#V!tX#W!tX#X!tX#Y!tX#]!tX#^!tX#_!tX#`!tX#a!tX#b!tX#c!tX#i!tX#o!tX#p!tX#q!tX#r!tX#s!tX#t!tX#u!tX#v!tX#w!tX#x!tX#y!tX#z!tX#{!tX#|!tX#}!tX$O!tX$P!tX$Q!tX$R!tX$S!tX$T!tX$U!tX$V!tX$W!tX$X!tX$Y!tX$Z!tX$[!tX$]!tX$^!tX$_!tX$`!tX$a!tX$b!tX$c!tX$d!tX%X!tX%Z!tX%k!tX%e!tX#Q!tX#R!tX%p!tX~O%Z!fX#P!tX%d!tX~P%'pOUkOo!UOp!UOq!UOr!UOs!UOt!UOu!UOv!UOw!UOx!UOy!UOz!UO{!UO|!UO}!UO!O!UO!P!UO!Q!UO!R!UO!S!UO!T!UO!U!UO!V!UO!W!UO!X!UO!Y!UO!Z!UO![!UO!]!UO!^!UO!_!UO!`!VO!a!VO!b!VO!d!SO!g!WO!h!WO!i!WO!j!WO!k!WO!ppO!qpO!|'YO#Z'jO#['jO#p'mO$e!ZO$i!RO%XmO%^!OO%m|O%o'YO%t!QO%v!RO~P!1WO!r#mO!s#mO%l(wO#P!nX%Z!nX%d!nX~P%'pO#P!nX#Q!tX#R!tX#S!tX#T!tX#U!tX#V!tX#W!tX#X!tX#Y!tX#]!tX#^!tX#_!tX#`!tX#a!tX#b!tX#c!tX#d!tX#e!tX#f!tX#g!tX#i!tX#o!tX#p!tX#q!tX#r!tX#s!tX#t!tX#u!tX#v!tX#w!tX#x!tX#y!tX#z!tX#{!tX#|!tX#}!tX$O!tX$P!tX$Q!tX$R!tX$S!tX$T!tX$U!tX$V!tX$W!tX$X!tX$Y!tX$Z!tX$[!tX$]!tX$^!tX$_!tX$`!tX$a!tX$b!tX$c!tX$d!tX%X!tX%Z!nX%d!nX%j!tX%k!tX%p!tX%q!tX%e!tX$s!tX$f!tXV!tXm!tX!a!tX!b!tX$n!tX$p!tX$r!tX%Q!tX%V!tX%u!tX$g!tX$h!tX~O!r#mO!s#mO%l(xO~P%/|O#P!nX#Q!tX#R!tX#S!tX#T!tX#U!tX#V!tX#W!tX#X!tX#Y!tX#]!tX#^!tX#_!tX#`!tX#a!tX#b!tX#c!tX#d!tX#e!tX#f!tX#g!tX#i!tX#o!tX#p!tX#q!tX#r!tX#s!tX#t!tX#u!tX#v!tX#w!tX#x!tX#y!tX#z!tX#{!tX#|!tX#}!tX$O!tX$P!tX$Q!tX$R!tX$S!tX$T!tX$U!tX$V!tX$W!tX$X!tX$Y!tX$Z!tX$[!tX$]!tX$^!tX$_!tX$`!tX$a!tX$b!tX$c!tX$d!tX%X!tX%Z!nX%d!nX%d!tX%e!tX%k!tX%p!tX%q!tX~O!r#mO!s#mO%l(yO~P%5gO!|'bO#Z'fO#['fO%o'bO~P!-WO!|'ZO#Z'hO#['hO%o'ZO~P!-WOUkOo!UOp!UOq!UOr!UOs!UOt!UOu!UOv!UOw!UOx!UOy!UOz!UO{!UO|!UO}!UO!O!UO!P!UO!Q!UO!R!UO!S!UO!T!UO!U!UO!V!UO!W!UO!X!UO!Y!UO!Z!UO![!UO!]!UO!^!UO!_!UO!`!VO!a!VO!b!VO!g!WO!h!WO!i!WO!j!WO!k!WO!ppO!qpO!|'YO#Z'jO#['jO#p'mO$e!ZO$i!RO%X#sO%^!OO%m|O%o'YO%t!QO%v!RO~P!1WO!|'eO#Z'lO#['lO%o'eO~P!-WO!r%^O!s%^O#P!na#Q!ta#R!ta#S!ta#T!ta#U!ta#V!ta#W!ta#X!ta#Y!ta#]!ta#^!ta#_!ta#`!ta#a!ta#b!ta#c!ta#i!ta#o!ta#p!ta#q!ta#r!ta#s!ta#t!ta#u!ta#v!ta#w!ta#x!ta#y!ta#z!ta#{!ta#|!ta#}!ta$O!ta$P!ta$Q!ta$R!ta$S!ta$T!ta$U!ta$V!ta$W!ta$X!ta$Y!ta$Z!ta$[!ta$]!ta$^!ta$_!ta$`!ta$a!ta$b!ta$c!ta$d!ta%X!ta%Z!na%d!na%k!ta%p!ta%e!ta~O%Z!ta~P%>tO#d!ta#e!ta#f!ta#g!ta%d!ta%q!ta~P%>tO#i'uO#o'vO%X#VO%k#UO#S!ta#T!ta#U!ta#V!ta#W!ta#X!ta#Y!ta#]!ta#^!ta#_!ta#`!ta#a!ta#b!ta#c!ta#p!ta#q!ta#r!ta#s!ta#t!ta#u!ta#v!ta#w!ta#x!ta#y!ta#z!ta#{!ta#|!ta#}!ta$O!ta$P!ta$Q!ta$R!ta$S!ta$T!ta$U!ta$V!ta$W!ta$X!ta$Y!ta$Z!ta$[!ta$]!ta$^!ta$_!ta$`!ta$a!ta$b!ta$c!ta$d!ta%Z!ta#P!ta%d!ta%e!ta#Q!ta#R!ta%p!ta~O!r#mO!s#mO%l*YO%Z!nX~P#;kO$s#Oi%e#Oi$f#Oi%j#OiV#Oim#Oi!a#Oi!b#Oi$n#Oi$p#Oi$r#Oi%Q#Oi%V#Oi%u#Oi$g#Oi$h#Oi~O#S'}O#T'}O#U(UO#V(UO#W(]O#X(]O#Y(]O#](dO#^(dO#_(dO#`(kO#a(kO#b(kO#c(kO~P%GuO#S'|O#T'|O#U(TO#V(TO#W([O#X([O#Y([O#](cO#^(cO#_(cO#`(jO#a(jO#b(jO#c(jO~Q#Oi#S#`O#T#`O#U#aO#V#aO#W#bO#X#bO#Y#bO#]#cO#^#cO#_#cO#`#dO#a#dO#b#dO#c#dO~Q#Oi#S'{O#T'{O#U(SO#V(SO#W(ZO#X(ZO#Y(ZO#](bO#^(bO#_(bO#`(iO#a(iO#b(iO#c(iO~O#Q#Oi#R#Oi#d#Oi#e#Oi#f#Oi#g#Oi%d#Oi%e#Oi%p#Oi%q#Oi~P%KyO%d#Oi%q#Oi%u#Oi%j#Oi~P$K^O#S(RO#T(RO#U(YO#V(YO#W(aO#X(aO#Y(aO#](hO#^(hO#_(hO#`(oO#a(oO#b(oO#c(oO~O%d#Oi%e#Oi%q#Oi~P%M{O#S(PO#T(PO#U(WO#V(WO#W(_O#X(_O#Y(_O#](fO#^(fO#_(fO#`(mO#a(mO#b(mO#c(mO~O#Q#Oi#R#Oi%Z#Oi%p#Oi%e#Oi~P& WO#Q!zX#R!zX#d!zX#e!zX#f!zX#g!zX%d#nX%e!zX%p!zX%q!zX~P%KyO#i'uO#o'vO%X#VO%k#UO#S!ti#T!ti#U!ti#V!ti#W!ti#X!ti#Y!ti#]!ti#^!ti#_!ti#`!ti#a!ti#b!ti#c!ti#p!ti#x!ti#y!ti#z!ti#{!ti#|!ti#}!ti$O!ti$P!ti$Q!ti$R!ti$S!ti$T!ti$U!ti$V!ti$W!ti$X!ti$Y!ti$Z!ti$[!ti$]!ti$^!ti$_!ti$`!ti$a!ti$b!ti$c!ti$d!ti%Z!ti#P!ti%d!ti%e!ti#Q!ti#R!ti%p!ti~O#q!ti#r!ti#s!ti#t!ti#u!ti#v!ti#w!ti~P&#]O#q'vO#r'vO#s'vO#t'vO#u'vO#v'vO#w'vO~P&#]O#i'uO#o'vO#p'wO#q'vO#r'vO#s'vO#t'vO#u'vO#v'vO#w'vO#x'wO#y'wO#z'wO#|'wO%X#VO%k#UO#S!ti#T!ti#U!ti#V!ti#W!ti#X!ti#Y!ti#]!ti#^!ti#_!ti#`!ti#a!ti#b!ti#c!ti$O!ti$P!ti$Q!ti$R!ti$S!ti$T!ti$U!ti$V!ti$W!ti$X!ti$Y!ti$Z!ti$[!ti$]!ti$^!ti$_!ti$`!ti$a!ti$b!ti$c!ti$d!ti%Z!ti#P!ti%d!ti%e!ti#Q!ti#R!ti%p!ti~O#{!ti#}!ti~P&'xO#{'xO#}'xO~P&'xO#S!ti#T!ti#U!ti#V!ti#W!ti#X!ti#Y!ti#]!ti#^!ti#_!ti#`!ti#a!ti#b!ti#c!ti%Z!ti#P!ti%d!ti%e!ti#Q!ti#R!ti%p!ti~P$1xO`jOajOjjOkjOljO!d!SO!ppO!qpO%X%ZO%ZfO%_gO%`hO%biO~P$G]O#Q!{i#R!{i#U!{i#V!{i#W!{i#X!{i#Y!{i#]!{i#^!{i#_!{i#`!{i#a!{i#b!{i#c!{i#d!{i#e!{i#f!{i#g!{i%e!{i%p!{i%q!{i~O#S'{O#T'{O%d!{i~P&.hO#S'|O#T'|O%e!{i~P$!rO#S'}O#T'}O#Y!{i#]!{i#^!{i#_!{i#`!{i#a!{i#b!{i#c!{i$s!{i%e!{i$f!{i%j!{iV!{im!{i!a!{i!b!{i$n!{i$p!{i$r!{i%Q!{i%V!{i%u!{i$g!{i$h!{i~O#U!{i#V!{i#W!{i#X!{i~P&0gO#U!{i#V!{i#W!{i#X!{i#Y!{i#]!{i#^!{i#_!{i#`!{i#a!{i#b!{i#c!{i%Z!{i%e!{i~O#S(OO#T(OO~P&2kO#S(PO#T(PO#Q!{i#R!{i%p!{i~P&2kO#U!{i#V!{i#W!{i#X!{i#Y!{i#]!{i#^!{i#_!{i#`!{i#a!{i#b!{i#c!{i%d!{i%q!{i~O#S(QO#T(QO%j!{i%u!{i~P&4WO#S(RO#T(RO%e!{i~P&4WO#S'{O#T'{O#U(SO#V(SO#W(ZO#X(ZO#Q!{i#R!{i#`!{i#a!{i#b!{i#c!{i#d!{i#e!{i#f!{i#g!{i%d!{i%e!{i%p!{i%q!{i~O#Y!{i#]!{i#^!{i#_!{i~P&5sO#S'|O#T'|O#U(TO#V(TO#W([O#X([O#Y!{i#]!{i#^!{i#_!{i#`!{i#a!{i#b!{i#c!{i%e!{i~P$(^O#U(UO#V(UO#W(]O#X(]O~P&0gO#S(OO#T(OO#U(VO#V(VO#W(^O#X(^O#`!{i#a!{i#b!{i#c!{i%Z!{i%e!{i~O#Y!{i#]!{i#^!{i#_!{i~P&8xO#S(PO#T(PO#U(WO#V(WO#W(_O#X(_O#Q!{i#R!{i#`!{i#a!{i#b!{i#c!{i%Z!{i%p!{i%e!{i~O#Y!{i#]!{i#^!{i#_!{i~P&:QO#S(QO#T(QO#U(XO#V(XO#W(`O#X(`O#`!{i#a!{i#b!{i#c!{i%d!{i%j!{i%q!{i%u!{i~O#Y!{i#]!{i#^!{i#_!{i~P&;cO#S(RO#T(RO#U(YO#V(YO#W(aO#X(aO#`!{i#a!{i#b!{i#c!{i%d!{i%e!{i%q!{i~O#Y!{i#]!{i#^!{i#_!{i~P&<qO#Y(ZO#](bO#^(bO#_(bO~P&5sO#S'|O#T'|O#U(TO#V(TO#W([O#X([O#Y([O#](cO#^(cO#_(cO#`!{i#a!{i#b!{i#c!{i%e!{i~P$(^O#S'}O#T'}O#U(UO#V(UO#W(]O#X(]O#Y(]O#](dO#^(dO#_(dO$s!{i%e!{i$f!{i%j!{iV!{im!{i!a!{i!b!{i$n!{i$p!{i$r!{i%Q!{i%V!{i%u!{i$g!{i$h!{i~O#`!{i#a!{i#b!{i#c!{i~P&?aO#Y(^O#](eO#^(eO#_(eO~P&8xO#Y(_O#](fO#^(fO#_(fO~P&:QO#Y(`O#](gO#^(gO#_(gO~P&;cO#Y(aO#](hO#^(hO#_(hO~P&<qO#Q!{i#R!{i#d!{i#e!{i#f!{i#g!{i%d!{i%e!{i%p!{i%q!{i~P%KyO#S'|O#T'|O#U(TO#V(TO#W([O#X([O#Y([O#](cO#^(cO#_(cO#`(jO#a(jO#b(jO#c(jO%e!{i~P$(^O#`(kO#a(kO#b(kO#c(kO~P&?aO%Z!{i%e!{i~P#?jO#Q!{i#R!{i%Z!{i%p!{i%e!{i~P& WO%d!{i%j!{i%q!{i%u!{i~P$K^O%d!{i%e!{i%q!{i~P%M{O#Q!zi#R!zi#d!zi#e!zi#f!zi#g!zi%d!zi%e!zi%p!zi%q!zi~P%KyO#S'|O#T'|O#U(TO#V(TO#W([O#X([O#Y([O#](cO#^(cO#_(cO#`(jO#a(jO#b(jO#c(jO~O#Q!zi#R!zi#d!zi#e!zi#f!zi#g!zi%j!zi%p!zi%q!zi%e!zi~P&GOO#d(pO#e(pO%e!yi~P$-eO#d(qO#e(qO#Q!yi#R!yi#f!yi#g!yi%j!yi%p!yi%q!yi%e!yi~O#f(rO#g(rO%e!xi~P$/SO%d(tO#Q%ni#R%ni%e%ni%p%ni%q%ni~O%d!ni%e!ni%j!ni#P!ni$s!ni%q!ni#Q!ni#R!ni#S!ni#T!ni#U!ni#V!ni#W!ni#X!ni#Y!ni#]!ni#^!ni#_!ni#`!ni#a!ni#b!ni#c!ni#d!ni#e!ni#f!ni#g!ni%p!ni%u!ni$f!niV!nim!ni!a!ni!b!ni$n!ni$p!ni$r!ni%Q!ni%V!ni$g!ni$h!ni~P>{O!r%^O!s%^O%Z!na~P$8ZO#S!{a#T!{a#U!{a#V!{a#W!{a#X!{a#Y!{a#]!{a#^!{a#_!{a#`!{a#a!{a#b!{a#c!{a%j!{a%u!{a~O#Q+[O#R+[O%p+[O%d!{a%q!{a~P&MaO!d&jO!|'eO#Z'lO#['lO%o'eO~P!-WO#Q!}i#R!}i#d!}i#e!}i#f!}i#g!}i%d!}i%e!}i%p!}i%q!}i~P%KyO#Q!}i#R!}i#d!}i#e!}i#f!}i#g!}i%j!}i%p!}i%q!}i%e!}i$s!}i$f!}iV!}im!}i!a!}i!b!}i$n!}i$p!}i$r!}i%Q!}i%V!}i%u!}i$g!}i$h!}i~P&GOO#S'}O#T'}O#U(UO#V(UO#W(]O#X(]O#Y(]O#](dO#^(dO#_(dO#`(kO#a(kO#b(kO#c(kO$s!}i%e!}i$f!}i%j!}iV!}im!}i!a!}i!b!}i$n!}i$p!}i$r!}i%Q!}i%V!}i%u!}i$g!}i$h!}i~O%Z!}i%e!}i~P#?jO#Q!}i#R!}i%Z!}i%p!}i%e!}i~P& WO%d!}i%j!}i%q!}i%u!}i~P$K^O%d!}i%e!}i%q!}i~P%M{O#Q#OX#R#OX#S#OX#T#OX#U#OX#V#OX#W#OX#X#OX#Y#OX#]#OX#^#OX#_#OX#`#OX#a#OX#b#OX#c#OX#d#OX#e#OX#f#OX#g#OX%e#OX%p#OX%q#OX~O#P'qO%d#OX~P'&{O#P'oO~Q#OX#P'nO$s#OX%e#OX$f#OX%j#OXV#OXm#OX!a#OX!b#OX$n#OX$p#OX$r#OX%Q#OX%V#OX%u#OX$g#OX$h#OX~O#S#OX#T#OX#U#OX#V#OX#W#OX#X#OX#Y#OX#]#OX#^#OX#_#OX#`#OX#a#OX#b#OX#c#OX~P'(wO#S#OX#T#OX#U#OX#V#OX#W#OX#X#OX#Y#OX#]#OX#^#OX#_#OX#`#OX#a#OX#b#OX#c#OX%Z#OX%e#OX~O#P#TO~P'+OO#P'tO#Q#OX#R#OX%p#OX~P'+OO#S#OX#T#OX#U#OX#V#OX#W#OX#X#OX#Y#OX#]#OX#^#OX#_#OX#`#OX#a#OX#b#OX#c#OX%d#OX%q#OX~O#P'rO%j#OX%u#OX~P',kO#P'sO%e#OX~P',kO%d!nq%e!nq%j!nq#P!nq$s!nq%q!nq#Q!nq#R!nq#S!nq#T!nq#U!nq#V!nq#W!nq#X!nq#Y!nq#]!nq#^!nq#_!nq#`!nq#a!nq#b!nq#c!nq#d!nq#e!nq#f!nq#g!nq%p!nq%u!nq$f!nqV!nqm!nq!a!nq!b!nq$n!nq$p!nq$r!nq%Q!nq%V!nq$g!nq$h!nq~P>{O%d#nX%e#nX~P%M{O%d*mO%e%sq~O#P'rO%d#OX%q#OX%u#OX~O#P'sO%d#OX%e#OX%q#OX~O#S!{X#T!{X#U!{X#V!{X#W!{X#X!{X#Y!{X#]!{X#^!{X#_!{X#`!{X#a!{X#b!{X#c!{X%Z!{X%e!{X#Q!{X#R!{X%p!{X~P$1xO#Q!zX#R!zX#d!zX#e!zX#f!zX#g!zX%d!zX%e!zX%p!zX%q!zX~P%KyO#Q!zX#R!zX#d!zX#e!zX#f!zX#g!zX%j!zX%p!zX%q!zX%e!zX~P&GOO#d(pO#e(pO%e!yX~PFpO#d(qO#e(qO#Q!yX#R!yX#f!yX#g!yX%j!yX%p!yX%q!yX%e!yX~O#f(rO#g(rO%e!xX~PH_O%d(tO#Q%nX#R%nX%e%nX%p%nX%q%nX~O#Q+SO#R+SO%p+SO%q(uO%d!vX%e!vX~O%Z+iO~O%Z)[O~O%Z)]O~O%Z)^O~O%Z)_O~O%Z)`O~O%Z)aO~O%Z)bO~O`jOajOjjOkjOljO!d!SO!ppO!qpO%ZfO%_gO%`hO%biO~P$G]O%d*[O~O%d#qO%Z!mX~P$B}O%d*mO%e%si~O%d#qO#P!ma#S!ma#T!ma#U!ma#V!ma#W!ma#X!ma#Y!ma#]!ma#^!ma#_!ma#`!ma#a!ma#b!ma#c!ma%Z!ma%e!ma#Q!ma#R!ma%p!ma~O#Q+ZO#R+ZO%p+ZO$s!{a%e!{a$f!{aV!{am!{a!a!{a!b!{a$n!{a$p!{a$r!{a%Q!{a%V!{a$g!{a$h!{a~P&MaO#Q+]O#R+]O%p+]O%d!{a%q!{a~P$;aO#Q+TO#R+TO%p+TO%q#hO%d!vX%u!vX~O%d+UO%e!mX%j!mX#P!mX$s!mX%q!mX%u!mX$f!mXV!mXm!mX!a!mX!b!mX$n!mX$p!mX$r!mX%Q!mX%V!mX$g!mX$h!mX~O#Q#iO#R#iO%p#iO%q(uO%e!vX~O%Z+fO~O%Z(vO~O%]%lXW!p%aU%^l%cka`!d%Z~",
  goto: "!9n%yPPPP%z&SPPPP&[PPP&g&jPP*O*O-`0sP*O0w4[PPPP4`PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP4oP7v:xPPPPP>P>Z?|A_PPPPDwHhKcLrMcNU! R!!RP!'^!'hPPPPPPPPPPPPPPPPPPPPPPP!)bP!){!*R!*Y!*_!*dPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP!*t%z%z%zP%zP%zPP!+OP!+U!+d!+s!+y!,P!,V!,h!,v!-Q!-dPPP!-j!-rP!-zP!-}PPPPPPPPPPP!.Q!1z!5h!8lPPPP!8{PPP!9f!){PPPP!9k]TOV!n$]$^%v]SOV!n$]$^%vcQORSV^!n$]$^%vR#z!]'hpYms|!Q!X!Y!Z!g!h#T#U#V#W#X#Y#Z#[#]#`#a#b#c#d#e#f#g#h#i#j#m#p#q#s#}$Y$Z%O%P%Z%^%d%k%l%t%u%|%}&O&P&W&a&b&c&d&o&y'X'Y'Z'b'c'd'e'f'g'h'i'j'k'l'm'n'o'p'q'r's't'u'v'w'x'y'z'{'|'}(O(P(Q(R(S(T(U(V(W(X(Y(Z([(](^(_(`(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z)[)])^)_)`)a)b)c*W*[*m+S+T+U+X+Y+Z+[+]+a+f+iQ#x!]R&]%h'mjYms|!Q!X!Y!Z!]!g!h#T#U#V#W#X#Y#Z#[#]#`#a#b#c#d#e#f#g#h#i#j#m#p#q#s#}$Y$Z%O%P%Z%^%d%h%k%l%t%u%|%}&O&P&W&a&b&c&d&o&y'X'Y'Z'b'c'd'e'f'g'h'i'j'k'l'm'n'o'p'q'r's't'u'v'w'x'y'z'{'|'}(O(P(Q(R(S(T(U(V(W(X(Y(Z([(](^(_(`(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z)[)])^)_)`)a)b)c*W*[*m+S+T+U+X+Y+Z+[+]+a+f+i'ljYms|!Q!X!Y!Z!]!g!h#T#U#V#W#X#Y#Z#[#]#`#a#b#c#d#e#f#g#h#i#j#m#p#q#s#}$Y$Z%O%P%Z%^%d%h%k%l%t%u%|%}&O&P&W&a&b&c&d&o&y'X'Y'Z'b'c'd'e'f'g'h'i'j'k'l'm'n'o'p'q'r's't'u'v'w'x'y'z'{'|'}(O(P(Q(R(S(T(U(V(W(X(Y(Z([(](^(_(`(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z)[)])^)_)`)a)b)c*W*[*m+S+T+U+X+Y+Z+[+]+a+f+iR!qfT!th!u'ljYms|!Q!X!Y!Z!]!g!h#T#U#V#W#X#Y#Z#[#]#`#a#b#c#d#e#f#g#h#i#j#m#p#q#s#}$Y$Z%O%P%Z%^%d%h%k%l%t%u%|%}&O&P&W&a&b&c&d&o&y'X'Y'Z'b'c'd'e'f'g'h'i'j'k'l'm'n'o'p'q'r's't'u'v'w'x'y'z'{'|'}(O(P(Q(R(S(T(U(V(W(X(Y(Z([(](^(_(`(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z)[)])^)_)`)a)b)c*W*[*m+S+T+U+X+Y+Z+[+]+a+f+iR!rfT!yi!zQ!daQ!mdQ!neQ$P!eR$Q!f%hnYms|!Q!X!Y!Z#U#V#W#X#Y#Z#[#]#`#a#b#c#d#e#f#g#h#j#s$Y$Z%O%d%k%l%t%u%|&O&P&W&a&b&c&d&o&y'Z'b'c'd'e'f'g'h'k'l'n'o'p'q'r's'{'|'}(Q(R(S(T(U(X(Y(Z([(](`(a(b(c(d(g(h(i(j(k(n(o(p(q(r(s(t(u(v(z)[)])^)a)b*W*[*m+f+iY!aade!e!fQ$g!|!X'U#T#m%^'X'Y'i'j'm't'u'v'w'x'y'z(O(P(V(W(^(_(e(f(l(m)_)`&p!OYms|!Q!X!Y!Z#T#U#V#W#X#Y#Z#[#]#`#a#b#c#d#e#f#g#h#j#m#s$Y$Z%O%^%d%k%l%t%u%|&O&P&W&a&b&c&d&o&y'X'Y'Z'b'c'd'e'f'g'h'i'j'k'l'm'n'o'p'q'r's't'u'v'w'x'y'z'{'|'}(O(P(Q(R(S(T(U(V(W(X(Y(Z([(](^(_(`(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z)[)])^)_)`)a)b*W*[*m+f+iZ!cade!e!f%hoYms|!Q!X!Y!Z#U#V#W#X#Y#Z#[#]#`#a#b#c#d#e#f#g#h#j#s$Y$Z%O%d%k%l%t%u%|&O&P&W&a&b&c&d&o&y'Z'b'c'd'e'f'g'h'k'l'n'o'p'q'r's'{'|'}(Q(R(S(T(U(X(Y(Z([(](`(a(b(c(d(g(h(i(j(k(n(o(p(q(r(s(t(u(v(z)[)])^)a)b*W*[*m+f+iQ$h!|Y'Vade!e!f!X'W#T#m%^'X'Y'i'j'm't'u'v'w'x'y'z(O(P(V(W(^(_(e(f(l(m)_)`a!id!d!j!m!n$P$Q$]!hqYms|!Q!Z#U#V#j#p#s$Y$Z%d%k%l%t%u&O&W&a&b&c&d&o'X'Y'Z'b'c'd'e(v+f+iS$T!g#}Q$V!hQ&R%PQ*d+XQ*e+YQ*f+ZQ*g)cQ*h+aQ*i+[Q*j+]U*o#i%Z%}Q*p+TR*q+S!h!TYms|!Q!Z#U#V#j#p#s$Y$Z%d%k%l%t%u&O&W&a&b&c&d&o'X'Y'Z'b'c'd'e(v+f+iS%b#q+U[&T%P+X+Y+Z+[+]S+^)c+aa+e!g!h#i#}%Z%}+S+T%Y!O!X!Y#T#W#X#Y#Z#[#]#`#a#b#c#d#e#f#g#h#m%O%^%|&P&y'f'g'h'i'j'k'l'm'n'o'p'q'r's't'u'v'w'x'y'z'{'|'}(O(P(Q(R(S(T(U(V(W(X(Y(Z([(](^(_(`(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(z)[)])^)_)`)a)b*W*[*mz!PYms!Q!Z#U#j$Y$Z%d%k%l%t%u&a&b&c&d&o'd+fv!S!g!h#i#p#q#}%P%Z%})c+S+T+U+X+Y+Z+[+]+aS'_'X'YU'`&O'Z'ca'a|#V#s&W'b'e(v+i%UrYms|!Q!X!Z#U#V#`#a#b#c#d#e#f#g#h#j#s$Y$Z%O%d%k%l%t%u%|&O&P&W&a&b&c&d&o&y'Z'b'c'd'e'f'g'h'k'l'n'o'p'q'r's'{'|'}(Q(R(S(T(U(X(Y(Z([(](`(a(b(c(d(g(h(i(j(k(n(o(p(q(r(s(t(u(v)[)])^)a)b*[*m+f+iQ#u!YS$l#W'uQ$y#XQ$z#YQ${#ZQ$|#[Q$}#]Q%_#mQ&V%^Q({'mQ)V'vQ)W'wQ)X'xQ)Y'yQ)Z'zQ*X(zQ*k*Wu*r#T'X'Y'i'j't(O(P(V(W(^(_(e(f(l(m)_)`&q!OYms|!Q!X!Y!Z#T#U#V#W#X#Y#Z#[#]#`#a#b#c#d#e#f#g#h#j#m#s$Y$Z%O%^%d%k%l%t%u%|&O&P&W&a&b&c&d&o&y'X'Y'Z'b'c'd'e'f'g'h'i'j'k'l'm'n'o'p'q'r's't'u'v'w'x'y'z'{'|'}(O(P(Q(R(S(T(U(V(W(X(Y(Z([(](^(_(`(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(z)[)])^)_)`)a)b*W*[*m+f+iQ![YS#Sm#sQ#k|Q#o!QQ#v!ZW%[#j(v+f+iQ%r$YQ%s$ZQ&X%dQ&_%kQ&`%lQ&e%tQ&f%uQ&n&WQ&t&aQ&u&bQ&v&cQ&w&dR&|&onxY!Z#j$Y$Z%d%k%l%t%u&a&b&c&d&oU*ym#s(vS+d!Q+fV+g|&W+irwY!Q!Z#j$Y$Z%d%k%l%t%u&a&b&c&d&o+fQ%Y#hQ*V(u]*xm|#s&W(v+itvY!Q!Z#h#j$Y$Z%d%k%l%t%u&a&b&c&d&o+fU$p#U#V&OQ%X#gQ&h%|Q*U(t_*wm|#s&W(u(v+ivuY!Q!Z#g#h#j$Y$Z%d%k%l%t%u&a&b&c&d&o+fQ%W#fQ*S(rQ*T(s`*um|#s&W(t(u(v+iX*v#U#V%|&OxtY!Q!Z#f#g#h#j$Y$Z%d%k%l%t%u&a&b&c&d&o+fh#_s!X'Y'b'c'f'g'h'i'j'k'lQ$n#TQ$o#U`%Q#`'{'|'}(O(P(Q(RQ%R#aQ%S#bQ%T#cQ%U#dQ%V#eQ%{'XQ&Q%OS&k&P&yQ(}'nQ)O'oQ)P'pQ)Q'qQ)R'rQ)S'sQ)T'tQ)U#VQ)d(SQ)e(TQ)f(UQ)g(VQ)h(WQ)i(XQ)j(YQ)k(ZQ)l([Q)m(]Q)n(^Q)o(_Q)p(`Q)q(aQ)r(bQ)s(cQ)t(dQ)u(eQ)v(fQ)w(gQ)x(hQ)y(iQ)z(jQ){(kQ)|(lQ)}(mQ*O(nQ*P(oQ*Q(pQ*R(qQ*Z'dQ*])[Q*^)]Q*_)^Q*`)_Q*a)`Q*b)aQ*c)bS*l*[*mb*sm|#s&W(r(t(u(v+iU*t%|&O(sQ+b'ZR+c'ea#_s'X'Y'Z'b'c'd'enzY!Z#j$Y$Z%d%k%l%t%u&a&b&c&d&oQ#PmQ#^sU$s#U#V&OU%[#i+S+TQ%a#p`&S%P)c+X+Y+Z+[+]+aQ&U%ZQ&i%}U*z|&W+iQ*{'bQ*|'cQ*}'ZQ+O'XQ+P'YQ+Q'dQ+R'eS+h!Q+fT+j#s(v!P{Ym|!Q!Z#j#s$Y$Z%d%k%l%t%u&W&a&b&c&d&o(v+f+iQ$m#VR$x#US$v#U#VR&i&OV$q#U#V&OV$t#U#V&OQ$w#UQ&l&PS'P&y*mQ+W#VR+_*[Y!kd!d!m$P$QR$X!jQ%f#wR&q&ZQVOU_V$^%vQ$^!nR%v$][ROV!n$]$^%vS]R^R^SQ!uhR$a!uQ!ziR$e!zQ%i#xR&^%iS!}loU#{!_!b'VS$i!}#{T%z'T'WY!jd!d!m$P$QS$W!j$]R$]!nQ&z&lS'Q&z*nR*n+_Q#r!TW%c#r&m+V+`Q&m&TQ+V+eR+`+^Q&[%fR&r&[]UOV!n$]$^%v]XOV!n$]$^%vRZPR#y!]z}Yms!Q!Z#U#j$Y$Z%d%k%l%t%u&a&b&c&d&o'd+fY!cade!e!f%Y#t!X!Y#T#W#X#Y#Z#[#]#`#a#b#c#d#e#f#g#h#m%O%^%|&P&y'f'g'h'i'j'k'l'm'n'o'p'q'r's't'u'v'w'x'y'z'{'|'}(O(P(Q(R(S(T(U(V(W(X(Y(Z([(](^(_(`(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(z)[)])^)_)`)a)b*W*[*mn$R!g!h#i#}%P%Z%}+S+T+U+X+Y+Z+[+]S%e#w&ZQ&p&YS'['X'YU']&O'Z'c`'^|#V#s&W'b'e(v+iX(|#p#q)c+a%hlYms|!Q!X!Y!Z#U#V#W#X#Y#Z#[#]#`#a#b#c#d#e#f#g#h#j#s$Y$Z%O%d%k%l%t%u%|&O&P&W&a&b&c&d&o&y'Z'b'c'd'e'f'g'h'k'l'n'o'p'q'r's'{'|'}(Q(R(S(T(U(X(Y(Z([(](`(a(b(c(d(g(h(i(j(k(n(o(p(q(r(s(t(u(v(z)[)])^)a)b*W*[*m+f+i|!V!g!h#i#p#q#w#}%P%Z%}&Y&Z)c+S+T+U+X+Y+Z+[+]+aY!_ade!e!f!X'T#T#m%^'X'Y'i'j'm't'u'v'w'x'y'z(O(P(V(W(^(_(e(f(l(m)_)`%hoYms|!Q!X!Y!Z#U#V#W#X#Y#Z#[#]#`#a#b#c#d#e#f#g#h#j#s$Y$Z%O%d%k%l%t%u%|&O&P&W&a&b&c&d&o&y'Z'b'c'd'e'f'g'h'k'l'n'o'p'q'r's'{'|'}(Q(R(S(T(U(X(Y(Z([(](`(a(b(c(d(g(h(i(j(k(n(o(p(q(r(s(t(u(v(z)[)])^)a)b*W*[*m+f+iY!bade!e!f!X'W#T#m%^'X'Y'i'j'm't'u'v'w'x'y'z(O(P(V(W(^(_(e(f(l(m)_)`Q!ldQ$O!dQ$[!mQ%m$PR%n$Q!PyYm|!Q!Z#j#s$Y$Z%d%k%l%t%u&W&a&b&c&d&o(v+f+iV$r#U#V&OR%g#w",
  nodeNames: "⚠ LineComment BlockComment Program DefinitionStatement Docstring BasicId Keyword DocstringLiteral MultilineDocstringLiteral Attribute AttributeKeyword AttributeKeyword AttributeKeyword AttributeParams BaseLiteral IntLiteral FloatLiteral RelnameLiteral RelnameStringLiteral StaticStringLiteral StaticSequence EscapeChar RelnameMultilineStringLiteral StaticMultilineStringLiteral MultiStaticSequence CharLiteral DateLiteral DateTimeLiteral Keyword LhsId Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Keyword Keyword Keyword ParenOpId Operator QualifiedName QualifiedNameElem Emphasis Emphasis Emphasis Emphasis Emphasis FormalParamsBracket FormalParams FormalParam Literal BooleanLiteral SpecializeIntLiteral Keyword OperatorKeyword BasicExpression SpecializeExpression Expression UnionExpression JoinExpression OverrideExpression RestrictExpression LogicalExpression Keyword LogicalAbstractExpression Bindings Keyword Keyword Keyword Keyword OperatorKeyword Keyword OperatorKeyword Keyword OperatorKeyword OperatorKeyword Keyword OperatorKeyword Keyword OperatorKeyword OperatorKeyword Keyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword AbstractExpression OperatorKeyword NocommaParam NocommaExpression NocommaUnionExpression NocommaAbstractExpression LogicalParam OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword Keyword Keyword Keyword Keyword Keyword FormalParamsParen ValueTypeStatement EntityTypeStatement ConstraintStatement Keyword ModuleStatement Keyword UseStatement Keyword Keyword Alias Keyword",
  maxTerm: 224,
  nodeProps: [
    ["group", -6,4,165,166,167,169,171,"Declaration"]
  ],
  skippedNodes: [0,1,2],
  repeatNodeCount: 10,
  tokenData: "!(d~R#dOX(aXY(hYZ)`Z](a]^)`^p(apq(hqr)srs*Sst6dtu(auv)}vw(awx8Zxy<ryz<{z{=U{|=_|}=q}!O=U!O!P=z!P!Q?`!Q!R@r!R![Fp![!]GV!]!^Gq!^!_Gz!_!`Hd!`!aHo!a!b(a!b!cH{!c!}IU!}#OJ^#O#PJg#P#QNc#Q#RNl#R#S!!U#S#T(a#T#YIU#Y#Z!!q#Z#hIU#h#i!&P#i#oIU#o#p!'e#p#q!'n#q#r!'w#r$r(a$r$s=U$s%o(a%o%p=U%p&a(a&a&b=U&b4w(a4w5bIU5b5i(a5i6SIU6S%#t(a%#t%#u=U%#u%#v(a%#v%#w=U%#w%%U(a%%U%%V=U%%V%%W(a%%W%%X=U%%X%%Y(a%%Y%%Z=U%%Z%%[(a%%[%%]=U%%]%&Y(a%&Y%&Z!(Q%&Z%&](a%&]%&^!(Z%&^%&b(a%&b%&c=U%&c%'R(a%'R%'S=U%'S%'T=U%'T%'U=U%'U%'V=U%'V%'h(a%'h%'i=U%'i%'t(a%'t%'u=U%'u%(^(a%(^%(_=U%(_%(`=U%(`%(a=U%(a%(b(a%(b%(c=U%(c%(d=U%(d%(x(a%(x%(y=U%(y%(z=U%(z%({=U%({%(|=U%(|%)Q(a%)Q%)R=U%)R%)S=U%)S%)U(a%)U%)V=U%)V%)W=U%)W%)c(a%)c%)d=U%)d%)e=U%)e%)f=U%)f%)g(a%)g%)h=U%)h%)i(a%)i%)j=U%)j%*](a%*]%*^=U%*^~(ah(hO%aW%c`~(qS%S~%aW%c`XY(}YZ(}]^(}pq(}~)SS%S~XY(}YZ(}]^(}pq(}~)gS%S~%c`XY(}YZ(}]^(}pq(}j)zP%aW%c`!_!`)}Q*SO!dQo*XV%`nOY*nZ]*n^r*nrs0Qs#O*n#O#P+]#P~*nP*qVOY*nZ]*n^r*nrs+Ws#O*n#O#P+]#P~*nP+]OWPP+`drs*nuv*nwx*n!Q!R,n!R!S,n!S!T,n!T!U,n!U!Y-^!w!x-|#O#P*n#T#U*n#U#V*n#X#Y*n#Y#Z*n#b#c*n#f#g*n#h#i*n#i#j/O#j#k*n#l#m/hP,qXOY*nZ]*n^r*nrs+Ws!Q*n!Q!Y-^!Y#O*n#O#P+]#P~*nP-aXOY*nZ]*n^r*nrs+Ws!Q*n!Q!Y*n!Y#O*n#O#P+]#P~*nP.PR!Q![.Y!c!i.Y#T#Z.YP.]R!Q![.f!c!i.f#T#Z.fP.iR!Q![.r!c!i.r#T#Z.rP.uR!Q![/O!c!i/O#T#Z/OP/RR!Q![/[!c!i/[#T#Z/[P/_R!Q![/h!c!i/h#T#Z/hP/kR!Q![/t!c!i/t#T#Z/tP/wR!Q![*n!c!i*n#T#Z*ng0VPWPrs0Yg0_T%bfOr0nrs1Qs#O0n#O#P1{#P~0nP0qTOr0nrs1Qs#O0n#O#P1{#P~0nP1TTOr0nrs1ds#O0n#O#P1{#P~0nP1gTOr0nrs1vs#O0n#O#P1{#P~0nP1{OXPP2Odrs0nuv0nwx0n!Q!R3^!R!S3^!S!T3^!T!U3^!U!Y3v!w!x4`#O#P0n#T#U0n#U#V0n#X#Y0n#Y#Z0n#b#c0n#f#g0n#h#i0n#i#j5b#j#k0n#l#m5zP3aVOr0nrs1Qs!Q0n!Q!Y3v!Y#O0n#O#P1{#P~0nP3yVOr0nrs1Qs!Q0n!Q!Y0n!Y#O0n#O#P1{#P~0nP4cR!Q![4l!c!i4l#T#Z4lP4oR!Q![4x!c!i4x#T#Z4xP4{R!Q![5U!c!i5U#T#Z5UP5XR!Q![5b!c!i5b#T#Z5bP5eR!Q![5n!c!i5n#T#Z5nP5qR!Q![5z!c!i5z#T#Z5zP5}R!Q![6W!c!i6W#T#Z6WP6ZR!Q![0n!c!i0n#T#Z0nj6kR%aW%c`xy6t!Q!R6y!R![7XQ6yO%mQQ7OR!qQ!Q![7X#c#d7a#l#m7oQ7^P!qQ!Q![7XQ7dP!Q!Y7gQ7lP!qQ!Q!Y7gQ7rR!Q![7{!c!i7{#T#Z7{Q8QR!qQ!Q![7{!c!i7{#T#Z7{j8bS%aW%c`Ow8nx#O8n#O#P8y#P~8nQ8qPwx8tQ8yOjQQ8|drs8nuv8nwx8n!Q!R:[!R!S:[!S!T:[!T!U:[!U!Y:e!w!x:n#O#P8n#T#U8n#U#V8n#X#Y8n#Y#Z8n#b#c8n#f#g8n#h#i8n#i#j;p#j#k8n#l#m<YQ:_Qwx8t!Q!Y:eQ:hQwx8t!Q!Y8nQ:qR!Q![:z!c!i:z#T#Z:zQ:}R!Q![;W!c!i;W#T#Z;WQ;ZR!Q![;d!c!i;d#T#Z;dQ;gR!Q![;p!c!i;p#T#Z;pQ;sR!Q![;|!c!i;|#T#Z;|Q<PR!Q![<Y!c!i<Y#T#Z<YQ<]R!Q![<f!c!i<f#T#Z<fQ<iR!Q![8n!c!i8n#T#Z8nk<{O%XR%aW%c`k=UO%eR%aW%c`j=_O%aW%c`!dQj=hP%aW%c`!dQ{|=kQ=nP!`!a)}k=zO%dR%aW%c`j>TQ%aW%c`!dQ!O!P>Z!Q![>fQ>^P!O!P>aQ>fO%lQQ>kRaQ!Q![>f!g!h>t#X#Y>tQ>wR{|?Q}!O?Q!Q![?WQ?TP!Q![?WQ?]PaQ!Q![?W~?iQ%aW%c`!dQz{?o!P!Q@d~?rROz?oz{?{{~?o~@OTOz?oz{?{{!P?o!P!Q@_!Q~?o~@dOQ~~@iRP~OY@dZ]@d^~@dj@{U%aW%c``Q!O!P>f!Q![A_!g!h>t#X#Y>t#c#dEv#l#mFUQAdS`Q!O!P>f!Q![Ap!g!h>t#X#Y>tQAuS`Q!O!P>f!Q![BR!g!h>t#X#Y>tQBWT`Q}!OBg!O!P>f!Q![Ee!g!h>t#X#Y>tQBjP!Q![BmQBpP!Q![BsQBvP}!OByQB|P!Q![CPQCSP!Q![CVQC[PkQ!v!wC_QCbP!Q![CeQChP!Q![CkQCnP![!]CqQCtP!Q![CwQCzP!Q![C}QDQP![!]DTQDWP!Q![DZQD^P!Q![DaQDdS{|Dp}!ODp!Q![Dv!|!}E`QDsP!Q![DvQDyP!Q![D|QEPP![!]ESQEVP!Q![EYQE]P!Q![E`QEeOlQQEjS`Q!O!P>f!Q![Ee!g!h>t#X#Y>tQEyP!Q!YE|QFRP`Q!Q!YE|QFXR!Q![Fb!c!iFb#T#ZFbQFgR`Q!Q![Fb!c!iFb#T#ZFbjFyS%aW%c``Q!O!P>f!Q![A_!g!h>t#X#Y>tkG`Q%aW%c`%ZR!`!a)}!}#OGfQGiP#P#QGlQGqO%_QkGzO%qR%aW%c`jHTR%aW%c`!dQ{|H^![!])}!_!`)}QHaP{|)}kHoO%wP%aW%c`!dQjHxP%aW%c`!dQ!_!`)}kIUO%VR%aW%c`oIaU%]S%aWUR%c`!Q![Is!c!}Is#R#SIs#T#oIs4w5bIs5i6SIsVIzU%]SUR!Q![Is!c!}Is#R#SIs#T#oIs4w5bIs5i6SIskJgO%kR%aW%c`~JjdrsKxuvKxwxKx!Q!RK}!R!SK}!S!TK}!T!UK}!U!YLV!w!xL_#O#PKx#T#UKx#U#VKx#X#YKx#Y#ZKx#b#cKx#f#gKx#h#iKx#i#jMa#j#kKx#l#mMy~K}Of~~LSPf~!Q!YLV~L[Pf~!Q!YKx~LbR!Q![Lk!c!iLk#T#ZLk~LnR!Q![Lw!c!iLw#T#ZLw~LzR!Q![MT!c!iMT#T#ZMT~MWR!Q![Ma!c!iMa#T#ZMa~MdR!Q![Mm!c!iMm#T#ZMm~MpR!Q![My!c!iMy#T#ZMy~M|R!Q![NV!c!iNV#T#ZNV~NYR!Q![Kx!c!iKx#T#ZKxkNlO%jR%aW%c`oNwT%[S%aW%c`!dQ!c!}! W#R#S! o#T#o! W4w5b! W5i6S! WR! ]UUR!Q![! W!c!}! W#R#S! W#T#o! W4w5b! W5i6S! WR! rU!Q![! W!c!}! W#R#S! W#T#o! W4w5b! W5i6S! Wo!!_U%aW%^U%c`!Q![Is!c!}Is#R#SIs#T#oIs4w5bIs5i6SIso!!|V%]S%aWUR%c`!Q![Is!c!}Is#R#SIs#T#U!#c#U#oIs4w5bIs5i6SIsV!#jW%]SUR!Q![Is!c!}Is#R#SIs#T#`Is#`#a!$S#a#oIs4w5bIs5i6SIsV!$ZW%]SUR!Q![Is!c!}Is#R#SIs#T#gIs#g#h!$s#h#oIs4w5bIs5i6SIsV!$zW%]SUR!Q![Is!c!}Is#R#SIs#T#XIs#X#Y!%d#Y#oIs4w5bIs5i6SIsV!%mU%]S!pQUR!Q![Is!c!}Is#R#SIs#T#oIs4w5bIs5i6SIso!&[W%]S%aWUR%c`!Q![Is!c!}Is#R#SIs#T#fIs#f#g!&t#g#oIs4w5bIs5i6SIsV!&{W%]SUR!Q![Is!c!}Is#R#SIs#T#iIs#i#j!$s#j#oIs4w5bIs5i6SIsk!'nO%tR%aW%c`k!'wO%pR%aW%c`k!(QO%uR%aW%c`j!(ZO%vQ%aW%c`j!(dO%oQ%aW%c`",
  tokenizers: [0, 1, 2, 3, 4],
  topRules: {"Program":[0,3]},
  specialized: [{term: 6, get: value => spec_BasicId[value] || -1},{term: 66, get: value => spec_Operator[value] || -1}],
  tokenPrec: 14047
});

const autocompleteList = [
    { label: "Any", type: "type" },
    { label: "AutoNumber", type: "type" },
    { label: "Boolean", type: "type" },
    { label: "Char", type: "type" },
    { label: "Day", type: "type" },
    { label: "Date", type: "type" },
    { label: "DateTime", type: "type" },
    { label: "Year", type: "type" },
    { label: "Month", type: "type" },
    { label: "Week", type: "type" },
    { label: "Hour", type: "type" },
    { label: "Minute", type: "type" },
    { label: "Second", type: "type" },
    { label: "Millisecond", type: "type" },
    { label: "Microsecond", type: "type" },
    { label: "Nanosecond", type: "type" },
    { label: "Entity", type: "type" },
    { label: "Int", type: "type" },
    { label: "Number", type: "type" },
    { label: "Missing", type: "type" },
    { label: "Floating", type: "type" },
    { label: "UnsignedInt", type: "type" },
    { label: "SignedInt", type: "type" },
    { label: "Rational", type: "type" },
    { label: "FixedDecimal", type: "type" },
    { label: "Hash", type: "type" },
    { label: "FilePos", type: "type" },
    { label: "String", type: "type" },
    { label: "def", type: "keyword" },
    { label: "output", type: "interface" },
    { label: "insert", type: "interface" },
    { label: "delete", type: "interface" },
    { label: "export", type: "interface" },
    { label: "from", type: "keyword" },
    { label: "if", type: "keyword" },
    { label: "iff", type: "keyword" },
    { label: "then", type: "keyword" },
    { label: "else", type: "keyword" },
    { label: "end", type: "keyword" },
    { label: "exists", type: "keyword" },
    { label: "where", type: "keyword" },
    { label: "with", type: "keyword" },
    { label: "select", type: "keyword" },
    { label: "implies", type: "keyword" },
    { label: "use", type: "keyword" },
    { label: "forall", type: "keyword" },
    { label: "in", type: "keyword" },
    { label: "ic", type: "keyword" },
    { label: "not", type: "keyword" },
    { label: "and", type: "keyword" },
    { label: "or", type: "keyword" },
    { label: "xor", type: "keyword" },
    { label: "union", type: "keyword" },
    { label: "_flatten", type: "function" },
    { label: "abelian_group", type: "function" },
    { label: "abs", type: "function" },
    { label: "absorption_laws", type: "function" },
    { label: "acos", type: "function" },
    { label: "acosh", type: "function" },
    { label: "acot", type: "function" },
    { label: "add", type: "function" },
    { label: "antisymmetric", type: "function" },
    { label: "approximate_abelian_group", type: "function" },
    { label: "approximate_commutative_monoid", type: "function" },
    { label: "approximate_group", type: "function" },
    { label: "approximate_monoid", type: "function" },
    { label: "approximate_ring", type: "function" },
    { label: "approximate_semiring", type: "function" },
    { label: "approximately_associative", type: "function" },
    { label: "approximately_commutative", type: "function" },
    { label: "approximately_distributive", type: "function" },
    { label: "approximately_has_inverse", type: "function" },
    { label: "approximately_left_distributive", type: "function" },
    { label: "approximately_right_distributive", type: "function" },
    { label: "approximately_zero_annihilation", type: "function" },
    { label: "argmax", type: "function" },
    { label: "argmin", type: "function" },
    { label: "arity", type: "function" },
    { label: "asin", type: "function" },
    { label: "asinh", type: "function" },
    { label: "associative", type: "function" },
    { label: "atan", type: "function" },
    { label: "atanh", type: "function" },
    { label: "auto_number", type: "function" },
    { label: "binary_operator", type: "function" },
    { label: "binary_relation", type: "function" },
    { label: "binary_relation_substitution_laws", type: "function" },
    { label: "bitwise_and", type: "function" },
    { label: "bitwise_left_shift", type: "function" },
    { label: "bitwise_not", type: "function" },
    { label: "bitwise_or", type: "function" },
    { label: "bitwise_right_shift", type: "function" },
    { label: "bitwise_unsigned_right_shift", type: "function" },
    { label: "bitwise_xor", type: "function" },
    { label: "boolean_and", type: "function" },
    { label: "boolean_false", type: "function" },
    { label: "boolean_not", type: "function" },
    { label: "boolean_or", type: "function" },
    { label: "boolean_true", type: "function" },
    { label: "bottom", type: "function" },
    { label: "bounded_lattice", type: "function" },
    { label: "bounded_semilattice", type: "function" },
    { label: "byte", type: "function" },
    { label: "capture_group_by_index", type: "function" },
    { label: "capture_group_by_name", type: "function" },
    { label: "cart", type: "function" },
    { label: "cbrt", type: "function" },
    { label: "ceil", type: "function" },
    { label: "char", type: "function" },
    { label: "clamp", type: "function" },
    { label: "commutative", type: "function" },
    { label: "commutative_monoid", type: "function" },
    { label: "comparable", type: "function" },
    { label: "complement", type: "function" },
    { label: "concat", type: "function" },
    { label: "cos", type: "function" },
    { label: "cosh", type: "function" },
    { label: "cot", type: "function" },
    { label: "count", type: "function" },
    { label: "date_add", type: "function" },
    { label: "date_day", type: "function" },
    { label: "date_dayname", type: "function" },
    { label: "date_dayofquarter", type: "function" },
    { label: "date_dayofweek", type: "function" },
    { label: "date_dayofweekofmonth", type: "function" },
    { label: "date_dayofyear", type: "function" },
    { label: "date_daysinmonth", type: "function" },
    { label: "date_isleapyear", type: "function" },
    { label: "date_month", type: "function" },
    { label: "date_monthname", type: "function" },
    { label: "date_quarterofyear", type: "function" },
    { label: "date_subtract", type: "function" },
    { label: "date_week", type: "function" },
    { label: "date_year", type: "function" },
    { label: "dates_period_days", type: "function" },
    { label: "datetime_add", type: "function" },
    { label: "datetime_day", type: "function" },
    { label: "datetime_day_", type: "function" },
    { label: "datetime_dayname", type: "function" },
    { label: "datetime_dayofquarter", type: "function" },
    { label: "datetime_dayofweek", type: "function" },
    { label: "datetime_dayofweekofmonth", type: "function" },
    { label: "datetime_dayofyear", type: "function" },
    { label: "datetime_daysinmonth", type: "function" },
    { label: "datetime_hour", type: "function" },
    { label: "datetime_hour_", type: "function" },
    { label: "datetime_isleapyear", type: "function" },
    { label: "datetime_minute", type: "function" },
    { label: "datetime_minute_", type: "function" },
    { label: "datetime_month", type: "function" },
    { label: "datetime_month_", type: "function" },
    { label: "datetime_monthname", type: "function" },
    { label: "datetime_now", type: "function" },
    { label: "datetime_quarterofyear", type: "function" },
    { label: "datetime_second", type: "function" },
    { label: "datetime_subtract", type: "function" },
    { label: "datetime_to_nanoseconds", type: "function" },
    { label: "datetime_week", type: "function" },
    { label: "datetime_week_", type: "function" },
    { label: "datetime_year", type: "function" },
    { label: "datetime_year_", type: "function" },
    { label: "datetimes_period_milliseconds", type: "function" },
    { label: "decimal", type: "function" },
    { label: "decimal_bit_length", type: "function" },
    { label: "decimal_int_convert", type: "function" },
    { label: "decimal_precision", type: "function" },
    { label: "decode_base", type: "function" },
    { label: "default_value", type: "function" },
    { label: "deg", type: "function" },
    { label: "denominator", type: "function" },
    { label: "describe", type: "function" },
    { label: "diff", type: "function" },
    { label: "disjoint", type: "function" },
    { label: "distributive", type: "function" },
    { label: "divide", type: "function" },
    { label: "docstring", type: "function" },
    { label: "domain", type: "function" },
    { label: "dot_join", type: "function" },
    { label: "double_metaphone", type: "function" },
    { label: "empty", type: "function" },
    { label: "encode_base", type: "function" },
    { label: "epoch_milliseconds", type: "function" },
    { label: "eq", type: "function" },
    { label: "equal", type: "function" },
    { label: "equivalence_relation", type: "function" },
    { label: "erf", type: "function" },
    { label: "erfinv", type: "function" },
    { label: "escape_regex_metachars", type: "function" },
    { label: "export_csv", type: "function" },
    { label: "export_json", type: "function" },
    { label: "factorial", type: "function" },
    { label: "filepos", type: "function" },
    { label: "filepos_value", type: "function" },
    { label: "first", type: "function" },
    { label: "float", type: "function" },
    { label: "float_int_convert", type: "function" },
    { label: "floor", type: "function" },
    { label: "floor_divide", type: "function" },
    { label: "floor_to_int", type: "function" },
    { label: "format_date", type: "function" },
    { label: "format_datetime", type: "function" },
    { label: "formula_card_est", type: "function" },
    { label: "frequency", type: "function" },
    { label: "function", type: "function" },
    { label: "geometric_mean", type: "function" },
    { label: "glm_generic", type: "function" },
    { label: "glm_linear_regression", type: "function" },
    { label: "glm_logistic_regression", type: "function" },
    { label: "glm_predict", type: "function" },
    { label: "glm_probit_regression", type: "function" },
    { label: "graphviz", type: "function" },
    { label: "group", type: "function" },
    { label: "gt", type: "function" },
    { label: "gt_eq", type: "function" },
    { label: "harmonic_mean", type: "function" },
    { label: "has_identity", type: "function" },
    { label: "has_left_identity", type: "function" },
    { label: "has_left_zero", type: "function" },
    { label: "has_maximal_element", type: "function" },
    { label: "has_minimal_element", type: "function" },
    { label: "has_right_identity", type: "function" },
    { label: "has_right_zero", type: "function" },
    { label: "hash", type: "function" },
    { label: "hash_value_uint", type: "function" },
    { label: "haversine", type: "function" },
    { label: "help", type: "function" },
    { label: "html", type: "function" },
    { label: "ic", type: "function" },
    { label: "idempotent", type: "function" },
    { label: "identity", type: "function" },
    { label: "int", type: "function" },
    { label: "int_float_convert", type: "function" },
    { label: "int_spread_by_even", type: "function" },
    { label: "int_spread_by_ratio", type: "function" },
    { label: "intersect", type: "function" },
    { label: "irreflexive", type: "function" },
    { label: "is_", type: "function" },
    { label: "jacobian", type: "function" },
    { label: "join_bounded_lattice", type: "function" },
    { label: "last", type: "function" },
    { label: "lattice", type: "function" },
    { label: "left_distributive", type: "function" },
    { label: "left_identity", type: "function" },
    { label: "left_override", type: "function" },
    { label: "left_zero", type: "function" },
    { label: "levenshtein", type: "function" },
    { label: "like_match", type: "function" },
    { label: "linear_regression", type: "function" },
    { label: "linear_regression_objective", type: "function" },
    { label: "linear_regression_predict", type: "function" },
    { label: "lined_csv", type: "function" },
    { label: "load_csv", type: "function" },
    { label: "load_csv_row_wise", type: "function" },
    { label: "load_json", type: "function" },
    { label: "log", type: "function" },
    { label: "log_card_est", type: "function" },
    { label: "lowercase", type: "function" },
    { label: "lr_random_initial_point", type: "function" },
    { label: "lt", type: "function" },
    { label: "lt_eq", type: "function" },
    { label: "mae", type: "function" },
    { label: "markdown", type: "function" },
    { label: "max", type: "function" },
    { label: "max_k", type: "function" },
    { label: "maximal_element", type: "function" },
    { label: "maximum", type: "function" },
    { label: "mean", type: "function" },
    { label: "mean_normalization", type: "function" },
    { label: "median", type: "function" },
    { label: "meet_bounded_lattice", type: "function" },
    { label: "metaphone", type: "function" },
    { label: "min", type: "function" },
    { label: "min_k", type: "function" },
    { label: "min_max_normalization", type: "function" },
    { label: "minimal_element", type: "function" },
    { label: "minimize_initial_point", type: "function" },
    { label: "minimum", type: "function" },
    { label: "missing", type: "function" },
    { label: "mlpack_adaboost", type: "function" },
    { label: "mlpack_adaboost_predict", type: "function" },
    { label: "mlpack_approx_kfn", type: "function" },
    { label: "mlpack_approx_kfn_build", type: "function" },
    { label: "mlpack_dbscan", type: "function" },
    { label: "mlpack_decision_tree", type: "function" },
    { label: "mlpack_decision_tree_predict", type: "function" },
    { label: "mlpack_det", type: "function" },
    { label: "mlpack_det_build", type: "function" },
    { label: "mlpack_emst", type: "function" },
    { label: "mlpack_fastmks", type: "function" },
    { label: "mlpack_fastmks_build", type: "function" },
    { label: "mlpack_gmm_generate", type: "function" },
    { label: "mlpack_gmm_probability", type: "function" },
    { label: "mlpack_gmm_train", type: "function" },
    { label: "mlpack_hoeffding_tree", type: "function" },
    { label: "mlpack_hoeffding_tree_predict", type: "function" },
    { label: "mlpack_kernel_pca", type: "function" },
    { label: "mlpack_kfn", type: "function" },
    { label: "mlpack_kfn_build", type: "function" },
    { label: "mlpack_kmeans", type: "function" },
    { label: "mlpack_kmeans_centroids", type: "function" },
    { label: "mlpack_knn", type: "function" },
    { label: "mlpack_knn_build", type: "function" },
    { label: "mlpack_krann", type: "function" },
    { label: "mlpack_krann_build", type: "function" },
    { label: "mlpack_lars", type: "function" },
    { label: "mlpack_lars_predict", type: "function" },
    { label: "mlpack_linear_regression", type: "function" },
    { label: "mlpack_linear_regression_predict", type: "function" },
    { label: "mlpack_linear_svm", type: "function" },
    { label: "mlpack_linear_svm_predict", type: "function" },
    { label: "mlpack_logistic_regression", type: "function" },
    { label: "mlpack_logistic_regression_predict", type: "function" },
    { label: "mlpack_lsh", type: "function" },
    { label: "mlpack_lsh_build", type: "function" },
    { label: "mlpack_mean_shift", type: "function" },
    { label: "mlpack_nbc", type: "function" },
    { label: "mlpack_nbc_predict", type: "function" },
    { label: "mlpack_nmf", type: "function" },
    { label: "mlpack_pca", type: "function" },
    { label: "mlpack_perceptron", type: "function" },
    { label: "mlpack_perceptron_predict", type: "function" },
    { label: "mlpack_preprocess_split", type: "function" },
    { label: "mlpack_radical", type: "function" },
    { label: "mlpack_random_forest", type: "function" },
    { label: "mlpack_random_forest_predict", type: "function" },
    { label: "mlpack_softmax_regression", type: "function" },
    { label: "mlpack_softmax_regression_predict", type: "function" },
    { label: "mode", type: "function" },
    { label: "modulo", type: "function" },
    { label: "monoid", type: "function" },
    { label: "mse", type: "function" },
    { label: "multiply", type: "function" },
    { label: "murmurhash", type: "function" },
    { label: "nanoseconds_to_datetime", type: "function" },
    { label: "natural_exp", type: "function" },
    { label: "natural_log", type: "function" },
    { label: "neq", type: "function" },
    { label: "not", type: "function" },
    { label: "nullary_relation", type: "function" },
    { label: "num_bytes", type: "function" },
    { label: "num_chars", type: "function" },
    { label: "numerator", type: "function" },
    { label: "pack", type: "function" },
    { label: "parse_date", type: "function" },
    { label: "parse_datetime", type: "function" },
    { label: "parse_decimal", type: "function" },
    { label: "parse_float", type: "function" },
    { label: "parse_int", type: "function" },
    { label: "parse_json", type: "function" },
    { label: "parse_uuid", type: "function" },
    { label: "partial_order", type: "function" },
    { label: "partial_order_and_bounded_lattice", type: "function" },
    { label: "partial_order_and_join_bounded_lattice", type: "function" },
    { label: "partial_order_and_lattice", type: "function" },
    { label: "partial_order_and_meet_bounded_lattice", type: "function" },
    { label: "pattern_match", type: "function" },
    { label: "percentile", type: "function" },
    { label: "percentile_nearest", type: "function" },
    { label: "period_add", type: "function" },
    { label: "period_day_to_int", type: "function" },
    { label: "period_max", type: "function" },
    { label: "period_min", type: "function" },
    { label: "pi_float", type: "function" },
    { label: "pivot", type: "function" },
    { label: "pop_standard_deviation", type: "function" },
    { label: "pop_variance", type: "function" },
    { label: "pop_zscore_normalization", type: "function" },
    { label: "power", type: "function" },
    { label: "prefix_join", type: "function" },
    { label: "preorder", type: "function" },
    { label: "product", type: "function" },
    { label: "proper_subset", type: "function" },
    { label: "proper_superset", type: "function" },
    { label: "rad", type: "function" },
    { label: "random_mersenne_twister", type: "function" },
    { label: "random_threefry_float", type: "function" },
    { label: "random_threefry_uint", type: "function" },
    { label: "random_uint", type: "function" },
    { label: "range", type: "function" },
    { label: "rational", type: "function" },
    { label: "rational_convert", type: "function" },
    { label: "reflexive", type: "function" },
    { label: "regex_compile", type: "function" },
    { label: "regex_match", type: "function" },
    { label: "regex_match_all", type: "function" },
    { label: "rel", type: "function" },
    { label: "relname_string", type: "function" },
    { label: "remainder", type: "function" },
    { label: "reverse_sort", type: "function" },
    { label: "right_distributive", type: "function" },
    { label: "right_identity", type: "function" },
    { label: "right_override", type: "function" },
    { label: "right_zero", type: "function" },
    { label: "ring", type: "function" },
    { label: "rmse", type: "function" },
    { label: "round", type: "function" },
    { label: "sample_standard_deviation", type: "function" },
    { label: "sample_variance", type: "function" },
    { label: "sample_zscore_normalization", type: "function" },
    { label: "second", type: "function" },
    { label: "semilattice", type: "function" },
    { label: "semiring", type: "function" },
    { label: "sign", type: "function" },
    { label: "sin", type: "function" },
    { label: "sinh", type: "function" },
    { label: "sort", type: "function" },
    { label: "soundex", type: "function" },
    { label: "spread", type: "function" },
    { label: "sqrt", type: "function" },
    { label: "squared", type: "function" },
    { label: "squared_deviation", type: "function" },
    { label: "strict_partial_order", type: "function" },
    { label: "strict_total_order", type: "function" },
    { label: "string", type: "function" },
    { label: "string_join", type: "function" },
    { label: "string_length", type: "function" },
    { label: "string_replace", type: "function" },
    { label: "string_replace_multiple", type: "function" },
    { label: "string_split", type: "function" },
    { label: "string_trim", type: "function" },
    { label: "subset", type: "function" },
    { label: "substring", type: "function" },
    { label: "substring_bytes", type: "function" },
    { label: "subtract", type: "function" },
    { label: "suffix_join", type: "function" },
    { label: "sum", type: "function" },
    { label: "sum_int", type: "function" },
    { label: "superset", type: "function" },
    { label: "svg", type: "function" },
    { label: "symmetric", type: "function" },
    { label: "table", type: "function" },
    { label: "tan", type: "function" },
    { label: "tanh", type: "function" },
    { label: "ternary_relation", type: "function" },
    { label: "top", type: "function" },
    { label: "total", type: "function" },
    { label: "total_order", type: "function" },
    { label: "transitive", type: "function" },
    { label: "transpose", type: "function" },
    { label: "trunc", type: "function" },
    { label: "trunc_divide", type: "function" },
    { label: "trunc_to_int", type: "function" },
    { label: "uint", type: "function" },
    { label: "unary_operator", type: "function" },
    { label: "unary_relation", type: "function" },
    { label: "unary_relation_substitution_laws", type: "function" },
    { label: "union", type: "function" },
    { label: "unit_normalization", type: "function" },
    { label: "unix_epoch", type: "function" },
    { label: "unpack", type: "function" },
    { label: "uppercase", type: "function" },
    { label: "uuid_string", type: "function" },
    { label: "vega", type: "function" },
    { label: "vegalite", type: "function" },
    { label: "vegalite_utils", type: "function" },
    { label: "view_json", type: "function" },
    { label: "weighted_mean", type: "function" },
    { label: "xgboost_classifier", type: "function" },
    { label: "xgboost_classifier_predict", type: "function" },
    { label: "xgboost_classifier_probabilities", type: "function" },
    { label: "xgboost_feature_importances", type: "function" },
    { label: "xgboost_regressor", type: "function" },
    { label: "xgboost_regressor_predict", type: "function" },
    { label: "zero_annihilation", type: "function" },
    { label: "zero_of_operator", type: "function" },
    { label: "zip", type: "function" },
    { label: "registered", type: "variable", info: "Registered Sign / Registered Trade Mark Sign", apply: "®" },
    { label: "degree", type: "variable", info: "Degree Sign", apply: "°" },
    { label: "pm", type: "variable", info: "Plus-Minus Sign / Plus-Or-Minus Sign", apply: "±" },
    { label: "\\^2", info: "Superscript Two / Superscript Digit Two", apply: "²" },
    { label: "\\^3", info: "Superscript Three / Superscript Digit Three", apply: "³" },
    { label: "\\^1", info: "Superscript One / Superscript Digit One", apply: "¹" },
    { label: "\\1/4", type: "variable", info: "Vulgar Fraction One Quarter / Fraction One Quarter", apply: "¼" },
    { label: "\\1/2", type: "variable", info: "Vulgar Fraction One Half / Fraction One Half", apply: "½" },
    { label: "\\3/4", type: "variable", info: "Vulgar Fraction Three Quarters / Fraction Three Quarters", apply: "¾" },
    { label: "\\questiondown", type: "variable", info: "Inverted Question Mark", apply: "¿" },
    { label: "\\times", type: "variable", info: "Multiplication Sign", apply: "×" },
    { label: "\\div", type: "variable", info: "Division Sign", apply: "÷" },
    { label: "\\Alpha", type: "variable", info: "Greek Capital Letter Alpha", apply: "Α" },
    { label: "\\Beta", type: "variable", info: "Greek Capital Letter Beta", apply: "Β" },
    { label: "\\Gamma", type: "variable", info: "Greek Capital Letter Gamma", apply: "Γ" },
    { label: "\\Delta", type: "variable", info: "Greek Capital Letter Delta", apply: "Δ" },
    { label: "\\Epsilon", type: "variable", info: "Greek Capital Letter Epsilon", apply: "Ε" },
    { label: "\\Zeta", type: "variable", info: "Greek Capital Letter Zeta", apply: "Ζ" },
    { label: "\\Eta", type: "variable", info: "Greek Capital Letter Eta", apply: "Η" },
    { label: "\\Theta", type: "variable", info: "Greek Capital Letter Theta", apply: "Θ" },
    { label: "\\Iota", type: "variable", info: "Greek Capital Letter Iota", apply: "Ι" },
    { label: "\\Kappa", type: "variable", info: "Greek Capital Letter Kappa", apply: "Κ" },
    { label: "\\Lambda", type: "variable", info: "Greek Capital Letter Lamda / Greek Capital Letter Lambda", apply: "Λ" },
    { label: "\\upMu", type: "variable", info: "Greek Capital Letter Mu", apply: "Μ" },
    { label: "\\upNu", type: "variable", info: "Greek Capital Letter Nu", apply: "Ν" },
    { label: "\\Xi", type: "variable", info: "Greek Capital Letter Xi", apply: "Ξ" },
    { label: "\\upOmicron", type: "variable", info: "Greek Capital Letter Omicron", apply: "Ο" },
    { label: "\\Pi", type: "variable", info: "Greek Capital Letter Pi", apply: "Π" },
    { label: "\\Rho", type: "variable", info: "Greek Capital Letter Rho", apply: "Ρ" },
    { label: "\\Sigma", type: "variable", info: "Greek Capital Letter Sigma", apply: "Σ" },
    { label: "\\Tau", type: "variable", info: "Greek Capital Letter Tau", apply: "Τ" },
    { label: "\\Upsilon", type: "variable", info: "Greek Capital Letter Upsilon", apply: "Υ" },
    { label: "\\Phi", type: "variable", info: "Greek Capital Letter Phi", apply: "Φ" },
    { label: "\\Chi", type: "variable", info: "Greek Capital Letter Chi", apply: "Χ" },
    { label: "\\Psi", type: "variable", info: "Greek Capital Letter Psi", apply: "Ψ" },
    { label: "\\Omega", type: "variable", info: "Greek Capital Letter Omega", apply: "Ω" },
    { label: "\\alpha", type: "variable", info: "Greek Small Letter Alpha", apply: "α" },
    { label: "\\beta", type: "variable", info: "Greek Small Letter Beta", apply: "β" },
    { label: "\\gamma", type: "variable", info: "Greek Small Letter Gamma", apply: "γ" },
    { label: "\\delta", type: "variable", info: "Greek Small Letter Delta", apply: "δ" },
    { label: "\\varepsilon", type: "variable", info: "Greek Small Letter Epsilon", apply: "ε" },
    { label: "\\zeta", type: "variable", info: "Greek Small Letter Zeta", apply: "ζ" },
    { label: "\\eta", type: "variable", info: "Greek Small Letter Eta", apply: "η" },
    { label: "\\theta", type: "variable", info: "Greek Small Letter Theta", apply: "θ" },
    { label: "\\iota", type: "variable", info: "Greek Small Letter Iota", apply: "ι" },
    { label: "\\kappa", type: "variable", info: "Greek Small Letter Kappa", apply: "κ" },
    { label: "\\lambda", type: "variable", info: "Greek Small Letter Lamda / Greek Small Letter Lambda", apply: "λ" },
    { label: "\\mu", type: "variable", info: "Greek Small Letter Mu", apply: "μ" },
    { label: "\\nu", type: "variable", info: "Greek Small Letter Nu", apply: "ν" },
    { label: "\\xi", type: "variable", info: "Greek Small Letter Xi", apply: "ξ" },
    { label: "\\upomicron", type: "variable", info: "Greek Small Letter Omicron", apply: "ο" },
    { label: "\\pi", type: "variable", info: "Greek Small Letter Pi", apply: "π" },
    { label: "\\rho", type: "variable", info: "Greek Small Letter Rho", apply: "ρ" },
    { label: "\\varsigma", type: "variable", info: "Greek Small Letter Final Sigma", apply: "ς" },
    { label: "\\sigma", type: "variable", info: "Greek Small Letter Sigma", apply: "σ" },
    { label: "\\tau", type: "variable", info: "Greek Small Letter Tau", apply: "τ" },
    { label: "\\upsilon", type: "variable", info: "Greek Small Letter Upsilon", apply: "υ" },
    { label: "\\varphi", type: "variable", info: "Greek Small Letter Phi", apply: "φ" },
    { label: "\\chi", type: "variable", info: "Greek Small Letter Chi", apply: "χ" },
    { label: "\\psi", type: "variable", info: "Greek Small Letter Psi", apply: "ψ" },
    { label: "\\omega", type: "variable", info: "Greek Small Letter Omega", apply: "ω" },
    { label: "\\upvarbeta", type: "variable", info: "Greek Beta Symbol / Greek Small Letter Curled Beta", apply: "ϐ" },
    { label: "\\vartheta", type: "variable", info: "Greek Theta Symbol / Greek Small Letter Script Theta", apply: "ϑ" },
    { label: "\\phi", type: "variable", info: "Greek Phi Symbol / Greek Small Letter Script Phi", apply: "ϕ" },
    { label: "\\varpi", type: "variable", info: "Greek Pi Symbol / Greek Small Letter Omega Pi", apply: "ϖ" },
    { label: "\\upoldKoppa", type: "variable", info: "Greek Letter Archaic Koppa", apply: "Ϙ" },
    { label: "\\upoldkoppa", type: "variable", info: "Greek Small Letter Archaic Koppa", apply: "ϙ" },
    { label: "\\Stigma", type: "variable", info: "Greek Letter Stigma / Greek Capital Letter Stigma", apply: "Ϛ" },
    { label: "\\upstigma", type: "variable", info: "Greek Small Letter Stigma", apply: "ϛ" },
    { label: "\\Digamma", type: "variable", info: "Greek Letter Digamma / Greek Capital Letter Digamma", apply: "Ϝ" },
    { label: "\\digamma", type: "variable", info: "Greek Small Letter Digamma", apply: "ϝ" },
    { label: "\\Koppa", type: "variable", info: "Greek Letter Koppa / Greek Capital Letter Koppa", apply: "Ϟ" },
    { label: "\\upkoppa", type: "variable", info: "Greek Small Letter Koppa", apply: "ϟ" },
    { label: "\\Sampi", type: "variable", info: "Greek Letter Sampi / Greek Capital Letter Sampi", apply: "Ϡ" },
    { label: "\\upsampi", type: "variable", info: "Greek Small Letter Sampi", apply: "ϡ" },
    { label: "\\varkappa", type: "variable", info: "Greek Kappa Symbol / Greek Small Letter Script Kappa", apply: "ϰ" },
    { label: "\\varrho", type: "variable", info: "Greek Rho Symbol / Greek Small Letter Tailed Rho", apply: "ϱ" },
    { label: "\\varTheta", type: "variable", info: "Greek Capital Theta Symbol", apply: "ϴ" },
    { label: "\\epsilon", type: "variable", info: "Greek Lunate Epsilon Symbol", apply: "ϵ" },
    { label: "\\backepsilon", type: "variable", info: "Greek Reversed Lunate Epsilon Symbol", apply: "϶" },
    { label: "\\^0", info: "Superscript Zero / Superscript Digit Zero", apply: "⁰" },
    { label: "\\^i", info: "Superscript Latin Small Letter I", apply: "ⁱ" },
    { label: "\\^4", info: "Superscript Four / Superscript Digit Four", apply: "⁴" },
    { label: "\\^5", info: "Superscript Five / Superscript Digit Five", apply: "⁵" },
    { label: "\\^6", info: "Superscript Six / Superscript Digit Six", apply: "⁶" },
    { label: "\\^7", info: "Superscript Seven / Superscript Digit Seven", apply: "⁷" },
    { label: "\\^8", info: "Superscript Eight / Superscript Digit Eight", apply: "⁸" },
    { label: "\\^9", info: "Superscript Nine / Superscript Digit Nine", apply: "⁹" },
    { label: "\\^+", info: "Superscript Plus Sign", apply: "⁺" },
    { label: "\\^-", info: "Superscript Minus / Superscript Hyphen-Minus", apply: "⁻" },
    { label: "\\^=", info: "Superscript Equals Sign", apply: "⁼" },
    { label: "\\^(", info: "Superscript Left Parenthesis / Superscript Opening Parenthesis", apply: "⁽" },
    { label: "\\^)", info: "Superscript Right Parenthesis / Superscript Closing Parenthesis", apply: "⁾" },
    { label: "\\^n", info: "Superscript Latin Small Letter N", apply: "ⁿ" },
    { label: "\\_0", type: "variable", info: "Subscript Zero / Subscript Digit Zero", apply: "₀" },
    { label: "\\_1", type: "variable", info: "Subscript One / Subscript Digit One", apply: "₁" },
    { label: "\\_2", type: "variable", info: "Subscript Two / Subscript Digit Two", apply: "₂" },
    { label: "\\_3", type: "variable", info: "Subscript Three / Subscript Digit Three", apply: "₃" },
    { label: "\\_4", type: "variable", info: "Subscript Four / Subscript Digit Four", apply: "₄" },
    { label: "\\_5", type: "variable", info: "Subscript Five / Subscript Digit Five", apply: "₅" },
    { label: "\\_6", type: "variable", info: "Subscript Six / Subscript Digit Six", apply: "₆" },
    { label: "\\_7", type: "variable", info: "Subscript Seven / Subscript Digit Seven", apply: "₇" },
    { label: "\\_8", type: "variable", info: "Subscript Eight / Subscript Digit Eight", apply: "₈" },
    { label: "\\_9", type: "variable", info: "Subscript Nine / Subscript Digit Nine", apply: "₉" },
    { label: "\\forall", type: "variable", info: "For All", apply: "∀" },
    { label: "\\complement", type: "variable", info: "Complement", apply: "∁" },
    { label: "\\partial", type: "variable", info: "Partial Differential", apply: "∂" },
    { label: "\\exists", type: "variable", info: "There Exists", apply: "∃" },
    { label: "\\nexists", type: "variable", info: "There Does Not Exist", apply: "∄" },
    { label: "\\emptyset", type: "variable", info: "Empty Set", apply: "∅" },
    { label: "\\increment", type: "variable", info: "Increment", apply: "∆" },
    { label: "\\nabla", type: "variable", info: "Nabla", apply: "∇" },
    { label: "\\in", type: "variable", info: "Element Of", apply: "∈" },
    { label: "\\notin", type: "variable", info: "Not An Element Of", apply: "∉" },
    { label: "\\sqrt", type: "variable", info: "Square Root", apply: "√" },
    { label: "\\cbrt", type: "variable", info: "Cube Root", apply: "∛" },
    { label: "\\fourthroot", type: "variable", info: "Fourth Root", apply: "∜" },
    { label: "\\propto", type: "variable", info: "Proportional To", apply: "∝" },
    { label: "\\infty", type: "variable", info: "Infinity", apply: "∞" },
    { label: "\\cap", type: "variable", info: "Intersection", apply: "∩" },
    { label: "\\cup", type: "variable", info: "Union", apply: "∪" },
    { label: "\\therefore", type: "variable", info: "Therefore", apply: "∴" },
    { label: "\\because", type: "variable", info: "Because", apply: "∵" },
    { label: "\\leq", type: "variable", info: "Less-Than Or Equal To / Less Than Or Equal To", apply: "≤" },
    { label: "\\geq", type: "variable", info: "Greater-Than Or Equal To / Greater Than Or Equal To", apply: "≥" },
    { label: "\\subset", type: "variable", info: "Subset Of", apply: "⊂" },
    { label: "\\supset", type: "variable", info: "Superset Of", apply: "⊃" },
    { label: "\\nsubset", type: "variable", info: "Not A Subset Of", apply: "⊄" },
    { label: "\\nsupset", type: "variable", info: "Not A Superset Of", apply: "⊅" },
    { label: "\\subseteq", type: "variable", info: "Subset Of Or Equal To", apply: "⊆" },
    { label: "\\supseteq", type: "variable", info: "Superset Of Or Equal To", apply: "⊇" },
    { label: "\\nsubseteq", type: "variable", info: "Neither A Subset Of Nor Equal To", apply: "⊈" },
    { label: "\\nsupseteq", type: "variable", info: "Neither A Superset Of Nor Equal To", apply: "⊉" },
    { label: "\\bowtie", type: "variable", info: "Bowtie", apply: "⋈" },
    { label: "\\ltimes", type: "variable", info: "Left Normal Factor Semidirect Product", apply: "⋉" },
    { label: "\\rtimes", type: "variable", info: "Right Normal Factor Semidirect Product", apply: "⋊" },
    { label: "\\vdots", type: "variable", info: "Vertical Ellipsis", apply: "⋮" },
    { label: "\\cdots", type: "variable", info: "Midline Horizontal Ellipsis", apply: "⋯" },
    { label: "\\adots", type: "variable", info: "Up Right Diagonal Ellipsis", apply: "⋰" },
    { label: "\\ddots", type: "variable", info: "Down Right Diagonal Ellipsis", apply: "⋱" }
];

const relLanguage = language.LRLanguage.define({
    parser: parser.configure({
        props: [
            // indentNodeProp.add({
            //   Application: delimitedIndent({closing: ")", align: false})
            // }),
            // foldNodeProp.add({
            //   Application: foldInside
            // }),
            highlight.styleTags({
                Keyword: highlight.tags.keyword,
                AttributeKeyword: highlight.tags.keyword,
                Type: highlight.tags.typeName,
                Emphasis: highlight.tags.emphasis,
                IntLiteral: highlight.tags.number,
                FloatLiteral: highlight.tags.number,
                BooleanLiteral: highlight.tags.bool,
                DocstringLiteral: highlight.tags.string,
                MultilineDocstringLiteral: highlight.tags.string,
                "StaticStringLiteral/...": highlight.tags.string,
                "StaticStringLiteral/StaticSequence/EscapeChar": highlight.tags.escape,
                StaticMultilineStringLiteral: highlight.tags.string,
                LineComment: highlight.tags.lineComment,
                BlockComment: highlight.tags.blockComment,
                BasicId: highlight.tags.definition(highlight.tags.variableName),
                "LhsId/BasicId": highlight.tags.definition(highlight.tags.variableName),
                "LogicalParam/LogicalExpression/BasicExpression/BasicId": highlight.tags.definition(highlight.tags.attributeName),
                "BasicExpression/BasicId": highlight.tags.definition(highlight.tags.labelName),
                "FormalId/BasicId": highlight.tags.definition(highlight.tags.attributeName),
                "QualifiedNameElem/BasicId RelnameLiteral": highlight.tags.literal,
                ValueTypeLiteral: highlight.tags.literal,
                DefineStatement: highlight.tags.atom,
                DateLiteral: highlight.tags.string,
                DateTimeLiteral: highlight.tags.string,
                Operator: highlight.tags.operatorKeyword,
                OperatorKeyword: highlight.tags.operatorKeyword,
                '( )': highlight.tags.paren,
                '[ ]': highlight.tags.squareBracket,
                '{ }': highlight.tags.brace,
                ':': highlight.tags.derefOperator,
                ', ;': highlight.tags.separator
            }),
        ]
    }),
    languageData: {
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`", '"""'] },
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
        // indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
        wordChars: "$"
    }
});
// Autocomplete
const relCompletion = relLanguage.data.of({
    autocomplete: autocomplete.completeFromList(autocompleteList)
});
function rel() {
    return new language.LanguageSupport(relLanguage, [relCompletion]);
}

exports.rel = rel;
exports.relCompletion = relCompletion;
exports.relLanguage = relLanguage;
