'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var lr = require('@lezer/lr');
var language = require('@codemirror/language');
var highlight = require('@lezer/highlight');
var autocomplete = require('@codemirror/autocomplete');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_BasicId = {__proto__:null,doc:14, function:23, inline:25, ondemand:27, outline:29, static:31, raw:58, def:62, Any:66, String:68, Int:70, Number:72, Char:74, Missing:76, Float:78, Floating:80, UnsignedInt:82, UInt:84, SignedInt:86, Rational:88, FixedDecimal:90, RelName:92, Entity:94, AutoNumber:96, Hash:98, FilePos:100, Date:102, DateTime:104, Year:106, Month:108, Week:110, Day:112, Hour:114, Minute:116, Second:118, Millisecond:120, Microsecond:122, Nanosecond:124, Boolean:126, type:128, entity:130, value:132, output:143, insert:145, delete:147, abort:149, export:151, where:202, for:204, from:206, if:286, then:288, else:290, end:292, forall:294, exists:296, and:300, or:304, implies:308, not:314, iff:318, xor:324, in:344, ic:356, module:360, with:364, use:366, as:370};
const spec_Operator = {__proto__:null,".":189, "^":213, "-":215, "/":217, "%":219, "*":221, "÷":223, "×":225, "⊗":227, "⊙":229, "+":231, "∩":233, "⊕":235, "∪":237, "⊓":239, "⊔":241, "=":243, "!=":245, "≈":247, "∼":249, "→":251, "←":253, "≼":255, "≽":257, "≺":259, "≻":261, "≠":263, "<":265, ">":267, "<=":269, "≤":271, ">=":273, "≥":275, "⊆":277, "⊇":279, "⊂":281, "⊃":283, "∧":303, "∨":307, "⇒":311, "⇐":313, "¬":317, "≡":321, "⇔":323, "≢":327, "⇎":329, "⊻":331, "<:":333, ":>":335, "<++":337, "++>":339, "∈":347};
const parser = lr.LRParser.deserialize({
  version: 14,
  states: "!AhO`QPOOOzQPO'#CfOOQO'#G`'#G`O!]QPO'#GROOQO'#Gq'#GqOOQO'#G_'#G_Q`QPOOO!qQPO'#CaO!yQPO'#C`O!]QPO'#GRO%lQPO'#GRO%qQPO'#GSO(lQPO'#GTO!yQPO'#GVO(vQQO'#GXO-ZQPO,59QOOQO'#Gs'#GsOOQO-E:^-E:^O!yQPO,58zO-rQPO,5<mO-wQPO,5<nO-|QPO,5<oO!yQPO,5<qOOQO-E:]-E:]OOQO,58{,58{O/RQPO'#HSO/]QQO'#DqO/bQPO'#DtO0cQPO'#DsOOQO'#C|'#C|OOQO'#HT'#HTOOQO'#HS'#HSOOQO'#HU'#HUO0hQPO,58zO0vQPO,5<mO!yQPO,5<mO!yQPO,5<nO4jQQO'#GQO8PQQO'#D{OOQO'#Gg'#GgO8WQPO,5<oO(vQQO,5<oO(vQQO,5<oO8^QPO,5<oO8WQPO,5<oO8fQPO,5<qO8pQSO'#CpOOQO'#Cp'#CpOOQO'#Cm'#CmO9RQQO'#HSO=tQQO'#F`OOQO'#Dt'#DtOGnQQO'#DtOGuQQO'#E]OLYQPO'#EdO! QQQO'#EZO!#rQQO'#F`O!)cQQO'#E[OOQO'#E['#E[O!$PQQO'#E[O!)pQPO'#E[O(vQQO'#EZO!+]QQO'#EYO!,wQQO'#EXO!.`QQO'#EWO!/fQPO'#EVO!0sQPO'#EUO!1}QPO'#F|OOQO'#EU'#EUO!2SQWO'#ERO!2_Q`O'#F}OOQO'#EO'#EOOOQO'#D}'#D}O!2jQPO'#D|O!3zQWO'#CxO!4YQQO'#E[O(vQQO'#E[O!8^QQO'#EZO!8nQPO,5<sO!8sQQO1G.lO!9eQPO1G.fO!yQPO1G2XO!yQPO1G2YO!9sQPO1G2ZO(vQQO1G2ZO(vQQO1G2ZO!9yQPO1G2ZO!9sQPO1G2ZO!:RQPO1G2]O!:]QPO,5:]OOQO'#Gf'#GfO!;]QPO,5:_O!9eQPO1G.fO!;gQQO'#GQO(vQQO1G.fO(vQQO1G.fO!9kQPO1G.fO!yQPO1G.fO!;nQPO1G2XO!;sQPO1G2YO!;xQPO1G2ZO!yQPO1G2]O!<SQPO1G2XO!=QQPO1G2YO!>OQPO,5:]O!>oQQO'#D}OOQO,5<l,5<lO!A^QPO,5<lOOQO,5:g,5:gO!AcQPO,5:gOOQO-E:e-E:eOOQO1G2Z1G2ZO!AhQPO1G2ZO!:RQPO1G2]O!AmQPO1G2]OOQO1G2]1G2]OOQO,59[,59[O!AtQSO,59[OOQO,59],59]OOQO,59_,59_O!A|QPO,5;OOOQO,5;z,5;zO!BUQPO,5;zO!BZQPO,5;zO!BfQQO,5:_O!GOQPO,5:wO!GTQQO,5;OO!GeQQO,5:yO!K_QQO,5;TO!4YQQO,5:vO!4YQQO,5:vO!4YQQO,5:vO!4YQQO,5:vO!4YQQO,5:vO!4YQQO,5:vO# XQPO,5;zO# ^QPO,5;zO#&{QQO,5:vO!4YQQO,5:iO#'VQQO,5:vO#'^QPO'#FgOOQO,5:u,5:uO!8^QQO,5:uO!8^QQO,5:uO!8^QQO,5:uO!8^QQO,5:uO!8^QQO,5:uO!8^QQO,5:tO!8^QQO,5:sO!8^QQO,5:rO!8^QQO,5:qO#'VQQO,5<hO(vQQO,5<hOOQO'#ES'#ESOGuQQO'#ESO#'cQWO,5:mO#'qQPO,5:mO#'yQ`O,5<iO#'qQPO,5<iO4qQQO'#GkO#(XQPO,5:hO#)iQpO'#CzO#)qQpO'#CzO#)|QpO'#CzO#*[QpO'#CzOOQO,59d,59dO=tQQO'#F`O#/dQQO,5:vO#/}QQO'#E[O#0UQPO,5:vO#2mQQO1G2_O#2tQPO'#GuOOQO'#Cl'#ClO#2|QPO7+$WO#3RQPO7+$QO(vQQO7+$QO(vQQO7+$QO#3XQPO7+$QO#3aQPO7+'sO#4_QPO7+'tO(vQQO7+'uO(vQQO7+'uO#5]QPO7+'uOOQO7+'u7+'uO#5eQPO7+'uO#5jQPO7+'uO#5xQPO7+'wO#6SQPO7+'wOOQO7+'w7+'wOOQO1G/w1G/wOOQO-E:d-E:dOOQO7+$Q7+$QO#6ZQPO7+$QO#3RQPO7+$QO!yQPO7+'sO!yQPO7+'tO#5jQPO7+'uO#5xQPO7+'wO#6`QPO7+'sO(vQQO7+'sO(vQQO7+'sO#6fQPO7+'sO#6nQPO7+'tO(vQQO7+'tO(vQQO7+'tO#6tQPO7+'tO#7_QQO,5:iOOQO1G2W1G2WOOQO1G0R1G0ROOQO1G.v1G.vOOQO1G0j1G0jOOQO1G1f1G1fO#9yQPO1G1fOOQO1G0c1G0cO#:|QQO1G0jO#;WQQO'#EbO#;rQPO'#EaO#<WQPO'#EcOOQO'#Ea'#EaO#<]QPO'#E`OOQO'#E`'#E`O#<qQQO'#EhO#<{QPO'#H_OOQO1G0e1G0eO#=QQPO1G0eOOQO1G0o1G0oO#=VQPO1G0oOOQO1G0b1G0bO#BRQQO1G0bO#BlQQO1G0bO#H]QQO1G0bO#HgQQO1G0bO#HqQQO1G0bO#KfQPO1G1fO!4YQQO1G0TO#KkQQO1G0TO#'VQQO'#EdO#N`QPO1G0bO!8^QQO,5<RP#'VQQO,5<ROOQO1G0a1G0aO$!tQQO1G0aO$%_QQO1G0aO$%oQQO1G0aO$'jQQO1G0aO$)kQQO1G0`O$+oQQO1G0_O$-WQQO1G0^O$.^QPO1G0]OOQO1G2S1G2SO$/kQPO,5:nOOQO'#Gi'#GiO$/pQWO1G0XOOQO1G0X1G0XO$/pQWO1G0XOOQO'#Gj'#GjO$0OQ`O1G2TOOQO1G2T1G2TO$0OQ`O1G2TOOQO,5=V,5=VOOQO-E:i-E:iOOQO'#Ga'#GaO$0^QpO,59fOOQO,59f,59fOOQO'#Gb'#GbO$0fQpO,59fOOQO'#Gc'#GcO$0qQpO,59fOOQO'#Gd'#GdO$1PQpO,59fOOQO,5:v,5:vO(vQQO1G0bO$1bQPO'#G[O$2YQPO'#HfOOQO7+'y7+'yO!8sQQO'#GeO$2}QPO,5=aOOQO<<Gr<<GrO(vQQO<<GlO(vQQO<<GlO$3VQPO<<GlOOQO<<Gl<<GlO$3_QPO<<GlO$3dQPO<<K_O(vQQO<<K_O(vQQO<<K_O$3jQPO<<K_O$3rQPO<<K`O(vQQO<<K`O(vQQO<<K`O$3xQPO<<K`OOQO<<Ka<<KaO$4QQPO<<KaO(vQQO<<KaO(vQQO<<KaO$4VQPO<<KaO$4_QPO<<KcOOQO<<Kc<<KcO$4fQPO<<GlO$4tQPO<<K_O$5rQPO<<K`O$6pQPO<<KaO$7OQPO<<KcOOQO<<K_<<K_O$7YQPO<<K_OOQO<<K`<<K`O$7_QPO<<K`OOQO7+'Q7+'QO$8eQQO,5:uO$8uQQO,5:|O#'VQQO,5:}O$9VQQO,5:}O$<|QQO,5=yOOQO7+&P7+&POOQO7+&Z7+&ZO$=aQQO7+%oO!BPQPO,5;OOGuQQO7+%|O$@UQQO1G1mP$AtQQO'#EdOOQO1G1m1G1mO$A{QQO'#D|OOQO1G0Y1G0YOOQO-E:g-E:gOOQO7+%s7+%sO$CbQWO7+%sOOQO-E:h-E:hOOQO7+'o7+'oO$CpQ`O7+'oOOQO-E:_-E:_OOQO1G/Q1G/QOOQO-E:`-E:`OOQO-E:a-E:aOOQO-E:b-E:bO$DOQPO7+%|O$FdQQO,5<vO#0ZQQO'#GlO$FkQPO,5>QOOQO,5=P,5=POOQO-E:c-E:cOOQOAN=WAN=WO$G`QPOAN=WO(vQQOAN=WO(vQQOAN=WO(vQQOAN@yO(vQQOAN@yO$GeQPOAN@yOOQOAN@yAN@yO$GmQPOAN@yO(vQQOAN@zO(vQQOAN@zO$GrQPOAN@zOOQOAN@zAN@zO$GzQPOAN@zOOQOAN@{AN@{O$HPQPOAN@{O(vQQOAN@{O(vQQOAN@{OOQOAN@}AN@}O$HUQPOAN=WO$H^QPOAN@yO$HlQPOAN@zO$HzQPOAN@{O$ISQPOAN@}O$IZQQO1G0hOOQO1G0i1G0iOOQO'#Eh'#EhO$JsQQO'#EhO$J}QPO1G3eO$KVQPO<<IhO$K[QQO,5:hOOQO<<I_<<I_OOQO<<KZ<<KZO(vQQO<<IhOOQO'#G^'#G^OOQO1G2b1G2bOOQO,5=W,5=WOOQO-E:j-E:jOOQOG22rG22rO$LqQPOG22rOOQOG26eG26eO$LvQPOG26eO(vQQOG26eO(vQQOG26eOOQOG26fG26fO$L{QPOG26fO(vQQOG26fO(vQQOG26fOOQOG26gG26gO$MQQPOG26gO(vQQOG22rO(vQQOG22rO$MVQPOG26eO$M_QPOG26fO(vQQOG26gO(vQQOG26gOOQOG26iG26iO$<|QQO'#GhO$MgQPO7+)POOQOAN?SAN?SO$MoQPOAN?SOOQOLD(^LD(^OOQOLD,PLD,PO$MtQPOLD,POOQOLD,QLD,QO$MyQPOLD,QOOQOLD,RLD,RO$NOQPOLD(^O(vQQOLD,PO(vQQOLD,PO(vQQOLD,QO(vQQOLD,QO$NTQPOLD,ROOQO,5=S,5=SOOQO-E:f-E:fOOQOG24nG24nOOQO!$( k!$( kOOQO!$( l!$( lOOQO!$'Kx!$'KxO$NYQPO!$( kO$N_QPO!$( lOOQO!$( m!$( mOOQO!)9EV!)9EVOOQO!)9EW!)9EWO0cQPO'#DsO$NdQQO'#E[O%$aQQO'#E[O%)iQQO'#E[O%1sQQO'#E[O%1zQQO'#E[O%3^QQO'#E[OGuQQO'#EZO$9VQQO'#EZO$9VQQO'#EZO%3tQQO'#EZO(vQQO'#EZO%3tQQO'#EZOGuQQO'#EZO%7kQQO'#EZO$8uQQO'#EZO%7{QQO'#EZO!GTQQO'#EZO$=PQQO'#EZO%8]QQO'#EZO%8mQQO'#EZO%7{QQO,5;OP$8uQQO,5;OP!8^QQO,5;OP%7kQQO,5;OO$=PQQO,5;OO%8mQQO,5;OP%8]QQO,5;OO%8}QQO,5:vO# iQQO,5:vO%<wQQO,5:vO%7kQQO,5:uO$8uQQO,5:uO%7{QQO,5:uO!GTQQO,5:uO$=PQQO,5:uO%8]QQO,5:uO%8mQQO,5:uO%7kQQO,5:uO$8uQQO,5:uO%7{QQO,5:uO!GTQQO,5:uO$=PQQO,5:uO%8]QQO,5:uO%8mQQO,5:uO%7kQQO,5:uO$8uQQO,5:uO%7{QQO,5:uO!GTQQO,5:uO$=PQQO,5:uO%8]QQO,5:uO%8mQQO,5:uO%7kQQO,5:uO$8uQQO,5:uO%7{QQO,5:uO!GTQQO,5:uO$=PQQO,5:uO%8]QQO,5:uO%8mQQO,5:uO%7kQQO,5:uO$8uQQO,5:uO%7{QQO,5:uO!GTQQO,5:uO$=PQQO,5:uO%8]QQO,5:uO%8mQQO,5:uO%7kQQO,5:tO$8uQQO,5:tO%7kQQO,5:sO$8uQQO,5:sO%7kQQO,5:rO%7kQQO,5:qOGuQQO,5<hO%BUQQO1G0jP%CUQQO1G0jP%DUQQO1G0jP%FSQQO1G0jO%FvQQO1G0jO%HUQQO1G0jP%IaQQO1G0jO%ItQQO'#EhO%7kQQO,5<RO$8uQQO,5<RO%7{QQO,5<RO!GTQQO,5<RO$=PQQO,5<RO%8]QQO,5<RO%8mQQO,5<RO%K{QQO1G0aO%LYQQO1G0aO%NZQQO1G0aO& iQQO1G0aO&!qQQO1G0aO&#RQQO1G0aO&#fQQO1G0aO&%TQQO1G0aO&%eQQO1G0aO&&hQQO1G0aO&'pQQO1G0aO&)OQQO1G0aO&*aQQO1G0aO&+lQQO1G0aO&+|QQO1G0aO&,^QQO1G0aO&/TQQO1G0aO&/eQQO1G0aO&/uQQO1G0aO&0VQQO1G0aO&0gQQO1G0aO&0wQQO1G0aO&1kQQO1G0aO&2nQQO1G0aO&3OQQO1G0aO&3YQQO1G0aO&3jQQO1G0aO&3}QQO1G0aO&4[QQO1G0`O&5|QQO1G0`O&6pQQO1G0_O&6}QQO1G0_O&7oQQO1G0^O&7|QPO1G0]O&8bQQO,5=yO&8uQQO1G1mO&9iQQO1G1mO&;XQQO1G1mO&=XQQO1G1mO&=cQQO1G1mO&=sQQO1G1mO&>WQQO1G1mP&@OQQO'#EdP&@YQQO'#EdO&AhQQO'#EdO&ClQQO'#EdO&DwQQO'#EdP&EUQQO'#EdO&EfQQO'#EdO&EpQQO'#EhO&8bQQO'#GhO&EzQPO7+)PO&@aQPO'#EdO&FSQPO'#EdO&FbQPO'#EdO&FpQQO'#EYO&GdQQO'#EYO&HWQQO'#EXO&HeQQO'#EXO&IVQQO'#EWO&IdQPO'#EVO&IxQPO'#EUO&J^QPO'#F|O&JcQPO'#FgO&JhQPO'#FgO&JmQPO'#FgO&JrQPO'#FgO&JwQPO'#FgO&J|QPO'#FgO&KRQPO'#FgO#'VQQO,5<hO#'VQQO,5<hO&KWQPO'#H_P#'VQQO,5<RP#'VQQO,5<RO#'VQQO,5<RO#'VQQO,5<RO#'VQQO,5<RP#'VQQO,5<RO#'VQQO,5<RO&LaQQO,5:uO&LtQQO,5:uO&M}QQO,5:uO&NbQPO1G3eO&NjQPO'#EUO(vQQO,5<hO' OQPO'#EUO' aQPO'#F|OGuQQO,5<hO' fQPO'#F|",
  stateData: "'!O~O%cOS%dOSPOSQOS~OVVOoWO!cZO!dYO$x[O$z]O$|^O%fPO~OZ`O[`O]`O^`O_`O~OobO!cdO!dcO$xeO$zfO%fPO~OWhOXhO~OUiOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!ipO!jpO!kpO!lpO!mpO%hjO~O!bsO~O!btO~OUiOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!ipO!jpO!kpO!lpO!mpO%huO%zvO~O&SzO&XyO~P%vOU!ROb!QOc!QOf!QOh!QOi!QOj!QOk!QOm!lOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f!jO!ipO!jpO!kpO!lpO!mpO!s!iO!t!iO#_!mO$T!nO$X!^O$Y!_O$c!oO$d!oO%h!SO%j!OO%m![O%n!PO%o!gO%q!hO&O!VO&S!YO&U!^O&V!_O~O%h!qOoYa!cYa!dYa$xYa$zYa%fYa~O!b!sO~O!b!tO~O&S!wO&X!vO~P%vO!n!hX%h%vX%z%vXV%vXo%vX!c%vX!d%vX$W%vX$x%vX$z%vX$|%vX%f%vX%a%vX~O&S%vX&X%vX~P.WO!f!{O~O!n!hX%hpX%zpX&SpX&XpXVpXopX!cpX!dpX$WpX$xpX$zpX$|pX%fpX%apX~O!n!|O~O%h#PO%zvO&S#RO&X#QO~Oo#TO!c#VO!d#UO$x#WO$z#XO%fPO~OUoOb!QOc!QOf!QOh!QOi!QOj!QOk!QOm!lOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!s!iO!t!iO%j!OO%n!PO%o!gO%q!hO%u#^O~O!f#[O~P1[OUoOb!QOc!QOf!QOh!QOi!QOj!QOk!QOm!lOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f!jO!s!iO!t!iO%j!OO%n!PO%o!gO%q!hO~O%y#`O~P4qO%h#PO%zvO&S!wO&X!vO~O$W#gO%zvO~P`Of#jOh#kO%k#iO%l#hO%m#hO~O#Q%vX#X%vX#Y%vX#Z%vX#^%vX#_%vX#`%vX#a%vX#b%vX#c%vX#d%vX#e%vX#f%vX#g%vX#h%vX#i%vX#j%vX#k%vX#l%vX#m%vX#n%vX#o%vX#p%vX#q%vX#r%vX#s%vX#t%vX#u%vX#v%vX#w%vX#x%vX#y%vX#z%vX#{%vX#|%vX#}%vX$O%vX$P%vX$Q%vX$R%vX$[%vX$]%vX$^%vX$_%vX$`%vX$a%vX$b%vX$e%vX$f%vX$g%vX$h%vX$i%vX$j%vX$k%vX$l%vX$m%vX$n%vX$o%vX$r%vX$s%vX$}%vX%j%vX%t%vX%}%vX&P%vX&Q%vX&T%vX%u%vX$U%vX%y%vX$V%vX~P.WOU!ROb!QOc!QOf!QOh!QOi!QOj!QOk!QOm!lOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f#[O!ipO!jpO!kpO!lpO!mpO!s!iO!t!iO#_!mO$T!nO$X!^O$Y*aO$c*hO$d*hO%h!SO%j!OO%m![O%n!PO%o!gO%q!hO%t#nO%u#mO&O!VO&P#nO&S!YO&U!^O&V*aO~O#Q#OX#Y#OX#Z#OX#^#OX#_#OX#`#OX#a#OX#b#OX#c#OX#d#OX#e#OX#f#OX#g#OX#h#OX#i#OX#j#OX#k#OX#l#OX#m#OX#n#OX#o#OX#p#OX#q#OX#r#OX#s#OX#t#OX#u#OX#v#OX#w#OX#x#OX#y#OX#z#OX#{#OX#|#OX#}#OX$O#OX$P#OX$Q#OX$R#OX$[#OX$]#OX$^#OX$_#OX$`#OX$a#OX$b#OX$e#OX$f#OX$g#OX$h#OX$i#OX$j#OX$k#OX$l#OX$m#OX$n#OX$o#OX$}#OX%h#OX%t#OX%z#OX&P#OX&Q#OXV#OXo#OX!c#OX!d#OX$x#OX$z#OX$|#OX%a#OX%f#OX&T#OX%u#OX$U#OX%j#OX%y#OX#X#OX$W#OX$V#OX~O!n!hX~PBbOU!ROb!QOc!QOf!QOh!QOi!QOj!QOk!QOm!lOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f!jO!ipO!jpO!kpO!lpO!mpO!s!iO!t!iO#_!mO$T!nO$X!^O$Y*aO$c*hO$d*hO%h!SO%j!OO%m![O%n!PO%o!gO%q!hO&O!VO&S!YO&U!^O&V*aO~O#X#rO%j#WX%u#WX~O#Q#uO#^#vO#_#wO#`#vO#a#vO#b#vO#c#vO#d#vO#e#vO#f#vO#g#wO#h#wO#i#wO#j#xO#k#wO#l#xO#m#yO#n#yO#o#yO#p#yO#q#zO#r#yO#s#yO#t#yO#u#yO#v#yO#w#yO#x#yO#y#yO#z#yO#{#yO#|#yO#}#yO$O#yO$P#yO$Q#yO$R#yO%h#tO%z#sO~O#Y!}X#Z!}X$[!}X$]!}X$^!}X$_!}X$`!}X$a!}X$b!}X$e!}X$f!}X$g!}X$h!}X$i!}X$j!}X$k!}X$l!}X$m!}X$n!}X$o!}X$}!}X%t!}X&P!}X&Q!}XV!}Xo!}X!c!}X!d!}X$x!}X$z!}X$|!}X%a!}X%f!}X&T!}X%u!}X$U!}X%j!}X%y!}X$W!}X$V!}X~PLeO%t#{O&P#{O&T#mO~P(vO#Q#OX#X!qX#Y#OX#Z#OX#^#OX#_#OX#`#OX#a#OX#b#OX#c#OX#d#OX#e#OX#f#OX#g#OX#h#OX#i#OX#j#OX#k#OX#l#OX#m#OX#n#OX#o#OX#p#OX#q#OX#r#OX#s#OX#t#OX#u#OX#v#OX#w#OX#x#OX#y#OX#z#OX#{#OX#|#OX#}#OX$O#OX$P#OX$Q#OX$R#OX$[#OX$]#OX$^#OX$_#OX$`#OX$a#OX$b#OX$e#OX$f#OX$g#OX$h#OX$i#OX$j#OX$k#OX$l#OX$m#OX$n#OX$o#OX$}#OX%h#OX%j!qX%t!qX%t#OX%z#OX&P#OX&Q#OXV#OXo#OX!c#OX!d#OX$x#OX$z#OX$|#OX%a#OX%f#OX&T#OX%u!qX%u#OX$U#OX%y#OX$W#OX$V#OX~O$r$OO$s$OO%}#}O~P!$PO%h$PO~O$[$SO$]$SO$^$TO$_$TO$`$UO$a$UO$b$UO$e$VO$f$VO$g$VO$h$WO$i$WO$j$WO$k$WO#Y!|X#Z!|X$l!|X$m!|X$n!|X$o!|X&P!|X&Q!|X~O$}!|X%t!|XV!|Xo!|X!c!|X!d!|X$x!|X$z!|X$|!|X%a!|X%f!|X&T!|X$U!|X$W!|X$V!|X~P!)uO#Y!{X#Z!{X$n!{X$o!{X%t!{X&P!{X&Q!{X~O$l$XO$m$XO$}!{XV!{Xo!{X!c!{X!d!{X$x!{X$z!{X$|!{X%a!{X%f!{X&T!{X$U!{X$W!{X$V!{X~P!,`O#Y!zX#Z!zX%t!zX&P!zX&Q!zX~O$n$YO$o$YO$}!zXV!zXo!zX!c!zX!d!zX$x!zX$z!zX$|!zX%a!zX%f!zX&T!zX$U!zX$W!zX$V!zX~P!-}O%t$ZO#Y!yX#Z!yX$}!yX&P!yX&Q!yXV!yXo!yX!c!yX!d!yX$x!yX$z!yX$|!yX%a!yX%f!yX&T!yX$U!yX$W!yX$V!yX~O#Y$]O#Z$]O&P$[O&Q$]O$}!xXV!xXo!xX!c!xX!d!xX$x!xX$z!xX$|!xX%a!xX%f!xX&T!xX$U!xX$W!xX$V!xX~O%j$^O~O!w$_O%{$bO%|$`O~O!w$_O%|$`O&W$dO~O%t$eO#X!pX%j!pX%u!pX%y!pX$}!pXV!pXo!pX!c!pX!d!pX$x!pX$z!pX$|!pX%a!pX%f!pX&T!pX&P!pX$U!pX$W!pX$V!pX~O%o$gO%q$hO%r$iO%s$jO~OU!ROb!QOc!QOf!QOh!QOi!QOj!QOk!QOm!lOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!ipO!jpO!kpO!lpO!mpO!s!iO!t!iO#_!mO$T!nO$X!^O%h$lO%j!OO%m![O%n!PO%o!gO%q!hO&O!VO&S!YO&U!^O~O$Y!_O$c!oO$d!oO&V!_O~P!4YO$}$pO~Ob!QOc!QOf!QOh!QOi!QOj!QOk!QOm!lO%j!OO%n!PO~O%h#PO%zvO&S$vO&X$uO~O%h#PO%zvO&S${O&X$zO~O$W%SO%zvO~P`O%u%TO~O!n!|O%h!ga%z!gaV!gao!ga!c!ga!d!ga$W!ga$x!ga$z!ga$|!ga%f!ga%a!ga~O&S!ga&X!ga~P!:bO!f!jO~P1[O!b%YO~O!b%ZO~O&S${O&X$zO~P%vO%h#PO%zvO&S%`O&X%_OV$uio$ui!c$ui!d$ui$x$ui$z$ui$|$ui%a$ui%f$ui$W$ui~O%h#PO%zvO&S%dO&X%cOV$vio$vi!c$vi!d$vi$x$vi$z$vi$|$vi%a$vi%f$vi$W$vi~O%u%TO%t!qX#X!qX%j!qX~O$r$OO$s$OO%t!qX#X!qX%j!qX~O%}%fO%u!qX%y!qX$}!qXV!qXo!qX!c!qX!d!qX$x!qX$z!qX$|!qX%a!qX%f!qX&T!qX&P!qX#Y!qX#Z!qX$[!qX$]!qX$^!qX$_!qX$`!qX$a!qX$b!qX$e!qX$f!qX$g!qX$h!qX$i!qX$j!qX$k!qX$l!qX$m!qX$n!qX$o!qX&Q!qX$U!qX$W!qX$V!qX~P!>^O%u%gO~O%y%hO~O&T$}O~O$W%SO~P`O%l%iO%m%iO~O%j+tO%u%jO~O%u%kO~O%t%lO%u%kO&P%lO~O#Q!ga#Y!ga#Z!ga#^!ga#_!ga#`!ga#a!ga#b!ga#c!ga#d!ga#e!ga#f!ga#g!ga#h!ga#i!ga#j!ga#k!ga#l!ga#m!ga#n!ga#o!ga#p!ga#q!ga#r!ga#s!ga#t!ga#u!ga#v!ga#w!ga#x!ga#y!ga#z!ga#{!ga#|!ga#}!ga$O!ga$P!ga$Q!ga$R!ga$[!ga$]!ga$^!ga$_!ga$`!ga$a!ga$b!ga$e!ga$f!ga$g!ga$h!ga$i!ga$j!ga$k!ga$l!ga$m!ga$n!ga$o!ga$}!ga%t!ga&P!ga&Q!ga&T!ga%u!ga$U!ga%j!ga%y!ga#X!ga$V!ga~P!:bO%u%mO~O$Y*dO$c*kO$d*kO&V*dO~P!4YOU!ROqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f%sO!ipO!jpO!kpO!lpO!mpO!s!iO!t!iO#_!mO$T!nO$X!^O$Y!_O$c!oO$d!oO%h!SO%m![O%o!gO%q!hO%y%wO&O!VO&S!YO&U!^O&V!_O~P!8sOU!ROqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f%sO!ipO!jpO!kpO!lpO!mpO!s!iO!t!iO#_!mO$T!nO$X!^O$Y*aO$c*hO$d*hO%h!SO%m![O%o!gO%q!hO%u%yO&O!VO&S!YO&U!^O&V*aO~P!8sO&T%kO~O%t&RO&P&RO&T%kO~O$r&SO$s&SO#Q#Oa#X!qa#Y#Oa#Z#Oa#^#Oa#_#Oa#`#Oa#a#Oa#b#Oa#c#Oa#d#Oa#e#Oa#f#Oa#g#Oa#h#Oa#i#Oa#j#Oa#k#Oa#l#Oa#m#Oa#n#Oa#o#Oa#p#Oa#q#Oa#r#Oa#s#Oa#t#Oa#u#Oa#v#Oa#w#Oa#x#Oa#y#Oa#z#Oa#{#Oa#|#Oa#}#Oa$O#Oa$P#Oa$Q#Oa$R#Oa$[#Oa$]#Oa$^#Oa$_#Oa$`#Oa$a#Oa$b#Oa$e#Oa$f#Oa$g#Oa$h#Oa$i#Oa$j#Oa$k#Oa$l#Oa$m#Oa$n#Oa$o#Oa$}#Oa%h#Oa%j!qa%t!qa%z#Oa&P#Oa&Q#OaV#Oao#Oa!c#Oa!d#Oa$x#Oa$z#Oa$|#Oa%a#Oa%f#Oa&T#Oa%u#Oa$U#Oa%y#Oa$W#Oa$V#Oa~O%t#Oa%u!qa~P# iO%h&UO~P4qO%j&WO~O!w$_O%o&gO%{&eO%|$`O~O!w$_O%|$`O~O!w$_O%q&kO%|$`O&W&iO~O%t$eO#X!pa%j!pa%u!pa%y!pa$}!paV!pao!pa!c!pa!d!pa$x!pa$z!pa$|!pa%a!pa%f!pa&T!pa&P!pa$U!pa$W!pa$V!pa~O%o&qO%p&oO~O%o&rO%p&rO%q&qO~O%o&tO%p&tO%q&tO%r&qO~O%o&vO%p&vO%q&vO%r&vO%s&qO~O#Y#Oa#Z#Oa#_#Oa#`#Oa#a#Oa#b#Oa#c#Oa#d#Oa#e#Oa#f#Oa#g#Oa#h#Oa#i#Oa#j#Oa#k#Oa#l#Oa#m#Oa#n#Oa#o#Oa#p#Oa#q#Oa#r#Oa#s#Oa#t#Oa#u#Oa#v#Oa#w#Oa#x#Oa#y#Oa#z#Oa#{#Oa#|#Oa#}#Oa$O#Oa$P#Oa$Q#Oa$R#Oa$[#Oa$]#Oa$^#Oa$_#Oa$`#Oa$a#Oa$b#Oa$e#Oa$f#Oa$g#Oa$h#Oa$i#Oa$j#Oa$k#Oa$l#Oa$m#Oa$n#Oa$o#Oa$}#Oa&P#Oa&Q#OaV#Oao#Oa!c#Oa!d#Oa$x#Oa$z#Oa$|#Oa%a#Oa%f#Oa&T#Oa%u#Oa$U#Oa%y#Oa$W#Oa$V#Oa~O#Q#uO#^#vO%h#tO%z#sO%t#Oa%j#Oa#X#Oa~P#*mO%}&xO~PBbO$U&yO~OUoOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f&zO~O%}&|O~P#0ZO%t&}O%u%iX~O%u'PO~O%h#PO%zvO&S'RO&X'QO~O%h#PO%zvO&S'XO&X'WOV$uqo$uq!c$uq!d$uq$x$uq$z$uq$|$uq%a$uq%f$uq$W$uq~O%h#PO%zvO&S']O&X'[OV$vqo$vq!c$vq!d$vq$x$vq$z$vq$|$vq%a$vq%f$vq$W$vq~O&S'bO&X'aO~O&T'_O~O%h#PO%zvO&S'bO&X'aO~O$W'eO%zvO~P`O$W'eO~P`O&T'TO~O%h#PO%zvO&S'XO&X'WO~O%h#PO%zvO&S']O&X'[O~O$r&SO$s&SO%t!qa#X!qa%j!qa~O%u!qa%y!qa$}!qaV!qao!qa!c!qa!d!qa$x!qa$z!qa$|!qa%a!qa%f!qa&T!qa&P!qa#Y!qa#Z!qa$[!qa$]!qa$^!qa$_!qa$`!qa$a!qa$b!qa$e!qa$f!qa$g!qa$h!qa$i!qa$j!qa$k!qa$l!qa$m!qa$n!qa$o!qa&Q!qa$U!qa$W!qa$V!qa~P#6|O%u'oO~O$[*|O$]*|O$^+TO$_+TO$`+[O$a+[O$b+[O$e+cO$f+cO$g+cO$h+jO$i+jO$j+jO$k+jO~O%j#Wi%u#Wi~P#:OO$n+qO$o+qO#Y#UX#Z#UX%y#UX&P#UX&Q#UX%u#UX~O#Y'rO#Z'rO&P'qO&Q'rO%y#TX%u#TX~O%j'sO~O#X!qX%j!qX%t!qX%t#[X%y#SX%u#SX~O%t#[X%y!|X~P!)uO%t'tO~O%y'uO~O%u'vO~O#Q#uO#^#vO%h#tO%z#sO#Y#Oi#Z#Oi#_#Oi#g#Oi#h#Oi#i#Oi#j#Oi#k#Oi#l#Oi#m#Oi#n#Oi#o#Oi#p#Oi#q#Oi#r#Oi#s#Oi#t#Oi#u#Oi#v#Oi#w#Oi#x#Oi#y#Oi#z#Oi#{#Oi#|#Oi#}#Oi$O#Oi$P#Oi$Q#Oi$R#Oi$[#Oi$]#Oi$^#Oi$_#Oi$`#Oi$a#Oi$b#Oi$e#Oi$f#Oi$g#Oi$h#Oi$i#Oi$j#Oi$k#Oi$l#Oi$m#Oi$n#Oi$o#Oi$}#Oi%t#Oi&P#Oi&Q#OiV#Oio#Oi!c#Oi!d#Oi$x#Oi$z#Oi$|#Oi%a#Oi%f#Oi&T#Oi%u#Oi$U#Oi%j#Oi%y#Oi#X#Oi$W#Oi$V#Oi~O#`#Oi#a#Oi#b#Oi#c#Oi#d#Oi#e#Oi#f#Oi~P#=[O#`#vO#a#vO#b#vO#c#vO#d#vO#e#vO#f#vO~P#=[O#Q#uO#^#vO#_#wO#`#vO#a#vO#b#vO#c#vO#d#vO#e#vO#f#vO#g#wO#h#wO#i#wO#k#wO%h#tO%z#sO#Y#Oi#Z#Oi#m#Oi#n#Oi#o#Oi#p#Oi#q#Oi#r#Oi#s#Oi#t#Oi#u#Oi#v#Oi#w#Oi#x#Oi#y#Oi#z#Oi#{#Oi#|#Oi#}#Oi$O#Oi$P#Oi$Q#Oi$R#Oi$[#Oi$]#Oi$^#Oi$_#Oi$`#Oi$a#Oi$b#Oi$e#Oi$f#Oi$g#Oi$h#Oi$i#Oi$j#Oi$k#Oi$l#Oi$m#Oi$n#Oi$o#Oi$}#Oi%t#Oi&P#Oi&Q#OiV#Oio#Oi!c#Oi!d#Oi$x#Oi$z#Oi$|#Oi%a#Oi%f#Oi&T#Oi%u#Oi$U#Oi%j#Oi%y#Oi#X#Oi$W#Oi$V#Oi~O#j#Oi#l#Oi~P#CVO#j#xO#l#xO~P#CVO#Y#Oi#Z#Oi$[#Oi$]#Oi$^#Oi$_#Oi$`#Oi$a#Oi$b#Oi$e#Oi$f#Oi$g#Oi$h#Oi$i#Oi$j#Oi$k#Oi$l#Oi$m#Oi$n#Oi$o#Oi$}#Oi%t#Oi&P#Oi&Q#OiV#Oio#Oi!c#Oi!d#Oi$x#Oi$z#Oi$|#Oi%a#Oi%f#Oi&T#Oi%u#Oi$U#Oi%j#Oi%y#Oi#X#Oi$W#Oi$V#Oi~PLeO&T'oO~O#X!qi%j!qi%t!qi%u!qi%y!qi$}!qiV!qio!qi!c!qi!d!qi$x!qi$z!qi$|!qi%a!qi%f!qi&T!qi&P!qi#Y!qi#Z!qi$[!qi$]!qi$^!qi$_!qi$`!qi$a!qi$b!qi$e!qi$f!qi$g!qi$h!qi$i!qi$j!qi$k!qi$l!qi$m!qi$n!qi$o!qi&Q!qi$U!qi$W!qi$V!qi~PLeO%j'yO~O#Y!}i#Z!}i$^!}i$_!}i$`!}i$a!}i$b!}i$e!}i$f!}i$g!}i$h!}i$i!}i$j!}i$k!}i$l!}i$m!}i$n!}i$o!}i$}!}i&P!}i&Q!}iV!}io!}i!c!}i!d!}i$x!}i$z!}i$|!}i%a!}i%f!}i&T!}i$U!}i%y!}i$W!}i$V!}i~O$[$SO$]$SO%t!}i~P#NeO$[$SO$]$SO$^$TO$_$TO$`$UO$a$UO#Y!}i#Z!}i$h!}i$i!}i$j!}i$k!}i$l!}i$m!}i$n!}i$o!}i$}!}i%t!}i&P!}i&Q!}iV!}io!}i!c!}i!d!}i$x!}i$z!}i$|!}i%a!}i%f!}i&T!}i$U!}i%y!}i$W!}i$V!}i~O$b!}i$e!}i$f!}i$g!}i~P$#RO$b$UO$e$VO$f$VO$g$VO~P$#RO#Y!}i#Z!}i$l!}i$m!}i$n!}i$o!}i$}!}i&P!}i&Q!}iV!}io!}i!c!}i!d!}i$x!}i$z!}i$|!}i%a!}i%f!}i&T!}i$U!}i%y!}i$W!}i$V!}i~O$[$SO$]$SO$^$TO$_$TO$`$UO$a$UO$b$UO$e$VO$f$VO$g$VO$h$WO$i$WO$j$WO$k$WO%t!}i~P$&PO$[$SO$]$SO$^$TO$_$TO$`$UO$a$UO$b$UO$e$VO$f$VO$g$VO$h$WO$i$WO$j$WO$k$WO~O#Y!|i#Z!|i$l!|i$m!|i$n!|i$o!|i$}!|i%t!|i&P!|i&Q!|iV!|io!|i!c!|i!d!|i$x!|i$z!|i$|!|i%a!|i%f!|i&T!|i$U!|i$W!|i$V!|i~P$(mO#Y!{i#Z!{i$n!{i$o!{i%t!{i&P!{i&Q!{i~O$l$XO$m$XO$}!{iV!{io!{i!c!{i!d!{i$x!{i$z!{i$|!{i%a!{i%f!{i&T!{i$U!{i$W!{i$V!{i~P$+WO#Y!zi#Z!zi%t!zi&P!zi&Q!zi~O$n$YO$o$YO$}!ziV!zio!zi!c!zi!d!zi$x!zi$z!zi$|!zi%a!zi%f!zi&T!zi$U!zi$W!zi$V!zi~P$,uO%t$ZO#Y!yi#Z!yi$}!yi&P!yi&Q!yiV!yio!yi!c!yi!d!yi$x!yi$z!yi$|!yi%a!yi%f!yi&T!yi$U!yi$W!yi$V!yi~O%u(OO~O!w$_O%o(QO%{&eO%|$`O~O!w$_O%q(TO%|$`O&W&iO~O%o(WO%p&oO~O%o&rO%p&rO%q(WO~O%o&tO%p&tO%q&tO%r(WO~O%o&vO%p&vO%q&vO%r&vO%s(WO~O%P(]OV%OXo%OX!c%OX!d%OX$x%OX$z%OX$|%OX%a%OX%f%OX%t%OX$W%OX~O%t(^OV&YXo&YX!c&YX!d&YX$x&YX$z&YX$|&YX%a&YX%f&YX$W&YX~O%t&}O%u%ia~O&S(eO&X(dO~O&T(bO~O%h#PO%zvO&S(gO&X(fO~O%h#PO%zvO&S(lO&X(kO~O&T(pO~O&S(sO&X(rO~O$W(tO~P`O%h#PO%zvO&S(eO&X(dO~O%h#PO%zvO&S(gO&X(fOV$uyo$uy!c$uy!d$uy$x$uy$z$uy$|$uy%a$uy%f$uy$W$uy~O%h#PO%zvO&S(lO&X(kOV$vyo$vy!c$vy!d$vy$x$vy$z$vy$|$vy%a$vy%f$vy$W$vy~O%h#PO%zvO&S(sO&X(rO~O$W(tO%zvO~P`O&T(iO~O&T(nO~O$[!}a$]!}a$^!}a$_!}a$`!}a$a!}a$b!}a$e!}a$f!}a$g!}a$h!}a$i!}a$j!}a$k!}a%u!}a~O#Y-tO#Z-tO&Q-tO%j!}a~P$7dO$Y*bO$c*iO$d*iO&V*bO~P!4YOU!ROqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f!jO!ipO!jpO!kpO!lpO!mpO!s!iO!t!iO#_!mO$T!nO$X!^O$Y*bO$c*iO$d*iO%h!SO%m![O%o!gO%q!hO&O!VO&S!YO&U!^O&V*bO~P!8sO!f(|O$Y*eO$c*lO$d*lO&V*eO~P!4YO#X!qq%j!qq%t!qq%u!qq%y!qq$}!qqV!qqo!qq!c!qq!d!qq$x!qq$z!qq$|!qq%a!qq%f!qq&T!qq&P!qq#Y!qq#Z!qq$[!qq$]!qq$^!qq$_!qq$`!qq$a!qq$b!qq$e!qq$f!qq$g!qq$h!qq$i!qq$j!qq$k!qq$l!qq$m!qq$n!qq$o!qq&Q!qq$U!qq$W!qq$V!qq~PLeO#Y$Zi#Z$Zi$l$Zi$m$Zi$n$Zi$o$Zi$}$Zi%t$Zi&P$Zi&Q$ZiV$Zio$Zi!c$Zi!d$Zi$x$Zi$z$Zi$|$Zi%a$Zi%f$Zi&T$Zi$U$Zi%y$Zi$W$Zi$V$Zi~P$(mO#X*qO~Q#WX#Y!pX#Z!pX$[!pX$]!pX$^!pX$_!pX$`!pX$a!pX$b!pX$e!pX$f!pX$g!pX$h!pX$i!pX$j!pX$k!pX$l!pX$m!pX$n!pX$o!pX&Q!pX~P!2jO!w$_O%o)RO%{&eO%|$`O~O!w$_O%q)SO%|$`O&W&iO~O$V)TO~OUoOqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO~O!f)UO~P$DTO%t(^OV&Yao&Ya!c&Ya!d&Ya$x&Ya$z&Ya$|&Ya%a&Ya%f&Ya$W&Ya~O&T)YO~O&S)_O&X)^O~O&T)[O~O&S)cO&X)bO~O&T)`O~O&T)dO~O&S)gO&X)fO~O%h#PO%zvO&S)_O&X)^O~O%h#PO%zvO&S)cO&X)bO~O&S)kO&X)jO~O$W)lO~P`O$n+qO$o+qO#Y#Ui#Z#Ui%y#Ui&P#Ui&Q#Ui%u#Ui~O$[*}O$]*}O$^+UO$_+UO$`+]O$a+]O$b+]O$e+dO$f+dO$g+dO$h+kO$i+kO$j+kO$k+kO~O%t#[X%y#[X~P$IuO%t)mO%y&Ri~O%u)oO~O#Y!pa#Z!pa$[!pa$]!pa$^!pa$_!pa$`!pa$a!pa$b!pa$e!pa$f!pa$g!pa$h!pa$i!pa$j!pa$k!pa$l!pa$m!pa$n!pa$o!pa&Q!pa~P#(XO&T)qO~O&T)rO~O&T)tO~O&T)vO~O&S)yO&X)xO~O&S){O&X)zO~O%t)mO%y&Rq~O$W*PO~O&T*QO~O&T*RO~O&T*SO~O&T*VO~O&T*WO~O&T*XO~O%}*vO#Q#OX#Y#OX#Z#OX#^#OX#_#OX#`#OX#a#OX#b#OX#c#OX#d#OX#e#OX#f#OX#g#OX#h#OX#i#OX#j#OX#k#OX#l#OX#m#OX#n#OX#o#OX#p#OX#q#OX#r#OX#s#OX#t#OX#u#OX#v#OX#w#OX#x#OX#y#OX#z#OX#{#OX#|#OX#}#OX$O#OX$P#OX$Q#OX$R#OX$[#OX$]#OX$^#OX$_#OX$`#OX$a#OX$b#OX$e#OX$f#OX$g#OX$h#OX$i#OX$j#OX$k#OX%h#OX%j#OX%z#OX&Q#OX%u#OX~P!>^O%}*wO#Q#OX#Y#OX#Z#OX#^#OX#_#OX#`#OX#a#OX#b#OX#c#OX#d#OX#e#OX#f#OX#g#OX#h#OX#i#OX#j#OX#k#OX#l#OX#m#OX#n#OX#o#OX#p#OX#q#OX#r#OX#s#OX#t#OX#u#OX#v#OX#w#OX#x#OX#y#OX#z#OX#{#OX#|#OX#}#OX$O#OX$P#OX$Q#OX$R#OX$[#OX$]#OX$^#OX$_#OX$`#OX$a#OX$b#OX$e#OX$f#OX$g#OX$h#OX$i#OX$j#OX$k#OX$l#OX$m#OX$n#OX$o#OX%h#OX%y#OX%z#OX&P#OX&Q#OX%u#OX$}#OXV#OXo#OX!c#OX!d#OX$x#OX$z#OX$|#OX%a#OX%f#OX&T#OX$U#OX$W#OX$V#OX~P!>^O%}*xO#Q#OX#Y#OX#Z#OX#^#OX#_#OX#`#OX#a#OX#b#OX#c#OX#d#OX#e#OX#f#OX#g#OX#h#OX#i#OX#j#OX#k#OX#l#OX#m#OX#n#OX#o#OX#p#OX#q#OX#r#OX#s#OX#t#OX#u#OX#v#OX#w#OX#x#OX#y#OX#z#OX#{#OX#|#OX#}#OX$O#OX$P#OX$Q#OX$R#OX$[#OX$]#OX$^#OX$_#OX$`#OX$a#OX$b#OX$e#OX$f#OX$g#OX$h#OX$i#OX$j#OX$k#OX$l#OX$m#OX$n#OX$o#OX%h#OX%t#OX%u#OX%z#OX&P#OX&Q#OX~P!>^O#Q#OX#X!qX#Y#OX#Z#OX#^#OX#_#OX#`#OX#a#OX#b#OX#c#OX#d#OX#e#OX#f#OX#g#OX#h#OX#i#OX#j#OX#k#OX#l#OX#m#OX#n#OX#o#OX#p#OX#q#OX#r#OX#s#OX#t#OX#u#OX#v#OX#w#OX#x#OX#y#OX#z#OX#{#OX#|#OX#}#OX$O#OX$P#OX$Q#OX$R#OX$[#OX$]#OX$^#OX$_#OX$`#OX$a#OX$b#OX$e#OX$f#OX$g#OX$h#OX$i#OX$j#OX$k#OX%h#OX%j!qX%t!qX%z#OX&Q#OX%u#OX~O%j#OX~P%-uO$l#OX$m#OX$n#OX$o#OX%y#OX&P#OX$}#OXV#OXo#OX!c#OX!d#OX$x#OX$z#OX$|#OX%a#OX%f#OX&T#OX$U#OX$W#OX$V#OX~P%-uO$l#OX$m#OX$n#OX$o#OX%t#OX&P#OX~P%-uOU!ROqnOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!boO!coO!doO!f!jO!ipO!jpO!kpO!lpO!mpO!s!iO!t!iO#_!mO$T!nO$X!^O$Y*fO$c*mO$d*mO%h!SO%m![O%o!gO%q!hO&O!VO&S!YO&U!^O&V*fO~P!8sO$Y*aO$c*hO$d*hO&V*aO~P!4YO$Y*cO$c*jO$d*jO&V*cO~P!4YO$Y*fO$c*mO$d*mO&V*fO~P!4YO$Y*gO$c*nO$d*nO&V*gO~P!4YO#Q#Oa#Y#Oa#Z#Oa#^#Oa#_#Oa#`#Oa#a#Oa#b#Oa#c#Oa#d#Oa#e#Oa#f#Oa#g#Oa#h#Oa#i#Oa#j#Oa#k#Oa#l#Oa#m#Oa#n#Oa#o#Oa#p#Oa#q#Oa#r#Oa#s#Oa#t#Oa#u#Oa#v#Oa#w#Oa#x#Oa#y#Oa#z#Oa#{#Oa#|#Oa#}#Oa$O#Oa$P#Oa$Q#Oa$R#Oa$[#Oa$]#Oa$^#Oa$_#Oa$`#Oa$a#Oa$b#Oa$e#Oa$f#Oa$g#Oa$h#Oa$i#Oa$j#Oa$k#Oa%h#Oa%j#Oa%z#Oa&Q#Oa%u#Oa~P#6|O#Q#Oa#Y#Oa#Z#Oa#^#Oa#_#Oa#`#Oa#a#Oa#b#Oa#c#Oa#d#Oa#e#Oa#f#Oa#g#Oa#h#Oa#i#Oa#j#Oa#k#Oa#l#Oa#m#Oa#n#Oa#o#Oa#p#Oa#q#Oa#r#Oa#s#Oa#t#Oa#u#Oa#v#Oa#w#Oa#x#Oa#y#Oa#z#Oa#{#Oa#|#Oa#}#Oa$O#Oa$P#Oa$Q#Oa$R#Oa$[#Oa$]#Oa$^#Oa$_#Oa$`#Oa$a#Oa$b#Oa$e#Oa$f#Oa$g#Oa$h#Oa$i#Oa$j#Oa$k#Oa$l#Oa$m#Oa$n#Oa$o#Oa%h#Oa%t#Oa%u#Oa%z#Oa&P#Oa&Q#Oa~P#6|O$}#WiV#Wio#Wi!c#Wi!d#Wi$x#Wi$z#Wi$|#Wi%a#Wi%f#Wi&T#Wi%u#Wi$U#Wi%y#Wi$W#Wi$V#Wi~O$[*{O$]*{O$^+SO$_+SO$`+ZO$a+ZO$b+ZO$e+bO$f+bO$g+bO$h+iO$i+iO$j+iO$k+iO~P%AQO$[*zO$]*zO$^+RO$_+RO$`+YO$a+YO$b+YO$e+aO$f+aO$g+aO$h+hO$i+hO$j+hO$k+hO~Q#Wi$[$SO$]$SO$^$TO$_$TO$`$UO$a$UO$b$UO$e$VO$f$VO$g$VO$h$WO$i$WO$j$WO$k$WO~Q#Wi$[*yO$]*yO$^+QO$_+QO$`+XO$a+XO$b+XO$e+`O$f+`O$g+`O$h+gO$i+gO$j+gO$k+gO~O#Y#Wi#Z#Wi$l#Wi$m#Wi$n#Wi$o#Wi%t#Wi%u#Wi&P#Wi&Q#Wi~P%EUO%t#Wi&P#Wi&T#Wi%y#Wi~P$IuO$[+PO$]+PO$^+WO$_+WO$`+_O$a+_O$b+_O$e+fO$f+fO$g+fO$h+mO$i+mO$j+mO$k+mO~O%t#Wi%u#Wi&P#Wi~P%GWO$[+OO$]+OO$^+VO$_+VO$`+^O$a+^O$b+^O$e+eO$f+eO$g+eO$h+lO$i+lO$j+lO$k+lO~O#Y#Wi#Z#Wi%j#Wi&Q#Wi%u#Wi~P%HcO#Y!|X#Z!|X$l!|X$m!|X$n!|X$o!|X%t#[X%u!|X&P!|X&Q!|X~P%EUO#Y!}i#Z!}i$^!}i$_!}i$`!}i$a!}i$b!}i$e!}i$f!}i$g!}i$h!}i$i!}i$j!}i$k!}i$l!}i$m!}i$n!}i$o!}i%u!}i&P!}i&Q!}i~O$[*yO$]*yO%t!}i~P%JhO$[*zO$]*zO%u!}i~P#NeO$[*{O$]*{O$b!}i$e!}i$f!}i$g!}i$h!}i$i!}i$j!}i$k!}i$}!}iV!}io!}i!c!}i!d!}i$x!}i$z!}i$|!}i%a!}i%f!}i&T!}i%u!}i$U!}i%y!}i$W!}i$V!}i~O$^!}i$_!}i$`!}i$a!}i~P%LgO$^!}i$_!}i$`!}i$a!}i$b!}i$e!}i$f!}i$g!}i$h!}i$i!}i$j!}i$k!}i%j!}i%u!}i~O$[*|O$]*|O~P%NkO$^!}i$_!}i$`!}i$a!}i$b!}i$e!}i$f!}i$g!}i$h!}i$i!}i$j!}i$k!}i%t!}i&P!}i~O$[*}O$]*}O%y!}i&T!}i~P& sO$[+OO$]+OO#Y!}i#Z!}i&Q!}i~P%NkO$[+PO$]+PO%u!}i~P& sO$[*yO$]*yO$^+QO$_+QO$`+XO$a+XO#Y!}i#Z!}i$h!}i$i!}i$j!}i$k!}i$l!}i$m!}i$n!}i$o!}i%t!}i%u!}i&P!}i&Q!}i~O$b!}i$e!}i$f!}i$g!}i~P&#sO$[*zO$]*zO$^+RO$_+RO$`+YO$a+YO$b!}i$e!}i$f!}i$g!}i$h!}i$i!}i$j!}i$k!}i%u!}i~P$&PO$^+SO$_+SO$`+ZO$a+ZO~P%LgO$[*|O$]*|O$^+TO$_+TO$`+[O$a+[O$h!}i$i!}i$j!}i$k!}i%j!}i%u!}i~O$b!}i$e!}i$f!}i$g!}i~P&&xO$[*}O$]*}O$^+UO$_+UO$`+]O$a+]O$h!}i$i!}i$j!}i$k!}i%t!}i%y!}i&P!}i&T!}i~O$b!}i$e!}i$f!}i$g!}i~P&(QO$[+OO$]+OO$^+VO$_+VO$`+^O$a+^O#Y!}i#Z!}i$h!}i$i!}i$j!}i$k!}i%j!}i&Q!}i%u!}i~O$b!}i$e!}i$f!}i$g!}i~P&)`O$[+PO$]+PO$^+WO$_+WO$`+_O$a+_O$h!}i$i!}i$j!}i$k!}i%t!}i%u!}i&P!}i~O$b!}i$e!}i$f!}i$g!}i~P&*qO$b+XO$e+`O$f+`O$g+`O~P&#sO$[*zO$]*zO$^+RO$_+RO$`+YO$a+YO$b+YO$e+aO$f+aO$g+aO$h!}i$i!}i$j!}i$k!}i%u!}i~P$&PO$[*{O$]*{O$^+SO$_+SO$`+ZO$a+ZO$b+ZO$e+bO$f+bO$g+bO$}!}iV!}io!}i!c!}i!d!}i$x!}i$z!}i$|!}i%a!}i%f!}i&T!}i%u!}i$U!}i%y!}i$W!}i$V!}i~O$h!}i$i!}i$j!}i$k!}i~P&-aO$b+[O$e+cO$f+cO$g+cO~P&&xO$b+]O$e+dO$f+dO$g+dO~P&(QO$b+^O$e+eO$f+eO$g+eO~P&)`O$b+_O$e+fO$f+fO$g+fO~P&*qO#Y!}i#Z!}i$l!}i$m!}i$n!}i$o!}i%t!}i%u!}i&P!}i&Q!}i~P%EUO$[*zO$]*zO$^+RO$_+RO$`+YO$a+YO$b+YO$e+aO$f+aO$g+aO$h+hO$i+hO$j+hO$k+hO%u!}i~P$&PO$h+iO$i+iO$j+iO$k+iO~P&-aO%j!}i%u!}i~P#:OO%t!}i%y!}i&P!}i&T!}i~P$IuO#Y!}i#Z!}i%j!}i&Q!}i%u!}i~P%HcO%t!}i%u!}i&P!}i~P%GWO#Y!|i#Z!|i$l!|i$m!|i$n!|i$o!|i%t!|i%u!|i&P!|i&Q!|i~P%EUO$[*zO$]*zO$^+RO$_+RO$`+YO$a+YO$b+YO$e+aO$f+aO$g+aO$h+hO$i+hO$j+hO$k+hO~O#Y!|i#Z!|i$l!|i$m!|i$n!|i$o!|i%y!|i&P!|i&Q!|i%u!|i~P&5OO$l+nO$m+nO%u!{i~P$+WO$l+oO$m+oO#Y!{i#Z!{i$n!{i$o!{i%y!{i&P!{i&Q!{i%u!{i~O$n+pO$o+pO%u!zi~P$,uO%t+rO#Y!yi#Z!yi%u!yi&P!yi&Q!yi~O!f(|O$Y*gO$c*nO$d*nO&V*gO~P!4YO#Y$Zi#Z$Zi$l$Zi$m$Zi$n$Zi$o$Zi%t$Zi%u$Zi&P$Zi&Q$Zi~P%EUO#Y$Zi#Z$Zi$l$Zi$m$Zi$n$Zi$o$Zi%y$Zi&P$Zi&Q$Zi%u$Zi$}$ZiV$Zio$Zi!c$Zi!d$Zi$x$Zi$z$Zi$|$Zi%a$Zi%f$Zi&T$Zi$U$Zi$W$Zi$V$Zi~P&5OO$[*{O$]*{O$^+SO$_+SO$`+ZO$a+ZO$b+ZO$e+bO$f+bO$g+bO$h+iO$i+iO$j+iO$k+iO$}$ZiV$Zio$Zi!c$Zi!d$Zi$x$Zi$z$Zi$|$Zi%a$Zi%f$Zi&T$Zi%u$Zi$U$Zi%y$Zi$W$Zi$V$Zi~O%j$Zi%u$Zi~P#:OO%t$Zi%y$Zi&P$Zi&T$Zi~P$IuO#Y$Zi#Z$Zi%j$Zi&Q$Zi%u$Zi~P%HcO%t$Zi%u$Zi&P$Zi~P%GWO#Y#WX#Z#WX$[#WX$]#WX$^#WX$_#WX$`#WX$a#WX$b#WX$e#WX$f#WX$g#WX$h#WX$i#WX$j#WX$k#WX$l#WX$m#WX$n#WX$o#WX%u#WX&P#WX&Q#WX~O#X*rO%t#WX~P&>eO#X*pO~Q#WX#X*oO$}#WXV#WXo#WX!c#WX!d#WX$x#WX$z#WX$|#WX%a#WX%f#WX&T#WX%u#WX$U#WX%y#WX$W#WX$V#WX~O$[#WX$]#WX$^#WX$_#WX$`#WX$a#WX$b#WX$e#WX$f#WX$g#WX$h#WX$i#WX$j#WX$k#WX~P&@aO$[#WX$]#WX$^#WX$_#WX$`#WX$a#WX$b#WX$e#WX$f#WX$g#WX$h#WX$i#WX$j#WX$k#WX%j#WX%u#WX~O#X#rO~P&BhO$[#WX$]#WX$^#WX$_#WX$`#WX$a#WX$b#WX$e#WX$f#WX$g#WX$h#WX$i#WX$j#WX$k#WX%t#WX&P#WX~O#X*sO%y#WX&T#WX~P&CsO#X*uO#Y#WX#Z#WX&Q#WX~P&BhO#X*tO%u#WX~P&CsO%t#[X%u#[X~P%GWO%t-YO%u&Rq~O#X*sO%t#WX&P#WX&T#WX~O#X*tO%t#WX%u#WX&P#WX~O#Y!|X#Z!|X$l!|X$m!|X$n!|X$o!|X%t!|X%u!|X&P!|X&Q!|X~P%EUO#Y!|X#Z!|X$l!|X$m!|X$n!|X$o!|X%y!|X&P!|X&Q!|X%u!|X~P&5OO$l+nO$m+nO%u!{X~P!,`O$l+oO$m+oO#Y!{X#Z!{X$n!{X$o!{X%y!{X&P!{X&Q!{X%u!{X~O$n+pO$o+pO%u!zX~P!-}O%t+rO#Y!yX#Z!yX%u!yX&P!yX&Q!yX~O#Y-nO#Z-nO&P+sO&Q-nO%t!xX%u!xX~O%j.QO~O%j+}O~O%j,OO~O%j,PO~O%j,QO~O%j,RO~O%j,SO~O%j,TO~O%t,xO~O$[!}a$]!}a$^!}a$_!}a$`!}a$a!}a$b!}a$e!}a$f!}a$g!}a$h!}a$i!}a$j!}a$k!}a%y!}a&T!}a~O#Y-uO#Z-uO&Q-uO%t!}a&P!}a~P&K]O#Y-sO#Z-sO&Q-sO$}!}aV!}ao!}a!c!}a!d!}a$x!}a$z!}a$|!}a%a!}a%f!}a%u!}a$U!}a$W!}a$V!}a~P&K]O#Y-wO#Z-wO&Q-wO%t!}a&P!}a~P$7dO%t-YO%u&Ri~O#Y-oO#Z-oO&P$[O&Q-oO%t!xX&T!xX~O#Y$]O#Z$]O&P+sO&Q$]O%u!xX~O%j-}O~O%j+tO~O%p%l!n%}!sU%mXW&Wkj%{cbc!f%j~",
  goto: "!F`&ZPPPP&[&jPPPP&xPPPPP'Z'^PP+Z+ZP+ZPPPP+ZP/SP/VPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP0UP3z7pPPPPPP;f<[>p@oPPDpHgPIPLgMy! _!!}!$p!*n4]P4]!.e!.k!.r!.w!.|PPP!1i4]PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP4]PPPPPP!1yPPPPPPPPPPPPPPPPPPPP!2TDpPP!3a&[&[&[P&[P&[PP!4qP!4w!4z!5d!5y!6P!6V!6]!6c!6i!6s!8Z!8e!8o!8y!9TPPPP!9ZP!9iP!9lPPPPPPPPPPPP!9o!>Y!BgPPPPPPPP!.ePPPPPP!F]iSOU}!z#e#f%Q%R%]'d'j(yiXOU}!z#e#f%Q%R%]'d'j(yoQORUXr}!z#e#f%Q%R%]'d'j(yR$s!q(h!i^uvyz!S!V!Y!_!m!n!o!v!w#P#Q#R#r#s#t#u#v#w#x#y#z$O$P$S$T$U$V$W$X$Y$Z$[$]$^$`$e$l$u$v$z${%_%`%c%d&S&U&W&X&y'Q'R'W'X'[']'a'b'q'r's't'y(d(e(f(g(k(l(r(s)T)^)_)b)c)f)g)j)k)m)x)y)z){*a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+^+_+`+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+},O,P,Q,R,S,T,x-Y-n-o-q-r-s-t-u-v-w-}.QQ$q!qR(`&}(m!Q^uvyz!S!V!Y!_!m!n!o!q!v!w#P#Q#R#r#s#t#u#v#w#x#y#z$O$P$S$T$U$V$W$X$Y$Z$[$]$^$`$e$l$u$v$z${%_%`%c%d&S&U&W&X&y&}'Q'R'W'X'[']'a'b'q'r's't'y(d(e(f(g(k(l(r(s)T)^)_)b)c)f)g)j)k)m)x)y)z){*a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+^+_+`+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+},O,P,Q,R,S,T,x-Y-n-o-q-r-s-t-u-v-w-}.QR$k!lQqWQ|[Q}]Q!rbQ!yeQ!zfQ#YsQ#ZtQ$x!sQ$y!tQ%X#TQ%[#WQ%]#XQ'g%YR'h%ZnkW[]befst!s!t#T#W#X%Y%Z's!U^yz!S!V!Y!_!m!n!o!v!w#Q#R#r#s#t#u#v#w#x#y#z$O$S$T$U$V$W$X$Y$Z$[$^$`$l$u$v$z${%_%`%c%d&S&W&y'Q'R'W'X'[']'a'b'q's't'y(d(e(f(g(k(l(r(s)T)^)_)b)c)f)g)j)k)m)x)y)z){*a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+^+_+`+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+},O,P,Q,R,S,T,x-Y-}.QnmW[]befst!s!t#T#W#X%Y%Z's![^yz!S!V!Y!_!m!n!o!v!w#Q#R#r#s#t#u#v#w#x#y#z$O$S$T$U$V$W$X$Y$Z$[$^$`$l$u$v$z${%_%`%c%d&S&W&y'Q'R'W'X'[']'a'b'q's't'y(d(e(f(g(k(l(r(s)T)^)_)b)c)f)g)j)k)m)x)y)z){*a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+^+_+`+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+},O,P,Q,R,S,T,x-Y-}.QnlW[]befst!s!t#T#W#X%Y%Z's*Y^yz!S!V!Y!_!m!n!o!v!w#Q#R#r#s#t#u#v#w#x#y#z$O$S$T$U$V$W$X$Y$Z$[$^$`$l$u$v$z${%_%`%c%d&S&W&y'Q'R'W'X'[']'a'b'q's't'y(d(e(f(g(k(l(r(s)T)^)_)b)c)f)g)j)k)m)x)y)z){*a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+^+_+`+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+},O,P,Q,R,S,T,x-Y-}.Q!gw[eqx|}!r!u!y!z#O#W#Y#Z#e$t$x$y%P%Q%X%[%]%^%b'V'Z'f'g'h'i'j(v(w#|!W^yz!S!V!Y!_!n!v!w#Q#R#s#t$P$^$`$l$u$v$z${%_%`%c%d&y'Q'R'W'X'[']'a'b's'y(d(e(f(g(k(l(r(s)T)^)_)b)c)f)g)j)k)x)y)z){*a*b*c*d*e*f*g+t-}.QS#_u#PQ#avQ'{&XQ-Q-qQ-R-rQ-S-sQ-T-tQ-U-uQ-V-vQ-W-wU-[$]&U'rQ-]-oR-^-n$^!k^uvyz!S!V!Y!_!n!v!w#P#Q#R#s#t$P$]$^$`$l$u$v$z${%_%`%c%d&U&y'Q'R'W'X'[']'a'b'r's'y(d(e(f(g(k(l(r(s)T)^)_)b)c)f)g)j)k)x)y)z){*a*b*c*d*e*f*g+t-n-o-}.QQ&m$ea'}&X-q-r-s-t-u-v-w$v![!m!o#r#u#v#w#x#y#z$O$S$T$U$V$W$X$Y$Z$[&S&W'q't)m*h*i*j*k*l*m*n*o*p*q*r*s*t*u*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+^+_+`+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+},O,P,Q,R,S,T,x-Y#^!]^yz!S!Y!_!n!v!w#Q#R#s$^$u$v$z${%_%`%c%d&y'Q'R'W'X'[']'a'b(d(e(f(g(k(l(r(s)T)^)_)b)c)f)g)j)k)x)y)z){*e-}t!juv#P$P$]$e&U&X'r-n-o-q-r-s-t-u-v-wS*^*d*fU*_'s*b*cc*`!V#t$`$l'y*a*g+t.Q(i!i^uvyz!S!V!Y!_!m!n!o!v!w#P#Q#R#r#s#t#u#v#w#x#y#z$O$P$S$T$U$V$W$X$Y$Z$[$]$^$`$e$l$u$v$z${%_%`%c%d&S&U&W&X&y'Q'R'W'X'[']'a'b'q'r's't'y(d(e(f(g(k(l(r(s)T)^)_)b)c)f)g)j)k)m)x)y)z){*a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+^+_+`+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+},O,P,Q,R,S,T,x-Y-n-o-q-r-s-t-u-v-w-}.QQ$a!gQ$c!hW&e$a&f&h(RQ&h$bW&i$c&j&l(UR&l$dQ!p^Q#cyQ#dzS#o!S$lQ#q!VQ#|!YQ$o!nQ$}!vQ%O!wQ%V#QQ%W#RW&c$^+t-}.QQ&d$`Q'T$uQ'U$vQ'_$zQ'`${Q'k%_Q'l%`Q'm%cQ'n%dQ([&yQ(b'QQ(c'RQ(i'WQ(j'XQ(n'[Q(o']Q(p'aQ(q'bQ)P'yQ)Y(dQ)Z(eQ)[(fQ)](gQ)`(kQ)a(lQ)d(rQ)e(sQ)p)TQ)q)fQ)r)^Q)s)_Q)t)bQ)u)cQ)v)jQ)w)gQ)|)kQ*Q)xQ*R)zQ*T)yR*U){#Q!d^yz!n!v!w#Q#R$^$u$v$z${%_%`%c%d&y'Q'R'W'X'[']'a'b(d(e(f(g(k(l(r(s)T)^)_)b)c)f)g)j)k)x)y)z){U-e!S$l+tS-|!Y-}X.O!V$`'y.Q#U!c^yz!Y!n!v!w#Q#R$^$u$v$z${%_%`%c%d&y'Q'R'W'X'[']'a'b(d(e(f(g(k(l(r(s)T)^)_)b)c)f)g)j)k)x)y)z){-}Q&b$[Q,w+s_-d!S!V$`$l'y+t.Q#W!b^yz!Y!n!v!w#Q#R$[$^$u$v$z${%_%`%c%d&y'Q'R'W'X'[']'a'b(d(e(f(g(k(l(r(s)T)^)_)b)c)f)g)j)k)x)y)z){-}U%o#s#t'sQ&a$ZQ(z'qQ,v+ra-c!S!V$`$l'y+s+t.Q#Y!a^yz!Y!n!v!w#Q#R$Z$[$^$u$v$z${%_%`%c%d&y'Q'R'W'X'[']'a'b(d(e(f(g(k(l(r(s)T)^)_)b)c)f)g)j)k)x)y)z){-}Q&`$YQ,t+pQ,u+qb-a!S!V$`$l'y+r+s+t.QX-b#s#t'q's#[!`^yz!Y!n!v!w#Q#R$Y$Z$[$^$u$v$z${%_%`%c%d&y'Q'R'W'X'[']'a'b(d(e(f(g(k(l(r(s)T)^)_)b)c)f)g)j)k)x)y)z){-}h$R!_!o*a*b*f*h*i*j*k*l*m*nQ%n#rQ%u#s`&Y$S*y*z*{*|*}+O+PQ&Z$TQ&[$UQ&]$VQ&^$WQ&_$XQ'p*dQ'z&WS(}'t)mQ+u*oQ+v*pQ+w*qQ+x*rQ+y*sQ+z*tQ+{*uQ+|#tQ,U+QQ,V+RQ,W+SQ,X+TQ,Y+UQ,Z+VQ,[+WQ,]+XQ,^+YQ,_+ZQ,`+[Q,a+]Q,b+^Q,c+_Q,d+`Q,e+aQ,f+bQ,g+cQ,h+dQ,i+eQ,j+fQ,k+gQ,l+hQ,m+iQ,n+jQ,o+kQ,p+lQ,q+mQ,r+nQ,s+oQ,y+}Q,z,OQ,{,PQ,|,QQ,},RQ-O,SQ-P,TS-X,x-Yd-_!S!V$`$l'y+p+r+s+t.QU-`'q's+qQ-x*eQ-y*cR-z*g'`!X^yz!S!V!Y!_!n!o!v!w#Q#R#r#s#t$S$T$U$V$W$X$Y$Z$[$^$`$l$u$v$z${%_%`%c%d&W&y'Q'R'W'X'[']'a'b'q's't'y(d(e(f(g(k(l(r(s)T)^)_)b)c)f)g)j)k)m)x)y)z){*a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+^+_+`+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+},O,P,Q,R,S,T,x-Y-}.QQ$m!mQ%{#uQ%|#vQ%}#wQ&O#xQ&P#yQ&Q#zQ&T$OR'w&SQ%x#sR%z#tS%t#s#tR({'sV%p#s#t'sV%r#s#t's#Q!e^yz!n!v!w#Q#R$^$u$v$z${%_%`%c%d&y'Q'R'W'X'[']'a'b(d(e(f(g(k(l(r(s)T)^)_)b)c)f)g)j)k)x)y)z){Q#l!SQ$Q!_U%q#s#t'sQ&V$PU&c$]-n-oQ'x&U`'|&X-q-r-s-t-u-v-wQ({'rW-f!V$`'y.QQ-g*aQ-h*bQ-i*cQ-j*dQ-k*eQ-l*fQ-m*gS.P!Y-}T.R$l+tQ%v#sQ)O'tS)})m-YQ-p#tR-{,xa$R!_*a*b*c*d*e*f*g#e!f^yz!S!V!Y!n!v!w#Q#R$^$`$l$u$v$z${%_%`%c%d&y'Q'R'W'X'[']'a'b'y(d(e(f(g(k(l(r(s)T)^)_)b)c)f)g)j)k)x)y)z){+t-}.QQ{[U!xex|Q#SqS$w!r#OU$|!u!y#WQ%a#YQ%e#ZS'S$t%XS'Y$x%^S'^$y%bS'c%P%[S(h'V'gS(m'Z'hQ(u'fQ(x'iQ)h(vR)i(wQ&{$pR)W(^R)V(]QUOYgU#f%R'd(yQ#f}S%R!z#eS'd%Q%]R(y'jhROU}!z#e#f%Q%R%]'d'j(ySaRrRrXQ&p$gR(V&pQ&s$hR(X&sQ&u$iR(Y&uQ&w$jR(Z&wQ'O$qR(a'OQ!}lQ#p*YT%U!}#pQx[S!ue|Q#Oqp#bx!u#O#e$t%P%Q%^%b'V'Z'f'i'j(v(wQ#e}Q$t!rS%P!y#WQ%Q!zQ%^#YQ%b#ZQ'V$xQ'Z$yQ'f%XQ'i%[Q'j%]Q(v'gR(w'hQ)n)OS*O)n-ZR-Z-{Q&f$aS(P&f(RR(R&hQ&j$cS(S&j(UR(U&lQ$f!kS&n$f)QR)Q'}Q(_&{R)X(_iTOU}!z#e#f%Q%R%]'d'j(yR_PR$r!qnmW[]befst!s!t#T#W#X%Y%Z#^!Z^yz!S!Y!_!n!v!w#Q#R#s$^$u$v$z${%_%`%c%d&y'Q'R'W'X'[']'a'b(d(e(f(g(k(l(r(s)T)^)_)b)c)f)g)j)k)x)y)z){*e-}t#]uv#P$P$]$e&U&X'r-n-o-q-r-s-t-u-v-w$v$n!m!o#r#u#v#w#x#y#z$O$S$T$U$V$W$X$Y$Z$[&S&W'q't)m*h*i*j*k*l*m*n*o*p*q*r*s*t*u*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+^+_+`+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+},O,P,Q,R,S,T,x-YS&z$p(^Q)U(]S*Z*d*fU*['s*b*cc*]!V#t$`$l'y*a*g+t.QniW[]befst!s!t#T#W#X%Y%Zzouv#P$P$]$e$p&U&X'r(](^-n-o-q-r-s-t-u-v-w's!R^yz!S!V!Y!_!m!n!o!v!w#Q#R#r#s#t#u#v#w#x#y#z$O$S$T$U$V$W$X$Y$Z$[$^$`$l$u$v$z${%_%`%c%d&S&W&y'Q'R'W'X'[']'a'b'q's't'y(d(e(f(g(k(l(r(s)T)^)_)b)c)f)g)j)k)m)x)y)z){*a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+^+_+`+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+},O,P,Q,R,S,T,x-Y-}.QnkW[]befst!s!t#T#W#X%Y%Z's!T^yz!S!V!Y!_!m!n!o!v!w#Q#R#r#s#t#u#v#w#x#y#z$O$S$T$U$V$W$X$Y$Z$[$^$`$l$u$v$z${%_%`%c%d&S&W&y'Q'R'W'X'[']'a'b'q's't'y(d(e(f(g(k(l(r(s)T)^)_)b)c)f)g)j)k)m)x)y)z){*a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+^+_+`+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+},O,P,Q,R,S,T,x-Y-}.QR&|$p",
  nodeNames: "⚠ LineComment BlockComment Rel DefinitionStatement Docstring BasicId Keyword DocstringLiteral MultilineDocstringLiteral Attribute AttributeKeyword AttributeKeyword AttributeKeyword AttributeKeyword AttributeKeyword AttributeParams BaseLiteral IntLiteral FloatLiteral RelnameLiteral RelnameStringLiteral StaticStringLiteral RelnameMultilineStringLiteral StaticMultilineStringLiteral CharLiteral DateLiteral DateTimeLiteral RawStringLiteral Keyword RawStringSequence Keyword LhsId Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Keyword Keyword Keyword ParenOpId Operator QualifiedName QualifiedNameId Emphasis Emphasis Emphasis Emphasis Emphasis QualifiedNameElem FormalParamsBracket FormalParams FormalParam Literal BooleanLiteral SpecializeIntLiteral InterpolationLiteral Interpolation InterpolationId Expression UnionExpression JoinExpression OverrideExpression RestrictExpression LogicalExpression BasicExpression SpecializeExpression OperatorKeyword PartialApplicationExpression NocommaParam NocommaExpression NocommaUnionExpression NocommaAbstractExpression Bindings Keyword Keyword Keyword LogicalParam ApplicationExpression OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword BoundedExpression Keyword Keyword Keyword Keyword Keyword Keyword LogicalAbstractExpression Keyword OperatorKeyword Keyword OperatorKeyword Keyword OperatorKeyword OperatorKeyword Keyword OperatorKeyword Keyword OperatorKeyword OperatorKeyword Keyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword AbstractExpression InterpolationMultilineLiteral Keyword OperatorKeyword FormalParamsParen ValueTypeStatement EntityTypeStatement ConstraintStatement Keyword ModuleStatement Keyword UseStatement Keyword Keyword Alias Keyword AliasId",
  maxTerm: 240,
  nodeProps: [
    ["group", -6,4,175,176,177,179,181,"Declaration"]
  ],
  skippedNodes: [0,1,2],
  repeatNodeCount: 14,
  tokenData: "& e~R#vOX)iXY6kYZ:oZ[6k[])i]^:o^p)ipq6kqr;[rs=Sst!*vtu)iuv!3cvw)iwx!5Pxy!?dyz!@_z{!AY{|!BT|}!DR}!O!AY!O!P!D|!P!Q!LZ!Q!R$ b!R![$@{![!]$B`!]!^%*h!^!_%+c!_!`%-m!`!a%.j!a!b)i!b!c%/k!c!}%0f!}#O%3x#O#P%4s#P#Q%6W#Q#R%7R#R#S%;x#S#T)i#T#Y%0f#Y#Z%=i#Z#h%0f#h#i%Fe#i#o%0f#o#p%JT#p#q%KO#q#r%Ky#r$f)i$f$g6k$g$r)i$r$s!AY$s%o)i%o%p!AY%p&a)i&a&b!AY&b4w)i4w5b%0f5b5i)i5i6S%0f6S#BY)i#BY#BZ6k#BZ$IS)i$IS$I_6k$I_$I|)i$I|$I}%Lt$I}$JO%Lt$JO$JT)i$JT$JU6k$JU$KV)i$KV$KW6k$KW%#t)i%#t%#u!AY%#u%#v)i%#v%#w!AY%#w%%U)i%%U%%V!AY%%V%%W)i%%W%%X!AY%%X%%Y)i%%Y%%Z!AY%%Z%%[)i%%[%%]!AY%%]%&Y)i%&Y%&Z%Mo%&Z%&])i%&]%&^%Nj%&^%&b)i%&b%&c!AY%&c%'R)i%'R%'S!AY%'S%'T!AY%'T%'U!AY%'U%'V!AY%'V%'h)i%'h%'i!AY%'i%'t)i%'t%'u!AY%'u%(^)i%(^%(_!AY%(_%(`!AY%(`%(a!AY%(a%(b)i%(b%(c!AY%(c%(d!AY%(d%(x)i%(x%(y!AY%(y%(z!AY%(z%({!AY%({%(|!AY%(|%)Q)i%)Q%)R!AY%)R%)S!AY%)S%)U)i%)U%)V!AY%)V%)W!AY%)W%)c)i%)c%)d!AY%)d%)e!AY%)e%)f!AY%)f%)g)i%)g%)h!AY%)h%)i)i%)i%)j!AY%)j%*])i%*]%*^!AY%*^&FU)i&FU&FV6k&FV?HT)i?HT?HU6k?HU~)i!Y)rY%pp&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bh*iY&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b`+^U&W`Or+Xrs+psu+Xv#O+X#O#P,i#P~+X`+sUOr+Xrs,Vsu+Xv#O+X#O#P,i#P~+X`,YTOr+Xsu+Xv#O+X#O#P,i#P~+X`,ldrs+Xuv+Xwx+X!Q!R-z!R!S-z!S!T-z!T!U-z!U!Y.i!w!x/W#O#P+X#T#U+X#U#V+X#X#Y+X#Y#Z+X#b#c+X#f#g+X#h#i+X#i#j0Y#j#k+X#l#m0r`.PW&W`Or+Xrs+psu+Xv!Q+X!Q!Y.i!Y#O+X#O#P,i#P~+X`.nW&W`Or+Xrs+psu+Xv!Q+X!Q!Y+X!Y#O+X#O#P,i#P~+X`/ZR!Q![/d!c!i/d#T#Z/d`/gR!Q![/p!c!i/p#T#Z/p`/sR!Q![/|!c!i/|#T#Z/|`0PR!Q![0Y!c!i0Y#T#Z0Y`0]R!Q![0f!c!i0f#T#Z0f`0iR!Q![0r!c!i0r#T#Z0r`0uR!Q![1O!c!i1O#T#Z1O`1RR!Q![+X!c!i+X#T#Z+Xh1_drs*buv*bwx*b!Q!R2m!R!S2m!S!T2m!T!U2m!U!Y3j!w!x4g#O#P*b#T#U*b#U#V*b#X#Y*b#Y#Z*b#b#c*b#f#g*b#h#i*b#i#j5i#j#k*b#l#m6Rh2t[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y3j!Y#O*b#O#P1[#P~*bh3q[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y*b!Y#O*b#O#P1[#P~*bh4jR!Q![4s!c!i4s#T#Z4sh4vR!Q![5P!c!i5P#T#Z5Ph5SR!Q![5]!c!i5]#T#Z5]h5`R!Q![5i!c!i5i#T#Z5ih5lR!Q![5u!c!i5u#T#Z5uh5xR!Q![6R!c!i6R#T#Z6Rh6UR!Q![6_!c!i6_#T#Z6_h6bR!Q![*b!c!i*b#T#Z*b~6vl%pp%c~&W`%{WOX*bXY8nYZ+XZ[8n[]*b]^+X^p*bpq8nqr*brs+psu*bv#O*b#O#P1[#P$f*b$f$g8n$g#BY*b#BY#BZ8n#BZ$IS*b$IS$I_8n$I_$JT*b$JT$JU8n$JU$KV*b$KV$KW8n$KW&FU*b&FU&FV8n&FV?HT*b?HT?HU8n?HU~*b~8wl%c~&W`%{WOX*bXY8nYZ+XZ[8n[]*b]^+X^p*bpq8nqr*brs+psu*bv#O*b#O#P1[#P$f*b$f$g8n$g#BY*b#BY#BZ8n#BZ$IS*b$IS$I_8n$I_$JT*b$JT$JU8n$JU$KV*b$KV$KW8n$KW&FU*b&FU&FV8n&FV?HT*b?HT?HU8n?HU~*b~:xU%pp%d~&W`Or+Xrs+psu+Xv#O+X#O#P,i#P~+X![;e[%pp&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!_*b!_!`<Z!`#O*b#O#P1[#P~*bj<dY&W`%{W!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!a=XZ%ozOY=zYZ+XZ]=z]^+X^r=zrsJQsu=zuv?]v#O=z#O#PDo#P~=zg>PZ&W`OY=zYZ+XZ]=z]^+X^r=zrs>rsu=zuv?]v#O=z#O#PDo#P~=zg>yUfUWPOr+Xrs,Vsu+Xv#O+X#O#P,i#P~+XP?`VOY?]Z]?]^r?]rs?us#O?]#O#P?z#P~?]P?zOWPP?}drs?]uv?]wx?]!Q!RA]!R!SA]!S!TA]!T!UA]!U!YA{!w!xBk#O#P?]#T#U?]#U#V?]#X#Y?]#Y#Z?]#b#c?]#f#g?]#h#i?]#i#jCm#j#k?]#l#mDVPA`XOY?]Z]?]^r?]rs?us!Q?]!Q!YA{!Y#O?]#O#P?z#P~?]PBOXOY?]Z]?]^r?]rs?us!Q?]!Q!Y?]!Y#O?]#O#P?z#P~?]PBnR!Q![Bw!c!iBw#T#ZBwPBzR!Q![CT!c!iCT#T#ZCTPCWR!Q![Ca!c!iCa#T#ZCaPCdR!Q![Cm!c!iCm#T#ZCmPCpR!Q![Cy!c!iCy#T#ZCyPC|R!Q![DV!c!iDV#T#ZDVPDYR!Q![Dc!c!iDc#T#ZDcPDfR!Q![?]!c!i?]#T#Z?]gDrdrs=zuv=zwx=z!Q!RFQ!R!SFQ!S!TFQ!T!UFQ!U!YGO!w!xG|#O#P=z#T#U=z#U#V=z#X#Y=z#Y#Z=z#b#c=z#f#g=z#h#i=z#i#jIO#j#k=z#l#mIhgFV]&W`OY=zYZ+XZ]=z]^+X^r=zrs>rsu=zuv?]v!Q=z!Q!YGO!Y#O=z#O#PDo#P~=zgGT]&W`OY=zYZ+XZ]=z]^+X^r=zrs>rsu=zuv?]v!Q=z!Q!Y=z!Y#O=z#O#PDo#P~=zgHPR!Q![HY!c!iHY#T#ZHYgH]R!Q![Hf!c!iHf#T#ZHfgHiR!Q![Hr!c!iHr#T#ZHrgHuR!Q![IO!c!iIO#T#ZIOgIRR!Q![I[!c!iI[#T#ZI[gI_R!Q![Ih!c!iIh#T#ZIhgIkR!Q![It!c!iIt#T#ZItgIwR!Q![=z!c!i=z#T#Z=z!aJXUfUWPOr+XrsJksu+Xv#O+X#O#P,i#P~+X!aJpV%q![OrKVrs!)csuKVuvLxv#OKV#O#P!$n#P~KVVKYVOrKVrsKosuKVuvLxv#OKV#O#P!$n#P~KVVKrVOrKVrsLXsuKVuvLxv#OKV#O#P!$n#P~KVVL[VOrKVrsLqsuKVuvLxv#OKV#O#P!$n#P~KVVLxOhUXPPL{TOrLxrsM[s#OLx#O#PNV#P~LxPM_TOrLxrsMns#OLx#O#PNV#P~LxPMqTOrLxrsNQs#OLx#O#PNV#P~LxPNVOXPPNYdrsLxuvLxwxLx!Q!R! h!R!S! h!S!T! h!T!U! h!U!Y!!Q!w!x!!j#O#PLx#T#ULx#U#VLx#X#YLx#Y#ZLx#b#cLx#f#gLx#h#iLx#i#j!#l#j#kLx#l#m!$UP! kVOrLxrsM[s!QLx!Q!Y!!Q!Y#OLx#O#PNV#P~LxP!!TVOrLxrsM[s!QLx!Q!YLx!Y#OLx#O#PNV#P~LxP!!mR!Q![!!v!c!i!!v#T#Z!!vP!!yR!Q![!#S!c!i!#S#T#Z!#SP!#VR!Q![!#`!c!i!#`#T#Z!#`P!#cR!Q![!#l!c!i!#l#T#Z!#lP!#oR!Q![!#x!c!i!#x#T#Z!#xP!#{R!Q![!$U!c!i!$U#T#Z!$UP!$XR!Q![!$b!c!i!$b#T#Z!$bP!$eR!Q![Lx!c!iLx#T#ZLxV!$qdrsKVuvKVwxKV!Q!R!&P!R!S!&P!S!T!&P!T!U!&P!U!Y!&o!w!x!'_#O#PKV#T#UKV#U#VKV#X#YKV#Y#ZKV#b#cKV#f#gKV#h#iKV#i#j!(a#j#kKV#l#m!(yV!&SXOrKVrsKosuKVuvLxv!QKV!Q!Y!&o!Y#OKV#O#P!$n#P~KVV!&rXOrKVrsKosuKVuvLxv!QKV!Q!YKV!Y#OKV#O#P!$n#P~KVV!'bR!Q![!'k!c!i!'k#T#Z!'kV!'nR!Q![!'w!c!i!'w#T#Z!'wV!'zR!Q![!(T!c!i!(T#T#Z!(TV!(WR!Q![!(a!c!i!(a#T#Z!(aV!(dR!Q![!(m!c!i!(m#T#Z!(mV!(pR!Q![!(y!c!i!(y#T#Z!(yV!(|R!Q![!)V!c!i!)V#T#Z!)VV!)YR!Q![KV!c!iKV#T#ZKV!P!)fVOrKVrs!){suKVuvLxv#OKV#O#P!$n#P~KV!P!*QV%rxOrKVrs!*gsuKVuvLxv#OKV#O#P!$n#P~KV!P!*nPhUXPrs!*qx!*vO%sx![!+P_%pp&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bvx*bxy!,Oy!Q*b!Q!R!,w!R![!.S![#O*b#O#P1[#P~*bj!,XY&OQ&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bj!-Q`!tQ&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!.S![#O*b#O#P1[#P#c*b#c#d!/R#d#l*b#l#m!0}#m~*bj!.][!tQ&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!.S![#O*b#O#P1[#P~*bj!/Y[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y!0O!Y#O*b#O#P1[#P~*bj!0X[!tQ&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y!0O!Y#O*b#O#P1[#P~*bj!1U`&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!2W![!c*b!c!i!2W!i#O*b#O#P1[#P#T*b#T#Z!2W#Z~*bj!2a`!tQ&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!2W![!c*b!c!i!2W!i#O*b#O#P1[#P#T*b#T#Z!2W#Z~*b!]!3jU%pp!fQxy!3|!c!}!4R#R#S!4j#T#o!4R4w5b!4R5i6S!4Ri!4RO%|ii!4WU!wi!Q![!4R!c!}!4R#R#S!4R#T#o!4R4w5b!4R5i6S!4Ri!4mU!Q![!4R!c!}!4R#R#S!4R#T#o!4R4w5b!4R5i6S!4R![!5Y]%pp&W`%{WOY!6RYZ!7wZ]!6R]^!7w^r!6Rrs!9Psu!6Ruv!9lvw!6Rwx*bx#O!6R#O#P!9w#P~!6Rj!6Y[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bvw*bwx!7Ox#O*b#O#P1[#P~*bj!7XYiQ&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bb!7|W&W`Or+Xrs+psu+Xvw+Xwx!8fx#O+X#O#P,i#P~+Xb!8mUiQ&W`Or+Xrs+psu+Xv#O+X#O#P,i#P~+Xb!9SWOr+Xrs,Vsu+Xvw+Xwx!8fx#O+X#O#P,i#P~+XQ!9oPwx!9rQ!9wOiQj!9zdrs!6Ruv!6Rwx!6R!Q!R!;Y!R!S!;Y!S!T!;Y!T!U!;Y!U!Y!<]!w!x!=`#O#P!6R#T#U!6R#U#V!6R#X#Y!6R#Y#Z!6R#b#c!6R#f#g!6R#h#i!6R#i#j!>b#j#k!6R#l#m!>zj!;a^&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bvw*bwx!7Ox!Q*b!Q!Y!<]!Y#O*b#O#P1[#P~*bj!<d^&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bvw*bwx!7Ox!Q*b!Q!Y!6R!Y#O*b#O#P1[#P~*bj!=cR!Q![!=l!c!i!=l#T#Z!=lj!=oR!Q![!=x!c!i!=x#T#Z!=xj!={R!Q![!>U!c!i!>U#T#Z!>Uj!>XR!Q![!>b!c!i!>b#T#Z!>bj!>eR!Q![!>n!c!i!>n#T#Z!>nj!>qR!Q![!>z!c!i!>z#T#Z!>zj!>}R!Q![!?W!c!i!?W#T#Z!?Wj!?ZR!Q![!6R!c!i!6R#T#Z!6R!]!?oY%hR%pp&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!]!@jY%uR%pp&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b![!AeY%pp&W`%{W!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b![!B`[%pp&W`%{W!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|!CU|#O*b#O#P1[#P~*bj!C][&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!`*b!`!a<Z!a#O*b#O#P1[#P~*b!]!D^Y%tR%pp&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b![!EX^%pp&W`%{W!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!FT!P!Q*b!Q![!Gy![#O*b#O#P1[#P~*bj!F[[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!GQ!P#O*b#O#P1[#P~*bj!GZY%}Q&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bj!HS`&W`%{WcQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!Gy![!g*b!g!h!IU!h#O*b#O#P1[#P#X*b#X#Y!IU#Y~*bj!I]`&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|!J_|}*b}!O!J_!O!Q*b!Q![!K[![#O*b#O#P1[#P~*bj!Jf[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!K[![#O*b#O#P1[#P~*bj!Ke[&W`%{WcQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!K[![#O*b#O#P1[#P~*b~!Lf^%pp&W`%{W!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bvz*bz{!Mb{!P*b!P!Q#9i!Q#O*b#O#P1[#P~*b~!Mi]&W`%{WOY!MbYZ!NbZ]!Mb]^!Nb^r!Mbrs# Ssu!Mbuv#!bvz!Mbz{#-r{#O!Mb#O#P#/q#P~!Mb~!NgX&W`Or!Nbrs# Ssu!Nbuv#!bvz!Nbz{##V{#O!Nb#O#P#$h#P~!Nb~# VXOr!Nbrs# rsu!Nbuv#!bvz!Nbz{##V{#O!Nb#O#P#$h#P~!Nb~# uXOr!Nbrs#!bsu!Nbuv#!bvz!Nbz{##V{#O!Nb#O#P#$h#P~!Nb~#!eROz#!bz{#!n{~#!b~#!qTOz#!bz{#!n{!P#!b!P!Q##Q!Q~#!b~##VOQ~~##[Z&W`Or!Nbrs# Ssu!Nbuv#!bvz!Nbz{##V{!P!Nb!P!Q##}!Q#O!Nb#O#P#$h#P~!Nb~#$UUQ~&W`Or+Xrs+psu+Xv#O+X#O#P,i#P~+X~#$ksOr#!brs!Nbsu#!buv!Nbvw#!bwx!Nbxz#!bz{#!n{!Q#!b!Q!R#&x!R!S#&x!S!T#&x!T!U#&x!U!Y#'p!Y!w#!b!w!x#(h!x#O#!b#O#P!Nb#P#T#!b#T#U!Nb#U#V!Nb#V#X#!b#X#Y!Nb#Y#Z!Nb#Z#b#!b#b#c!Nb#c#f#!b#f#g!Nb#g#h#!b#h#i!Nb#i#j#+U#j#k!Nb#k#l#!b#l#m#,d#m~#!b~#&}Z&W`Or!Nbrs# Ssu!Nbuv#!bvz!Nbz{##V{!Q!Nb!Q!Y#'p!Y#O!Nb#O#P#$h#P~!Nb~#'uZ&W`Or!Nbrs# Ssu!Nbuv#!bvz!Nbz{##V{!Q!Nb!Q!Y!Nb!Y#O!Nb#O#P#$h#P~!Nb~#(kXOz#!bz{#!n{!Q#!b!Q![#)W![!c#!b!c!i#)W!i#T#!b#T#Z#)W#Z~#!b~#)ZXOz#!bz{#!n{!Q#!b!Q![#)v![!c#!b!c!i#)v!i#T#!b#T#Z#)v#Z~#!b~#)yXOz#!bz{#!n{!Q#!b!Q![#*f![!c#!b!c!i#*f!i#T#!b#T#Z#*f#Z~#!b~#*iXOz#!bz{#!n{!Q#!b!Q![#+U![!c#!b!c!i#+U!i#T#!b#T#Z#+U#Z~#!b~#+XXOz#!bz{#!n{!Q#!b!Q![#+t![!c#!b!c!i#+t!i#T#!b#T#Z#+t#Z~#!b~#+wXOz#!bz{#!n{!Q#!b!Q![#,d![!c#!b!c!i#,d!i#T#!b#T#Z#,d#Z~#!b~#,gXOz#!bz{#!n{!Q#!b!Q![#-S![!c#!b!c!i#-S!i#T#!b#T#Z#-S#Z~#!b~#-VXOz#!bz{#!n{!Q#!b!Q![!Nb![!c#!b!c!i!Nb!i#T#!b#T#Z!Nb#Z~#!b~#-y_&W`%{WOY!MbYZ!NbZ]!Mb]^!Nb^r!Mbrs# Ssu!Mbuv#!bvz!Mbz{#-r{!P!Mb!P!Q#.x!Q#O!Mb#O#P#/q#P~!Mb~#/RYQ~&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b~#/tsOr#!brs!Mbsu#!buv!Mbvw#!bwx!Mbxz#!bz{#!n{!Q#!b!Q!R#2R!R!S#2R!S!T#2R!T!U#2R!U!Y#3X!Y!w#!b!w!x#4_!x#O#!b#O#P!Mb#P#T#!b#T#U!Mb#U#V!Mb#V#X#!b#X#Y!Mb#Y#Z!Mb#Z#b#!b#b#c!Mb#c#f#!b#f#g!Mb#g#h#!b#h#i!Mb#i#j#6{#j#k!Mb#k#l#!b#l#m#8Z#m~#!b~#2Y_&W`%{WOY!MbYZ!NbZ]!Mb]^!Nb^r!Mbrs# Ssu!Mbuv#!bvz!Mbz{#-r{!Q!Mb!Q!Y#3X!Y#O!Mb#O#P#/q#P~!Mb~#3`_&W`%{WOY!MbYZ!NbZ]!Mb]^!Nb^r!Mbrs# Ssu!Mbuv#!bvz!Mbz{#-r{!Q!Mb!Q!Y!Mb!Y#O!Mb#O#P#/q#P~!Mb~#4bXOz#!bz{#!n{!Q#!b!Q![#4}![!c#!b!c!i#4}!i#T#!b#T#Z#4}#Z~#!b~#5QXOz#!bz{#!n{!Q#!b!Q![#5m![!c#!b!c!i#5m!i#T#!b#T#Z#5m#Z~#!b~#5pXOz#!bz{#!n{!Q#!b!Q![#6]![!c#!b!c!i#6]!i#T#!b#T#Z#6]#Z~#!b~#6`XOz#!bz{#!n{!Q#!b!Q![#6{![!c#!b!c!i#6{!i#T#!b#T#Z#6{#Z~#!b~#7OXOz#!bz{#!n{!Q#!b!Q![#7k![!c#!b!c!i#7k!i#T#!b#T#Z#7k#Z~#!b~#7nXOz#!bz{#!n{!Q#!b!Q![#8Z![!c#!b!c!i#8Z!i#T#!b#T#Z#8Z#Z~#!b~#8^XOz#!bz{#!n{!Q#!b!Q![#8y![!c#!b!c!i#8y!i#T#!b#T#Z#8y#Z~#!b~#8|XOz#!bz{#!n{!Q#!b!Q![!Mb![!c#!b!c!i!Mb!i#T#!b#T#Z!Mb#Z~#!b~#9rZP~&W`%{WOY#9iYZ+XZ]#9i]^#:e^r#9irs#;Xsu#9iuv#<kv#O#9i#O#P#E{#P~#9i~#:lXP~&W`OY#:eYZ+XZr#:ers#;Xsu#:euv#<kv#O#:e#O#P#<v#P~#:e~#;^XP~OY#:eYZ+XZr#:ers#;ysu#:euv#<kv#O#:e#O#P#<v#P~#:e~#<OXP~OY#:eYZ+XZr#:ers#<ksu#:euv#<kv#O#:e#O#P#<v#P~#:e~#<pQP~OY#<kZ~#<k~#<{rP~OY#<kZr#<krs#:esu#<kuv#:evw#<kwx#:ex!Q#<k!Q!R#?V!R!S#?V!S!T#?V!T!U#?V!U!Y#@P!Y!w#<k!w!x#@y!x#O#<k#O#P#:e#P#T#<k#T#U#:e#U#V#:e#V#X#<k#X#Y#:e#Y#Z#:e#Z#b#<k#b#c#:e#c#f#<k#f#g#:e#g#h#<k#h#i#:e#i#j#Cc#j#k#:e#k#l#<k#l#m#Do#m~#<k~#?^ZP~&W`OY#:eYZ+XZr#:ers#;Xsu#:euv#<kv!Q#:e!Q!Y#@P!Y#O#:e#O#P#<v#P~#:e~#@WZP~&W`OY#:eYZ+XZr#:ers#;Xsu#:euv#<kv!Q#:e!Q!Y#:e!Y#O#:e#O#P#<v#P~#:e~#AOWP~OY#<kZ!Q#<k!Q![#Ah![!c#<k!c!i#Ah!i#T#<k#T#Z#Ah#Z~#<k~#AmWP~OY#<kZ!Q#<k!Q![#BV![!c#<k!c!i#BV!i#T#<k#T#Z#BV#Z~#<k~#B[WP~OY#<kZ!Q#<k!Q![#Bt![!c#<k!c!i#Bt!i#T#<k#T#Z#Bt#Z~#<k~#ByWP~OY#<kZ!Q#<k!Q![#Cc![!c#<k!c!i#Cc!i#T#<k#T#Z#Cc#Z~#<k~#ChWP~OY#<kZ!Q#<k!Q![#DQ![!c#<k!c!i#DQ!i#T#<k#T#Z#DQ#Z~#<k~#DVWP~OY#<kZ!Q#<k!Q![#Do![!c#<k!c!i#Do!i#T#<k#T#Z#Do#Z~#<k~#DtWP~OY#<kZ!Q#<k!Q![#E^![!c#<k!c!i#E^!i#T#<k#T#Z#E^#Z~#<k~#EcWP~OY#<kZ!Q#<k!Q![#:e![!c#<k!c!i#:e!i#T#<k#T#Z#:e#Z~#<k~#FQrP~OY#<kZr#<krs#9isu#<kuv#9ivw#<kwx#9ix!Q#<k!Q!R#H[!R!S#H[!S!T#H[!T!U#H[!U!Y#I^!Y!w#<k!w!x#J`!x#O#<k#O#P#9i#P#T#<k#T#U#9i#U#V#9i#V#X#<k#X#Y#9i#Y#Z#9i#Z#b#<k#b#c#9i#c#f#<k#f#g#9i#g#h#<k#h#i#9i#i#j#Lx#j#k#9i#k#l#<k#l#m#NU#m~#<k~#He]P~&W`%{WOY#9iYZ+XZ]#9i]^#:e^r#9irs#;Xsu#9iuv#<kv!Q#9i!Q!Y#I^!Y#O#9i#O#P#E{#P~#9i~#Ig]P~&W`%{WOY#9iYZ+XZ]#9i]^#:e^r#9irs#;Xsu#9iuv#<kv!Q#9i!Q!Y#9i!Y#O#9i#O#P#E{#P~#9i~#JeWP~OY#<kZ!Q#<k!Q![#J}![!c#<k!c!i#J}!i#T#<k#T#Z#J}#Z~#<k~#KSWP~OY#<kZ!Q#<k!Q![#Kl![!c#<k!c!i#Kl!i#T#<k#T#Z#Kl#Z~#<k~#KqWP~OY#<kZ!Q#<k!Q![#LZ![!c#<k!c!i#LZ!i#T#<k#T#Z#LZ#Z~#<k~#L`WP~OY#<kZ!Q#<k!Q![#Lx![!c#<k!c!i#Lx!i#T#<k#T#Z#Lx#Z~#<k~#L}WP~OY#<kZ!Q#<k!Q![#Mg![!c#<k!c!i#Mg!i#T#<k#T#Z#Mg#Z~#<k~#MlWP~OY#<kZ!Q#<k!Q![#NU![!c#<k!c!i#NU!i#T#<k#T#Z#NU#Z~#<k~#NZWP~OY#<kZ!Q#<k!Q![#Ns![!c#<k!c!i#Ns!i#T#<k#T#Z#Ns#Z~#<k~#NxWP~OY#<kZ!Q#<k!Q![#9i![!c#<k!c!i#9i!i#T#<k#T#Z#9i#Z~#<k![$ mf%pp&W`%{WbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!Gy!P!Q*b!Q![$#R![!g*b!g!h!IU!h#O*b#O#P1[#P#X*b#X#Y!IU#Y#c*b#c#d$<k#d#l*b#l#m$>g#m~*bj$#[b&W`%{WbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!Gy!P!Q*b!Q![$$d![!g*b!g!h!IU!h#O*b#O#P1[#P#X*b#X#Y!IU#Y~*bj$$mb&W`%{WbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!Gy!P!Q*b!Q![$%u![!g*b!g!h!IU!h#O*b#O#P1[#P#X*b#X#Y!IU#Y~*bj$&Oc&W`%{WbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv}*b}!O$'Z!O!P!Gy!P!Q*b!Q![$;Y![!g*b!g!h!IU!h#O*b#O#P1[#P#X*b#X#Y!IU#Y~*bj$'b[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$(W![#O*b#O#P1[#P~*bj$(_[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$)T![#O*b#O#P1[#P~*bj$)[[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv}*b}!O$*Q!O#O*b#O#P1[#P~*bj$*X[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$*}![#O*b#O#P1[#P~*bj$+U[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$+z![#O*b#O#P1[#P~*bj$,T[&W`jQ%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!v*b!v!w$,y!w#O*b#O#P1[#P~*bj$-Q[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$-v![#O*b#O#P1[#P~*bj$-}[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$.s![#O*b#O#P1[#P~*bj$.z[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv![*b![!]$/p!]#O*b#O#P1[#P~*bj$/w[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$0m![#O*b#O#P1[#P~*bj$0t[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$1j![#O*b#O#P1[#P~*bj$1q[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv![*b![!]$2g!]#O*b#O#P1[#P~*bj$2n[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$3d![#O*b#O#P1[#P~*bj$3k[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$4a![#O*b#O#P1[#P~*bj$4hb&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|$5p|}*b}!O$5p!O!Q*b!Q![$6m![!|*b!|!}$:a!}#O*b#O#P1[#P~*bj$5w[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$6m![#O*b#O#P1[#P~*bj$6t[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$7j![#O*b#O#P1[#P~*bj$7q[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv![*b![!]$8g!]#O*b#O#P1[#P~*bj$8n[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$9d![#O*b#O#P1[#P~*bj$9k[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$:a![#O*b#O#P1[#P~*bj$:jY&W`kQ%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bj$;cb&W`%{WbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!Gy!P!Q*b!Q![$;Y![!g*b!g!h!IU!h#O*b#O#P1[#P#X*b#X#Y!IU#Y~*bj$<r[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y$=h!Y#O*b#O#P1[#P~*bj$=q[&W`%{WbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y$=h!Y#O*b#O#P1[#P~*bj$>n`&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$?p![!c*b!c!i$?p!i#O*b#O#P1[#P#T*b#T#Z$?p#Z~*bj$?y`&W`%{WbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$?p![!c*b!c!i$?p!i#O*b#O#P1[#P#T*b#T#Z$?p#Z~*b![$AWb%pp&W`%{WbQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P!Gy!P!Q*b!Q![$#R![!g*b!g!h!IU!h#O*b#O#P1[#P#X*b#X#Y!IU#Y~*b!]$Bki%pp&W`%{W%jROY*bYZ+XZ]*b]^+X^r*brs+psu*bvx*bxy$DYy!`*b!`!a<Z!a!c*b!c!}%$U!}#O%%s#O#P1[#P#Q*b#Q#R%'f#R#S%({#S#T*b#T#o%$U#o4w*b4w5b%$U5b5i*b5i6S%$U6S~*bk$Da!v&W`%{WOY*bYZ+XZ]*b]^+X^q*bqr$Iwrs+psu*buv$Ljvz*bz{$Jt{|$Lu|}*b}!O$Jt!O!P$Jt!P!Q$Jt!Q![*b![!]$Mx!]!^*b!^!_$Nu!_!`$Jt!`!a%#R!a#O*b#O#P1[#P#Q*b#Q#R$Jt#R$r*b$r$s$Jt$s%o*b%o%p$Jt%p&a*b&a&b$Jt&b%#t*b%#t%#u$Jt%#u%#v*b%#v%#w$Jt%#w%%U*b%%U%%V$Jt%%V%%W*b%%W%%X$Jt%%X%%Y*b%%Y%%Z$Jt%%Z%%[*b%%[%%]$Jt%%]%&b*b%&b%&c$Jt%&c%'R*b%'R%'S$Jt%'S%'T$Jt%'T%'U$Jt%'U%'V$Jt%'V%'h*b%'h%'i$Jt%'i%'t*b%'t%'u$Jt%'u%(^*b%(^%(_$Jt%(_%(`$Jt%(`%(a$Jt%(a%(b*b%(b%(c$Jt%(c%(d$Jt%(d%(x*b%(x%(y$Jt%(y%(z$Jt%(z%({$Jt%({%(|$Jt%(|%)Q*b%)Q%)R$Jt%)R%)S$Jt%)S%)U*b%)U%)V$Jt%)V%)W$Jt%)W%)c*b%)c%)d$Jt%)d%)e$Jt%)e%)f$Jt%)f%)g*b%)g%)h$Jt%)h%)i*b%)i%)j$Jt%)j%*]*b%*]%*^$Jt%*^~*bk$JO[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!_*b!_!`$Jt!`#O*b#O#P1[#P~*bk$J{[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bvy*byz$Kqz#O*b#O#P1[#P~*bk$KzY!nR&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bR$LmPyz$LpR$LuO!nRk$L|^&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bvy*byz$Kqz{*b{|$Mx|#O*b#O#P1[#P~*bk$NP[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!`*b!`!a$Jt!a#O*b#O#P1[#P~*bk$N|b&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bvy*byz$Kqz{*b{|%!U|![*b![!]$Jt!]!_*b!_!`$Jt!`#O*b#O#P1[#P~*bk%!][&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|$Jt|#O*b#O#P1[#P~*bk%#Y^&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bvy*byz$Kqz!_*b!_!`$Jt!`#O*b#O#P1[#P~*bk%$_f!nR&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%$U![!c*b!c!}%$U!}#O*b#O#P1[#P#R*b#R#S%$U#S#T*b#T#o%$U#o4w*b4w5b%$U5b5i*b5i6S%$U6S~*bj%%zZ&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P#Q%&m#Q~*bj%&vY%nQ&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bk%'md&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!c*b!c!}%$U!}#O*b#O#P1[#P#R*b#R#S%({#S#T*b#T#o%$U#o4w*b4w5b%$U5b5i*b5i6S%$U6S~*bk%)Sf&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%$U![!c*b!c!}%$U!}#O*b#O#P1[#P#R*b#R#S%$U#S#T*b#T#o%$U#o4w*b4w5b%$U5b5i*b5i6S%$U6S~*b!]%*sY&PR%pp&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b![%+n`%pp&W`%{W!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|%,p|![*b![!]<Z!]!_*b!_!`<Z!`#O*b#O#P1[#P~*bj%,w[&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|<Z|#O*b#O#P1[#P~*b!]%-zY&XP%pp&W`%{W!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b![%.u[%pp&W`%{W!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!_*b!_!`<Z!`#O*b#O#P1[#P~*b!]%/vY%fR%pp&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!a%0sf%pp%lSUR&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%2X![!c*b!c!}%2X!}#O*b#O#P1[#P#R*b#R#S%2X#S#T*b#T#o%2X#o4w*b4w5b%2X5b5i*b5i6S%2X6S~*bo%2df%lSUR&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%2X![!c*b!c!}%2X!}#O*b#O#P1[#P#R*b#R#S%2X#S#T*b#T#o%2X#o4w*b4w5b%2X5b5i*b5i6S%2X6S~*b!]%4TY%zR%pp&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!Y%4xd%pprs*buv*bwx*b!Q!R2m!R!S2m!S!T2m!T!U2m!U!Y3j!w!x4g#O#P*b#T#U*b#U#V*b#X#Y*b#Y#Z*b#b#c*b#f#g*b#h#i*b#i#j5i#j#k*b#l#m6R!]%6cY%yR%pp&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!a%7`d%kS%pp&W`%{W!fQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!c*b!c!}%8n!}#O*b#O#P1[#P#R*b#R#S%:]#S#T*b#T#o%8n#o4w*b4w5b%8n5b5i*b5i6S%8n6S~*bk%8wfUR&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%8n![!c*b!c!}%8n!}#O*b#O#P1[#P#R*b#R#S%8n#S#T*b#T#o%8n#o4w*b4w5b%8n5b5i*b5i6S%8n6S~*bk%:df&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%8n![!c*b!c!}%8n!}#O*b#O#P1[#P#R*b#R#S%8n#S#T*b#T#o%8n#o4w*b4w5b%8n5b5i*b5i6S%8n6S~*b!a%<Tf%pp%mU&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%2X![!c*b!c!}%2X!}#O*b#O#P1[#P#R*b#R#S%2X#S#T*b#T#o%2X#o4w*b4w5b%2X5b5i*b5i6S%2X6S~*b!a%=vg%pp%lSUR&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%2X![!c*b!c!}%2X!}#O*b#O#P1[#P#R*b#R#S%2X#S#T*b#T#U%?_#U#o%2X#o4w*b4w5b%2X5b5i*b5i6S%2X6S~*bo%?jh%lSUR&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%2X![!c*b!c!}%2X!}#O*b#O#P1[#P#R*b#R#S%2X#S#T*b#T#`%2X#`#a%AU#a#o%2X#o4w*b4w5b%2X5b5i*b5i6S%2X6S~*bo%Aah%lSUR&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%2X![!c*b!c!}%2X!}#O*b#O#P1[#P#R*b#R#S%2X#S#T*b#T#g%2X#g#h%B{#h#o%2X#o4w*b4w5b%2X5b5i*b5i6S%2X6S~*bo%CWh%lSUR&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%2X![!c*b!c!}%2X!}#O*b#O#P1[#P#R*b#R#S%2X#S#T*b#T#X%2X#X#Y%Dr#Y#o%2X#o4w*b4w5b%2X5b5i*b5i6S%2X6S~*bo%EPf%lS!sQUR&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%2X![!c*b!c!}%2X!}#O*b#O#P1[#P#R*b#R#S%2X#S#T*b#T#o%2X#o4w*b4w5b%2X5b5i*b5i6S%2X6S~*b!a%Frh%pp%lSUR&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%2X![!c*b!c!}%2X!}#O*b#O#P1[#P#R*b#R#S%2X#S#T*b#T#f%2X#f#g%H^#g#o%2X#o4w*b4w5b%2X5b5i*b5i6S%2X6S~*bo%Hih%lSUR&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%2X![!c*b!c!}%2X!}#O*b#O#P1[#P#R*b#R#S%2X#S#T*b#T#i%2X#i#j%B{#j#o%2X#o4w*b4w5b%2X5b5i*b5i6S%2X6S~*b!]%J`Y&SR%pp&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!]%KZY&QR%pp&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!]%LUY&TR%pp&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b~%MPY%pp%d~&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b![%MzY&UQ%pp&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b![%NuY&VQ%pp&W`%{WOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b",
  tokenizers: [0, 1, 2, 3, 4, 5],
  topRules: {"Rel":[0,3]},
  dynamicPrecedences: {"224":1},
  specialized: [{term: 6, get: value => spec_BasicId[value] || -1},{term: 68, get: value => spec_Operator[value] || -1}],
  tokenPrec: 12723
});

const autocompleteList = [
    { label: "Any", type: "type" },
    { label: "AutoNumber", type: "type" },
    { label: "Boolean", type: "type" },
    { label: "Char", type: "type" },
    { label: "Day", type: "type" },
    { label: "Date", type: "type" },
    { label: "DateTime", type: "type" },
    { label: "Year", type: "type" },
    { label: "Month", type: "type" },
    { label: "Week", type: "type" },
    { label: "Hour", type: "type" },
    { label: "Minute", type: "type" },
    { label: "Second", type: "type" },
    { label: "Millisecond", type: "type" },
    { label: "Microsecond", type: "type" },
    { label: "Nanosecond", type: "type" },
    { label: "Entity", type: "type" },
    { label: "Int", type: "type" },
    { label: "Number", type: "type" },
    { label: "Missing", type: "type" },
    { label: "Floating", type: "type" },
    { label: "UnsignedInt", type: "type" },
    { label: "SignedInt", type: "type" },
    { label: "Rational", type: "type" },
    { label: "FixedDecimal", type: "type" },
    { label: "Hash", type: "type" },
    { label: "FilePos", type: "type" },
    { label: "String", type: "type" },
    { label: "def", type: "keyword" },
    { label: "output", type: "interface" },
    { label: "insert", type: "interface" },
    { label: "delete", type: "interface" },
    { label: "export", type: "interface" },
    { label: "from", type: "keyword" },
    { label: "if", type: "keyword" },
    { label: "iff", type: "keyword" },
    { label: "then", type: "keyword" },
    { label: "else", type: "keyword" },
    { label: "end", type: "keyword" },
    { label: "exists", type: "keyword" },
    { label: "where", type: "keyword" },
    { label: "with", type: "keyword" },
    { label: "select", type: "keyword" },
    { label: "implies", type: "keyword" },
    { label: "use", type: "keyword" },
    { label: "forall", type: "keyword" },
    { label: "in", type: "keyword" },
    { label: "ic", type: "keyword" },
    { label: "not", type: "keyword" },
    { label: "and", type: "keyword" },
    { label: "or", type: "keyword" },
    { label: "xor", type: "keyword" },
    { label: "union", type: "keyword" },
    { label: "_flatten", type: "function" },
    { label: "abelian_group", type: "function" },
    { label: "abs", type: "function" },
    { label: "absorption_laws", type: "function" },
    { label: "acos", type: "function" },
    { label: "acosh", type: "function" },
    { label: "acot", type: "function" },
    { label: "add", type: "function" },
    { label: "antisymmetric", type: "function" },
    { label: "approximate_abelian_group", type: "function" },
    { label: "approximate_commutative_monoid", type: "function" },
    { label: "approximate_group", type: "function" },
    { label: "approximate_monoid", type: "function" },
    { label: "approximate_ring", type: "function" },
    { label: "approximate_semiring", type: "function" },
    { label: "approximately_associative", type: "function" },
    { label: "approximately_commutative", type: "function" },
    { label: "approximately_distributive", type: "function" },
    { label: "approximately_has_inverse", type: "function" },
    { label: "approximately_left_distributive", type: "function" },
    { label: "approximately_right_distributive", type: "function" },
    { label: "approximately_zero_annihilation", type: "function" },
    { label: "argmax", type: "function" },
    { label: "argmin", type: "function" },
    { label: "arity", type: "function" },
    { label: "asin", type: "function" },
    { label: "asinh", type: "function" },
    { label: "associative", type: "function" },
    { label: "atan", type: "function" },
    { label: "atanh", type: "function" },
    { label: "auto_number", type: "function" },
    { label: "binary_operator", type: "function" },
    { label: "binary_relation", type: "function" },
    { label: "binary_relation_substitution_laws", type: "function" },
    { label: "bitwise_and", type: "function" },
    { label: "bitwise_left_shift", type: "function" },
    { label: "bitwise_not", type: "function" },
    { label: "bitwise_or", type: "function" },
    { label: "bitwise_right_shift", type: "function" },
    { label: "bitwise_unsigned_right_shift", type: "function" },
    { label: "bitwise_xor", type: "function" },
    { label: "boolean_and", type: "function" },
    { label: "boolean_false", type: "function" },
    { label: "boolean_not", type: "function" },
    { label: "boolean_or", type: "function" },
    { label: "boolean_true", type: "function" },
    { label: "bottom", type: "function" },
    { label: "bounded_lattice", type: "function" },
    { label: "bounded_semilattice", type: "function" },
    { label: "byte", type: "function" },
    { label: "capture_group_by_index", type: "function" },
    { label: "capture_group_by_name", type: "function" },
    { label: "cart", type: "function" },
    { label: "cbrt", type: "function" },
    { label: "ceil", type: "function" },
    { label: "char", type: "function" },
    { label: "clamp", type: "function" },
    { label: "commutative", type: "function" },
    { label: "commutative_monoid", type: "function" },
    { label: "comparable", type: "function" },
    { label: "complement", type: "function" },
    { label: "concat", type: "function" },
    { label: "cos", type: "function" },
    { label: "cosh", type: "function" },
    { label: "cot", type: "function" },
    { label: "count", type: "function" },
    { label: "date_add", type: "function" },
    { label: "date_day", type: "function" },
    { label: "date_dayname", type: "function" },
    { label: "date_dayofquarter", type: "function" },
    { label: "date_dayofweek", type: "function" },
    { label: "date_dayofweekofmonth", type: "function" },
    { label: "date_dayofyear", type: "function" },
    { label: "date_daysinmonth", type: "function" },
    { label: "date_isleapyear", type: "function" },
    { label: "date_month", type: "function" },
    { label: "date_monthname", type: "function" },
    { label: "date_quarterofyear", type: "function" },
    { label: "date_subtract", type: "function" },
    { label: "date_week", type: "function" },
    { label: "date_year", type: "function" },
    { label: "dates_period_days", type: "function" },
    { label: "datetime_add", type: "function" },
    { label: "datetime_day", type: "function" },
    { label: "datetime_day_", type: "function" },
    { label: "datetime_dayname", type: "function" },
    { label: "datetime_dayofquarter", type: "function" },
    { label: "datetime_dayofweek", type: "function" },
    { label: "datetime_dayofweekofmonth", type: "function" },
    { label: "datetime_dayofyear", type: "function" },
    { label: "datetime_daysinmonth", type: "function" },
    { label: "datetime_hour", type: "function" },
    { label: "datetime_hour_", type: "function" },
    { label: "datetime_isleapyear", type: "function" },
    { label: "datetime_minute", type: "function" },
    { label: "datetime_minute_", type: "function" },
    { label: "datetime_month", type: "function" },
    { label: "datetime_month_", type: "function" },
    { label: "datetime_monthname", type: "function" },
    { label: "datetime_now", type: "function" },
    { label: "datetime_quarterofyear", type: "function" },
    { label: "datetime_second", type: "function" },
    { label: "datetime_subtract", type: "function" },
    { label: "datetime_to_nanoseconds", type: "function" },
    { label: "datetime_week", type: "function" },
    { label: "datetime_week_", type: "function" },
    { label: "datetime_year", type: "function" },
    { label: "datetime_year_", type: "function" },
    { label: "datetimes_period_milliseconds", type: "function" },
    { label: "decimal", type: "function" },
    { label: "decimal_bit_length", type: "function" },
    { label: "decimal_int_convert", type: "function" },
    { label: "decimal_precision", type: "function" },
    { label: "decode_base", type: "function" },
    { label: "default_value", type: "function" },
    { label: "deg", type: "function" },
    { label: "denominator", type: "function" },
    { label: "describe", type: "function" },
    { label: "diff", type: "function" },
    { label: "disjoint", type: "function" },
    { label: "distributive", type: "function" },
    { label: "divide", type: "function" },
    { label: "docstring", type: "function" },
    { label: "domain", type: "function" },
    { label: "dot_join", type: "function" },
    { label: "double_metaphone", type: "function" },
    { label: "empty", type: "function" },
    { label: "encode_base", type: "function" },
    { label: "epoch_milliseconds", type: "function" },
    { label: "eq", type: "function" },
    { label: "equal", type: "function" },
    { label: "equivalence_relation", type: "function" },
    { label: "erf", type: "function" },
    { label: "erfinv", type: "function" },
    { label: "escape_regex_metachars", type: "function" },
    { label: "export_csv", type: "function" },
    { label: "export_json", type: "function" },
    { label: "factorial", type: "function" },
    { label: "filepos", type: "function" },
    { label: "filepos_value", type: "function" },
    { label: "first", type: "function" },
    { label: "float", type: "function" },
    { label: "float_int_convert", type: "function" },
    { label: "floor", type: "function" },
    { label: "floor_divide", type: "function" },
    { label: "floor_to_int", type: "function" },
    { label: "format_date", type: "function" },
    { label: "format_datetime", type: "function" },
    { label: "formula_card_est", type: "function" },
    { label: "frequency", type: "function" },
    { label: "function", type: "function" },
    { label: "geometric_mean", type: "function" },
    { label: "glm_generic", type: "function" },
    { label: "glm_linear_regression", type: "function" },
    { label: "glm_logistic_regression", type: "function" },
    { label: "glm_predict", type: "function" },
    { label: "glm_probit_regression", type: "function" },
    { label: "graphviz", type: "function" },
    { label: "group", type: "function" },
    { label: "gt", type: "function" },
    { label: "gt_eq", type: "function" },
    { label: "harmonic_mean", type: "function" },
    { label: "has_identity", type: "function" },
    { label: "has_left_identity", type: "function" },
    { label: "has_left_zero", type: "function" },
    { label: "has_maximal_element", type: "function" },
    { label: "has_minimal_element", type: "function" },
    { label: "has_right_identity", type: "function" },
    { label: "has_right_zero", type: "function" },
    { label: "hash", type: "function" },
    { label: "hash_value_uint", type: "function" },
    { label: "haversine", type: "function" },
    { label: "help", type: "function" },
    { label: "html", type: "function" },
    { label: "ic", type: "function" },
    { label: "idempotent", type: "function" },
    { label: "identity", type: "function" },
    { label: "int", type: "function" },
    { label: "int_float_convert", type: "function" },
    { label: "int_spread_by_even", type: "function" },
    { label: "int_spread_by_ratio", type: "function" },
    { label: "intersect", type: "function" },
    { label: "irreflexive", type: "function" },
    { label: "is_", type: "function" },
    { label: "jacobian", type: "function" },
    { label: "join_bounded_lattice", type: "function" },
    { label: "last", type: "function" },
    { label: "lattice", type: "function" },
    { label: "left_distributive", type: "function" },
    { label: "left_identity", type: "function" },
    { label: "left_override", type: "function" },
    { label: "left_zero", type: "function" },
    { label: "levenshtein", type: "function" },
    { label: "like_match", type: "function" },
    { label: "linear_regression", type: "function" },
    { label: "linear_regression_objective", type: "function" },
    { label: "linear_regression_predict", type: "function" },
    { label: "lined_csv", type: "function" },
    { label: "load_csv", type: "function" },
    { label: "load_csv_row_wise", type: "function" },
    { label: "load_json", type: "function" },
    { label: "log", type: "function" },
    { label: "log_card_est", type: "function" },
    { label: "lowercase", type: "function" },
    { label: "lr_random_initial_point", type: "function" },
    { label: "lt", type: "function" },
    { label: "lt_eq", type: "function" },
    { label: "mae", type: "function" },
    { label: "markdown", type: "function" },
    { label: "max", type: "function" },
    { label: "max_k", type: "function" },
    { label: "maximal_element", type: "function" },
    { label: "maximum", type: "function" },
    { label: "mean", type: "function" },
    { label: "mean_normalization", type: "function" },
    { label: "median", type: "function" },
    { label: "meet_bounded_lattice", type: "function" },
    { label: "metaphone", type: "function" },
    { label: "min", type: "function" },
    { label: "min_k", type: "function" },
    { label: "min_max_normalization", type: "function" },
    { label: "minimal_element", type: "function" },
    { label: "minimize_initial_point", type: "function" },
    { label: "minimum", type: "function" },
    { label: "missing", type: "function" },
    { label: "mlpack_adaboost", type: "function" },
    { label: "mlpack_adaboost_predict", type: "function" },
    { label: "mlpack_approx_kfn", type: "function" },
    { label: "mlpack_approx_kfn_build", type: "function" },
    { label: "mlpack_dbscan", type: "function" },
    { label: "mlpack_decision_tree", type: "function" },
    { label: "mlpack_decision_tree_predict", type: "function" },
    { label: "mlpack_det", type: "function" },
    { label: "mlpack_det_build", type: "function" },
    { label: "mlpack_emst", type: "function" },
    { label: "mlpack_fastmks", type: "function" },
    { label: "mlpack_fastmks_build", type: "function" },
    { label: "mlpack_gmm_generate", type: "function" },
    { label: "mlpack_gmm_probability", type: "function" },
    { label: "mlpack_gmm_train", type: "function" },
    { label: "mlpack_hoeffding_tree", type: "function" },
    { label: "mlpack_hoeffding_tree_predict", type: "function" },
    { label: "mlpack_kernel_pca", type: "function" },
    { label: "mlpack_kfn", type: "function" },
    { label: "mlpack_kfn_build", type: "function" },
    { label: "mlpack_kmeans", type: "function" },
    { label: "mlpack_kmeans_centroids", type: "function" },
    { label: "mlpack_knn", type: "function" },
    { label: "mlpack_knn_build", type: "function" },
    { label: "mlpack_krann", type: "function" },
    { label: "mlpack_krann_build", type: "function" },
    { label: "mlpack_lars", type: "function" },
    { label: "mlpack_lars_predict", type: "function" },
    { label: "mlpack_linear_regression", type: "function" },
    { label: "mlpack_linear_regression_predict", type: "function" },
    { label: "mlpack_linear_svm", type: "function" },
    { label: "mlpack_linear_svm_predict", type: "function" },
    { label: "mlpack_logistic_regression", type: "function" },
    { label: "mlpack_logistic_regression_predict", type: "function" },
    { label: "mlpack_lsh", type: "function" },
    { label: "mlpack_lsh_build", type: "function" },
    { label: "mlpack_mean_shift", type: "function" },
    { label: "mlpack_nbc", type: "function" },
    { label: "mlpack_nbc_predict", type: "function" },
    { label: "mlpack_nmf", type: "function" },
    { label: "mlpack_pca", type: "function" },
    { label: "mlpack_perceptron", type: "function" },
    { label: "mlpack_perceptron_predict", type: "function" },
    { label: "mlpack_preprocess_split", type: "function" },
    { label: "mlpack_radical", type: "function" },
    { label: "mlpack_random_forest", type: "function" },
    { label: "mlpack_random_forest_predict", type: "function" },
    { label: "mlpack_softmax_regression", type: "function" },
    { label: "mlpack_softmax_regression_predict", type: "function" },
    { label: "mode", type: "function" },
    { label: "modulo", type: "function" },
    { label: "monoid", type: "function" },
    { label: "mse", type: "function" },
    { label: "multiply", type: "function" },
    { label: "murmurhash", type: "function" },
    { label: "nanoseconds_to_datetime", type: "function" },
    { label: "natural_exp", type: "function" },
    { label: "natural_log", type: "function" },
    { label: "neq", type: "function" },
    { label: "not", type: "function" },
    { label: "nullary_relation", type: "function" },
    { label: "num_bytes", type: "function" },
    { label: "num_chars", type: "function" },
    { label: "numerator", type: "function" },
    { label: "pack", type: "function" },
    { label: "parse_date", type: "function" },
    { label: "parse_datetime", type: "function" },
    { label: "parse_decimal", type: "function" },
    { label: "parse_float", type: "function" },
    { label: "parse_int", type: "function" },
    { label: "parse_json", type: "function" },
    { label: "parse_uuid", type: "function" },
    { label: "partial_order", type: "function" },
    { label: "partial_order_and_bounded_lattice", type: "function" },
    { label: "partial_order_and_join_bounded_lattice", type: "function" },
    { label: "partial_order_and_lattice", type: "function" },
    { label: "partial_order_and_meet_bounded_lattice", type: "function" },
    { label: "pattern_match", type: "function" },
    { label: "percentile", type: "function" },
    { label: "percentile_nearest", type: "function" },
    { label: "period_add", type: "function" },
    { label: "period_day_to_int", type: "function" },
    { label: "period_max", type: "function" },
    { label: "period_min", type: "function" },
    { label: "pi_float", type: "function" },
    { label: "pivot", type: "function" },
    { label: "pop_standard_deviation", type: "function" },
    { label: "pop_variance", type: "function" },
    { label: "pop_zscore_normalization", type: "function" },
    { label: "power", type: "function" },
    { label: "prefix_join", type: "function" },
    { label: "preorder", type: "function" },
    { label: "product", type: "function" },
    { label: "proper_subset", type: "function" },
    { label: "proper_superset", type: "function" },
    { label: "rad", type: "function" },
    { label: "random_mersenne_twister", type: "function" },
    { label: "random_threefry_float", type: "function" },
    { label: "random_threefry_uint", type: "function" },
    { label: "random_uint", type: "function" },
    { label: "range", type: "function" },
    { label: "rational", type: "function" },
    { label: "rational_convert", type: "function" },
    { label: "reflexive", type: "function" },
    { label: "regex_compile", type: "function" },
    { label: "regex_match", type: "function" },
    { label: "regex_match_all", type: "function" },
    { label: "rel", type: "function" },
    { label: "relname_string", type: "function" },
    { label: "remainder", type: "function" },
    { label: "reverse_sort", type: "function" },
    { label: "right_distributive", type: "function" },
    { label: "right_identity", type: "function" },
    { label: "right_override", type: "function" },
    { label: "right_zero", type: "function" },
    { label: "ring", type: "function" },
    { label: "rmse", type: "function" },
    { label: "round", type: "function" },
    { label: "sample_standard_deviation", type: "function" },
    { label: "sample_variance", type: "function" },
    { label: "sample_zscore_normalization", type: "function" },
    { label: "second", type: "function" },
    { label: "semilattice", type: "function" },
    { label: "semiring", type: "function" },
    { label: "sign", type: "function" },
    { label: "sin", type: "function" },
    { label: "sinh", type: "function" },
    { label: "sort", type: "function" },
    { label: "soundex", type: "function" },
    { label: "spread", type: "function" },
    { label: "sqrt", type: "function" },
    { label: "squared", type: "function" },
    { label: "squared_deviation", type: "function" },
    { label: "strict_partial_order", type: "function" },
    { label: "strict_total_order", type: "function" },
    { label: "string", type: "function" },
    { label: "string_join", type: "function" },
    { label: "string_length", type: "function" },
    { label: "string_replace", type: "function" },
    { label: "string_replace_multiple", type: "function" },
    { label: "string_split", type: "function" },
    { label: "string_trim", type: "function" },
    { label: "subset", type: "function" },
    { label: "substring", type: "function" },
    { label: "substring_bytes", type: "function" },
    { label: "subtract", type: "function" },
    { label: "suffix_join", type: "function" },
    { label: "sum", type: "function" },
    { label: "sum_int", type: "function" },
    { label: "superset", type: "function" },
    { label: "svg", type: "function" },
    { label: "symmetric", type: "function" },
    { label: "table", type: "function" },
    { label: "tan", type: "function" },
    { label: "tanh", type: "function" },
    { label: "ternary_relation", type: "function" },
    { label: "top", type: "function" },
    { label: "total", type: "function" },
    { label: "total_order", type: "function" },
    { label: "transitive", type: "function" },
    { label: "transpose", type: "function" },
    { label: "trunc", type: "function" },
    { label: "trunc_divide", type: "function" },
    { label: "trunc_to_int", type: "function" },
    { label: "uint", type: "function" },
    { label: "unary_operator", type: "function" },
    { label: "unary_relation", type: "function" },
    { label: "unary_relation_substitution_laws", type: "function" },
    { label: "union", type: "function" },
    { label: "unit_normalization", type: "function" },
    { label: "unix_epoch", type: "function" },
    { label: "unpack", type: "function" },
    { label: "uppercase", type: "function" },
    { label: "uuid_string", type: "function" },
    { label: "vega", type: "function" },
    { label: "vegalite", type: "function" },
    { label: "vegalite_utils", type: "function" },
    { label: "view_json", type: "function" },
    { label: "weighted_mean", type: "function" },
    { label: "xgboost_classifier", type: "function" },
    { label: "xgboost_classifier_predict", type: "function" },
    { label: "xgboost_classifier_probabilities", type: "function" },
    { label: "xgboost_feature_importances", type: "function" },
    { label: "xgboost_regressor", type: "function" },
    { label: "xgboost_regressor_predict", type: "function" },
    { label: "zero_annihilation", type: "function" },
    { label: "zero_of_operator", type: "function" },
    { label: "zip", type: "function" },
    { label: "registered", type: "variable", info: "Registered Sign / Registered Trade Mark Sign", apply: "®" },
    { label: "degree", type: "variable", info: "Degree Sign", apply: "°" },
    { label: "pm", type: "variable", info: "Plus-Minus Sign / Plus-Or-Minus Sign", apply: "±" },
    { label: "\\^2", info: "Superscript Two / Superscript Digit Two", apply: "²" },
    { label: "\\^3", info: "Superscript Three / Superscript Digit Three", apply: "³" },
    { label: "\\^1", info: "Superscript One / Superscript Digit One", apply: "¹" },
    { label: "\\1/4", type: "variable", info: "Vulgar Fraction One Quarter / Fraction One Quarter", apply: "¼" },
    { label: "\\1/2", type: "variable", info: "Vulgar Fraction One Half / Fraction One Half", apply: "½" },
    { label: "\\3/4", type: "variable", info: "Vulgar Fraction Three Quarters / Fraction Three Quarters", apply: "¾" },
    { label: "\\questiondown", type: "variable", info: "Inverted Question Mark", apply: "¿" },
    { label: "\\times", type: "variable", info: "Multiplication Sign", apply: "×" },
    { label: "\\div", type: "variable", info: "Division Sign", apply: "÷" },
    { label: "\\Alpha", type: "variable", info: "Greek Capital Letter Alpha", apply: "Α" },
    { label: "\\Beta", type: "variable", info: "Greek Capital Letter Beta", apply: "Β" },
    { label: "\\Gamma", type: "variable", info: "Greek Capital Letter Gamma", apply: "Γ" },
    { label: "\\Delta", type: "variable", info: "Greek Capital Letter Delta", apply: "Δ" },
    { label: "\\Epsilon", type: "variable", info: "Greek Capital Letter Epsilon", apply: "Ε" },
    { label: "\\Zeta", type: "variable", info: "Greek Capital Letter Zeta", apply: "Ζ" },
    { label: "\\Eta", type: "variable", info: "Greek Capital Letter Eta", apply: "Η" },
    { label: "\\Theta", type: "variable", info: "Greek Capital Letter Theta", apply: "Θ" },
    { label: "\\Iota", type: "variable", info: "Greek Capital Letter Iota", apply: "Ι" },
    { label: "\\Kappa", type: "variable", info: "Greek Capital Letter Kappa", apply: "Κ" },
    { label: "\\Lambda", type: "variable", info: "Greek Capital Letter Lamda / Greek Capital Letter Lambda", apply: "Λ" },
    { label: "\\upMu", type: "variable", info: "Greek Capital Letter Mu", apply: "Μ" },
    { label: "\\upNu", type: "variable", info: "Greek Capital Letter Nu", apply: "Ν" },
    { label: "\\Xi", type: "variable", info: "Greek Capital Letter Xi", apply: "Ξ" },
    { label: "\\upOmicron", type: "variable", info: "Greek Capital Letter Omicron", apply: "Ο" },
    { label: "\\Pi", type: "variable", info: "Greek Capital Letter Pi", apply: "Π" },
    { label: "\\Rho", type: "variable", info: "Greek Capital Letter Rho", apply: "Ρ" },
    { label: "\\Sigma", type: "variable", info: "Greek Capital Letter Sigma", apply: "Σ" },
    { label: "\\Tau", type: "variable", info: "Greek Capital Letter Tau", apply: "Τ" },
    { label: "\\Upsilon", type: "variable", info: "Greek Capital Letter Upsilon", apply: "Υ" },
    { label: "\\Phi", type: "variable", info: "Greek Capital Letter Phi", apply: "Φ" },
    { label: "\\Chi", type: "variable", info: "Greek Capital Letter Chi", apply: "Χ" },
    { label: "\\Psi", type: "variable", info: "Greek Capital Letter Psi", apply: "Ψ" },
    { label: "\\Omega", type: "variable", info: "Greek Capital Letter Omega", apply: "Ω" },
    { label: "\\alpha", type: "variable", info: "Greek Small Letter Alpha", apply: "α" },
    { label: "\\beta", type: "variable", info: "Greek Small Letter Beta", apply: "β" },
    { label: "\\gamma", type: "variable", info: "Greek Small Letter Gamma", apply: "γ" },
    { label: "\\delta", type: "variable", info: "Greek Small Letter Delta", apply: "δ" },
    { label: "\\varepsilon", type: "variable", info: "Greek Small Letter Epsilon", apply: "ε" },
    { label: "\\zeta", type: "variable", info: "Greek Small Letter Zeta", apply: "ζ" },
    { label: "\\eta", type: "variable", info: "Greek Small Letter Eta", apply: "η" },
    { label: "\\theta", type: "variable", info: "Greek Small Letter Theta", apply: "θ" },
    { label: "\\iota", type: "variable", info: "Greek Small Letter Iota", apply: "ι" },
    { label: "\\kappa", type: "variable", info: "Greek Small Letter Kappa", apply: "κ" },
    { label: "\\lambda", type: "variable", info: "Greek Small Letter Lamda / Greek Small Letter Lambda", apply: "λ" },
    { label: "\\mu", type: "variable", info: "Greek Small Letter Mu", apply: "μ" },
    { label: "\\nu", type: "variable", info: "Greek Small Letter Nu", apply: "ν" },
    { label: "\\xi", type: "variable", info: "Greek Small Letter Xi", apply: "ξ" },
    { label: "\\upomicron", type: "variable", info: "Greek Small Letter Omicron", apply: "ο" },
    { label: "\\pi", type: "variable", info: "Greek Small Letter Pi", apply: "π" },
    { label: "\\rho", type: "variable", info: "Greek Small Letter Rho", apply: "ρ" },
    { label: "\\varsigma", type: "variable", info: "Greek Small Letter Final Sigma", apply: "ς" },
    { label: "\\sigma", type: "variable", info: "Greek Small Letter Sigma", apply: "σ" },
    { label: "\\tau", type: "variable", info: "Greek Small Letter Tau", apply: "τ" },
    { label: "\\upsilon", type: "variable", info: "Greek Small Letter Upsilon", apply: "υ" },
    { label: "\\varphi", type: "variable", info: "Greek Small Letter Phi", apply: "φ" },
    { label: "\\chi", type: "variable", info: "Greek Small Letter Chi", apply: "χ" },
    { label: "\\psi", type: "variable", info: "Greek Small Letter Psi", apply: "ψ" },
    { label: "\\omega", type: "variable", info: "Greek Small Letter Omega", apply: "ω" },
    { label: "\\upvarbeta", type: "variable", info: "Greek Beta Symbol / Greek Small Letter Curled Beta", apply: "ϐ" },
    { label: "\\vartheta", type: "variable", info: "Greek Theta Symbol / Greek Small Letter Script Theta", apply: "ϑ" },
    { label: "\\phi", type: "variable", info: "Greek Phi Symbol / Greek Small Letter Script Phi", apply: "ϕ" },
    { label: "\\varpi", type: "variable", info: "Greek Pi Symbol / Greek Small Letter Omega Pi", apply: "ϖ" },
    { label: "\\upoldKoppa", type: "variable", info: "Greek Letter Archaic Koppa", apply: "Ϙ" },
    { label: "\\upoldkoppa", type: "variable", info: "Greek Small Letter Archaic Koppa", apply: "ϙ" },
    { label: "\\Stigma", type: "variable", info: "Greek Letter Stigma / Greek Capital Letter Stigma", apply: "Ϛ" },
    { label: "\\upstigma", type: "variable", info: "Greek Small Letter Stigma", apply: "ϛ" },
    { label: "\\Digamma", type: "variable", info: "Greek Letter Digamma / Greek Capital Letter Digamma", apply: "Ϝ" },
    { label: "\\digamma", type: "variable", info: "Greek Small Letter Digamma", apply: "ϝ" },
    { label: "\\Koppa", type: "variable", info: "Greek Letter Koppa / Greek Capital Letter Koppa", apply: "Ϟ" },
    { label: "\\upkoppa", type: "variable", info: "Greek Small Letter Koppa", apply: "ϟ" },
    { label: "\\Sampi", type: "variable", info: "Greek Letter Sampi / Greek Capital Letter Sampi", apply: "Ϡ" },
    { label: "\\upsampi", type: "variable", info: "Greek Small Letter Sampi", apply: "ϡ" },
    { label: "\\varkappa", type: "variable", info: "Greek Kappa Symbol / Greek Small Letter Script Kappa", apply: "ϰ" },
    { label: "\\varrho", type: "variable", info: "Greek Rho Symbol / Greek Small Letter Tailed Rho", apply: "ϱ" },
    { label: "\\varTheta", type: "variable", info: "Greek Capital Theta Symbol", apply: "ϴ" },
    { label: "\\epsilon", type: "variable", info: "Greek Lunate Epsilon Symbol", apply: "ϵ" },
    { label: "\\backepsilon", type: "variable", info: "Greek Reversed Lunate Epsilon Symbol", apply: "϶" },
    { label: "\\^0", info: "Superscript Zero / Superscript Digit Zero", apply: "⁰" },
    { label: "\\^i", info: "Superscript Latin Small Letter I", apply: "ⁱ" },
    { label: "\\^4", info: "Superscript Four / Superscript Digit Four", apply: "⁴" },
    { label: "\\^5", info: "Superscript Five / Superscript Digit Five", apply: "⁵" },
    { label: "\\^6", info: "Superscript Six / Superscript Digit Six", apply: "⁶" },
    { label: "\\^7", info: "Superscript Seven / Superscript Digit Seven", apply: "⁷" },
    { label: "\\^8", info: "Superscript Eight / Superscript Digit Eight", apply: "⁸" },
    { label: "\\^9", info: "Superscript Nine / Superscript Digit Nine", apply: "⁹" },
    { label: "\\^+", info: "Superscript Plus Sign", apply: "⁺" },
    { label: "\\^-", info: "Superscript Minus / Superscript Hyphen-Minus", apply: "⁻" },
    { label: "\\^=", info: "Superscript Equals Sign", apply: "⁼" },
    { label: "\\^(", info: "Superscript Left Parenthesis / Superscript Opening Parenthesis", apply: "⁽" },
    { label: "\\^)", info: "Superscript Right Parenthesis / Superscript Closing Parenthesis", apply: "⁾" },
    { label: "\\^n", info: "Superscript Latin Small Letter N", apply: "ⁿ" },
    { label: "\\_0", type: "variable", info: "Subscript Zero / Subscript Digit Zero", apply: "₀" },
    { label: "\\_1", type: "variable", info: "Subscript One / Subscript Digit One", apply: "₁" },
    { label: "\\_2", type: "variable", info: "Subscript Two / Subscript Digit Two", apply: "₂" },
    { label: "\\_3", type: "variable", info: "Subscript Three / Subscript Digit Three", apply: "₃" },
    { label: "\\_4", type: "variable", info: "Subscript Four / Subscript Digit Four", apply: "₄" },
    { label: "\\_5", type: "variable", info: "Subscript Five / Subscript Digit Five", apply: "₅" },
    { label: "\\_6", type: "variable", info: "Subscript Six / Subscript Digit Six", apply: "₆" },
    { label: "\\_7", type: "variable", info: "Subscript Seven / Subscript Digit Seven", apply: "₇" },
    { label: "\\_8", type: "variable", info: "Subscript Eight / Subscript Digit Eight", apply: "₈" },
    { label: "\\_9", type: "variable", info: "Subscript Nine / Subscript Digit Nine", apply: "₉" },
    { label: "\\forall", type: "variable", info: "For All", apply: "∀" },
    { label: "\\complement", type: "variable", info: "Complement", apply: "∁" },
    { label: "\\partial", type: "variable", info: "Partial Differential", apply: "∂" },
    { label: "\\exists", type: "variable", info: "There Exists", apply: "∃" },
    { label: "\\nexists", type: "variable", info: "There Does Not Exist", apply: "∄" },
    { label: "\\emptyset", type: "variable", info: "Empty Set", apply: "∅" },
    { label: "\\increment", type: "variable", info: "Increment", apply: "∆" },
    { label: "\\nabla", type: "variable", info: "Nabla", apply: "∇" },
    { label: "\\in", type: "variable", info: "Element Of", apply: "∈" },
    { label: "\\notin", type: "variable", info: "Not An Element Of", apply: "∉" },
    { label: "\\sqrt", type: "variable", info: "Square Root", apply: "√" },
    { label: "\\cbrt", type: "variable", info: "Cube Root", apply: "∛" },
    { label: "\\fourthroot", type: "variable", info: "Fourth Root", apply: "∜" },
    { label: "\\propto", type: "variable", info: "Proportional To", apply: "∝" },
    { label: "\\infty", type: "variable", info: "Infinity", apply: "∞" },
    { label: "\\cap", type: "variable", info: "Intersection", apply: "∩" },
    { label: "\\cup", type: "variable", info: "Union", apply: "∪" },
    { label: "\\therefore", type: "variable", info: "Therefore", apply: "∴" },
    { label: "\\because", type: "variable", info: "Because", apply: "∵" },
    { label: "\\leq", type: "variable", info: "Less-Than Or Equal To / Less Than Or Equal To", apply: "≤" },
    { label: "\\geq", type: "variable", info: "Greater-Than Or Equal To / Greater Than Or Equal To", apply: "≥" },
    { label: "\\subset", type: "variable", info: "Subset Of", apply: "⊂" },
    { label: "\\supset", type: "variable", info: "Superset Of", apply: "⊃" },
    { label: "\\nsubset", type: "variable", info: "Not A Subset Of", apply: "⊄" },
    { label: "\\nsupset", type: "variable", info: "Not A Superset Of", apply: "⊅" },
    { label: "\\subseteq", type: "variable", info: "Subset Of Or Equal To", apply: "⊆" },
    { label: "\\supseteq", type: "variable", info: "Superset Of Or Equal To", apply: "⊇" },
    { label: "\\nsubseteq", type: "variable", info: "Neither A Subset Of Nor Equal To", apply: "⊈" },
    { label: "\\nsupseteq", type: "variable", info: "Neither A Superset Of Nor Equal To", apply: "⊉" },
    { label: "\\bowtie", type: "variable", info: "Bowtie", apply: "⋈" },
    { label: "\\ltimes", type: "variable", info: "Left Normal Factor Semidirect Product", apply: "⋉" },
    { label: "\\rtimes", type: "variable", info: "Right Normal Factor Semidirect Product", apply: "⋊" },
    { label: "\\vdots", type: "variable", info: "Vertical Ellipsis", apply: "⋮" },
    { label: "\\cdots", type: "variable", info: "Midline Horizontal Ellipsis", apply: "⋯" },
    { label: "\\adots", type: "variable", info: "Up Right Diagonal Ellipsis", apply: "⋰" },
    { label: "\\ddots", type: "variable", info: "Down Right Diagonal Ellipsis", apply: "⋱" }
];

const relLanguage = language.LRLanguage.define({
    parser: parser.configure({
        props: [
            highlight.styleTags({
                "Keyword AttributeKeyword": highlight.tags.keyword,
                Type: highlight.tags.typeName,
                Emphasis: highlight.tags.emphasis,
                "IntLiteral FloatLiteral": highlight.tags.number,
                BooleanLiteral: highlight.tags.bool,
                CharLiteral: highlight.tags.character,
                "DocstringLiteral MultilineDocstringLiteral": highlight.tags.docString,
                "StaticStringLiteral/...": highlight.tags.string,
                "StaticMultilineStringLiteral RawStringSequence InterpolationLiteral InterpolationMultilineLiteral": highlight.tags.string,
                LineComment: highlight.tags.lineComment,
                BlockComment: highlight.tags.blockComment,
                BasicId: highlight.tags.attributeName,
                "LhsId/BasicId LhsId/QualifiedName/QualifiedNameId/BasicId": highlight.tags.definition(highlight.tags.variableName),
                "PartialApplicationExpression/BasicExpression/BasicId": highlight.tags.variableName,
                "ApplicationExpression/BasicExpression/BasicId": highlight.tags.variableName,
                "LogicalParam/LogicalExpression/BasicExpression/BasicId": highlight.tags.attributeName,
                "FormalId/BasicId": highlight.tags.attributeName,
                "InterpolationId AliasId/BasicId": highlight.tags.labelName,
                "QualifiedNameElem RelnameLiteral ValueTypeLiteral": highlight.tags.literal,
                "DateLiteral DateTimeLiteral": highlight.tags.string,
                "Operator OperatorKeyword": highlight.tags.operatorKeyword,
                '( )': highlight.tags.paren,
                '[ ]': highlight.tags.squareBracket,
                '{ }': highlight.tags.brace,
                ':': highlight.tags.derefOperator,
                ', ;': highlight.tags.separator
            }),
            language.foldNodeProp.add({
                MultilineDocstringLiteral(tree) { return { from: tree.from + 3, to: tree.to - 3 }; },
                InterpolationMultilineLiteral(tree) { return { from: tree.from + 3, to: tree.to - 3 }; },
                StaticMultilineStringLiteral(tree) { return { from: tree.from + 3, to: tree.to - 3 }; },
                RawStringSequence(tree) { return { from: tree.from + 1, to: tree.to - 1 }; },
                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; },
                BoundedExpression(tree) { return { from: tree.from + 1, to: tree.to - 1 }; }
            })
        ]
    }),
    languageData: {
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`", '"""'] },
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
    }
});
// Autocomplete
const relCompletion = relLanguage.data.of({
    autocomplete: autocomplete.completeFromList(autocompleteList)
});
function rel() {
    return new language.LanguageSupport(relLanguage, [relCompletion]);
}

exports.rel = rel;
exports.relCompletion = relCompletion;
exports.relLanguage = relLanguage;
