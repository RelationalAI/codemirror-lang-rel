'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var language = require('@codemirror/language');
var highlight = require('@lezer/highlight');
var autocomplete = require('@codemirror/autocomplete');
var lr = require('@lezer/lr');

const autocompleteList = [
    { label: "Any", type: "type" },
    { label: "AutoNumber", type: "type" },
    { label: "Boolean", type: "type" },
    { label: "Char", type: "type" },
    { label: "Day", type: "type" },
    { label: "Date", type: "type" },
    { label: "DateTime", type: "type" },
    { label: "Year", type: "type" },
    { label: "Month", type: "type" },
    { label: "Week", type: "type" },
    { label: "Hour", type: "type" },
    { label: "Minute", type: "type" },
    { label: "Second", type: "type" },
    { label: "Millisecond", type: "type" },
    { label: "Microsecond", type: "type" },
    { label: "Nanosecond", type: "type" },
    { label: "Entity", type: "type" },
    { label: "Int", type: "type" },
    { label: "Number", type: "type" },
    { label: "Missing", type: "type" },
    { label: "Floating", type: "type" },
    { label: "UnsignedInt", type: "type" },
    { label: "SignedInt", type: "type" },
    { label: "Rational", type: "type" },
    { label: "FixedDecimal", type: "type" },
    { label: "Hash", type: "type" },
    { label: "FilePos", type: "type" },
    { label: "String", type: "type" },
    { label: "def", type: "keyword" },
    { label: "output", type: "interface" },
    { label: "insert", type: "interface" },
    { label: "delete", type: "interface" },
    { label: "export", type: "interface" },
    { label: "from", type: "keyword" },
    { label: "if", type: "keyword" },
    { label: "iff", type: "keyword" },
    { label: "then", type: "keyword" },
    { label: "else", type: "keyword" },
    { label: "end", type: "keyword" },
    { label: "exists", type: "keyword" },
    { label: "where", type: "keyword" },
    { label: "with", type: "keyword" },
    { label: "select", type: "keyword" },
    { label: "implies", type: "keyword" },
    { label: "use", type: "keyword" },
    { label: "forall", type: "keyword" },
    { label: "in", type: "keyword" },
    { label: "ic", type: "keyword" },
    { label: "not", type: "keyword" },
    { label: "and", type: "keyword" },
    { label: "or", type: "keyword" },
    { label: "xor", type: "keyword" },
    { label: "union", type: "keyword" },
    { label: "_flatten", type: "function" },
    { label: "abelian_group", type: "function" },
    { label: "abs", type: "function" },
    { label: "absorption_laws", type: "function" },
    { label: "acos", type: "function" },
    { label: "acosh", type: "function" },
    { label: "acot", type: "function" },
    { label: "add", type: "function" },
    { label: "antisymmetric", type: "function" },
    { label: "approximate_abelian_group", type: "function" },
    { label: "approximate_commutative_monoid", type: "function" },
    { label: "approximate_group", type: "function" },
    { label: "approximate_monoid", type: "function" },
    { label: "approximate_ring", type: "function" },
    { label: "approximate_semiring", type: "function" },
    { label: "approximately_associative", type: "function" },
    { label: "approximately_commutative", type: "function" },
    { label: "approximately_distributive", type: "function" },
    { label: "approximately_has_inverse", type: "function" },
    { label: "approximately_left_distributive", type: "function" },
    { label: "approximately_right_distributive", type: "function" },
    { label: "approximately_zero_annihilation", type: "function" },
    { label: "argmax", type: "function" },
    { label: "argmin", type: "function" },
    { label: "arity", type: "function" },
    { label: "asin", type: "function" },
    { label: "asinh", type: "function" },
    { label: "associative", type: "function" },
    { label: "atan", type: "function" },
    { label: "atanh", type: "function" },
    { label: "auto_number", type: "function" },
    { label: "binary_operator", type: "function" },
    { label: "binary_relation", type: "function" },
    { label: "binary_relation_substitution_laws", type: "function" },
    { label: "bitwise_and", type: "function" },
    { label: "bitwise_left_shift", type: "function" },
    { label: "bitwise_not", type: "function" },
    { label: "bitwise_or", type: "function" },
    { label: "bitwise_right_shift", type: "function" },
    { label: "bitwise_unsigned_right_shift", type: "function" },
    { label: "bitwise_xor", type: "function" },
    { label: "boolean_and", type: "function" },
    { label: "boolean_false", type: "function" },
    { label: "boolean_not", type: "function" },
    { label: "boolean_or", type: "function" },
    { label: "boolean_true", type: "function" },
    { label: "bottom", type: "function" },
    { label: "bounded_lattice", type: "function" },
    { label: "bounded_semilattice", type: "function" },
    { label: "byte", type: "function" },
    { label: "capture_group_by_index", type: "function" },
    { label: "capture_group_by_name", type: "function" },
    { label: "cart", type: "function" },
    { label: "cbrt", type: "function" },
    { label: "ceil", type: "function" },
    { label: "char", type: "function" },
    { label: "clamp", type: "function" },
    { label: "commutative", type: "function" },
    { label: "commutative_monoid", type: "function" },
    { label: "comparable", type: "function" },
    { label: "complement", type: "function" },
    { label: "concat", type: "function" },
    { label: "cos", type: "function" },
    { label: "cosh", type: "function" },
    { label: "cot", type: "function" },
    { label: "count", type: "function" },
    { label: "date_add", type: "function" },
    { label: "date_day", type: "function" },
    { label: "date_dayname", type: "function" },
    { label: "date_dayofquarter", type: "function" },
    { label: "date_dayofweek", type: "function" },
    { label: "date_dayofweekofmonth", type: "function" },
    { label: "date_dayofyear", type: "function" },
    { label: "date_daysinmonth", type: "function" },
    { label: "date_isleapyear", type: "function" },
    { label: "date_month", type: "function" },
    { label: "date_monthname", type: "function" },
    { label: "date_quarterofyear", type: "function" },
    { label: "date_subtract", type: "function" },
    { label: "date_week", type: "function" },
    { label: "date_year", type: "function" },
    { label: "dates_period_days", type: "function" },
    { label: "datetime_add", type: "function" },
    { label: "datetime_day", type: "function" },
    { label: "datetime_day_", type: "function" },
    { label: "datetime_dayname", type: "function" },
    { label: "datetime_dayofquarter", type: "function" },
    { label: "datetime_dayofweek", type: "function" },
    { label: "datetime_dayofweekofmonth", type: "function" },
    { label: "datetime_dayofyear", type: "function" },
    { label: "datetime_daysinmonth", type: "function" },
    { label: "datetime_hour", type: "function" },
    { label: "datetime_hour_", type: "function" },
    { label: "datetime_isleapyear", type: "function" },
    { label: "datetime_minute", type: "function" },
    { label: "datetime_minute_", type: "function" },
    { label: "datetime_month", type: "function" },
    { label: "datetime_month_", type: "function" },
    { label: "datetime_monthname", type: "function" },
    { label: "datetime_now", type: "function" },
    { label: "datetime_quarterofyear", type: "function" },
    { label: "datetime_second", type: "function" },
    { label: "datetime_subtract", type: "function" },
    { label: "datetime_to_nanoseconds", type: "function" },
    { label: "datetime_week", type: "function" },
    { label: "datetime_week_", type: "function" },
    { label: "datetime_year", type: "function" },
    { label: "datetime_year_", type: "function" },
    { label: "datetimes_period_milliseconds", type: "function" },
    { label: "decimal", type: "function" },
    { label: "decimal_bit_length", type: "function" },
    { label: "decimal_int_convert", type: "function" },
    { label: "decimal_precision", type: "function" },
    { label: "decode_base", type: "function" },
    { label: "default_value", type: "function" },
    { label: "deg", type: "function" },
    { label: "denominator", type: "function" },
    { label: "describe", type: "function" },
    { label: "diff", type: "function" },
    { label: "disjoint", type: "function" },
    { label: "distributive", type: "function" },
    { label: "divide", type: "function" },
    { label: "docstring", type: "function" },
    { label: "domain", type: "function" },
    { label: "dot_join", type: "function" },
    { label: "double_metaphone", type: "function" },
    { label: "empty", type: "function" },
    { label: "encode_base", type: "function" },
    { label: "epoch_milliseconds", type: "function" },
    { label: "eq", type: "function" },
    { label: "equal", type: "function" },
    { label: "equivalence_relation", type: "function" },
    { label: "erf", type: "function" },
    { label: "erfinv", type: "function" },
    { label: "escape_regex_metachars", type: "function" },
    { label: "export_csv", type: "function" },
    { label: "export_json", type: "function" },
    { label: "factorial", type: "function" },
    { label: "filepos", type: "function" },
    { label: "filepos_value", type: "function" },
    { label: "first", type: "function" },
    { label: "float", type: "function" },
    { label: "float_int_convert", type: "function" },
    { label: "floor", type: "function" },
    { label: "floor_divide", type: "function" },
    { label: "floor_to_int", type: "function" },
    { label: "format_date", type: "function" },
    { label: "format_datetime", type: "function" },
    { label: "formula_card_est", type: "function" },
    { label: "frequency", type: "function" },
    { label: "function", type: "function" },
    { label: "geometric_mean", type: "function" },
    { label: "glm_generic", type: "function" },
    { label: "glm_linear_regression", type: "function" },
    { label: "glm_logistic_regression", type: "function" },
    { label: "glm_predict", type: "function" },
    { label: "glm_probit_regression", type: "function" },
    { label: "graphviz", type: "function" },
    { label: "group", type: "function" },
    { label: "gt", type: "function" },
    { label: "gt_eq", type: "function" },
    { label: "harmonic_mean", type: "function" },
    { label: "has_identity", type: "function" },
    { label: "has_left_identity", type: "function" },
    { label: "has_left_zero", type: "function" },
    { label: "has_maximal_element", type: "function" },
    { label: "has_minimal_element", type: "function" },
    { label: "has_right_identity", type: "function" },
    { label: "has_right_zero", type: "function" },
    { label: "hash", type: "function" },
    { label: "hash_value_uint", type: "function" },
    { label: "haversine", type: "function" },
    { label: "help", type: "function" },
    { label: "html", type: "function" },
    { label: "ic", type: "function" },
    { label: "idempotent", type: "function" },
    { label: "identity", type: "function" },
    { label: "int", type: "function" },
    { label: "int_float_convert", type: "function" },
    { label: "int_spread_by_even", type: "function" },
    { label: "int_spread_by_ratio", type: "function" },
    { label: "intersect", type: "function" },
    { label: "irreflexive", type: "function" },
    { label: "is_", type: "function" },
    { label: "jacobian", type: "function" },
    { label: "join_bounded_lattice", type: "function" },
    { label: "last", type: "function" },
    { label: "lattice", type: "function" },
    { label: "left_distributive", type: "function" },
    { label: "left_identity", type: "function" },
    { label: "left_override", type: "function" },
    { label: "left_zero", type: "function" },
    { label: "levenshtein", type: "function" },
    { label: "like_match", type: "function" },
    { label: "linear_regression", type: "function" },
    { label: "linear_regression_objective", type: "function" },
    { label: "linear_regression_predict", type: "function" },
    { label: "lined_csv", type: "function" },
    { label: "load_csv", type: "function" },
    { label: "load_csv_row_wise", type: "function" },
    { label: "load_json", type: "function" },
    { label: "log", type: "function" },
    { label: "log_card_est", type: "function" },
    { label: "lowercase", type: "function" },
    { label: "lr_random_initial_point", type: "function" },
    { label: "lt", type: "function" },
    { label: "lt_eq", type: "function" },
    { label: "mae", type: "function" },
    { label: "markdown", type: "function" },
    { label: "max", type: "function" },
    { label: "max_k", type: "function" },
    { label: "maximal_element", type: "function" },
    { label: "maximum", type: "function" },
    { label: "mean", type: "function" },
    { label: "mean_normalization", type: "function" },
    { label: "median", type: "function" },
    { label: "meet_bounded_lattice", type: "function" },
    { label: "metaphone", type: "function" },
    { label: "min", type: "function" },
    { label: "min_k", type: "function" },
    { label: "min_max_normalization", type: "function" },
    { label: "minimal_element", type: "function" },
    { label: "minimize_initial_point", type: "function" },
    { label: "minimum", type: "function" },
    { label: "missing", type: "function" },
    { label: "mlpack_adaboost", type: "function" },
    { label: "mlpack_adaboost_predict", type: "function" },
    { label: "mlpack_approx_kfn", type: "function" },
    { label: "mlpack_approx_kfn_build", type: "function" },
    { label: "mlpack_dbscan", type: "function" },
    { label: "mlpack_decision_tree", type: "function" },
    { label: "mlpack_decision_tree_predict", type: "function" },
    { label: "mlpack_det", type: "function" },
    { label: "mlpack_det_build", type: "function" },
    { label: "mlpack_emst", type: "function" },
    { label: "mlpack_fastmks", type: "function" },
    { label: "mlpack_fastmks_build", type: "function" },
    { label: "mlpack_gmm_generate", type: "function" },
    { label: "mlpack_gmm_probability", type: "function" },
    { label: "mlpack_gmm_train", type: "function" },
    { label: "mlpack_hoeffding_tree", type: "function" },
    { label: "mlpack_hoeffding_tree_predict", type: "function" },
    { label: "mlpack_kernel_pca", type: "function" },
    { label: "mlpack_kfn", type: "function" },
    { label: "mlpack_kfn_build", type: "function" },
    { label: "mlpack_kmeans", type: "function" },
    { label: "mlpack_kmeans_centroids", type: "function" },
    { label: "mlpack_knn", type: "function" },
    { label: "mlpack_knn_build", type: "function" },
    { label: "mlpack_krann", type: "function" },
    { label: "mlpack_krann_build", type: "function" },
    { label: "mlpack_lars", type: "function" },
    { label: "mlpack_lars_predict", type: "function" },
    { label: "mlpack_linear_regression", type: "function" },
    { label: "mlpack_linear_regression_predict", type: "function" },
    { label: "mlpack_linear_svm", type: "function" },
    { label: "mlpack_linear_svm_predict", type: "function" },
    { label: "mlpack_logistic_regression", type: "function" },
    { label: "mlpack_logistic_regression_predict", type: "function" },
    { label: "mlpack_lsh", type: "function" },
    { label: "mlpack_lsh_build", type: "function" },
    { label: "mlpack_mean_shift", type: "function" },
    { label: "mlpack_nbc", type: "function" },
    { label: "mlpack_nbc_predict", type: "function" },
    { label: "mlpack_nmf", type: "function" },
    { label: "mlpack_pca", type: "function" },
    { label: "mlpack_perceptron", type: "function" },
    { label: "mlpack_perceptron_predict", type: "function" },
    { label: "mlpack_preprocess_split", type: "function" },
    { label: "mlpack_radical", type: "function" },
    { label: "mlpack_random_forest", type: "function" },
    { label: "mlpack_random_forest_predict", type: "function" },
    { label: "mlpack_softmax_regression", type: "function" },
    { label: "mlpack_softmax_regression_predict", type: "function" },
    { label: "mode", type: "function" },
    { label: "modulo", type: "function" },
    { label: "monoid", type: "function" },
    { label: "mse", type: "function" },
    { label: "multiply", type: "function" },
    { label: "murmurhash", type: "function" },
    { label: "nanoseconds_to_datetime", type: "function" },
    { label: "natural_exp", type: "function" },
    { label: "natural_log", type: "function" },
    { label: "neq", type: "function" },
    { label: "not", type: "function" },
    { label: "nullary_relation", type: "function" },
    { label: "num_bytes", type: "function" },
    { label: "num_chars", type: "function" },
    { label: "numerator", type: "function" },
    { label: "pack", type: "function" },
    { label: "parse_date", type: "function" },
    { label: "parse_datetime", type: "function" },
    { label: "parse_decimal", type: "function" },
    { label: "parse_float", type: "function" },
    { label: "parse_int", type: "function" },
    { label: "parse_json", type: "function" },
    { label: "parse_uuid", type: "function" },
    { label: "partial_order", type: "function" },
    { label: "partial_order_and_bounded_lattice", type: "function" },
    { label: "partial_order_and_join_bounded_lattice", type: "function" },
    { label: "partial_order_and_lattice", type: "function" },
    { label: "partial_order_and_meet_bounded_lattice", type: "function" },
    { label: "pattern_match", type: "function" },
    { label: "percentile", type: "function" },
    { label: "percentile_nearest", type: "function" },
    { label: "period_add", type: "function" },
    { label: "period_day_to_int", type: "function" },
    { label: "period_max", type: "function" },
    { label: "period_min", type: "function" },
    { label: "pi_float", type: "function" },
    { label: "pivot", type: "function" },
    { label: "pop_standard_deviation", type: "function" },
    { label: "pop_variance", type: "function" },
    { label: "pop_zscore_normalization", type: "function" },
    { label: "power", type: "function" },
    { label: "prefix_join", type: "function" },
    { label: "preorder", type: "function" },
    { label: "product", type: "function" },
    { label: "proper_subset", type: "function" },
    { label: "proper_superset", type: "function" },
    { label: "rad", type: "function" },
    { label: "random_mersenne_twister", type: "function" },
    { label: "random_threefry_float", type: "function" },
    { label: "random_threefry_uint", type: "function" },
    { label: "random_uint", type: "function" },
    { label: "range", type: "function" },
    { label: "rational", type: "function" },
    { label: "rational_convert", type: "function" },
    { label: "reflexive", type: "function" },
    { label: "regex_compile", type: "function" },
    { label: "regex_match", type: "function" },
    { label: "regex_match_all", type: "function" },
    { label: "rel", type: "function" },
    { label: "relname_string", type: "function" },
    { label: "remainder", type: "function" },
    { label: "reverse_sort", type: "function" },
    { label: "right_distributive", type: "function" },
    { label: "right_identity", type: "function" },
    { label: "right_override", type: "function" },
    { label: "right_zero", type: "function" },
    { label: "ring", type: "function" },
    { label: "rmse", type: "function" },
    { label: "round", type: "function" },
    { label: "sample_standard_deviation", type: "function" },
    { label: "sample_variance", type: "function" },
    { label: "sample_zscore_normalization", type: "function" },
    { label: "second", type: "function" },
    { label: "semilattice", type: "function" },
    { label: "semiring", type: "function" },
    { label: "sign", type: "function" },
    { label: "sin", type: "function" },
    { label: "sinh", type: "function" },
    { label: "sort", type: "function" },
    { label: "soundex", type: "function" },
    { label: "spread", type: "function" },
    { label: "sqrt", type: "function" },
    { label: "squared", type: "function" },
    { label: "squared_deviation", type: "function" },
    { label: "strict_partial_order", type: "function" },
    { label: "strict_total_order", type: "function" },
    { label: "string", type: "function" },
    { label: "string_join", type: "function" },
    { label: "string_length", type: "function" },
    { label: "string_replace", type: "function" },
    { label: "string_replace_multiple", type: "function" },
    { label: "string_split", type: "function" },
    { label: "string_trim", type: "function" },
    { label: "subset", type: "function" },
    { label: "substring", type: "function" },
    { label: "substring_bytes", type: "function" },
    { label: "subtract", type: "function" },
    { label: "suffix_join", type: "function" },
    { label: "sum", type: "function" },
    { label: "sum_int", type: "function" },
    { label: "superset", type: "function" },
    { label: "svg", type: "function" },
    { label: "symmetric", type: "function" },
    { label: "table", type: "function" },
    { label: "tan", type: "function" },
    { label: "tanh", type: "function" },
    { label: "ternary_relation", type: "function" },
    { label: "top", type: "function" },
    { label: "total", type: "function" },
    { label: "total_order", type: "function" },
    { label: "transitive", type: "function" },
    { label: "transpose", type: "function" },
    { label: "trunc", type: "function" },
    { label: "trunc_divide", type: "function" },
    { label: "trunc_to_int", type: "function" },
    { label: "uint", type: "function" },
    { label: "unary_operator", type: "function" },
    { label: "unary_relation", type: "function" },
    { label: "unary_relation_substitution_laws", type: "function" },
    { label: "union", type: "function" },
    { label: "unit_normalization", type: "function" },
    { label: "unix_epoch", type: "function" },
    { label: "unpack", type: "function" },
    { label: "uppercase", type: "function" },
    { label: "uuid_string", type: "function" },
    { label: "vega", type: "function" },
    { label: "vegalite", type: "function" },
    { label: "vegalite_utils", type: "function" },
    { label: "view_json", type: "function" },
    { label: "weighted_mean", type: "function" },
    { label: "xgboost_classifier", type: "function" },
    { label: "xgboost_classifier_predict", type: "function" },
    { label: "xgboost_classifier_probabilities", type: "function" },
    { label: "xgboost_feature_importances", type: "function" },
    { label: "xgboost_regressor", type: "function" },
    { label: "xgboost_regressor_predict", type: "function" },
    { label: "zero_annihilation", type: "function" },
    { label: "zero_of_operator", type: "function" },
    { label: "zip", type: "function" },
    { label: "registered", type: "variable", info: "Registered Sign / Registered Trade Mark Sign", apply: "®" },
    { label: "degree", type: "variable", info: "Degree Sign", apply: "°" },
    { label: "pm", type: "variable", info: "Plus-Minus Sign / Plus-Or-Minus Sign", apply: "±" },
    { label: "\\^2", info: "Superscript Two / Superscript Digit Two", apply: "²" },
    { label: "\\^3", info: "Superscript Three / Superscript Digit Three", apply: "³" },
    { label: "\\^1", info: "Superscript One / Superscript Digit One", apply: "¹" },
    { label: "\\1/4", type: "variable", info: "Vulgar Fraction One Quarter / Fraction One Quarter", apply: "¼" },
    { label: "\\1/2", type: "variable", info: "Vulgar Fraction One Half / Fraction One Half", apply: "½" },
    { label: "\\3/4", type: "variable", info: "Vulgar Fraction Three Quarters / Fraction Three Quarters", apply: "¾" },
    { label: "\\questiondown", type: "variable", info: "Inverted Question Mark", apply: "¿" },
    { label: "\\times", type: "variable", info: "Multiplication Sign", apply: "×" },
    { label: "\\div", type: "variable", info: "Division Sign", apply: "÷" },
    { label: "\\Alpha", type: "variable", info: "Greek Capital Letter Alpha", apply: "Α" },
    { label: "\\Beta", type: "variable", info: "Greek Capital Letter Beta", apply: "Β" },
    { label: "\\Gamma", type: "variable", info: "Greek Capital Letter Gamma", apply: "Γ" },
    { label: "\\Delta", type: "variable", info: "Greek Capital Letter Delta", apply: "Δ" },
    { label: "\\Epsilon", type: "variable", info: "Greek Capital Letter Epsilon", apply: "Ε" },
    { label: "\\Zeta", type: "variable", info: "Greek Capital Letter Zeta", apply: "Ζ" },
    { label: "\\Eta", type: "variable", info: "Greek Capital Letter Eta", apply: "Η" },
    { label: "\\Theta", type: "variable", info: "Greek Capital Letter Theta", apply: "Θ" },
    { label: "\\Iota", type: "variable", info: "Greek Capital Letter Iota", apply: "Ι" },
    { label: "\\Kappa", type: "variable", info: "Greek Capital Letter Kappa", apply: "Κ" },
    { label: "\\Lambda", type: "variable", info: "Greek Capital Letter Lamda / Greek Capital Letter Lambda", apply: "Λ" },
    { label: "\\upMu", type: "variable", info: "Greek Capital Letter Mu", apply: "Μ" },
    { label: "\\upNu", type: "variable", info: "Greek Capital Letter Nu", apply: "Ν" },
    { label: "\\Xi", type: "variable", info: "Greek Capital Letter Xi", apply: "Ξ" },
    { label: "\\upOmicron", type: "variable", info: "Greek Capital Letter Omicron", apply: "Ο" },
    { label: "\\Pi", type: "variable", info: "Greek Capital Letter Pi", apply: "Π" },
    { label: "\\Rho", type: "variable", info: "Greek Capital Letter Rho", apply: "Ρ" },
    { label: "\\Sigma", type: "variable", info: "Greek Capital Letter Sigma", apply: "Σ" },
    { label: "\\Tau", type: "variable", info: "Greek Capital Letter Tau", apply: "Τ" },
    { label: "\\Upsilon", type: "variable", info: "Greek Capital Letter Upsilon", apply: "Υ" },
    { label: "\\Phi", type: "variable", info: "Greek Capital Letter Phi", apply: "Φ" },
    { label: "\\Chi", type: "variable", info: "Greek Capital Letter Chi", apply: "Χ" },
    { label: "\\Psi", type: "variable", info: "Greek Capital Letter Psi", apply: "Ψ" },
    { label: "\\Omega", type: "variable", info: "Greek Capital Letter Omega", apply: "Ω" },
    { label: "\\alpha", type: "variable", info: "Greek Small Letter Alpha", apply: "α" },
    { label: "\\beta", type: "variable", info: "Greek Small Letter Beta", apply: "β" },
    { label: "\\gamma", type: "variable", info: "Greek Small Letter Gamma", apply: "γ" },
    { label: "\\delta", type: "variable", info: "Greek Small Letter Delta", apply: "δ" },
    { label: "\\varepsilon", type: "variable", info: "Greek Small Letter Epsilon", apply: "ε" },
    { label: "\\zeta", type: "variable", info: "Greek Small Letter Zeta", apply: "ζ" },
    { label: "\\eta", type: "variable", info: "Greek Small Letter Eta", apply: "η" },
    { label: "\\theta", type: "variable", info: "Greek Small Letter Theta", apply: "θ" },
    { label: "\\iota", type: "variable", info: "Greek Small Letter Iota", apply: "ι" },
    { label: "\\kappa", type: "variable", info: "Greek Small Letter Kappa", apply: "κ" },
    { label: "\\lambda", type: "variable", info: "Greek Small Letter Lamda / Greek Small Letter Lambda", apply: "λ" },
    { label: "\\mu", type: "variable", info: "Greek Small Letter Mu", apply: "μ" },
    { label: "\\nu", type: "variable", info: "Greek Small Letter Nu", apply: "ν" },
    { label: "\\xi", type: "variable", info: "Greek Small Letter Xi", apply: "ξ" },
    { label: "\\upomicron", type: "variable", info: "Greek Small Letter Omicron", apply: "ο" },
    { label: "\\pi", type: "variable", info: "Greek Small Letter Pi", apply: "π" },
    { label: "\\rho", type: "variable", info: "Greek Small Letter Rho", apply: "ρ" },
    { label: "\\varsigma", type: "variable", info: "Greek Small Letter Final Sigma", apply: "ς" },
    { label: "\\sigma", type: "variable", info: "Greek Small Letter Sigma", apply: "σ" },
    { label: "\\tau", type: "variable", info: "Greek Small Letter Tau", apply: "τ" },
    { label: "\\upsilon", type: "variable", info: "Greek Small Letter Upsilon", apply: "υ" },
    { label: "\\varphi", type: "variable", info: "Greek Small Letter Phi", apply: "φ" },
    { label: "\\chi", type: "variable", info: "Greek Small Letter Chi", apply: "χ" },
    { label: "\\psi", type: "variable", info: "Greek Small Letter Psi", apply: "ψ" },
    { label: "\\omega", type: "variable", info: "Greek Small Letter Omega", apply: "ω" },
    { label: "\\upvarbeta", type: "variable", info: "Greek Beta Symbol / Greek Small Letter Curled Beta", apply: "ϐ" },
    { label: "\\vartheta", type: "variable", info: "Greek Theta Symbol / Greek Small Letter Script Theta", apply: "ϑ" },
    { label: "\\phi", type: "variable", info: "Greek Phi Symbol / Greek Small Letter Script Phi", apply: "ϕ" },
    { label: "\\varpi", type: "variable", info: "Greek Pi Symbol / Greek Small Letter Omega Pi", apply: "ϖ" },
    { label: "\\upoldKoppa", type: "variable", info: "Greek Letter Archaic Koppa", apply: "Ϙ" },
    { label: "\\upoldkoppa", type: "variable", info: "Greek Small Letter Archaic Koppa", apply: "ϙ" },
    { label: "\\Stigma", type: "variable", info: "Greek Letter Stigma / Greek Capital Letter Stigma", apply: "Ϛ" },
    { label: "\\upstigma", type: "variable", info: "Greek Small Letter Stigma", apply: "ϛ" },
    { label: "\\Digamma", type: "variable", info: "Greek Letter Digamma / Greek Capital Letter Digamma", apply: "Ϝ" },
    { label: "\\digamma", type: "variable", info: "Greek Small Letter Digamma", apply: "ϝ" },
    { label: "\\Koppa", type: "variable", info: "Greek Letter Koppa / Greek Capital Letter Koppa", apply: "Ϟ" },
    { label: "\\upkoppa", type: "variable", info: "Greek Small Letter Koppa", apply: "ϟ" },
    { label: "\\Sampi", type: "variable", info: "Greek Letter Sampi / Greek Capital Letter Sampi", apply: "Ϡ" },
    { label: "\\upsampi", type: "variable", info: "Greek Small Letter Sampi", apply: "ϡ" },
    { label: "\\varkappa", type: "variable", info: "Greek Kappa Symbol / Greek Small Letter Script Kappa", apply: "ϰ" },
    { label: "\\varrho", type: "variable", info: "Greek Rho Symbol / Greek Small Letter Tailed Rho", apply: "ϱ" },
    { label: "\\varTheta", type: "variable", info: "Greek Capital Theta Symbol", apply: "ϴ" },
    { label: "\\epsilon", type: "variable", info: "Greek Lunate Epsilon Symbol", apply: "ϵ" },
    { label: "\\backepsilon", type: "variable", info: "Greek Reversed Lunate Epsilon Symbol", apply: "϶" },
    { label: "\\^0", info: "Superscript Zero / Superscript Digit Zero", apply: "⁰" },
    { label: "\\^i", info: "Superscript Latin Small Letter I", apply: "ⁱ" },
    { label: "\\^4", info: "Superscript Four / Superscript Digit Four", apply: "⁴" },
    { label: "\\^5", info: "Superscript Five / Superscript Digit Five", apply: "⁵" },
    { label: "\\^6", info: "Superscript Six / Superscript Digit Six", apply: "⁶" },
    { label: "\\^7", info: "Superscript Seven / Superscript Digit Seven", apply: "⁷" },
    { label: "\\^8", info: "Superscript Eight / Superscript Digit Eight", apply: "⁸" },
    { label: "\\^9", info: "Superscript Nine / Superscript Digit Nine", apply: "⁹" },
    { label: "\\^+", info: "Superscript Plus Sign", apply: "⁺" },
    { label: "\\^-", info: "Superscript Minus / Superscript Hyphen-Minus", apply: "⁻" },
    { label: "\\^=", info: "Superscript Equals Sign", apply: "⁼" },
    { label: "\\^(", info: "Superscript Left Parenthesis / Superscript Opening Parenthesis", apply: "⁽" },
    { label: "\\^)", info: "Superscript Right Parenthesis / Superscript Closing Parenthesis", apply: "⁾" },
    { label: "\\^n", info: "Superscript Latin Small Letter N", apply: "ⁿ" },
    { label: "\\_0", type: "variable", info: "Subscript Zero / Subscript Digit Zero", apply: "₀" },
    { label: "\\_1", type: "variable", info: "Subscript One / Subscript Digit One", apply: "₁" },
    { label: "\\_2", type: "variable", info: "Subscript Two / Subscript Digit Two", apply: "₂" },
    { label: "\\_3", type: "variable", info: "Subscript Three / Subscript Digit Three", apply: "₃" },
    { label: "\\_4", type: "variable", info: "Subscript Four / Subscript Digit Four", apply: "₄" },
    { label: "\\_5", type: "variable", info: "Subscript Five / Subscript Digit Five", apply: "₅" },
    { label: "\\_6", type: "variable", info: "Subscript Six / Subscript Digit Six", apply: "₆" },
    { label: "\\_7", type: "variable", info: "Subscript Seven / Subscript Digit Seven", apply: "₇" },
    { label: "\\_8", type: "variable", info: "Subscript Eight / Subscript Digit Eight", apply: "₈" },
    { label: "\\_9", type: "variable", info: "Subscript Nine / Subscript Digit Nine", apply: "₉" },
    { label: "\\forall", type: "variable", info: "For All", apply: "∀" },
    { label: "\\complement", type: "variable", info: "Complement", apply: "∁" },
    { label: "\\partial", type: "variable", info: "Partial Differential", apply: "∂" },
    { label: "\\exists", type: "variable", info: "There Exists", apply: "∃" },
    { label: "\\nexists", type: "variable", info: "There Does Not Exist", apply: "∄" },
    { label: "\\emptyset", type: "variable", info: "Empty Set", apply: "∅" },
    { label: "\\increment", type: "variable", info: "Increment", apply: "∆" },
    { label: "\\nabla", type: "variable", info: "Nabla", apply: "∇" },
    { label: "\\in", type: "variable", info: "Element Of", apply: "∈" },
    { label: "\\notin", type: "variable", info: "Not An Element Of", apply: "∉" },
    { label: "\\sqrt", type: "variable", info: "Square Root", apply: "√" },
    { label: "\\cbrt", type: "variable", info: "Cube Root", apply: "∛" },
    { label: "\\fourthroot", type: "variable", info: "Fourth Root", apply: "∜" },
    { label: "\\propto", type: "variable", info: "Proportional To", apply: "∝" },
    { label: "\\infty", type: "variable", info: "Infinity", apply: "∞" },
    { label: "\\cap", type: "variable", info: "Intersection", apply: "∩" },
    { label: "\\cup", type: "variable", info: "Union", apply: "∪" },
    { label: "\\therefore", type: "variable", info: "Therefore", apply: "∴" },
    { label: "\\because", type: "variable", info: "Because", apply: "∵" },
    { label: "\\leq", type: "variable", info: "Less-Than Or Equal To / Less Than Or Equal To", apply: "≤" },
    { label: "\\geq", type: "variable", info: "Greater-Than Or Equal To / Greater Than Or Equal To", apply: "≥" },
    { label: "\\subset", type: "variable", info: "Subset Of", apply: "⊂" },
    { label: "\\supset", type: "variable", info: "Superset Of", apply: "⊃" },
    { label: "\\nsubset", type: "variable", info: "Not A Subset Of", apply: "⊄" },
    { label: "\\nsupset", type: "variable", info: "Not A Superset Of", apply: "⊅" },
    { label: "\\subseteq", type: "variable", info: "Subset Of Or Equal To", apply: "⊆" },
    { label: "\\supseteq", type: "variable", info: "Superset Of Or Equal To", apply: "⊇" },
    { label: "\\nsubseteq", type: "variable", info: "Neither A Subset Of Nor Equal To", apply: "⊈" },
    { label: "\\nsupseteq", type: "variable", info: "Neither A Superset Of Nor Equal To", apply: "⊉" },
    { label: "\\bowtie", type: "variable", info: "Bowtie", apply: "⋈" },
    { label: "\\ltimes", type: "variable", info: "Left Normal Factor Semidirect Product", apply: "⋉" },
    { label: "\\rtimes", type: "variable", info: "Right Normal Factor Semidirect Product", apply: "⋊" },
    { label: "\\vdots", type: "variable", info: "Vertical Ellipsis", apply: "⋮" },
    { label: "\\cdots", type: "variable", info: "Midline Horizontal Ellipsis", apply: "⋯" },
    { label: "\\adots", type: "variable", info: "Up Right Diagonal Ellipsis", apply: "⋰" },
    { label: "\\ddots", type: "variable", info: "Down Right Diagonal Ellipsis", apply: "⋱" }
];

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_BasicId = { __proto__: null, doc: 14, function: 25, inline: 27, ondemand: 29, outline: 31, static: 33, raw: 60, def: 64, Any: 68, String: 70, Int: 72, Number: 74, Char: 76, Missing: 78, Float: 80, Floating: 82, UnsignedInt: 84, UInt: 86, SignedInt: 88, Rational: 90, FixedDecimal: 92, RelName: 94, Entity: 96, AutoNumber: 98, Hash: 100, FilePos: 102, Date: 104, DateTime: 106, Year: 108, Month: 110, Week: 112, Day: 114, Hour: 116, Minute: 118, Second: 120, Millisecond: 122, Microsecond: 124, Nanosecond: 126, Boolean: 128, type: 130, entity: 132, value: 134, output: 145, insert: 147, delete: 149, abort: 151, export: 153, where: 204, for: 206, from: 208, if: 288, then: 290, else: 292, end: 294, forall: 296, exists: 298, and: 302, or: 306, implies: 310, not: 316, iff: 320, xor: 326, in: 346, ic: 358, module: 362, with: 366, use: 368, as: 372 };
const spec_Operator = { __proto__: null, ".": 191, "^": 215, "-": 217, "/": 219, "%": 221, "*": 223, "÷": 225, "×": 227, "⊗": 229, "⊙": 231, "+": 233, "∩": 235, "⊕": 237, "∪": 239, "⊓": 241, "⊔": 243, "=": 245, "!=": 247, "≈": 249, "∼": 251, "→": 253, "←": 255, "≼": 257, "≽": 259, "≺": 261, "≻": 263, "≠": 265, "<": 267, ">": 269, "<=": 271, "≤": 273, ">=": 275, "≥": 277, "⊆": 279, "⊇": 281, "⊂": 283, "⊃": 285, "∧": 305, "∨": 309, "⇒": 313, "⇐": 315, "¬": 319, "≡": 323, "⇔": 325, "≢": 329, "⇎": 331, "⊻": 333, "<:": 335, ":>": 337, "<++": 339, "++>": 341, "∈": 349 };
const parser = lr.LRParser.deserialize({
    version: 14,
    states: "!DOO`QPOOOzQPO'#CgOOQO'#Ga'#GaO!]QPO'#GSOOQO'#Gr'#GrOOQO'#G`'#G`Q`QPOOO!qQPO'#CaO!|QPO'#C`O!]QPO'#GSO%oQPO'#GSO%tQPO'#GTO(oQPO'#GUO!|QPO'#GWO(yQQO'#GYO-aQPO,59ROOQO'#Gt'#GtOOQO-E:_-E:_O!|QPO,58zO-xQPO,5<nO-}QPO,5<oO.SQPO,5<pO!|QPO,5<rOOQO-E:^-E:^OOQO,58{,58{O/XQPO'#HOO/cQQO'#DrO/hQPO'#DuO0iQPO'#DtOOQO'#C}'#C}OOQO'#HP'#HPOOQO'#HO'#HOOOQO'#HQ'#HQO0nQPO,58zO0|QPO,5<nO!|QPO,5<nO!|QPO,5<oO4sQQO'#GRO8]QQO'#D|OOQO'#Gh'#GhO8dQPO,5<pO(yQQO,5<pO(yQQO,5<pO8jQPO,5<pO8dQPO,5<pO8rQPO,5<rOOQO'#Cn'#CnO8|QSO'#HOO=oQQO'#FaOOQO'#Du'#DuOGiQSO'#DuOGsQQO'#E^OLZQPO'#EeO! RQQO'#E[O!#pQQO'#FaO!)aQSO'#E]OOQO'#E]'#E]O!#}QSO'#E]O!)nQPO'#E]O(yQQO'#E[O!+ZQQO'#EZO!,uQQO'#EYO!.^QQO'#EXO!/dQPO'#EWO!0qQPO'#EVO!1{QPO'#F}OOQO'#EV'#EVO!2QQWO'#ESO!2]Q`O'#GOOOQO'#EP'#EPOOQO'#EO'#EOO!2hQPO'#D}O!2vQSO'#CyO!3UQQO'#E]O(yQQO'#E]O!7]QQO'#E[O!7mQPO,5<tO!7rQQO1G.mO!8gQPO1G.fO!|QPO1G2YO!|QPO1G2ZO!8uQPO1G2[O(yQQO1G2[O(yQQO1G2[O!8{QPO1G2[O!8uQPO1G2[O!9TQPO1G2^O!9_QPO,5:^OOQO'#Gg'#GgO!:_QPO,5:`O!8gQPO1G.fO!:iQQO'#GRO(yQQO1G.fO(yQQO1G.fO!8mQPO1G.fO!|QPO1G.fO!:pQPO1G2YO!:uQPO1G2ZO!:zQPO1G2[O!|QPO1G2^O!;UQPO1G2YO!<SQPO1G2ZO!=QQPO,5:^O!>pQQO'#EOOOQO,5<m,5<mO!@]QPO,5<mOOQO,5:h,5:hO!@bQPO,5:hOOQO-E:f-E:fOOQO1G2[1G2[O!@gQPO1G2[O!9TQPO1G2^O!@lQPO1G2^OOQO1G2^1G2^O!@sQPO,5;POOQO,5;{,5;{O!@{QPO,5;{O!AQQPO,5;{O!A]QSO,5:`O!EuQPO,5:xO!EzQQO,5;PO!InQQO,5:zO!MhQQO,5;UO!3UQQO,5:wO!3UQQO,5:wO!3UQQO,5:wO!3UQQO,5:wO!3UQQO,5:wO!3UQQO,5:wO##bQPO,5;{O##gQPO,5;{O#)UQSO,5:wO#)`QQO,5:jO#,vQQO,5:wO#,}QPO'#FhOOQO,5:v,5:vO!7]QQO,5:vO!7]QQO,5:vO!7]QQO,5:vO!7]QQO,5:vO!7]QQO,5:vO!7]QQO,5:uO!7]QQO,5:tO!7]QQO,5:sO!7]QQO,5:rO#,vQQO,5<iO(yQQO,5<iOOQO'#ET'#ETOGsQQO'#ETO#-SQWO,5:nO#-bQPO,5:nO#-jQ`O,5<jO#-bQPO,5<jO4zQQO'#GlO#-xQPO,5:iO#.WQpO'#C{O#.`QpO'#C{O#.kQpO'#C{O#.yQpO'#C{OOQO,59e,59eO=oQQO'#FaO#4RQQO,5:wO#4iQQO'#E]O#4pQPO,5:wO#7XQQO1G2`O#7`QPO'#GvOOQO'#Cm'#CmO#7hQPO7+$XO#7mQPO7+$QO(yQQO7+$QO(yQQO7+$QO#7sQPO7+$QO#7{QPO7+'tO#8yQPO7+'uO(yQQO7+'vO(yQQO7+'vO#9wQPO7+'vOOQO7+'v7+'vO#:PQPO7+'vO#:UQPO7+'vO#:dQPO7+'xO#:nQPO7+'xOOQO7+'x7+'xOOQO1G/x1G/xOOQO-E:e-E:eOOQO7+$Q7+$QO#:uQPO7+$QO#7mQPO7+$QO!|QPO7+'tO!|QPO7+'uO#:UQPO7+'vO#:dQPO7+'xO#:zQPO7+'tO(yQQO7+'tO(yQQO7+'tO#;QQPO7+'tO#;YQPO7+'uO(yQQO7+'uO(yQQO7+'uO#;`QPO7+'uO#<xQQO,5:jOOQO1G2X1G2XOOQO1G0S1G0SOOQO1G0k1G0kOOQO1G1g1G1gO#>bQPO1G1gOOQO1G0d1G0dO#ASQSO'#E[O#FZQSO'#E]O#GfQSO1G0kO#GpQQO'#EcO#H[QPO'#EbO#HpQPO'#EdOOQO'#Eb'#EbO#HuQPO'#EaOOQO'#Ea'#EaO#IZQQO'#EiO#IeQPO'#H]OOQO1G0f1G0fO#IjQPO1G0fOOQO1G0p1G0pO#IoQPO1G0pOOQO1G0c1G0cO#NhQQO1G0cO$ RQQO1G0cO$&oQQO1G0cO$&yQQO1G0cO$'TQQO1G0cO$)uQPO1G1gO#)`QQO1G0UO$)zQSO1G0UO#,vQQO'#EeO$+aQPO1G0cO$+fQSO'#EOO!7]QQO,5<SP#,vQQO,5<SOOQO1G0b1G0bO$.VQQO1G0bO$0pQQO1G0bO$1QQQO1G0bO$2{QQO1G0bO$4|QQO1G0aO$7QQQO1G0`O$8iQQO1G0_O$9oQPO1G0^OOQO1G2T1G2TO$:|QPO,5:oOOQO'#Gj'#GjO$;RQWO1G0YOOQO1G0Y1G0YO$;RQWO1G0YOOQO'#Gk'#GkO$;aQ`O1G2UOOQO1G2U1G2UO$;aQ`O1G2UOOQO,5=W,5=WOOQO-E:j-E:jOOQO'#Gb'#GbO$;oQpO,59gOOQO,59g,59gOOQO'#Gc'#GcO$;wQpO,59gOOQO'#Gd'#GdO$<SQpO,59gOOQO'#Ge'#GeO$<bQpO,59gOOQO,5:w,5:wO(yQQO1G0cO$<sQPO'#G]O$=kQPO'#HdOOQO7+'z7+'zO!7rQQO'#GfO$>`QPO,5=bOOQO<<Gs<<GsO(yQQO<<GlO(yQQO<<GlO$>hQPO<<GlOOQO<<Gl<<GlO$>pQPO<<GlO$>uQPO<<K`O(yQQO<<K`O(yQQO<<K`O$>{QPO<<K`O$?TQPO<<KaO(yQQO<<KaO(yQQO<<KaO$?ZQPO<<KaOOQO<<Kb<<KbO$?cQPO<<KbO(yQQO<<KbO(yQQO<<KbO$?hQPO<<KbO$?pQPO<<KdOOQO<<Kd<<KdO$?wQPO<<GlO$@VQPO<<K`O$ATQPO<<KaO$BRQPO<<KbO$BaQPO<<KdOOQO<<K`<<K`O$BkQPO<<K`OOQO<<Ka<<KaO$BpQPO<<KaO$BuQQO1G0UOOQO7+'R7+'RO$FhQSO,5:vO$JdQSO,5:wO$JzQQO,5:}O#,vQQO,5;OO$K[QQO,5;OO% RQQO,5=wOOQO7+&Q7+&QOOQO7+&[7+&[O% fQSO7+%pO%!{QPO,5;POGsQQO7+%}O%#QQSO,5:jO%#_QQO1G1nP%$}QQO'#EeOOQO1G1n1G1nO%&cQQO'#D}OOQO1G0Z1G0ZOOQO-E:h-E:hOOQO7+%t7+%tO%'xQWO7+%tOOQO-E:i-E:iOOQO7+'p7+'pO%(WQ`O7+'pOOQO-E:`-E:`OOQO1G/R1G/ROOQO-E:a-E:aOOQO-E:b-E:bOOQO-E:c-E:cO%(fQPO7+%}O%*zQQO,5<wO#4uQQO'#GmO%+RQPO,5>OOOQO,5=Q,5=QOOQO-E:d-E:dOOQOAN=WAN=WO%+vQPOAN=WO(yQQOAN=WO(yQQOAN=WO(yQQOAN@zO(yQQOAN@zO%+{QPOAN@zOOQOAN@zAN@zO%,TQPOAN@zO(yQQOAN@{O(yQQOAN@{O%,YQPOAN@{OOQOAN@{AN@{O%,bQPOAN@{OOQOAN@|AN@|O%,gQPOAN@|O(yQQOAN@|O(yQQOAN@|OOQOANAOANAOO%,lQPOAN=WO%,tQPOAN@zO%-SQPOAN@{O%-bQPOAN@|O%-jQPOANAOO%-qQQO7+%pO%3zQSO1G0cO%4eQSO1G0cO%8vQSO1G0cO%9QQSO1G0cO%9[QSO1G0cO%;oQSO1G0bO%<qQSO1G0bO%=RQSO1G0bO%=cQSO1G0bO%=mQQO1G0iOOQO1G0j1G0jOOQO'#Ei'#EiO%?VQQO'#EiO%?aQPO1G3cO%?iQPO<<IiO%@{QQO,5:iO%CfQQO1G0kOOQO<<I`<<I`OOQO<<K[<<K[O(yQQO<<IiOOQO'#G_'#G_OOQO1G2c1G2cOOQO,5=X,5=XOOQO-E:k-E:kOOQOG22rG22rO%DfQPOG22rOOQOG26fG26fO%DkQPOG26fO(yQQOG26fO(yQQOG26fOOQOG26gG26gO%DpQPOG26gO(yQQOG26gO(yQQOG26gOOQOG26hG26hO%DuQPOG26hO(yQQOG22rO(yQQOG22rO%DzQPOG26fO%ESQPOG26gO(yQQOG26hO(yQQOG26hOOQOG26jG26jO%E[QSO1G1nO%FjQSO'#EeO%FqQSO'#D}O% RQQO'#GiO%F{QPO7+(}O%HXQQO,5:vOOQOAN?TAN?TO%HlQPOAN?TOOQOLD(^LD(^OOQOLD,QLD,QO%HqQPOLD,QOOQOLD,RLD,RO%HvQPOLD,ROOQOLD,SLD,SO%H{QPOLD(^O(yQQOLD,QO(yQQOLD,QO(yQQOLD,RO(yQQOLD,RO%IQQPOLD,SO%IVQSO,5:iOOQO,5=T,5=TOOQO-E:g-E:gOOQOG24oG24oOOQO!$( l!$( lOOQO!$( m!$( mOOQO!$'Kx!$'KxO%IaQPO!$( lO%IfQPO!$( mOOQO!$( n!$( nOOQO!)9EW!)9EWOOQO!)9EX!)9EXO0iQPO'#DtO%IkQSO'#E]O& _QSO'#E]O&%|QSO'#E]O%ItQSO'#E]O%JRQSO'#E]O& lQSO'#E]OGsQQO'#E[O$K[QQO'#E[O$K[QQO'#E[O&&ZQQO'#E[O(yQQO'#E[O&&ZQQO'#E[OGsQQO'#E[O#)`QQO'#E]O&*QQQO'#E[O$JzQQO'#E[O&*bQQO'#E[O!EzQQO'#E[O% UQQO'#E[O&*rQQO'#E[O&.fQQO'#E[O&*bQQO,5;PP$JzQQO,5;PP!7]QQO,5;PP&*QQQO,5;PO% UQQO,5;PO&.fQQO,5;PP&*rQQO,5;PO#)`QQO,5:wO#)`QQO,5:wO#)`QQO,5:wO#)`QQO,5:wO#)`QQO,5:wO#)`QQO,5:wO&.vQSO,5:wO##rQSO,5:wO&/gQSO,5:wO!3UQQO,5:jO&*QQQO,5:vO$JzQQO,5:vO&*bQQO,5:vO!EzQQO,5:vO% UQQO,5:vO&*rQQO,5:vO&.fQQO,5:vO&*QQQO,5:vO$JzQQO,5:vO&*bQQO,5:vO!EzQQO,5:vO% UQQO,5:vO&*rQQO,5:vO&.fQQO,5:vO&*QQQO,5:vO$JzQQO,5:vO&*bQQO,5:vO!EzQQO,5:vO% UQQO,5:vO&*rQQO,5:vO&.fQQO,5:vO&*QQQO,5:vO$JzQQO,5:vO&*bQQO,5:vO!EzQQO,5:vO% UQQO,5:vO&*rQQO,5:vO&.fQQO,5:vO&*QQQO,5:vO$JzQQO,5:vO&*bQQO,5:vO!EzQQO,5:vO% UQQO,5:vO&*rQQO,5:vO&.fQQO,5:vO&*QQQO,5:uO$JzQQO,5:uO&*QQQO,5:tO$JzQQO,5:tO&*QQQO,5:sO&*QQQO,5:rOGsQQO,5<iO4zQQO'#GlO&3}QPO,5:iP&6YQSO1G0kO&8WQQO'#EiO!3UQQO1G0UO&*QQQO,5<SO$JzQQO,5<SO&*bQQO,5<SO!EzQQO,5<SO% UQQO,5<SO&*rQQO,5<SO&.fQQO,5<SO#,vQQO,5<SO&9rQQO1G0bO&:PQQO1G0bO&<QQQO1G0bO&=`QQO1G0bO&=pQQO1G0bO&?_QQO1G0bO&?oQQO1G0bO&@rQQO1G0bO&BQQQO1G0bO&C]QQO1G0bO&CmQQO1G0bO&C}QQO1G0bO&FtQQO1G0bO&GUQQO1G0bO&GfQQO1G0bO&HtQQO1G0bO&IhQQO1G0bO&JkQQO1G0bO&J{QQO1G0bO&LZQQO1G0bO&LhQQO1G0aO&NYQQO1G0aO&N|QQO1G0`O' ZQQO1G0`O' {QQO1G0_O'!YQPO1G0^O'!nQQO,5=wO'#RQQO1G1nO'#uQQO1G1nO'%eQQO1G1nO''eQQO1G1nO''uQQO1G1nP')mQQO'#EeP')wQQO'#EeO'+VQQO'#EeO'-ZQQO'#EeO'-hQQO'#EeO'-rQSO1G0bO'/WQSO1G0bO'/hQSO1G0bO'/xQSO1G0bO'0]QQO'#EiO'0gQQO1G0kP'0tQQO1G0kO'1tQQO1G0kP'2UQQO1G0kP'3UQQO1G0kO'3xQSO1G1nP'4]QSO'#EeO'!nQQO'#GiO'4mQPO7+(}O'*OQPO'#EeO'4uQPO'#EeO'5TQPO'#EeO'5cQQO'#EZO'5jQQO'#EZO'6^QQO'#EYO'6kQQO'#EYO'7]QQO'#EXO'7jQPO'#EWO'8OQPO'#EVO'8dQPO'#F}O'8iQPO'#D}O'9vQPO'#FhO'9{QPO'#FhO':QQPO'#FhO':VQPO'#FhO':[QPO'#FhO':aQPO'#FhO':fQPO'#FhO#,vQQO,5<iO#,vQQO,5<iO':kQPO'#H]P#,vQQO,5<SO#,vQQO,5<SP#,vQQO,5<SO#,vQQO,5<SO#,vQQO,5<SO':pQPO1G3cO':xQQO,5:vO';YQQO,5:vP#,vQQO,5<SO'<fQPO'#EVO(yQQO,5<iO'<zQPO'#EVO'=]QPO'#F}OGsQQO,5<iO!@vQPO'#F}",
    stateData: "'=v~O%dOS%eOSPOSQOS~OVVOpWO!dZO!eYO$y[O${]O$}^O%gPO~O[`O]`O^`O_`O``O~OpbO!ddO!ecO$yeO${fO%gPO~OWhOXhOYhO~OUiOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!bnO!coO!doO!eoO!jpO!kpO!lpO!mpO!npO%ijO~O!csO~O!ctO~OUiOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!bnO!coO!doO!eoO!jpO!kpO!lpO!mpO!npO%iuO%vvO~O&QzO&VyO~P%yOU!POc!OOd!OOe!OOf!OOg!OOh!OOi!OOj!OOk!OOl!OOn!jOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!bnO!coO!doO!eoO!g!hO!jpO!kpO!lpO!mpO!npO!t!gO!u!gO#`!kO$U!lO$Y![O$Z!]O$d!mO$e!mO%i!QO%k!eO%m!fO%z!TO%{!YO&Q!WO&S![O&T!]O~O%i!oOpZa!dZa!eZa$yZa${Za%gZa~O!c!qO~O!c!rO~O&Q!uO&V!tO~P%yO!o!iX%i%rX%v%rXV%rXp%rX!d%rX!e%rX$X%rX$y%rX${%rX$}%rX%g%rX%b%rX~O&Q%rX&V%rX~P.^O!g!yO~O!o!iX%iqX%vqX&QqX&VqXVqXpqX!dqX!eqX$XqX$yqX${qX$}qX%gqX%bqX~O!o!zO~O%i!}O%vvO&Q#PO&V#OO~Op#RO!d#TO!e#SO$y#UO${#VO%gPO~OUoOc!OOd!OOe!OOf!OOg!OOh!OOi!OOj!OOk!OOl!OOn!jOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!bnO!coO!doO!eoO!t!gO!u!gO%k!eO%m!fO%q#[O~O!g#YO~P1bOUoOc!OOd!OOe!OOf!OOg!OOh!OOi!OOj!OOk!OOl!OOn!jOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!bnO!coO!doO!eoO!g!hO!t!gO!u!gO%k!eO%m!fO~O%u#^O~P4zO%i!}O%vvO&Q!uO&V!tO~O$X#eO%vvO~P`O#R%rX#Y%rX#Z%rX#[%rX#_%rX#`%rX#a%rX#b%rX#c%rX#d%rX#e%rX#f%rX#g%rX#h%rX#i%rX#j%rX#k%rX#l%rX#m%rX#n%rX#o%rX#p%rX#q%rX#r%rX#s%rX#t%rX#u%rX#v%rX#w%rX#x%rX#y%rX#z%rX#{%rX#|%rX#}%rX$O%rX$P%rX$Q%rX$R%rX$S%rX$]%rX$^%rX$_%rX$`%rX$a%rX$b%rX$c%rX$f%rX$g%rX$h%rX$i%rX$j%rX$k%rX$l%rX$m%rX$n%rX$o%rX$p%rX$s%rX$t%rX%O%rX%p%rX%y%rX%|%rX%}%rX&O%rX&R%rX%q%rX$V%rX%u%rX$W%rX~P.^OU!POc!OOd!OOe!OOf!OOg!OOh!OOi!OOj!OOk!OOl!OOn!jOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!bnO!coO!doO!eoO!g#YO!jpO!kpO!lpO!mpO!npO!t!gO!u!gO#`!kO$U!lO$Y![O$Z*pO$d*xO$e*xO%i!QO%k!eO%m!fO%p#hO%q#gO%z!TO%{!YO%|#hO&Q!WO&S![O&T*pO~O#R#PX#Z#PX#[#PX#_#PX#`#PX#a#PX#b#PX#c#PX#d#PX#e#PX#f#PX#g#PX#h#PX#i#PX#j#PX#k#PX#l#PX#m#PX#n#PX#o#PX#p#PX#q#PX#r#PX#s#PX#t#PX#u#PX#v#PX#w#PX#x#PX#y#PX#z#PX#{#PX#|#PX#}#PX$O#PX$P#PX$Q#PX$R#PX$S#PX$]#PX$^#PX$_#PX$`#PX$a#PX$b#PX$c#PX$f#PX$g#PX$h#PX$i#PX$j#PX$k#PX$l#PX$m#PX$n#PX$o#PX$p#PX%O#PX%i#PX%p#PX%v#PX%|#PX&O#PXV#PXp#PX!d#PX!e#PX$y#PX${#PX$}#PX%b#PX%g#PX&R#PX%q#PX$V#PX%u#PX#Y#PX$X#PX$W#PX~O!o!iX%}#PX~PB`OU!POc!OOd!OOe!OOf!OOg!OOh!OOi!OOj!OOk!OOl!OOn!jOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!bnO!coO!doO!eoO!g!hO!jpO!kpO!lpO!mpO!npO!t!gO!u!gO#`!kO$U!lO$Y![O$Z*pO$d*xO$e*xO%i!QO%k!eO%m!fO%z!TO%{!YO&Q!WO&S![O&T*pO~O#Y#lO%}#XX%q#XX~O#R#oO#_#pO#`#qO#a#pO#b#pO#c#pO#d#pO#e#pO#f#pO#g#pO#h#qO#i#qO#j#qO#k#rO#l#qO#m#rO#n#sO#o#sO#p#sO#q#sO#r#tO#s#sO#t#sO#u#sO#v#sO#w#sO#x#sO#y#sO#z#sO#{#sO#|#sO#}#sO$O#sO$P#sO$Q#sO$R#sO$S#sO%i#nO%v#mO~O#Z#OX#[#OX$]#OX$^#OX$_#OX$`#OX$a#OX$b#OX$c#OX$f#OX$g#OX$h#OX$i#OX$j#OX$k#OX$l#OX$m#OX$n#OX$o#OX$p#OX%O#OX%p#OX%|#OX&O#OXV#OXp#OX!d#OX!e#OX$y#OX${#OX$}#OX%b#OX%g#OX&R#OX%q#OX$V#OX%u#OX$X#OX$W#OX~PLfO%p#uO%|#uO&R#gO~P(yO#R#PX#Y!rX#Z#PX#[#PX#_#PX#`#PX#a#PX#b#PX#c#PX#d#PX#e#PX#f#PX#g#PX#h#PX#i#PX#j#PX#k#PX#l#PX#m#PX#n#PX#o#PX#p#PX#q#PX#r#PX#s#PX#t#PX#u#PX#v#PX#w#PX#x#PX#y#PX#z#PX#{#PX#|#PX#}#PX$O#PX$P#PX$Q#PX$R#PX$S#PX$]#PX$^#PX$_#PX$`#PX$a#PX$b#PX$c#PX$f#PX$g#PX$h#PX$i#PX$j#PX$k#PX$l#PX$m#PX$n#PX$o#PX$p#PX%O#PX%i#PX%p!rX%p#PX%v#PX%|#PX%}!rX&O#PXV#PXp#PX!d#PX!e#PX$y#PX${#PX$}#PX%b#PX%g#PX&R#PX%q!rX%q#PX$V#PX%u#PX$X#PX$W#PX~O$s#xO$t#xO%y#wO~P!#}O%i#yO~O$]#|O$^#|O$_#}O$`#}O$a$OO$b$OO$c$OO$f$PO$g$PO$h$PO$i$QO$j$QO$k$QO$l$QO#Z!}X#[!}X$m!}X$n!}X$o!}X$p!}X%|!}X&O!}X~O%O!}X%p!}XV!}Xp!}X!d!}X!e!}X$y!}X${!}X$}!}X%b!}X%g!}X&R!}X$V!}X$X!}X$W!}X~P!)sO#Z!|X#[!|X$o!|X$p!|X%p!|X%|!|X&O!|X~O$m$RO$n$RO%O!|XV!|Xp!|X!d!|X!e!|X$y!|X${!|X$}!|X%b!|X%g!|X&R!|X$V!|X$X!|X$W!|X~P!,^O#Z!{X#[!{X%p!{X%|!{X&O!{X~O$o$SO$p$SO%O!{XV!{Xp!{X!d!{X!e!{X$y!{X${!{X$}!{X%b!{X%g!{X&R!{X$V!{X$X!{X$W!{X~P!-{O%p$TO#Z!zX#[!zX%O!zX%|!zX&O!zXV!zXp!zX!d!zX!e!zX$y!zX${!zX$}!zX%b!zX%g!zX&R!zX$V!zX$X!zX$W!zX~O#Z$VO#[$VO%|$UO&O$VO%O!yXV!yXp!yX!d!yX!e!yX$y!yX${!yX$}!yX%b!yX%g!yX&R!yX$V!yX$X!yX$W!yX~O%}$WO~O!x$XO%w$[O%x$YO~O!x$XO%x$YO&U$^O~O%p$_O#Y!qX%}!qX%q!qX~O%k$aO%m$bO%n$cO%o$dO~OU!POc!OOd!OOe!OOf!OOg!OOh!OOi!OOj!OOk!OOl!OOn!jOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!bnO!coO!doO!eoO!jpO!kpO!lpO!mpO!npO!t!gO!u!gO#`!kO$U!lO$Y![O%i$fO%k!eO%m!fO%z!TO%{!YO&Q!WO&S![O~O$Z!]O$d!mO$e!mO&T!]O~P!3UO%O$jO~Oc!OOd!OOe!OOf!OOg!OOh!OOi!OOj!OOk!OOl!OOn!jO~O%i!}O%vvO&Q$pO&V$oO~O%i!}O%vvO&Q$uO&V$tO~O$X$|O%vvO~P`O%q$}O~O!o!zO%i!ha%v!haV!hap!ha!d!ha!e!ha$X!ha$y!ha${!ha$}!ha%g!ha%b!ha~O&Q!ha&V!ha~P!9dO!g!hO~P1bO!c%SO~O!c%TO~O&Q$uO&V$tO~P%yO%i!}O%vvO&Q%YO&V%XOV$vip$vi!d$vi!e$vi$y$vi${$vi$}$vi%b$vi%g$vi$X$vi~O%i!}O%vvO&Q%^O&V%]OV$wip$wi!d$wi!e$wi$y$wi${$wi$}$wi%b$wi%g$wi$X$wi~O%q$}O%p!rX#Y!rX%}!rX~O%p!rX%q!rX#Y!rX#Z!rX#[!rX$]!rX$^!rX$_!rX$`!rX$a!rX$b!rX$c!rX$f!rX$g!rX$h!rX$i!rX$j!rX$k!rX$l!rX&O!rX~O$s+aO$t+aO%y%`O%u!rX%O!rXV!rXp!rX!d!rX!e!rX$y!rX${!rX$}!rX%b!rX%g!rX&R!rX%|!rX$m!rX$n!rX$o!rX$p!rX$V!rX$X!rX$W!rX~P!=`O%q%aO~O%u%bO~O&R$wO~O$X$|O~P`O%q%cO%},]O~O%q%dO~O%p%eO%q%dO%|%eO~O#R!ha#Z!ha#[!ha#_!ha#`!ha#a!ha#b!ha#c!ha#d!ha#e!ha#f!ha#g!ha#h!ha#i!ha#j!ha#k!ha#l!ha#m!ha#n!ha#o!ha#p!ha#q!ha#r!ha#s!ha#t!ha#u!ha#v!ha#w!ha#x!ha#y!ha#z!ha#{!ha#|!ha#}!ha$O!ha$P!ha$Q!ha$R!ha$S!ha$]!ha$^!ha$_!ha$`!ha$a!ha$b!ha$c!ha$f!ha$g!ha$h!ha$i!ha$j!ha$k!ha$l!ha$m!ha$n!ha$o!ha$p!ha%O!ha%p!ha%|!ha&O!ha&R!ha%q!ha$V!ha%}!ha%u!ha#Y!ha$W!ha~P!9dO%q%fO~OU!POrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!bnO!coO!doO!eoO!jpO!kpO!lpO!mpO!npO!t!gO!u!gO#`*wO$U!lO$Y![O$Z*sO$d*{O$e*{O%i$fO%k!eO%m!fO%z!TO%{!YO&Q!WO&S![O&T*sO~P!7rOU!POrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!bnO!coO!doO!eoO!g%nO!jpO!kpO!lpO!mpO!npO!t!gO!u!gO#`!kO$U!lO$Y![O$Z!]O$d!mO$e!mO%i!QO%k!eO%m!fO%u%rO%z!TO%{!YO&Q!WO&S![O&T!]O~P!7rOU!POrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!bnO!coO!doO!eoO!g%nO!jpO!kpO!lpO!mpO!npO!t!gO!u!gO#`!kO$U!lO$Y![O$Z*pO$d*xO$e*xO%i!QO%k!eO%m!fO%q%tO%z!TO%{!YO&Q!WO&S![O&T*pO~P!7rO&R%dO~O%p%|O%|%|O&R%dO~O$s%}O$t%}O#R#Pa#Y!ra#Z#Pa#[#Pa#_#Pa#`#Pa#a#Pa#b#Pa#c#Pa#d#Pa#e#Pa#f#Pa#g#Pa#h#Pa#i#Pa#j#Pa#k#Pa#l#Pa#m#Pa#n#Pa#o#Pa#p#Pa#q#Pa#r#Pa#s#Pa#t#Pa#u#Pa#v#Pa#w#Pa#x#Pa#y#Pa#z#Pa#{#Pa#|#Pa#}#Pa$O#Pa$P#Pa$Q#Pa$R#Pa$S#Pa$]#Pa$^#Pa$_#Pa$`#Pa$a#Pa$b#Pa$c#Pa$f#Pa$g#Pa$h#Pa$i#Pa$j#Pa$k#Pa$l#Pa$m#Pa$n#Pa$o#Pa$p#Pa%O#Pa%i#Pa%p!ra%v#Pa%|#Pa%}!ra&O#PaV#Pap#Pa!d#Pa!e#Pa$y#Pa${#Pa$}#Pa%b#Pa%g#Pa&R#Pa%q#Pa$V#Pa%u#Pa$X#Pa$W#Pa~O%p#Pa%q!ra~P##rOU!POrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!bnO!coO!doO!eoO!jpO!kpO!lpO!mpO!npO!t!gO!u!gO#`*wO$U!lO$Y![O%i$fO%k!eO%m!fO%z!TO%{!YO&Q!WO&S![O~P!7rO%i&PO~P4zO%}&SO~O!x$XO%k&cO%w&aO%x$YO~O!x$XO%x$YO~O!x$XO%m&gO%x$YO&U&eO~O%p$_O#Y!qa%}!qa%q!qa~O%k&mO%l&kO~O%k&nO%l&nO%m&mO~O%k&pO%l&pO%m&pO%n&mO~O%k&rO%l&rO%m&rO%n&rO%o&mO~O#Z#Pa#[#Pa#`#Pa#a#Pa#b#Pa#c#Pa#d#Pa#e#Pa#f#Pa#g#Pa#h#Pa#i#Pa#j#Pa#k#Pa#l#Pa#m#Pa#n#Pa#o#Pa#p#Pa#q#Pa#r#Pa#s#Pa#t#Pa#u#Pa#v#Pa#w#Pa#x#Pa#y#Pa#z#Pa#{#Pa#|#Pa#}#Pa$O#Pa$P#Pa$Q#Pa$R#Pa$S#Pa$]#Pa$^#Pa$_#Pa$`#Pa$a#Pa$b#Pa$c#Pa$f#Pa$g#Pa$h#Pa$i#Pa$j#Pa$k#Pa$l#Pa$m#Pa$n#Pa$o#Pa$p#Pa%O#Pa%|#Pa&O#PaV#Pap#Pa!d#Pa!e#Pa$y#Pa${#Pa$}#Pa%b#Pa%g#Pa&R#Pa%q#Pa$V#Pa%u#Pa$X#Pa$W#Pa~O#R#oO#_#pO%i#nO%v#mO%p#Pa#Y#Pa~P#/[O%y&tO~PB`O$V&uO~OUoOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!bnO!coO!doO!eoO!g&vO~O%y&xO~P#4uO%p&yO%q%jX~O%q&{O~O%i!}O%vvO&Q&}O&V&|O~O%i!}O%vvO&Q'TO&V'SOV$vqp$vq!d$vq!e$vq$y$vq${$vq$}$vq%b$vq%g$vq$X$vq~O%i!}O%vvO&Q'XO&V'WOV$wqp$wq!d$wq!e$wq$y$wq${$wq$}$wq%b$wq%g$wq$X$wq~O&Q'^O&V']O~O&R'ZO~O%i!}O%vvO&Q'^O&V']O~O$X'aO%vvO~P`O$X'aO~P`O&R'PO~O%i!}O%vvO&Q'TO&V'SO~O%i!}O%vvO&Q'XO&V'WO~O%p!ra%q!ra#Y!ra#Z!ra#[!ra$]!ra$^!ra$_!ra$`!ra$a!ra$b!ra$c!ra$f!ra$g!ra$h!ra$i!ra$j!ra$k!ra$l!ra&O!ra~O$s,bO$t,bO%u!ra%O!raV!rap!ra!d!ra!e!ra$y!ra${!ra$}!ra%b!ra%g!ra&R!ra%|!ra$m!ra$n!ra$o!ra$p!ra$V!ra$X!ra$W!ra~P#;hO%q'lO~O#R+WO#_+XO#`+YO#a+XO#b+XO#c+XO#d+XO#e+XO#f+XO#g+XO#h+YO#i+YO#j+YO#k+ZO#l+YO#m+ZO#n+[O#o+[O#p+[O#q+[O#r+]O#s+[O#t+[O#u+[O#v+[O#w+[O#x+[O#y+[O#z+[O#{+[O#|+[O#}+[O$O+[O$P+[O$Q+[O$R+[O$S+[O%i#nO%v#mO~O$]#OX$^#OX$_#OX$`#OX$a#OX$b#OX$c#OX$f#OX$g#OX$h#OX$i#OX$j#OX$k#OX$l#OX%}#OX%q#OX#Z#OX#[#OX&O#OX~P#>gO#R#PX#_#PX#`#PX#a#PX#b#PX#c#PX#d#PX#e#PX#f#PX#g#PX#h#PX#i#PX#j#PX#k#PX#l#PX#m#PX#n#PX#o#PX#p#PX#q#PX#r#PX#s#PX#t#PX#u#PX#v#PX#w#PX#x#PX#y#PX#z#PX#{#PX#|#PX#}#PX$O#PX$P#PX$Q#PX$R#PX$S#PX$]#PX$^#PX$_#PX$`#PX$a#PX$b#PX$c#PX$f#PX$g#PX$h#PX$i#PX$j#PX$k#PX$l#PX%i#PX%v#PX%}#PX%q#PX#Z#PX#[#PX&O#PX~O%y&tO#Y#PX%p#PX~P#BcO$]+eO$^+eO$_+lO$`+lO$a+sO$b+sO$c+sO$f+zO$g+zO$h+zO$i,RO$j,RO$k,RO$l,RO~O%}#Xi%q#Xi~P#FhO$o,YO$p,YO#Z#VX#[#VX%u#VX%|#VX&O#VX%q#VX~O#Z'pO#['pO%|'oO&O'pO%u#UX%q#UX~O%}'qO~O#Y!rX%p!rX%p#]X%u#TX%}!rX%q#TX~O%p#]X%u!}X~P!)sO%p'rO~O%u'sO~O%q'tO~O#R#oO#_#pO%i#nO%v#mO#Z#Pi#[#Pi#`#Pi#h#Pi#i#Pi#j#Pi#k#Pi#l#Pi#m#Pi#n#Pi#o#Pi#p#Pi#q#Pi#r#Pi#s#Pi#t#Pi#u#Pi#v#Pi#w#Pi#x#Pi#y#Pi#z#Pi#{#Pi#|#Pi#}#Pi$O#Pi$P#Pi$Q#Pi$R#Pi$S#Pi$]#Pi$^#Pi$_#Pi$`#Pi$a#Pi$b#Pi$c#Pi$f#Pi$g#Pi$h#Pi$i#Pi$j#Pi$k#Pi$l#Pi$m#Pi$n#Pi$o#Pi$p#Pi%O#Pi%p#Pi%|#Pi&O#PiV#Pip#Pi!d#Pi!e#Pi$y#Pi${#Pi$}#Pi%b#Pi%g#Pi&R#Pi%q#Pi$V#Pi%u#Pi$X#Pi$W#Pi#Y#Pi~O#a#Pi#b#Pi#c#Pi#d#Pi#e#Pi#f#Pi#g#Pi~P#ItO#a#pO#b#pO#c#pO#d#pO#e#pO#f#pO#g#pO~P#ItO#R#oO#_#pO#`#qO#a#pO#b#pO#c#pO#d#pO#e#pO#f#pO#g#pO#h#qO#i#qO#j#qO#l#qO%i#nO%v#mO#Z#Pi#[#Pi#n#Pi#o#Pi#p#Pi#q#Pi#r#Pi#s#Pi#t#Pi#u#Pi#v#Pi#w#Pi#x#Pi#y#Pi#z#Pi#{#Pi#|#Pi#}#Pi$O#Pi$P#Pi$Q#Pi$R#Pi$S#Pi$]#Pi$^#Pi$_#Pi$`#Pi$a#Pi$b#Pi$c#Pi$f#Pi$g#Pi$h#Pi$i#Pi$j#Pi$k#Pi$l#Pi$m#Pi$n#Pi$o#Pi$p#Pi%O#Pi%p#Pi%|#Pi&O#PiV#Pip#Pi!d#Pi!e#Pi$y#Pi${#Pi$}#Pi%b#Pi%g#Pi&R#Pi%q#Pi$V#Pi%u#Pi$X#Pi$W#Pi#Y#Pi~O#k#Pi#m#Pi~P$ lO#k#rO#m#rO~P$ lO#Z#Pi#[#Pi$]#Pi$^#Pi$_#Pi$`#Pi$a#Pi$b#Pi$c#Pi$f#Pi$g#Pi$h#Pi$i#Pi$j#Pi$k#Pi$l#Pi$m#Pi$n#Pi$o#Pi$p#Pi%O#Pi%p#Pi%|#Pi&O#PiV#Pip#Pi!d#Pi!e#Pi$y#Pi${#Pi$}#Pi%b#Pi%g#Pi&R#Pi%q#Pi$V#Pi%u#Pi$X#Pi$W#Pi#Y#Pi~PLfO&R'lO~O#Y!ri%p!ri%}!ri%q!ri$]!ri$^!ri$_!ri$`!ri$a!ri$b!ri$c!ri$f!ri$g!ri$h!ri$i!ri$j!ri$k!ri$l!ri#Z!ri#[!ri&O!ri~P#>gO%}'wO~O$s#xO$t#xO%y'xO%}!rX~P!=`O#Z#Oi#[#Oi$_#Oi$`#Oi$a#Oi$b#Oi$c#Oi$f#Oi$g#Oi$h#Oi$i#Oi$j#Oi$k#Oi$l#Oi$m#Oi$n#Oi$o#Oi$p#Oi%O#Oi%|#Oi&O#OiV#Oip#Oi!d#Oi!e#Oi$y#Oi${#Oi$}#Oi%b#Oi%g#Oi&R#Oi$V#Oi%u#Oi$X#Oi$W#Oi~O$]#|O$^#|O%p#Oi~P$+vO$]#|O$^#|O$_#}O$`#}O$a$OO$b$OO#Z#Oi#[#Oi$i#Oi$j#Oi$k#Oi$l#Oi$m#Oi$n#Oi$o#Oi$p#Oi%O#Oi%p#Oi%|#Oi&O#OiV#Oip#Oi!d#Oi!e#Oi$y#Oi${#Oi$}#Oi%b#Oi%g#Oi&R#Oi$V#Oi%u#Oi$X#Oi$W#Oi~O$c#Oi$f#Oi$g#Oi$h#Oi~P$.dO$c$OO$f$PO$g$PO$h$PO~P$.dO#Z#Oi#[#Oi$m#Oi$n#Oi$o#Oi$p#Oi%O#Oi%|#Oi&O#OiV#Oip#Oi!d#Oi!e#Oi$y#Oi${#Oi$}#Oi%b#Oi%g#Oi&R#Oi$V#Oi%u#Oi$X#Oi$W#Oi~O$]#|O$^#|O$_#}O$`#}O$a$OO$b$OO$c$OO$f$PO$g$PO$h$PO$i$QO$j$QO$k$QO$l$QO%p#Oi~P$1bO$]#|O$^#|O$_#}O$`#}O$a$OO$b$OO$c$OO$f$PO$g$PO$h$PO$i$QO$j$QO$k$QO$l$QO~O#Z!}i#[!}i$m!}i$n!}i$o!}i$p!}i%O!}i%p!}i%|!}i&O!}iV!}ip!}i!d!}i!e!}i$y!}i${!}i$}!}i%b!}i%g!}i&R!}i$V!}i$X!}i$W!}i~P$4OO#Z!|i#[!|i$o!|i$p!|i%p!|i%|!|i&O!|i~O$m$RO$n$RO%O!|iV!|ip!|i!d!|i!e!|i$y!|i${!|i$}!|i%b!|i%g!|i&R!|i$V!|i$X!|i$W!|i~P$6iO#Z!{i#[!{i%p!{i%|!{i&O!{i~O$o$SO$p$SO%O!{iV!{ip!{i!d!{i!e!{i$y!{i${!{i$}!{i%b!{i%g!{i&R!{i$V!{i$X!{i$W!{i~P$8WO%p$TO#Z!zi#[!zi%O!zi%|!zi&O!ziV!zip!zi!d!zi!e!zi$y!zi${!zi$}!zi%b!zi%g!zi&R!zi$V!zi$X!zi$W!zi~O%q'}O~O!x$XO%k(PO%w&aO%x$YO~O!x$XO%m(SO%x$YO&U&eO~O%k(VO%l&kO~O%k&nO%l&nO%m(VO~O%k&pO%l&pO%m&pO%n(VO~O%k&rO%l&rO%m&rO%n&rO%o(VO~O%Q([OV%PXp%PX!d%PX!e%PX$y%PX${%PX$}%PX%b%PX%g%PX%p%PX$X%PX~O%p(]OV&WXp&WX!d&WX!e&WX$y&WX${&WX$}&WX%b&WX%g&WX$X&WX~O%p&yO%q%ja~O&Q(dO&V(cO~O&R(aO~O%i!}O%vvO&Q(fO&V(eO~O%i!}O%vvO&Q(kO&V(jO~O&R(oO~O&Q(rO&V(qO~O$X(sO~P`O%i!}O%vvO&Q(dO&V(cO~O%i!}O%vvO&Q(fO&V(eOV$vyp$vy!d$vy!e$vy$y$vy${$vy$}$vy%b$vy%g$vy$X$vy~O%i!}O%vvO&Q(kO&V(jOV$wyp$wy!d$wy!e$wy$y$wy${$wy$}$wy%b$wy%g$wy$X$wy~O%i!}O%vvO&Q(rO&V(qO~O$X(sO%vvO~P`O&R(hO~O&R(mO~O%p!ri%q!ri%u!ri#Y!ri%O!riV!rip!ri!d!ri!e!ri$y!ri${!ri$}!ri%b!ri%g!ri&R!ri%|!ri#Z!ri#[!ri$]!ri$^!ri$_!ri$`!ri$a!ri$b!ri$c!ri$f!ri$g!ri$h!ri$i!ri$j!ri$k!ri$l!ri$m!ri$n!ri$o!ri$p!ri&O!ri$V!ri$X!ri$W!ri~PLfO$]#Oa$^#Oa$_#Oa$`#Oa$a#Oa$b#Oa$c#Oa$f#Oa$g#Oa$h#Oa$i#Oa$j#Oa$k#Oa$l#Oa%q#Oa~O#Z,jO#[,jO&O,jO%}#Oa~P$EgO#`#Pa#a#Pa#b#Pa#c#Pa#d#Pa#e#Pa#f#Pa#g#Pa#h#Pa#i#Pa#j#Pa#k#Pa#l#Pa#m#Pa#n#Pa#o#Pa#p#Pa#q#Pa#r#Pa#s#Pa#t#Pa#u#Pa#v#Pa#w#Pa#x#Pa#y#Pa#z#Pa#{#Pa#|#Pa#}#Pa$O#Pa$P#Pa$Q#Pa$R#Pa$S#Pa$]#Pa$^#Pa$_#Pa$`#Pa$a#Pa$b#Pa$c#Pa$f#Pa$g#Pa$h#Pa$i#Pa$j#Pa$k#Pa$l#Pa%}#Pa%q#Pa#Z#Pa#[#Pa&O#Pa~O#R+WO#_+XO%i#nO%v#mO#Y#Pa%p#Pa~P$FxO$Z*qO$d*yO$e*yO&T*qO~P!3UOU!POrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!bnO!coO!doO!eoO!g!hO!jpO!kpO!lpO!mpO!npO!t!gO!u!gO#`!kO$U!lO$Y![O$Z*qO$d*yO$e*yO%i!QO%k!eO%m!fO%z!TO%{!YO&Q!WO&S![O&T*qO~P!7rO!g)VO$Z*tO$d*|O$e*|O&T*tO~P!3UO#Y!rq%p!rq%}!rq%q!rq$]!rq$^!rq$_!rq$`!rq$a!rq$b!rq$c!rq$f!rq$g!rq$h!rq$i!rq$j!rq$k!rq$l!rq#Z!rq#[!rq&O!rq~P#>gO%q%cO~O$s%}O$t%}O%}!ra~P#;hO#Z$[i#[$[i$m$[i$n$[i$o$[i$p$[i%O$[i%p$[i%|$[i&O$[iV$[ip$[i!d$[i!e$[i$y$[i${$[i$}$[i%b$[i%g$[i&R$[i$V$[i%u$[i$X$[i$W$[i~P$4OO#Y+RO~Q#XX#Y!qX#Z!qX#[!qX$]!qX$^!qX$_!qX$`!qX$a!qX$b!qX$c!qX$f!qX$g!qX$h!qX$i!qX$j!qX$k!qX$l!qX&O!qX%q!qX~O%p,^O$m!qX$n!qX$o!qX$p!qX%O!qX%|!qXV!qXp!qX!d!qX!e!qX$y!qX${!qX$}!qX%b!qX%g!qX&R!qX$V!qX%u!qX$X!qX$W!qX~P%%UO!x$XO%k)]O%w&aO%x$YO~O!x$XO%m)^O%x$YO&U&eO~O$W)_O~OUoOrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!bnO!coO!doO!eoO~O!g)`O~P%(kO%p(]OV&Wap&Wa!d&Wa!e&Wa$y&Wa${&Wa$}&Wa%b&Wa%g&Wa$X&Wa~O&R)dO~O&Q)iO&V)hO~O&R)fO~O&Q)mO&V)lO~O&R)jO~O&R)nO~O&Q)qO&V)pO~O%i!}O%vvO&Q)iO&V)hO~O%i!}O%vvO&Q)mO&V)lO~O&Q)uO&V)tO~O$X)vO~P`O%p!rq%q!rq%u!rq#Y!rq%O!rqV!rqp!rq!d!rq!e!rq$y!rq${!rq$}!rq%b!rq%g!rq&R!rq%|!rq#Z!rq#[!rq$]!rq$^!rq$_!rq$`!rq$a!rq$b!rq$c!rq$f!rq$g!rq$h!rq$i!rq$j!rq$k!rq$l!rq$m!rq$n!rq$o!rq$p!rq&O!rq$V!rq$X!rq$W!rq~PLfO#R+WO#_+XO%i#nO%v#mO#`#Pi#h#Pi#i#Pi#j#Pi#k#Pi#l#Pi#m#Pi#n#Pi#o#Pi#p#Pi#q#Pi#r#Pi#s#Pi#t#Pi#u#Pi#v#Pi#w#Pi#x#Pi#y#Pi#z#Pi#{#Pi#|#Pi#}#Pi$O#Pi$P#Pi$Q#Pi$R#Pi$S#Pi$]#Pi$^#Pi$_#Pi$`#Pi$a#Pi$b#Pi$c#Pi$f#Pi$g#Pi$h#Pi$i#Pi$j#Pi$k#Pi$l#Pi%}#Pi#Y#Pi%p#Pi%q#Pi#Z#Pi#[#Pi&O#Pi~O#a#Pi#b#Pi#c#Pi#d#Pi#e#Pi#f#Pi#g#Pi~P%0cO#a+XO#b+XO#c+XO#d+XO#e+XO#f+XO#g+XO~P%0cO#R+WO#_+XO#`+YO#a+XO#b+XO#c+XO#d+XO#e+XO#f+XO#g+XO#h+YO#i+YO#j+YO#l+YO%i#nO%v#mO#n#Pi#o#Pi#p#Pi#q#Pi#r#Pi#s#Pi#t#Pi#u#Pi#v#Pi#w#Pi#x#Pi#y#Pi#z#Pi#{#Pi#|#Pi#}#Pi$O#Pi$P#Pi$Q#Pi$R#Pi$S#Pi$]#Pi$^#Pi$_#Pi$`#Pi$a#Pi$b#Pi$c#Pi$f#Pi$g#Pi$h#Pi$i#Pi$j#Pi$k#Pi$l#Pi%}#Pi#Y#Pi%p#Pi%q#Pi#Z#Pi#[#Pi&O#Pi~O#k#Pi#m#Pi~P%5OO#k+ZO#m+ZO~P%5OO$]#Pi$^#Pi$_#Pi$`#Pi$a#Pi$b#Pi$c#Pi$f#Pi$g#Pi$h#Pi$i#Pi$j#Pi$k#Pi$l#Pi%}#Pi#Y#Pi%p#Pi%q#Pi#Z#Pi#[#Pi&O#Pi~P#>gO$_#Oi$`#Oi$a#Oi$b#Oi$c#Oi$f#Oi$g#Oi$h#Oi$i#Oi$j#Oi$k#Oi$l#Oi%}#Oi%q#Oi~O$]+eO$^+eO~P%:qO$]+eO$^+eO$_+lO$`+lO$a+sO$b+sO$i#Oi$j#Oi$k#Oi$l#Oi%}#Oi%q#Oi~O$c#Oi$f#Oi$g#Oi$h#Oi~P%;yO$c+sO$f+zO$g+zO$h+zO~P%;yO%}#Oi%q#Oi~P#FhO$o,YO$p,YO#Z#Vi#[#Vi%u#Vi%|#Vi&O#Vi%q#Vi~O$]+fO$^+fO$_+mO$`+mO$a+tO$b+tO$c+tO$f+{O$g+{O$h+{O$i,SO$j,SO$k,SO$l,SO~O%p#]X%u#]X~P%>XO%p)zO%u&Pi~O%q)}O~O#Y!qa#Z!qa#[!qa$]!qa$^!qa$_!qa$`!qa$a!qa$b!qa$c!qa$f!qa$g!qa$h!qa$i!qa$j!qa$k!qa$l!qa&O!qa%q!qa~O%p,^O$m!qa$n!qa$o!qa$p!qa%O!qa%|!qaV!qap!qa!d!qa!e!qa$y!qa${!qa$}!qa%b!qa%g!qa&R!qa$V!qa%u!qa$X!qa$W!qa~P%?nO%O#XiV#Xip#Xi!d#Xi!e#Xi$y#Xi${#Xi$}#Xi%b#Xi%g#Xi&R#Xi%q#Xi$V#Xi%u#Xi$X#Xi$W#Xi~O$]+dO$^+dO$_+kO$`+kO$a+rO$b+rO$c+rO$f+yO$g+yO$h+yO$i,QO$j,QO$k,QO$l,QO~P%BbO&R*PO~O&R*QO~O&R*SO~O&R*UO~O&Q*XO&V*WO~O&Q*ZO&V*YO~O%}$[i%q$[i~P#FhO$]#XX$^#XX$_#XX$`#XX$a#XX$b#XX$c#XX$f#XX$g#XX$h#XX$i#XX$j#XX$k#XX$l#XX%}#XX%q#XX~O#Y#lO~P%EfO%p$_O%}!qX~P%%UO%p)zO%u&Pq~O$]#Oa$^#Oa$_#Oa$`#Oa$a#Oa$b#Oa$c#Oa$f#Oa$g#Oa$h#Oa$i#Oa$j#Oa$k#Oa$l#Oa%p#Oa%|#Oa~O#Z.ZO#[.ZO&O.ZO%u#Oa&R#Oa~P%GTO$X*`O~O&R*aO~O&R*bO~O&R*cO~O&R*fO~O%p$_O%}!qa~P%?nO&R*gO~O&R*hO~O$s#xO$t#xO%y+^O#Y!rX%p!rX%}!rX~P#BcO#R#PX#Y!rX#Z#PX#[#PX#_#PX#`#PX#a#PX#b#PX#c#PX#d#PX#e#PX#f#PX#g#PX#h#PX#i#PX#j#PX#k#PX#l#PX#m#PX#n#PX#o#PX#p#PX#q#PX#r#PX#s#PX#t#PX#u#PX#v#PX#w#PX#x#PX#y#PX#z#PX#{#PX#|#PX#}#PX$O#PX$P#PX$Q#PX$R#PX$S#PX$]#PX$^#PX$_#PX$`#PX$a#PX$b#PX$c#PX$f#PX$g#PX$h#PX$i#PX$j#PX$k#PX$l#PX$m#PX$n#PX$o#PX$p#PX%i#PX%p!rX%u#PX%v#PX%|#PX%}!rX&O#PX%q#PX%O#PXV#PXp#PX!d#PX!e#PX$y#PX${#PX$}#PX%b#PX%g#PX&R#PX$V#PX$X#PX$W#PX~O$s#xO$t#xO%y+_O~P%JRO#R#PX#Y!rX#Z#PX#[#PX#_#PX#`#PX#a#PX#b#PX#c#PX#d#PX#e#PX#f#PX#g#PX#h#PX#i#PX#j#PX#k#PX#l#PX#m#PX#n#PX#o#PX#p#PX#q#PX#r#PX#s#PX#t#PX#u#PX#v#PX#w#PX#x#PX#y#PX#z#PX#{#PX#|#PX#}#PX$O#PX$P#PX$Q#PX$R#PX$S#PX$]#PX$^#PX$_#PX$`#PX$a#PX$b#PX$c#PX$f#PX$g#PX$h#PX$i#PX$j#PX$k#PX$l#PX$m#PX$n#PX$o#PX$p#PX%i#PX%p!rX%p#PX%q#PX%v#PX%|#PX%}!rX&O#PX~O$s#xO$t#xO%y+`O~P& lOU!POrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!bnO!coO!doO!eoO!g!hO!jpO!kpO!lpO!mpO!npO!t!gO!u!gO#`*wO$U!lO$Y![O$Z*uO$d*}O$e*}O%i!QO%k!eO%m!fO%z!TO%{!YO&Q!WO&S![O&T*uO~P!7rO$Z*pO$d*xO$e*xO&T*pO~P!3UO$Z*rO$d*zO$e*zO&T*rO~P!3UOU!POrnOsnOtnOunOvnOwnOxnOynOznO{nO|nO}nO!OnO!PnO!QnO!RnO!SnO!TnO!UnO!VnO!WnO!XnO!YnO!ZnO![nO!]nO!^nO!_nO!`nO!anO!bnO!coO!doO!eoO!jpO!kpO!lpO!mpO!npO!t!gO!u!gO#`*wO$U!lO$Y![O$Z*uO$d*}O$e*}O%i$fO%k!eO%m!fO%z!TO%{!YO&Q!WO&S![O&T*uO~P!7rO$Z*vO$d+OO$e+OO&T*vO~P!3UO$s%}O$t%}O#R#Pa#Y!ra#_#Pa%i#Pa%p!ra%v#Pa%}!ra~P$FxO$s%}O$t%}O#R#Pa#Y!ra#Z#Pa#[#Pa#_#Pa#`#Pa#a#Pa#b#Pa#c#Pa#d#Pa#e#Pa#f#Pa#g#Pa#h#Pa#i#Pa#j#Pa#k#Pa#l#Pa#m#Pa#n#Pa#o#Pa#p#Pa#q#Pa#r#Pa#s#Pa#t#Pa#u#Pa#v#Pa#w#Pa#x#Pa#y#Pa#z#Pa#{#Pa#|#Pa#}#Pa$O#Pa$P#Pa$Q#Pa$R#Pa$S#Pa$]#Pa$^#Pa$_#Pa$`#Pa$a#Pa$b#Pa$c#Pa$f#Pa$g#Pa$h#Pa$i#Pa$j#Pa$k#Pa$l#Pa$m#Pa$n#Pa$o#Pa$p#Pa%i#Pa%p!ra%p#Pa%q#Pa%v#Pa%|#Pa%}!ra&O#Pa~O%p,^O%q!qa%u!qa#Y!qa%O!qaV!qap!qa!d!qa!e!qa$y!qa${!qa$}!qa%b!qa%g!qa&R!qa%|!qa$V!qa$X!qa$W!qa~O$]+gO$^+gO$_+nO$`+nO$a+uO$b+uO$c+uO$f+|O$g+|O$h+|O$i,TO$j,TO$k,TO$l,TO~O#Z#Xi#[#Xi%}#Xi&O#Xi%q#Xi~P&5[O$]+bO$^+bO$_+iO$`+iO$a+pO$b+pO$c+pO$f+wO$g+wO$h+wO$i,OO$j,OO$k,OO$l,OO#Z!}X#[!}X$m!}X$n!}X$o!}X$p!}X%q!}X%|!}X&O!}X~O%p#]X~P&6mO#Z#Oi#[#Oi$_#Oi$`#Oi$a#Oi$b#Oi$c#Oi$f#Oi$g#Oi$h#Oi$i#Oi$j#Oi$k#Oi$l#Oi$m#Oi$n#Oi$o#Oi$p#Oi%q#Oi%|#Oi&O#Oi~O$]+bO$^+bO%p#Oi~P&8_O$]+cO$^+cO%q#Oi~P$+vO$]+dO$^+dO$c#Oi$f#Oi$g#Oi$h#Oi$i#Oi$j#Oi$k#Oi$l#Oi%O#OiV#Oip#Oi!d#Oi!e#Oi$y#Oi${#Oi$}#Oi%b#Oi%g#Oi&R#Oi%q#Oi$V#Oi%u#Oi$X#Oi$W#Oi~O$_#Oi$`#Oi$a#Oi$b#Oi~P&:^O$_#Oi$`#Oi$a#Oi$b#Oi$c#Oi$f#Oi$g#Oi$h#Oi$i#Oi$j#Oi$k#Oi$l#Oi%p#Oi%|#Oi~O$]+fO$^+fO%u#Oi&R#Oi~P&<bO$]+hO$^+hO%q#Oi~P&<bO$]+bO$^+bO$_+iO$`+iO$a+pO$b+pO#Z#Oi#[#Oi$i#Oi$j#Oi$k#Oi$l#Oi$m#Oi$n#Oi$o#Oi$p#Oi%p#Oi%q#Oi%|#Oi&O#Oi~O$c#Oi$f#Oi$g#Oi$h#Oi~P&=}O$]+cO$^+cO$_+jO$`+jO$a+qO$b+qO$c#Oi$f#Oi$g#Oi$h#Oi$i#Oi$j#Oi$k#Oi$l#Oi%q#Oi~P$1bO$_+kO$`+kO$a+rO$b+rO~P&:^O$]+fO$^+fO$_+mO$`+mO$a+tO$b+tO$i#Oi$j#Oi$k#Oi$l#Oi%p#Oi%u#Oi%|#Oi&R#Oi~O$c#Oi$f#Oi$g#Oi$h#Oi~P&ASO$]+hO$^+hO$_+oO$`+oO$a+vO$b+vO$i#Oi$j#Oi$k#Oi$l#Oi%p#Oi%q#Oi%|#Oi~O$c#Oi$f#Oi$g#Oi$h#Oi~P&BbO$c+pO$f+wO$g+wO$h+wO~P&=}O$]+cO$^+cO$_+jO$`+jO$a+qO$b+qO$c+qO$f+xO$g+xO$h+xO$i#Oi$j#Oi$k#Oi$l#Oi%q#Oi~P$1bO$]+dO$^+dO$_+kO$`+kO$a+rO$b+rO$c+rO$f+yO$g+yO$h+yO%O#OiV#Oip#Oi!d#Oi!e#Oi$y#Oi${#Oi$}#Oi%b#Oi%g#Oi&R#Oi%q#Oi$V#Oi%u#Oi$X#Oi$W#Oi~O$i#Oi$j#Oi$k#Oi$l#Oi~P&EQO$c+tO$f+{O$g+{O$h+{O~P&ASO$c+vO$f+}O$g+}O$h+}O~P&BbO$]+bO$^+bO$_+iO$`+iO$a+pO$b+pO$c+pO$f+wO$g+wO$h+wO$i,OO$j,OO$k,OO$l,OO~O#Z#Oi#[#Oi$m#Oi$n#Oi$o#Oi$p#Oi%p#Oi%q#Oi%|#Oi&O#Oi~P&GvO$]+cO$^+cO$_+jO$`+jO$a+qO$b+qO$c+qO$f+xO$g+xO$h+xO$i,PO$j,PO$k,PO$l,PO%q#Oi~P$1bO$i,QO$j,QO$k,QO$l,QO~P&EQO%p#Oi%u#Oi%|#Oi&R#Oi~P%>XO$]+hO$^+hO$_+oO$`+oO$a+vO$b+vO$c+vO$f+}O$g+}O$h+}O$i,UO$j,UO$k,UO$l,UO~O%p#Oi%q#Oi%|#Oi~P&K]O#Z!}i#[!}i$m!}i$n!}i$o!}i$p!}i%p!}i%q!}i%|!}i&O!}i~P&GvO$]+cO$^+cO$_+jO$`+jO$a+qO$b+qO$c+qO$f+xO$g+xO$h+xO$i,PO$j,PO$k,PO$l,PO~O#Z!}i#[!}i$m!}i$n!}i$o!}i$p!}i%u!}i%|!}i&O!}i%q!}i~P&M[O$m,VO$n,VO%q!|i~P$6iO$m,WO$n,WO#Z!|i#[!|i$o!|i$p!|i%u!|i%|!|i&O!|i%q!|i~O$o,XO$p,XO%q!{i~P$8WO%p,ZO#Z!zi#[!zi%q!zi%|!zi&O!zi~O!g)VO$Z*vO$d+OO$e+OO&T*vO~P!3UO#Z$[i#[$[i$m$[i$n$[i$o$[i$p$[i%p$[i%q$[i%|$[i&O$[i~P&GvO#Z$[i#[$[i$m$[i$n$[i$o$[i$p$[i%u$[i%|$[i&O$[i%q$[i%O$[iV$[ip$[i!d$[i!e$[i$y$[i${$[i$}$[i%b$[i%g$[i&R$[i$V$[i$X$[i$W$[i~P&M[O$]+dO$^+dO$_+kO$`+kO$a+rO$b+rO$c+rO$f+yO$g+yO$h+yO$i,QO$j,QO$k,QO$l,QO%O$[iV$[ip$[i!d$[i!e$[i$y$[i${$[i$}$[i%b$[i%g$[i&R$[i%q$[i$V$[i%u$[i$X$[i$W$[i~O%p$[i%u$[i%|$[i&R$[i~P%>XO%p$[i%q$[i%|$[i~P&K]O#Z#XX#[#XX$]#XX$^#XX$_#XX$`#XX$a#XX$b#XX$c#XX$f#XX$g#XX$h#XX$i#XX$j#XX$k#XX$l#XX$m#XX$n#XX$o#XX$p#XX%q#XX%|#XX&O#XX~O#Y+SO%p#XX~P'(SO#Y+QO~Q#XX#Y+PO%O#XXV#XXp#XX!d#XX!e#XX$y#XX${#XX$}#XX%b#XX%g#XX&R#XX%q#XX$V#XX%u#XX$X#XX$W#XX~O$]#XX$^#XX$_#XX$`#XX$a#XX$b#XX$c#XX$f#XX$g#XX$h#XX$i#XX$j#XX$k#XX$l#XX~P'*OO$]#XX$^#XX$_#XX$`#XX$a#XX$b#XX$c#XX$f#XX$g#XX$h#XX$i#XX$j#XX$k#XX$l#XX%p#XX%|#XX~O#Y+TO%u#XX&R#XX~P',VO#Y+UO%q#XX~P',VO$]+gO$^+gO#Z#Oi#[#Oi&O#Oi~P%:qO$]+gO$^+gO$_+nO$`+nO$a+uO$b+uO#Z#Oi#[#Oi$i#Oi$j#Oi$k#Oi$l#Oi%}#Oi&O#Oi%q#Oi~O$c#Oi$f#Oi$g#Oi$h#Oi~P'.VO$c+uO$f+|O$g+|O$h+|O~P'.VO#Z#Oi#[#Oi%}#Oi&O#Oi%q#Oi~P&5[O%p#]X%q#]X~P&K]O%p#Xi%q#Xi%|#Xi~P&K]O$]+cO$^+cO$_+jO$`+jO$a+qO$b+qO$c+qO$f+xO$g+xO$h+xO$i,PO$j,PO$k,PO$l,PO~Q#Xi%p#Xi%|#Xi&R#Xi%u#Xi~P%>XO$]#|O$^#|O$_#}O$`#}O$a$OO$b$OO$c$OO$f$PO$g$PO$h$PO$i$QO$j$QO$k$QO$l$QO~Q#Xi#Z#Xi#[#Xi$m#Xi$n#Xi$o#Xi$p#Xi%p#Xi%q#Xi%|#Xi&O#Xi~P&GvO#Z$[i#[$[i%}$[i&O$[i%q$[i~P&5[O#Y+VO#Z#XX#[#XX&O#XX~P%EfO%p-nO%q&Pq~O#Y+TO%p#XX%|#XX&R#XX~O#Y+UO%p#XX%q#XX%|#XX~O%p!}X~P&6mO#Z!}X#[!}X$m!}X$n!}X$o!}X$p!}X%u!}X%|!}X&O!}X%q!}X~P&M[O$m,VO$n,VO%q!|X~P!,^O$m,WO$n,WO#Z!|X#[!|X$o!|X$p!|X%u!|X%|!|X&O!|X%q!|X~O$o,XO$p,XO%q!{X~P!-{O%p,ZO#Z!zX#[!zX%q!zX%|!zX&O!zX~O#Z.TO#[.TO%|,[O&O.TO%p!yX%q!yX~O%}.eO~O%p,^O%q!qX%u!qX#Y!qX%O!qXV!qXp!qX!d!qX!e!qX$y!qX${!qX$}!qX%b!qX%g!qX&R!qX%|!qX$V!qX$X!qX$W!qX~O%},cO~O%},dO~O%},eO~O%},fO~O%},gO~O%},hO~O%},iO~O%p-VO~O%p-nO%q&Pi~O#Z.[O#[.[O&O.[O%q#Oa~P%GTO#Z.XO#[.XO&O.XO%O#OaV#Oap#Oa!d#Oa!e#Oa$y#Oa${#Oa$}#Oa%b#Oa%g#Oa&R#Oa$V#Oa%u#Oa$X#Oa$W#Oa~P$EgO#Z.UO#[.UO%|$UO&O.UO%p!yX&R!yX~O#Z$VO#[$VO%|,[O&O$VO%q!yX~O%}.bO~O%lYe!o%y!tU%{XW&Ulk%wdcd!g%}~",
    goto: "!I`&XPPPP&Y&hPPPPP&vPPPPP'X'[PPPPPPPPPP+cP/fP/iPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP0hP4g8fPPPPPP<e=Z?oAsPPFOJPPJiNP! c!!w!$g!&Y!,W4xP4x!0j!0p!0w!0|!1RPPP!3n4xPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP4xPPPPPP!4OPPPPPPPPPPPPPPPPPPPP!4YFOPP!5f&Y&Y&YP&YP&YPP!6vP!6|!7P!7i!8O!8U!8[!8b!8h!8n!8x!:`!:j!:t!;O!;bPPPP!;hP!;vP!;yPPPPPPP!;|!@u!E^PPPPPPPPPP!0jPPPPPP!I]iSOU}!x#c#d$z${%V'`'f(xiXOU}!x#c#d$z${%V'`'f(xoQORUXr}!x#c#d$z${%V'`'f(xR$m!o(|!g^uvyz!Q!T!W!]!k!l!m!t!u!}#O#P#l#m#n#o#p#q#r#s#t#x#y#|#}$O$P$Q$R$S$T$U$V$W$Y$_$f$o$p$t$u%X%Y%]%^%}&P&S&T&u&|&}'S'T'W'X']'^'o'p'q'r'w(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u)z*W*X*Y*Z*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,T,U,V,W,X,Y,Z,[,],^,b,c,d,e,f,g,h,i,j-V-n.T.U.W.X.Y.Z.[.`.b.eQ$k!oR(_&y)R!O^uvyz!Q!T!W!]!k!l!m!o!t!u!}#O#P#l#m#n#o#p#q#r#s#t#x#y#|#}$O$P$Q$R$S$T$U$V$W$Y$_$f$o$p$t$u%X%Y%]%^%}&P&S&T&u&y&|&}'S'T'W'X']'^'o'p'q'r'w(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u)z*W*X*Y*Z*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,T,U,V,W,X,Y,Z,[,],^,b,c,d,e,f,g,h,i,j-V-n.T.U.W.X.Y.Z.[.`.b.eR$e!jQqWQ|[Q}]Q!pbQ!weQ!xfQ#WsQ#XtQ$r!qQ$s!rQ%R#RQ%U#UQ%V#VQ'c%SR'd%TnkW[]befst!q!r#R#U#V%S%T(V!S^yz!Q!T!W!]!k!l!m!t!u#O#P#l#m#n#o#p#q#r#s#t#x#|#}$O$P$Q$R$S$T$U$W$Y$f$o$p$t$u%X%Y%]%^%}&S&u&|&}'S'T'W'X']'^'o'q'r'w(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u)z*W*X*Y*Z*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,T,U,V,W,X,Y,Z,[,],b,c,d,e,f,g,h,i-V-n.b.enmW[]befst!q!r#R#U#V%S%T(V!Y^yz!Q!T!W!]!k!l!m!t!u#O#P#l#m#n#o#p#q#r#s#t#x#|#}$O$P$Q$R$S$T$U$W$Y$f$o$p$t$u%X%Y%]%^%}&S&u&|&}'S'T'W'X']'^'o'q'r'w(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u)z*W*X*Y*Z*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,T,U,V,W,X,Y,Z,[,],b,c,d,e,f,g,h,i-V-n.b.enlW[]befst!q!r#R#U#V%S%T(V*i^yz!Q!T!W!]!k!l!m!t!u#O#P#l#m#n#o#p#q#r#s#t#x#|#}$O$P$Q$R$S$T$U$W$Y$f$o$p$t$u%X%Y%]%^%}&S&u&|&}'S'T'W'X']'^'o'q'r'w(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u)z*W*X*Y*Z*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,T,U,V,W,X,Y,Z,[,],b,c,d,e,f,g,h,i-V-n.b.e!gw[eqx|}!p!s!w!x!|#U#W#X#c$n$r$s$y$z%R%U%V%W%['R'V'b'c'd'e'f(u(v#|!U^yz!Q!T!W!]!l!t!u#O#P#m#n#y$W$Y$f$o$p$t$u%X%Y%]%^&u&|&}'S'T'W'X']'^'q'w(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u*W*X*Y*Z*p*q*r*s*t*u*v,].b.eS#]u!}Q#_vQ'z&TQ)x,jQ-].WQ-^.YQ-_.XQ-`.ZQ-a.[Q-m.`U-p$V&P'pQ-q.UR-r.T#|!i^yz!Q!T!W!]!l!t!u#O#P#m#n#y$W$Y$f$o$p$t$u%X%Y%]%^&u&|&}'S'T'W'X']'^'q'w(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u*W*X*Y*Z*p*q*r*s*t*u*v,].b.eS&i$_,^['|&T.W.X.Y.Z.[S)y,j.`a-{uv!}$V&P'p.T.U%Y!Y!k!m#l#o#p#q#r#s#t#x#|#}$O$P$Q$R$S$T$U%}&S'o'r)z*w*x*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,T,U,V,W,X,Y,Z,[,b,c,d,e,f,g,h,i-V-n#^!Z^yz!Q!W!]!l!t!u#O#P#m$W$o$p$t$u%X%Y%]%^&u&|&}'S'T'W'X']'^(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u*W*X*Y*Z*t.bv!huv!}#y$V$_&P&T'p,^,j.T.U.W.X.Y.Z.[.`S*m*s*uU*n'q*q*rc*o!T#n$Y$f'w*p*v,].e(}!g^uvyz!Q!T!W!]!k!l!m!t!u!}#O#P#l#m#n#o#p#q#r#s#t#x#y#|#}$O$P$Q$R$S$T$U$V$W$Y$_$f$o$p$t$u%X%Y%]%^%}&P&S&T&u&|&}'S'T'W'X']'^'o'p'q'r'w(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u)z*W*X*Y*Z*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,T,U,V,W,X,Y,Z,[,],^,b,c,d,e,f,g,h,i,j-V-n.T.U.W.X.Y.Z.[.`.b.eQ$Z!eQ$]!fW&a$Z&b&d(QQ&d$[W&e$]&f&h(TR&h$^Q!n^Q#ayQ#bzS#i!Q$fQ#k!TQ#v!WQ$i!lQ$w!tQ$x!uQ%P#OQ%Q#PW&_$W,].b.eQ&`$YQ'P$oQ'Q$pQ'Z$tQ'[$uQ'g%XQ'h%YQ'i%]Q'j%^Q(Z&uQ(a&|Q(b&}Q(h'SQ(i'TQ(m'WQ(n'XQ(o']Q(p'^Q)Y'wQ)d(cQ)e(dQ)f(eQ)g(fQ)j(jQ)k(kQ)n(qQ)o(rQ*O)_Q*P)pQ*Q)hQ*R)iQ*S)lQ*T)mQ*U)tQ*V)qQ*[)uQ*a*WQ*b*YQ*d*XR*e*Z#Q!b^yz!l!t!u#O#P$W$o$p$t$u%X%Y%]%^&u&|&}'S'T'W'X']'^(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u*W*X*Y*ZU-y!Q$f,]S.a!W.bX.c!T$Y'w.e#U!a^yz!W!l!t!u#O#P$W$o$p$t$u%X%Y%]%^&u&|&}'S'T'W'X']'^(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u*W*X*Y*Z.bQ&^$UQ-U,[_-x!Q!T$Y$f'w,].e#W!`^yz!W!l!t!u#O#P$U$W$o$p$t$u%X%Y%]%^&u&|&}'S'T'W'X']'^(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u*W*X*Y*Z.bU%j#m#n'qQ&]$TQ)T'oQ-T,Za-w!Q!T$Y$f'w,[,].e#Y!_^yz!W!l!t!u#O#P$T$U$W$o$p$t$u%X%Y%]%^&u&|&}'S'T'W'X']'^(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u*W*X*Y*Z.bQ&[$SQ-R,XQ-S,Yb-u!Q!T$Y$f'w,Z,[,].eX-v#m#n'o'q#[!^^yz!W!l!t!u#O#P$S$T$U$W$o$p$t$u%X%Y%]%^&u&|&}'S'T'W'X']'^(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u*W*X*Y*Z.bh#{!]!m*p*q*u*x*y*z*{*|*}+OQ%i#lQ%p#m`&U#|+b+c+d+e+f+g+hQ&V#}Q&W$OQ&X$PQ&Y$QQ&Z$RQ'm*sQ'y&SQ)P+lQ)Q+sQ)R+zQ)S,RS)W'r)zQ)[+PQ)w,fQ)|*tQ,`+VQ,a#nQ,k+iQ,l+jQ,m+kQ,n+mQ,o+oQ,p+pQ,q+qQ,r+rQ,s+tQ,t+vQ,u+wQ,v+xQ,w+yQ,x+{Q,y+}Q,z,OQ,{,PQ,|,QQ,},SQ-O,UQ-P,VQ-Q,WQ-W,cQ-X,dQ-Y,eQ-Z,gQ-[,iQ-b+nQ-c+uQ-d+|Q-e,TS-f-V-nQ-g+UQ-h+QQ-i+TQ-j+RQ-k+SQ-l,hd-s!Q!T$Y$f'w,X,Z,[,].eU-t'o'q,YQ.^*vR._*r&j!V^yz!Q!T!W!]!l!m!t!u#O#P#m#n#|#}$O$P$Q$R$S$T$U$W$Y$f$o$p$t$u%X%Y%]%^&S&u&|&}'S'T'W'X']'^'o'q'r'w(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u)z*W*X*Y*Z*p*q*r*t*v*x*y*z*|+O+P+Q+R+S+T+U+b+c+d+f+h+i+j+k+m+o+p+q+r+t+v+w+x+y+{+},O,P,Q,S,U,V,W,X,Y,Z,[,],c,d,e,g,i-V-n.b.eQ$g!kt%g#l*s*u*{*}+V+e+g+l+n+s+u+z+|,R,T,f,hS%v#o+WQ%w#pQ%x#qQ%y#rQ%z#sQ%{#tQ&O#xQ'k+aQ'n*wQ'u%}Q(y,bQ(z+XQ({+YQ(|+ZQ(}+[R)O+]Q%s#mR%u#nS%o#m#nR)U'qV%k#m#n'qV%m#m#n'q#Q!c^yz!l!t!u#O#P$W$o$p$t$u%X%Y%]%^&u&|&}'S'T'W'X']'^(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u*W*X*Y*ZQ#f!QQ#z!]U%l#m#n'qQ&Q#yU&_$V.T.UQ'v&P`'{&T,j.W.X.Y.Z.[.`Q)U'pW-z!T$Y'w.eQ-|*pQ-}*qQ.O*rQ.P*sQ.Q*tQ.R*uQ.S*vS.d!W.bT.f$f,]Q%q#mQ)X'rS*^)z-nQ.V#nR.]-Va#{!]*p*q*r*s*t*u*v#e!d^yz!Q!T!W!l!t!u#O#P$W$Y$f$o$p$t$u%X%Y%]%^&u&|&}'S'T'W'X']'^'w(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u*W*X*Y*Z,].b.eQ{[U!vex|Q#QqS$q!p!|U$v!s!w#UQ%Z#WQ%_#XS'O$n%RS'U$r%WS'Y$s%[S'_$y%US(g'R'cS(l'V'dQ(t'bQ(w'eQ)r(uR)s(vQ&w$jR)b(]R)a([QUOYgU#d${'`(xQ#d}S${!x#cS'`$z%VR(x'fhROU}!x#c#d$z${%V'`'f(xSaRrRrXQ&l$aR(U&lQ&o$bR(W&oQ&q$cR(X&qQ&s$dR(Y&sQ&z$kR(`&zQ!{lQ#j*iT%O!{#jQx[S!se|Q!|qp#`x!s!|#c$n$y$z%W%['R'V'b'e'f(u(vQ#c}Q$n!pS$y!w#UQ$z!xQ%W#WQ%[#XQ'R$rQ'V$sQ'b%RQ'e%UQ'f%VQ(u'cR(v'dQ){)XS*_){-oR-o.]Q&b$ZS(O&b(QR(Q&dQ&f$]S(R&f(TR(T&hQ$`!iW&j$`)Z*],_Q)Z'|Q*])yR,_-{Q(^&wR)c(^iTOU}!x#c#d$z${%V'`'f(xR_PR$l!onmW[]befst!q!r#R#U#V%S%T#^!X^yz!Q!W!]!l!t!u#O#P#m$W$o$p$t$u%X%Y%]%^&u&|&}'S'T'W'X']'^(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u*W*X*Y*Z*t.bn#Zuv!}$V&P&T'p,^.T.U.W.X.Y.Z.[$U$h!k!m#o#p#q#r#s#t#|#}$O$P$Q$R$S$T$U&S'o'r)z*x*y*z*|+O+P+Q+R+S+T+U+a+b+c+d+f+h+i+j+k+m+o+p+q+r+t+v+w+x+y+{+},O,P,Q,S,U,V,W,X,Y,Z,[,b,c,d,e,g,i-V-n!S%h#l#x%}*w*{*}+V+W+X+Y+Z+[+]+e+g+l+n+s+u+z+|,R,T,f,hW&R#y$_,j.`S&v$j(]Q)`([S*j*s*uU*k'q*q*rc*l!T#n$Y$f'w*p*v,].eniW[]befst!q!r#R#U#V%S%T|ouv!}#y$V$_$j&P&T'p([(],^,j.T.U.W.X.Y.Z.[.`(V!P^yz!Q!T!W!]!k!l!m!t!u#O#P#l#m#n#o#p#q#r#s#t#x#|#}$O$P$Q$R$S$T$U$W$Y$f$o$p$t$u%X%Y%]%^%}&S&u&|&}'S'T'W'X']'^'o'q'r'w(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u)z*W*X*Y*Z*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,T,U,V,W,X,Y,Z,[,],b,c,d,e,f,g,h,i-V-n.b.enkW[]befst!q!r#R#U#V%S%T(V!R^yz!Q!T!W!]!k!l!m!t!u#O#P#l#m#n#o#p#q#r#s#t#x#|#}$O$P$Q$R$S$T$U$W$Y$f$o$p$t$u%X%Y%]%^%}&S&u&|&}'S'T'W'X']'^'o'q'r'w(c(d(e(f(j(k(q(r)_)h)i)l)m)p)q)t)u)z*W*X*Y*Z*p*q*r*s*t*u*v*w*x*y*z*{*|*}+O+P+Q+R+S+T+U+V+W+X+Y+Z+[+]+a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z+{+|+},O,P,Q,R,S,T,U,V,W,X,Y,Z,[,],b,c,d,e,f,g,h,i-V-n.b.eR&x$j",
    nodeNames: "⚠ LineComment BlockComment Rel DefinitionStatement Docstring BasicId Keyword DocstringLiteral MultilineDocstringLiteral MultilineDocstringRawLiteral Attribute AttributeKeyword AttributeKeyword AttributeKeyword AttributeKeyword AttributeKeyword AttributeParams BaseLiteral IntLiteral FloatLiteral RelnameLiteral RelnameStringLiteral RelnameMultilineStringLiteral StaticStringLiteral StaticMultilineStringLiteral CharLiteral DateLiteral DateTimeLiteral RawStringLiteral Keyword RawStringSequence Keyword LhsId Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Type Keyword Keyword Keyword ParenOpId Operator QualifiedName QualifiedNameId Emphasis Emphasis Emphasis Emphasis Emphasis QualifiedNameElem FormalParamsBracket FormalParams FormalParam Literal BooleanLiteral SpecializeIntLiteral InterpolationLiteral Interpolation InterpolationId Expression UnionExpression JoinExpression OverrideExpression RestrictExpression LogicalExpression BasicExpression SpecializeExpression OperatorKeyword PartialApplicationExpression NocommaParam NocommaExpression NocommaUnionExpression NocommaAbstractExpression Bindings Keyword Keyword Keyword LogicalParam ApplicationExpression OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword BoundedExpression Keyword Keyword Keyword Keyword Keyword Keyword LogicalAbstractExpression Keyword OperatorKeyword Keyword OperatorKeyword Keyword OperatorKeyword OperatorKeyword Keyword OperatorKeyword Keyword OperatorKeyword OperatorKeyword Keyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword OperatorKeyword AbstractExpression InterpolationMultilineLiteral Keyword OperatorKeyword FormalParamsParen ValueTypeStatement EntityTypeStatement ConstraintStatement Keyword ModuleStatement Keyword UseStatement Keyword Keyword Alias Keyword AliasId",
    maxTerm: 238,
    nodeProps: [
        ["group", -6, 4, 176, 177, 178, 180, 182, "Declaration"]
    ],
    skippedNodes: [0, 1, 2],
    repeatNodeCount: 14,
    tokenData: "&Er~R#vOX)iXY6kYZ:oZ[6k[])i]^:o^p)ipq6kqr;[rs=Sst!C[tu)iuv!Kwvw)iwx!Mexy#)xyz#*sz{#+n{|#,i|}#.g}!O#+n!O!P#/b!P!Q#6o!Q!R$9v!R![%+a![!]%,t!]!^&!x!^!_&#s!_!`&%}!`!a&&z!a!b)i!b!c&'{!c!}&(v!}#O&,U#O#P&-P#P#Q&.d#Q#R&/_#R#S&2e#S#T)i#T#Y&(v#Y#Z&4U#Z#h&(v#h#i&<v#i#o&(v#o#p&@b#p#q&A]#q#r&BW#r$f)i$f$g6k$g$r)i$r$s#+n$s%o)i%o%p#+n%p&a)i&a&b#+n&b4w)i4w5b&(v5b5i)i5i6S&(v6S#BY)i#BY#BZ6k#BZ$IS)i$IS$I_6k$I_$I|)i$I|$I}&CR$I}$JO&CR$JO$JT)i$JT$JU6k$JU$KV)i$KV$KW6k$KW%#t)i%#t%#u#+n%#u%#v)i%#v%#w#+n%#w%%U)i%%U%%V#+n%%V%%W)i%%W%%X#+n%%X%%Y)i%%Y%%Z#+n%%Z%%[)i%%[%%]#+n%%]%&Y)i%&Y%&Z&C|%&Z%&])i%&]%&^&Dw%&^%&b)i%&b%&c#+n%&c%'R)i%'R%'S#+n%'S%'T#+n%'T%'U#+n%'U%'V#+n%'V%'h)i%'h%'i#+n%'i%'t)i%'t%'u#+n%'u%(^)i%(^%(_#+n%(_%(`#+n%(`%(a#+n%(a%(b)i%(b%(c#+n%(c%(d#+n%(d%(x)i%(x%(y#+n%(y%(z#+n%(z%({#+n%({%(|#+n%(|%)Q)i%)Q%)R#+n%)R%)S#+n%)S%)U)i%)U%)V#+n%)V%)W#+n%)W%)c)i%)c%)d#+n%)d%)e#+n%)e%)f#+n%)f%)g)i%)g%)h#+n%)h%)i)i%)i%)j#+n%)j%*])i%*]%*^#+n%*^&FU)i&FU&FV6k&FV?HT)i?HT?HU6k?HU~)i!Y)rY%lp&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bh*iY&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b`+^U&U`Or+Xrs+psu+Xv#O+X#O#P,i#P~+X`+sUOr+Xrs,Vsu+Xv#O+X#O#P,i#P~+X`,YTOr+Xsu+Xv#O+X#O#P,i#P~+X`,ldrs+Xuv+Xwx+X!Q!R-z!R!S-z!S!T-z!T!U-z!U!Y.i!w!x/W#O#P+X#T#U+X#U#V+X#X#Y+X#Y#Z+X#b#c+X#f#g+X#h#i+X#i#j0Y#j#k+X#l#m0r`.PW&U`Or+Xrs+psu+Xv!Q+X!Q!Y.i!Y#O+X#O#P,i#P~+X`.nW&U`Or+Xrs+psu+Xv!Q+X!Q!Y+X!Y#O+X#O#P,i#P~+X`/ZR!Q![/d!c!i/d#T#Z/d`/gR!Q![/p!c!i/p#T#Z/p`/sR!Q![/|!c!i/|#T#Z/|`0PR!Q![0Y!c!i0Y#T#Z0Y`0]R!Q![0f!c!i0f#T#Z0f`0iR!Q![0r!c!i0r#T#Z0r`0uR!Q![1O!c!i1O#T#Z1O`1RR!Q![+X!c!i+X#T#Z+Xh1_drs*buv*bwx*b!Q!R2m!R!S2m!S!T2m!T!U2m!U!Y3j!w!x4g#O#P*b#T#U*b#U#V*b#X#Y*b#Y#Z*b#b#c*b#f#g*b#h#i*b#i#j5i#j#k*b#l#m6Rh2t[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y3j!Y#O*b#O#P1[#P~*bh3q[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y*b!Y#O*b#O#P1[#P~*bh4jR!Q![4s!c!i4s#T#Z4sh4vR!Q![5P!c!i5P#T#Z5Ph5SR!Q![5]!c!i5]#T#Z5]h5`R!Q![5i!c!i5i#T#Z5ih5lR!Q![5u!c!i5u#T#Z5uh5xR!Q![6R!c!i6R#T#Z6Rh6UR!Q![6_!c!i6_#T#Z6_h6bR!Q![*b!c!i*b#T#Z*b~6vl%lp%d~&U`%wWOX*bXY8nYZ+XZ[8n[]*b]^+X^p*bpq8nqr*brs+psu*bv#O*b#O#P1[#P$f*b$f$g8n$g#BY*b#BY#BZ8n#BZ$IS*b$IS$I_8n$I_$JT*b$JT$JU8n$JU$KV*b$KV$KW8n$KW&FU*b&FU&FV8n&FV?HT*b?HT?HU8n?HU~*b~8wl%d~&U`%wWOX*bXY8nYZ+XZ[8n[]*b]^+X^p*bpq8nqr*brs+psu*bv#O*b#O#P1[#P$f*b$f$g8n$g#BY*b#BY#BZ8n#BZ$IS*b$IS$I_8n$I_$JT*b$JT$JU8n$JU$KV*b$KV$KW8n$KW&FU*b&FU&FV8n&FV?HT*b?HT?HU8n?HU~*b~:xU%lp%e~&U`Or+Xrs+psu+Xv#O+X#O#P,i#P~+X!`;e[%lp&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!_*b!_!`<Z!`#O*b#O#P1[#P~*bn<dY&U`%wW!gUOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!a=XZ%k!OOY=zYZ+XZ]=z]^+X^r=zrsJQsu=zuv?]v#O=z#O#PDo#P~=zc>PZ&U`OY=zYZ+XZ]=z]^+X^r=zrs>rsu=zuv?]v#O=z#O#PDo#P~=zc>yUhQWPOr+Xrs,Vsu+Xv#O+X#O#P,i#P~+XP?`VOY?]Z]?]^r?]rs?us#O?]#O#P?z#P~?]P?zOWPP?}drs?]uv?]wx?]!Q!RA]!R!SA]!S!TA]!T!UA]!U!YA{!w!xBk#O#P?]#T#U?]#U#V?]#X#Y?]#Y#Z?]#b#c?]#f#g?]#h#i?]#i#jCm#j#k?]#l#mDVPA`XOY?]Z]?]^r?]rs?us!Q?]!Q!YA{!Y#O?]#O#P?z#P~?]PBOXOY?]Z]?]^r?]rs?us!Q?]!Q!Y?]!Y#O?]#O#P?z#P~?]PBnR!Q![Bw!c!iBw#T#ZBwPBzR!Q![CT!c!iCT#T#ZCTPCWR!Q![Ca!c!iCa#T#ZCaPCdR!Q![Cm!c!iCm#T#ZCmPCpR!Q![Cy!c!iCy#T#ZCyPC|R!Q![DV!c!iDV#T#ZDVPDYR!Q![Dc!c!iDc#T#ZDcPDfR!Q![?]!c!i?]#T#Z?]cDrdrs=zuv=zwx=z!Q!RFQ!R!SFQ!S!TFQ!T!UFQ!U!YGO!w!xG|#O#P=z#T#U=z#U#V=z#X#Y=z#Y#Z=z#b#c=z#f#g=z#h#i=z#i#jIO#j#k=z#l#mIhcFV]&U`OY=zYZ+XZ]=z]^+X^r=zrs>rsu=zuv?]v!Q=z!Q!YGO!Y#O=z#O#PDo#P~=zcGT]&U`OY=zYZ+XZ]=z]^+X^r=zrs>rsu=zuv?]v!Q=z!Q!Y=z!Y#O=z#O#PDo#P~=zcHPR!Q![HY!c!iHY#T#ZHYcH]R!Q![Hf!c!iHf#T#ZHfcHiR!Q![Hr!c!iHr#T#ZHrcHuR!Q![IO!c!iIO#T#ZIOcIRR!Q![I[!c!iI[#T#ZI[cI_R!Q![Ih!c!iIh#T#ZIhcIkR!Q![It!c!iIt#T#ZItcIwR!Q![=z!c!i=z#T#Z=z!XJXUhQWPOr+XrsJksu+Xv#O+X#O#P,i#P~+X!XJpV%m!WOrKVrs!)csuKVuvLxv#OKV#O#P!$n#P~KVRKYVOrKVrsKosuKVuvLxv#OKV#O#P!$n#P~KVRKrVOrKVrsLXsuKVuvLxv#OKV#O#P!$n#P~KVRL[VOrKVrsLqsuKVuvLxv#OKV#O#P!$n#P~KVRLxOiQXPPL{TOrLxrsM[s#OLx#O#PNV#P~LxPM_TOrLxrsMns#OLx#O#PNV#P~LxPMqTOrLxrsNQs#OLx#O#PNV#P~LxPNVOXPPNYdrsLxuvLxwxLx!Q!R! h!R!S! h!S!T! h!T!U! h!U!Y!!Q!w!x!!j#O#PLx#T#ULx#U#VLx#X#YLx#Y#ZLx#b#cLx#f#gLx#h#iLx#i#j!#l#j#kLx#l#m!$UP! kVOrLxrsM[s!QLx!Q!Y!!Q!Y#OLx#O#PNV#P~LxP!!TVOrLxrsM[s!QLx!Q!YLx!Y#OLx#O#PNV#P~LxP!!mR!Q![!!v!c!i!!v#T#Z!!vP!!yR!Q![!#S!c!i!#S#T#Z!#SP!#VR!Q![!#`!c!i!#`#T#Z!#`P!#cR!Q![!#l!c!i!#l#T#Z!#lP!#oR!Q![!#x!c!i!#x#T#Z!#xP!#{R!Q![!$U!c!i!$U#T#Z!$UP!$XR!Q![!$b!c!i!$b#T#Z!$bP!$eR!Q![Lx!c!iLx#T#ZLxR!$qdrsKVuvKVwxKV!Q!R!&P!R!S!&P!S!T!&P!T!U!&P!U!Y!&o!w!x!'_#O#PKV#T#UKV#U#VKV#X#YKV#Y#ZKV#b#cKV#f#gKV#h#iKV#i#j!(a#j#kKV#l#m!(yR!&SXOrKVrsKosuKVuvLxv!QKV!Q!Y!&o!Y#OKV#O#P!$n#P~KVR!&rXOrKVrsKosuKVuvLxv!QKV!Q!YKV!Y#OKV#O#P!$n#P~KVR!'bR!Q![!'k!c!i!'k#T#Z!'kR!'nR!Q![!'w!c!i!'w#T#Z!'wR!'zR!Q![!(T!c!i!(T#T#Z!(TR!(WR!Q![!(a!c!i!(a#T#Z!(aR!(dR!Q![!(m!c!i!(m#T#Z!(mR!(pR!Q![!(y!c!i!(y#T#Z!(yR!(|R!Q![!)V!c!i!)V#T#Z!)VR!)YR!Q![KV!c!iKV#T#ZKVw!)fVOrKVrs!){suKVuvLxv#OKV#O#P!$n#P~KVw!*QV%ntOr!*grs!Bxsu!*guv!,hv#O!*g#O#P!8`#P~!*gR!*jVOr!*grs!+Psu!*guv!,hv#O!*g#O#P!8`#P~!*gR!+SVOrKVrs!+isuKVuvLxv#OKV#O#P!$n#P~KVR!+lVOrKVrs!,RsuKVuvLxv#OKV#O#P!$n#P~KVR!,YPiQXPrs!,]P!,`Prs!,cP!,hOYPP!,kTOr!,hrs!,zs#O!,h#O#P!-x#P~!,hP!,}TOrLxrs!-^s#OLx#O#PNV#P~LxP!-aTOrLxrs!-ps#OLx#O#PNV#P~LxP!-uPXPrs!,]P!-{qOr!0Srs!0rsu!0Suv!,hvw!0Swx!,hx!Q!0S!Q!R!2S!R!S!2S!S!T!2S!T!U!2S!U!Y!2l!Y!w!0S!w!x!3U!x#O!0S#O#P!,h#P#T!0S#T#U!,h#U#V!,h#V#X!0S#X#Y!,h#Y#Z!,h#Z#b!0S#b#c!,h#c#f!0S#f#g!,h#g#h!0S#h#i!,h#i#j!5r#j#k!,h#k#l!0S#l#m!7Q#m~!0SP!0VROr!0Srs!0`s~!0SP!0cPrs!0fP!0iPrs!0lP!0oPrs!,]P!0uTOrLxrs!1Us#OLx#O#PNV#P~LxP!1XTOrLxrs!1hs#OLx#O#PNV#P~LxP!1kTOrLxrs!1zs#OLx#O#PNV#P~LxP!2PPXPrs!,cP!2VVOr!,hrs!,zs!Q!,h!Q!Y!2l!Y#O!,h#O#P!-x#P~!,hP!2oVOr!,hrs!,zs!Q!,h!Q!Y!,h!Y#O!,h#O#P!-x#P~!,hP!3XXOr!0Srs!0`s!Q!0S!Q![!3t![!c!0S!c!i!3t!i#T!0S#T#Z!3t#Z~!0SP!3wXOr!0Srs!0`s!Q!0S!Q![!4d![!c!0S!c!i!4d!i#T!0S#T#Z!4d#Z~!0SP!4gXOr!0Srs!0`s!Q!0S!Q![!5S![!c!0S!c!i!5S!i#T!0S#T#Z!5S#Z~!0SP!5VXOr!0Srs!0`s!Q!0S!Q![!5r![!c!0S!c!i!5r!i#T!0S#T#Z!5r#Z~!0SP!5uXOr!0Srs!0`s!Q!0S!Q![!6b![!c!0S!c!i!6b!i#T!0S#T#Z!6b#Z~!0SP!6eXOr!0Srs!0`s!Q!0S!Q![!7Q![!c!0S!c!i!7Q!i#T!0S#T#Z!7Q#Z~!0SP!7TXOr!0Srs!0`s!Q!0S!Q![!7p![!c!0S!c!i!7p!i#T!0S#T#Z!7p#Z~!0SP!7sXOr!0Srs!0`s!Q!0S!Q![!,h![!c!0S!c!i!,h!i#T!0S#T#Z!,h#Z~!0SR!8cqOr!0Srs!:jsu!0Suv!*gvw!0Swx!*gx!Q!0S!Q!R!<`!R!S!<`!S!T!<`!T!U!<`!U!Y!=O!Y!w!0S!w!x!=n!x#O!0S#O#P!*g#P#T!0S#T#U!*g#U#V!*g#V#X!0S#X#Y!*g#Y#Z!*g#Z#b!0S#b#c!*g#c#f!0S#f#g!*g#g#h!0S#h#i!*g#i#j!@[#j#k!*g#k#l!0S#l#m!Aj#m~!0SR!:mVOrKVrs!;SsuKVuvLxv#OKV#O#P!$n#P~KVR!;VVOrKVrs!;lsuKVuvLxv#OKV#O#P!$n#P~KVR!;oVOrKVrs!<UsuKVuvLxv#OKV#O#P!$n#P~KVR!<]PiQXPrs!,cR!<cXOr!*grs!+Psu!*guv!,hv!Q!*g!Q!Y!=O!Y#O!*g#O#P!8`#P~!*gR!=RXOr!*grs!+Psu!*guv!,hv!Q!*g!Q!Y!*g!Y#O!*g#O#P!8`#P~!*gR!=qXOr!0Srs!0`s!Q!0S!Q![!>^![!c!0S!c!i!>^!i#T!0S#T#Z!>^#Z~!0SR!>aXOr!0Srs!0`s!Q!0S!Q![!>|![!c!0S!c!i!>|!i#T!0S#T#Z!>|#Z~!0SR!?PXOr!0Srs!0`s!Q!0S!Q![!?l![!c!0S!c!i!?l!i#T!0S#T#Z!?l#Z~!0SR!?oXOr!0Srs!0`s!Q!0S!Q![!@[![!c!0S!c!i!@[!i#T!0S#T#Z!@[#Z~!0SR!@_XOr!0Srs!0`s!Q!0S!Q![!@z![!c!0S!c!i!@z!i#T!0S#T#Z!@z#Z~!0SR!@}XOr!0Srs!0`s!Q!0S!Q![!Aj![!c!0S!c!i!Aj!i#T!0S#T#Z!Aj#Z~!0SR!AmXOr!0Srs!0`s!Q!0S!Q![!BY![!c!0S!c!i!BY!i#T!0S#T#Z!BY#Z~!0SR!B]XOr!0Srs!0`s!Q!0S!Q![!*g![!c!0S!c!i!*g!i#T!0S#T#Z!*g#Z~!0Sw!CPPiQXPrs!CSu!CXP%otrs!0l![!Ce_%lp&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bvx*bxy!Ddy!Q*b!Q!R!E]!R![!Fh![#O*b#O#P1[#P~*bj!DmY%zQ&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bj!Ef`!uQ&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!Fh![#O*b#O#P1[#P#c*b#c#d!Gg#d#l*b#l#m!Ic#m~*bj!Fq[!uQ&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!Fh![#O*b#O#P1[#P~*bj!Gn[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y!Hd!Y#O*b#O#P1[#P~*bj!Hm[!uQ&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y!Hd!Y#O*b#O#P1[#P~*bj!Ij`&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!Jl![!c*b!c!i!Jl!i#O*b#O#P1[#P#T*b#T#Z!Jl#Z~*bj!Ju`!uQ&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![!Jl![!c*b!c!i!Jl!i#O*b#O#P1[#P#T*b#T#Z!Jl#Z~*b!a!LOU%lp!gUxy!Lb!c!}!Lg#R#S!MO#T#o!Lg4w5b!Lg5i6S!Lgi!LgO%xii!LlU!xi!Q![!Lg!c!}!Lg#R#S!Lg#T#o!Lg4w5b!Lg5i6S!Lgi!MRU!Q![!Lg!c!}!Lg#R#S!Lg#T#o!Lg4w5b!Lg5i6S!Lg![!Mn]%lp&U`%wWOY!NgYZ#!]Z]!Ng]^#!]^r!Ngrs##esu!Nguv#$Qvw!Ngwx*bx#O!Ng#O#P#$]#P~!Ngj!Nn[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bvw*bwx# dx#O*b#O#P1[#P~*bj# mYjQ&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bb#!bW&U`Or+Xrs+psu+Xvw+Xwx#!zx#O+X#O#P,i#P~+Xb##RUjQ&U`Or+Xrs+psu+Xv#O+X#O#P,i#P~+Xb##hWOr+Xrs,Vsu+Xvw+Xwx#!zx#O+X#O#P,i#P~+XQ#$TPwx#$WQ#$]OjQj#$`drs!Nguv!Ngwx!Ng!Q!R#%n!R!S#%n!S!T#%n!T!U#%n!U!Y#&q!w!x#'t#O#P!Ng#T#U!Ng#U#V!Ng#X#Y!Ng#Y#Z!Ng#b#c!Ng#f#g!Ng#h#i!Ng#i#j#(v#j#k!Ng#l#m#)`j#%u^&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bvw*bwx# dx!Q*b!Q!Y#&q!Y#O*b#O#P1[#P~*bj#&x^&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bvw*bwx# dx!Q*b!Q!Y!Ng!Y#O*b#O#P1[#P~*bj#'wR!Q![#(Q!c!i#(Q#T#Z#(Qj#(TR!Q![#(^!c!i#(^#T#Z#(^j#(aR!Q![#(j!c!i#(j#T#Z#(jj#(mR!Q![#(v!c!i#(v#T#Z#(vj#(yR!Q![#)S!c!i#)S#T#Z#)Sj#)VR!Q![#)`!c!i#)`#T#Z#)`j#)cR!Q![#)l!c!i#)l#T#Z#)lj#)oR!Q![!Ng!c!i!Ng#T#Z!Ng!a#*TY%iV%lp&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!a#+OY%qV%lp&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!`#+yY%lp&U`%wW!gUOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!`#,t[%lp&U`%wW!gUOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|#-j|#O*b#O#P1[#P~*bn#-q[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!`*b!`!a<Z!a#O*b#O#P1[#P~*b!a#.rY%pV%lp&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!`#/m^%lp&U`%wW!gUOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P#0i!P!Q*b!Q![#2_![#O*b#O#P1[#P~*bn#0p[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P#1f!P#O*b#O#P1[#P~*bn#1oY%yU&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bj#2h`&U`%wWdQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![#2_![!g*b!g!h#3j!h#O*b#O#P1[#P#X*b#X#Y#3j#Y~*bj#3q`&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|#4s|}*b}!O#4s!O!Q*b!Q![#5p![#O*b#O#P1[#P~*bj#4z[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![#5p![#O*b#O#P1[#P~*bj#5y[&U`%wWdQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![#5p![#O*b#O#P1[#P~*b~#6z^%lp&U`%wW!gUOY*bYZ+XZ]*b]^+X^r*brs+psu*bvz*bz{#7v{!P*b!P!Q$#}!Q#O*b#O#P1[#P~*b~#7}]&U`%wWOY#7vYZ#8vZ]#7v]^#8v^r#7vrs#9hsu#7vuv#:vvz#7vz{#FW{#O#7v#O#P#HV#P~#7v~#8{X&U`Or#8vrs#9hsu#8vuv#:vvz#8vz{#;k{#O#8v#O#P#<|#P~#8v~#9kXOr#8vrs#:Wsu#8vuv#:vvz#8vz{#;k{#O#8v#O#P#<|#P~#8v~#:ZXOr#8vrs#:vsu#8vuv#:vvz#8vz{#;k{#O#8v#O#P#<|#P~#8v~#:yROz#:vz{#;S{~#:v~#;VTOz#:vz{#;S{!P#:v!P!Q#;f!Q~#:v~#;kOQ~~#;pZ&U`Or#8vrs#9hsu#8vuv#:vvz#8vz{#;k{!P#8v!P!Q#<c!Q#O#8v#O#P#<|#P~#8v~#<jUQ~&U`Or+Xrs+psu+Xv#O+X#O#P,i#P~+X~#=PsOr#:vrs#8vsu#:vuv#8vvw#:vwx#8vxz#:vz{#;S{!Q#:v!Q!R#?^!R!S#?^!S!T#?^!T!U#?^!U!Y#@U!Y!w#:v!w!x#@|!x#O#:v#O#P#8v#P#T#:v#T#U#8v#U#V#8v#V#X#:v#X#Y#8v#Y#Z#8v#Z#b#:v#b#c#8v#c#f#:v#f#g#8v#g#h#:v#h#i#8v#i#j#Cj#j#k#8v#k#l#:v#l#m#Dx#m~#:v~#?cZ&U`Or#8vrs#9hsu#8vuv#:vvz#8vz{#;k{!Q#8v!Q!Y#@U!Y#O#8v#O#P#<|#P~#8v~#@ZZ&U`Or#8vrs#9hsu#8vuv#:vvz#8vz{#;k{!Q#8v!Q!Y#8v!Y#O#8v#O#P#<|#P~#8v~#APXOz#:vz{#;S{!Q#:v!Q![#Al![!c#:v!c!i#Al!i#T#:v#T#Z#Al#Z~#:v~#AoXOz#:vz{#;S{!Q#:v!Q![#B[![!c#:v!c!i#B[!i#T#:v#T#Z#B[#Z~#:v~#B_XOz#:vz{#;S{!Q#:v!Q![#Bz![!c#:v!c!i#Bz!i#T#:v#T#Z#Bz#Z~#:v~#B}XOz#:vz{#;S{!Q#:v!Q![#Cj![!c#:v!c!i#Cj!i#T#:v#T#Z#Cj#Z~#:v~#CmXOz#:vz{#;S{!Q#:v!Q![#DY![!c#:v!c!i#DY!i#T#:v#T#Z#DY#Z~#:v~#D]XOz#:vz{#;S{!Q#:v!Q![#Dx![!c#:v!c!i#Dx!i#T#:v#T#Z#Dx#Z~#:v~#D{XOz#:vz{#;S{!Q#:v!Q![#Eh![!c#:v!c!i#Eh!i#T#:v#T#Z#Eh#Z~#:v~#EkXOz#:vz{#;S{!Q#:v!Q![#8v![!c#:v!c!i#8v!i#T#:v#T#Z#8v#Z~#:v~#F__&U`%wWOY#7vYZ#8vZ]#7v]^#8v^r#7vrs#9hsu#7vuv#:vvz#7vz{#FW{!P#7v!P!Q#G^!Q#O#7v#O#P#HV#P~#7v~#GgYQ~&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b~#HYsOr#:vrs#7vsu#:vuv#7vvw#:vwx#7vxz#:vz{#;S{!Q#:v!Q!R#Jg!R!S#Jg!S!T#Jg!T!U#Jg!U!Y#Km!Y!w#:v!w!x#Ls!x#O#:v#O#P#7v#P#T#:v#T#U#7v#U#V#7v#V#X#:v#X#Y#7v#Y#Z#7v#Z#b#:v#b#c#7v#c#f#:v#f#g#7v#g#h#:v#h#i#7v#i#j$ a#j#k#7v#k#l#:v#l#m$!o#m~#:v~#Jn_&U`%wWOY#7vYZ#8vZ]#7v]^#8v^r#7vrs#9hsu#7vuv#:vvz#7vz{#FW{!Q#7v!Q!Y#Km!Y#O#7v#O#P#HV#P~#7v~#Kt_&U`%wWOY#7vYZ#8vZ]#7v]^#8v^r#7vrs#9hsu#7vuv#:vvz#7vz{#FW{!Q#7v!Q!Y#7v!Y#O#7v#O#P#HV#P~#7v~#LvXOz#:vz{#;S{!Q#:v!Q![#Mc![!c#:v!c!i#Mc!i#T#:v#T#Z#Mc#Z~#:v~#MfXOz#:vz{#;S{!Q#:v!Q![#NR![!c#:v!c!i#NR!i#T#:v#T#Z#NR#Z~#:v~#NUXOz#:vz{#;S{!Q#:v!Q![#Nq![!c#:v!c!i#Nq!i#T#:v#T#Z#Nq#Z~#:v~#NtXOz#:vz{#;S{!Q#:v!Q![$ a![!c#:v!c!i$ a!i#T#:v#T#Z$ a#Z~#:v~$ dXOz#:vz{#;S{!Q#:v!Q![$!P![!c#:v!c!i$!P!i#T#:v#T#Z$!P#Z~#:v~$!SXOz#:vz{#;S{!Q#:v!Q![$!o![!c#:v!c!i$!o!i#T#:v#T#Z$!o#Z~#:v~$!rXOz#:vz{#;S{!Q#:v!Q![$#_![!c#:v!c!i$#_!i#T#:v#T#Z$#_#Z~#:v~$#bXOz#:vz{#;S{!Q#:v!Q![#7v![!c#:v!c!i#7v!i#T#:v#T#Z#7v#Z~#:v~$$WZP~&U`%wWOY$#}YZ+XZ]$#}]^$$y^r$#}rs$%msu$#}uv$'Pv#O$#}#O#P$0a#P~$#}~$%QXP~&U`OY$$yYZ+XZr$$yrs$%msu$$yuv$'Pv#O$$y#O#P$'[#P~$$y~$%rXP~OY$$yYZ+XZr$$yrs$&_su$$yuv$'Pv#O$$y#O#P$'[#P~$$y~$&dXP~OY$$yYZ+XZr$$yrs$'Psu$$yuv$'Pv#O$$y#O#P$'[#P~$$y~$'UQP~OY$'PZ~$'P~$'arP~OY$'PZr$'Prs$$ysu$'Puv$$yvw$'Pwx$$yx!Q$'P!Q!R$)k!R!S$)k!S!T$)k!T!U$)k!U!Y$*e!Y!w$'P!w!x$+_!x#O$'P#O#P$$y#P#T$'P#T#U$$y#U#V$$y#V#X$'P#X#Y$$y#Y#Z$$y#Z#b$'P#b#c$$y#c#f$'P#f#g$$y#g#h$'P#h#i$$y#i#j$-w#j#k$$y#k#l$'P#l#m$/T#m~$'P~$)rZP~&U`OY$$yYZ+XZr$$yrs$%msu$$yuv$'Pv!Q$$y!Q!Y$*e!Y#O$$y#O#P$'[#P~$$y~$*lZP~&U`OY$$yYZ+XZr$$yrs$%msu$$yuv$'Pv!Q$$y!Q!Y$$y!Y#O$$y#O#P$'[#P~$$y~$+dWP~OY$'PZ!Q$'P!Q![$+|![!c$'P!c!i$+|!i#T$'P#T#Z$+|#Z~$'P~$,RWP~OY$'PZ!Q$'P!Q![$,k![!c$'P!c!i$,k!i#T$'P#T#Z$,k#Z~$'P~$,pWP~OY$'PZ!Q$'P!Q![$-Y![!c$'P!c!i$-Y!i#T$'P#T#Z$-Y#Z~$'P~$-_WP~OY$'PZ!Q$'P!Q![$-w![!c$'P!c!i$-w!i#T$'P#T#Z$-w#Z~$'P~$-|WP~OY$'PZ!Q$'P!Q![$.f![!c$'P!c!i$.f!i#T$'P#T#Z$.f#Z~$'P~$.kWP~OY$'PZ!Q$'P!Q![$/T![!c$'P!c!i$/T!i#T$'P#T#Z$/T#Z~$'P~$/YWP~OY$'PZ!Q$'P!Q![$/r![!c$'P!c!i$/r!i#T$'P#T#Z$/r#Z~$'P~$/wWP~OY$'PZ!Q$'P!Q![$$y![!c$'P!c!i$$y!i#T$'P#T#Z$$y#Z~$'P~$0frP~OY$'PZr$'Prs$#}su$'Puv$#}vw$'Pwx$#}x!Q$'P!Q!R$2p!R!S$2p!S!T$2p!T!U$2p!U!Y$3r!Y!w$'P!w!x$4t!x#O$'P#O#P$#}#P#T$'P#T#U$#}#U#V$#}#V#X$'P#X#Y$#}#Y#Z$#}#Z#b$'P#b#c$#}#c#f$'P#f#g$#}#g#h$'P#h#i$#}#i#j$7^#j#k$#}#k#l$'P#l#m$8j#m~$'P~$2y]P~&U`%wWOY$#}YZ+XZ]$#}]^$$y^r$#}rs$%msu$#}uv$'Pv!Q$#}!Q!Y$3r!Y#O$#}#O#P$0a#P~$#}~$3{]P~&U`%wWOY$#}YZ+XZ]$#}]^$$y^r$#}rs$%msu$#}uv$'Pv!Q$#}!Q!Y$#}!Y#O$#}#O#P$0a#P~$#}~$4yWP~OY$'PZ!Q$'P!Q![$5c![!c$'P!c!i$5c!i#T$'P#T#Z$5c#Z~$'P~$5hWP~OY$'PZ!Q$'P!Q![$6Q![!c$'P!c!i$6Q!i#T$'P#T#Z$6Q#Z~$'P~$6VWP~OY$'PZ!Q$'P!Q![$6o![!c$'P!c!i$6o!i#T$'P#T#Z$6o#Z~$'P~$6tWP~OY$'PZ!Q$'P!Q![$7^![!c$'P!c!i$7^!i#T$'P#T#Z$7^#Z~$'P~$7cWP~OY$'PZ!Q$'P!Q![$7{![!c$'P!c!i$7{!i#T$'P#T#Z$7{#Z~$'P~$8QWP~OY$'PZ!Q$'P!Q![$8j![!c$'P!c!i$8j!i#T$'P#T#Z$8j#Z~$'P~$8oWP~OY$'PZ!Q$'P!Q![$9X![!c$'P!c!i$9X!i#T$'P#T#Z$9X#Z~$'P~$9^WP~OY$'PZ!Q$'P!Q![$#}![!c$'P!c!i$#}!i#T$'P#T#Z$#}#Z~$'P![$:Rf%lp&U`%wWcQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P#2_!P!Q*b!Q![$;g![!g*b!g!h#3j!h#O*b#O#P1[#P#X*b#X#Y#3j#Y#c*b#c#d%'P#d#l*b#l#m%({#m~*bj$;pb&U`%wWcQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P#2_!P!Q*b!Q![$<x![!g*b!g!h#3j!h#O*b#O#P1[#P#X*b#X#Y#3j#Y~*bj$=Rb&U`%wWcQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P#2_!P!Q*b!Q![$>Z![!g*b!g!h#3j!h#O*b#O#P1[#P#X*b#X#Y#3j#Y~*bj$>dc&U`%wWcQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv}*b}!O$?o!O!P#2_!P!Q*b!Q![%%n![!g*b!g!h#3j!h#O*b#O#P1[#P#X*b#X#Y#3j#Y~*bj$?v[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$@l![#O*b#O#P1[#P~*bj$@s[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$Ai![#O*b#O#P1[#P~*bj$Ap[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv}*b}!O$Bf!O#O*b#O#P1[#P~*bj$Bm[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$Cc![#O*b#O#P1[#P~*bj$Cj[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$D`![#O*b#O#P1[#P~*bj$Di[&U`kQ%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!v*b!v!w$E_!w#O*b#O#P1[#P~*bj$Ef[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$F[![#O*b#O#P1[#P~*bj$Fc[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$GX![#O*b#O#P1[#P~*bj$G`[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv![*b![!]$HU!]#O*b#O#P1[#P~*bj$H][&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$IR![#O*b#O#P1[#P~*bj$IY[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$JO![#O*b#O#P1[#P~*bj$JV[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv![*b![!]$J{!]#O*b#O#P1[#P~*bj$KS[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$Kx![#O*b#O#P1[#P~*bj$LP[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![$Lu![#O*b#O#P1[#P~*bj$L|b&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|$NU|}*b}!O$NU!O!Q*b!Q![% R![!|*b!|!}%$u!}#O*b#O#P1[#P~*bj$N][&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![% R![#O*b#O#P1[#P~*bj% Y[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%!O![#O*b#O#P1[#P~*bj%!V[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv![*b![!]%!{!]#O*b#O#P1[#P~*bj%#S[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%#x![#O*b#O#P1[#P~*bj%$P[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%$u![#O*b#O#P1[#P~*bj%%OY&U`lQ%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bj%%wb&U`%wWcQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P#2_!P!Q*b!Q![%%n![!g*b!g!h#3j!h#O*b#O#P1[#P#X*b#X#Y#3j#Y~*bj%'W[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y%'|!Y#O*b#O#P1[#P~*bj%(V[&U`%wWcQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q!Y%'|!Y#O*b#O#P1[#P~*bj%)S`&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%*U![!c*b!c!i%*U!i#O*b#O#P1[#P#T*b#T#Z%*U#Z~*bj%*_`&U`%wWcQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%*U![!c*b!c!i%*U!i#O*b#O#P1[#P#T*b#T#Z%*U#Z~*b![%+lb%lp&U`%wWcQOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!O*b!O!P#2_!P!Q*b!Q![$;g![!g*b!g!h#3j!h#O*b#O#P1[#P#X*b#X#Y#3j#Y~*b!a%-Pi%lp&U`%wW%}TOY*bYZ+XZ]*b]^+X^r*brs%.nsu*bvx*bxy%<fy!`*b!`!a<Z!a!c*b!c!}%Jb!}#O%LR#O#P1[#P#Q*b#Q#R%Mt#R#S& Z#S#T*b#T#o%Jb#o4w*b4w5b%Jb5b5i*b5i6S%Jb6S~*bb%.qYOY%/aYZ+XZ]%/a]^+X^r%/ars%5xsu%/av#O%/a#O#P%0m#P~%/ab%/fY&U`OY%/aYZ+XZ]%/a]^+X^r%/ars%0Usu%/av#O%/a#O#P%0m#P~%/ab%0ZUfQOr+Xrs,Vsu+Xv#O+X#O#P,i#P~+Xb%0pdrs%/auv%/awx%/a!Q!R%2O!R!S%2O!S!T%2O!T!U%2O!U!Y%2y!w!x%3t#O#P%/a#T#U%/a#U#V%/a#X#Y%/a#Y#Z%/a#b#c%/a#f#g%/a#h#i%/a#i#j%4v#j#k%/a#l#m%5`b%2T[&U`OY%/aYZ+XZ]%/a]^+X^r%/ars%0Usu%/av!Q%/a!Q!Y%2y!Y#O%/a#O#P%0m#P~%/ab%3O[&U`OY%/aYZ+XZ]%/a]^+X^r%/ars%0Usu%/av!Q%/a!Q!Y%/a!Y#O%/a#O#P%0m#P~%/ab%3wR!Q![%4Q!c!i%4Q#T#Z%4Qb%4TR!Q![%4^!c!i%4^#T#Z%4^b%4aR!Q![%4j!c!i%4j#T#Z%4jb%4mR!Q![%4v!c!i%4v#T#Z%4vb%4yR!Q![%5S!c!i%5S#T#Z%5Sb%5VR!Q![%5`!c!i%5`#T#Z%5`b%5cR!Q![%5l!c!i%5l#T#Z%5lb%5oR!Q![%/a!c!i%/a#T#Z%/ab%5}UfQOr+Xrs%6asu+Xv#O+X#O#P,i#P~+XQ%6dUOr%6ars%6vsu%6av#O%6a#O#P%7w#P~%6aQ%6yUOr%6ars%7]su%6av#O%6a#O#P%7w#P~%6aQ%7`UOr%6ars%7rsu%6av#O%6a#O#P%7w#P~%6aQ%7wOgQQ%7zdrs%6auv%6awx%6a!Q!R%9Y!R!S%9Y!S!T%9Y!T!U%9Y!U!Y%9u!w!x%:b#O#P%6a#T#U%6a#U#V%6a#X#Y%6a#Y#Z%6a#b#c%6a#f#g%6a#h#i%6a#i#j%;d#j#k%6a#l#m%;|Q%9]WOr%6ars%6vsu%6av!Q%6a!Q!Y%9u!Y#O%6a#O#P%7w#P~%6aQ%9xWOr%6ars%6vsu%6av!Q%6a!Q!Y%6a!Y#O%6a#O#P%7w#P~%6aQ%:eR!Q![%:n!c!i%:n#T#Z%:nQ%:qR!Q![%:z!c!i%:z#T#Z%:zQ%:}R!Q![%;W!c!i%;W#T#Z%;WQ%;ZR!Q![%;d!c!i%;d#T#Z%;dQ%;gR!Q![%;p!c!i%;p#T#Z%;pQ%;sR!Q![%;|!c!i%;|#T#Z%;|Q%<PR!Q![%<Y!c!i%<Y#T#Z%<YQ%<]R!Q![%6a!c!i%6a#T#Z%6am%<m!v&U`%wWOY*bYZ+XZ]*b]^+X^q*bqr%BTrs+psu*buv%Dvvz*bz{%CQ{|%ER|}*b}!O%CQ!O!P%CQ!P!Q%CQ!Q![*b![!]%FU!]!^*b!^!_%GR!_!`%CQ!`!a%I_!a#O*b#O#P1[#P#Q*b#Q#R%CQ#R$r*b$r$s%CQ$s%o*b%o%p%CQ%p&a*b&a&b%CQ&b%#t*b%#t%#u%CQ%#u%#v*b%#v%#w%CQ%#w%%U*b%%U%%V%CQ%%V%%W*b%%W%%X%CQ%%X%%Y*b%%Y%%Z%CQ%%Z%%[*b%%[%%]%CQ%%]%&b*b%&b%&c%CQ%&c%'R*b%'R%'S%CQ%'S%'T%CQ%'T%'U%CQ%'U%'V%CQ%'V%'h*b%'h%'i%CQ%'i%'t*b%'t%'u%CQ%'u%(^*b%(^%(_%CQ%(_%(`%CQ%(`%(a%CQ%(a%(b*b%(b%(c%CQ%(c%(d%CQ%(d%(x*b%(x%(y%CQ%(y%(z%CQ%(z%({%CQ%({%(|%CQ%(|%)Q*b%)Q%)R%CQ%)R%)S%CQ%)S%)U*b%)U%)V%CQ%)V%)W%CQ%)W%)c*b%)c%)d%CQ%)d%)e%CQ%)e%)f%CQ%)f%)g*b%)g%)h%CQ%)h%)i*b%)i%)j%CQ%)j%*]*b%*]%*^%CQ%*^~*bm%B[[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!_*b!_!`%CQ!`#O*b#O#P1[#P~*bm%CX[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bvy*byz%C}z#O*b#O#P1[#P~*bm%DWY!oT&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bT%DyPyz%D|T%ERO!oTm%EY^&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bvy*byz%C}z{*b{|%FU|#O*b#O#P1[#P~*bm%F][&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!`*b!`!a%CQ!a#O*b#O#P1[#P~*bm%GYb&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bvy*byz%C}z{*b{|%Hb|![*b![!]%CQ!]!_*b!_!`%CQ!`#O*b#O#P1[#P~*bm%Hi[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|%CQ|#O*b#O#P1[#P~*bm%If^&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bvy*byz%C}z!_*b!_!`%CQ!`#O*b#O#P1[#P~*bo%JmfeQ!oT&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%Jb![!c*b!c!}%Jb!}#O*b#O#P1[#P#R*b#R#S%Jb#S#T*b#T#o%Jb#o4w*b4w5b%Jb5b5i*b5i6S%Jb6S~*bj%LYZ&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P#Q%L{#Q~*bj%MUYeQ&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*bo%M{d&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!c*b!c!}%Jb!}#O*b#O#P1[#P#R*b#R#S& Z#S#T*b#T#o%Jb#o4w*b4w5b%Jb5b5i*b5i6S%Jb6S~*bo& dfeQ&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![%Jb![!c*b!c!}%Jb!}#O*b#O#P1[#P#R*b#R#S%Jb#S#T*b#T#o%Jb#o4w*b4w5b%Jb5b5i*b5i6S%Jb6S~*b!a&#TY%|V%lp&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!`&$O`%lp&U`%wW!gUOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|&%Q|![*b![!]<Z!]!_*b!_!`<Z!`#O*b#O#P1[#P~*bn&%X[&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv{*b{|<Z|#O*b#O#P1[#P~*b!a&&[Y&VP%lp&U`%wW!gUOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!`&'V[%lp&U`%wW!gUOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!_*b!_!`<Z!`#O*b#O#P1[#P~*b!a&(WY%gV%lp&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!a&)Rf%lpUV&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![&*g![!c*b!c!}&*g!}#O*b#O#P1[#P#R*b#R#S&*g#S#T*b#T#o&*g#o4w*b4w5b&*g5b5i*b5i6S&*g6S~*bo&*pfUV&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![&*g![!c*b!c!}&*g!}#O*b#O#P1[#P#R*b#R#S&*g#S#T*b#T#o&*g#o4w*b4w5b&*g5b5i*b5i6S&*g6S~*b!a&,aY%vV%lp&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!Y&-Ud%lprs*buv*bwx*b!Q!R2m!R!S2m!S!T2m!T!U2m!U!Y3j!w!x4g#O#P*b#T#U*b#U#V*b#X#Y*b#Y#Z*b#b#c*b#f#g*b#h#i*b#i#j5i#j#k*b#l#m6R!a&.oY%uV%lp&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!a&/jd%lp&U`%wW!gUOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!c*b!c!}&*g!}#O*b#O#P1[#P#R*b#R#S&0x#S#T*b#T#o&*g#o4w*b4w5b&*g5b5i*b5i6S&*g6S~*bo&1Pf&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![&*g![!c*b!c!}&*g!}#O*b#O#P1[#P#R*b#R#S&*g#S#T*b#T#o&*g#o4w*b4w5b&*g5b5i*b5i6S&*g6S~*b!a&2pf%lp%{Q&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![&*g![!c*b!c!}&*g!}#O*b#O#P1[#P#R*b#R#S&*g#S#T*b#T#o&*g#o4w*b4w5b&*g5b5i*b5i6S&*g6S~*b!a&4ag%lpUV&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![&*g![!c*b!c!}&*g!}#O*b#O#P1[#P#R*b#R#S&*g#S#T*b#T#U&5x#U#o&*g#o4w*b4w5b&*g5b5i*b5i6S&*g6S~*bo&6RhUV&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![&*g![!c*b!c!}&*g!}#O*b#O#P1[#P#R*b#R#S&*g#S#T*b#T#`&*g#`#a&7m#a#o&*g#o4w*b4w5b&*g5b5i*b5i6S&*g6S~*bo&7vhUV&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![&*g![!c*b!c!}&*g!}#O*b#O#P1[#P#R*b#R#S&*g#S#T*b#T#g&*g#g#h&9b#h#o&*g#o4w*b4w5b&*g5b5i*b5i6S&*g6S~*bo&9khUV&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![&*g![!c*b!c!}&*g!}#O*b#O#P1[#P#R*b#R#S&*g#S#T*b#T#X&*g#X#Y&;V#Y#o&*g#o4w*b4w5b&*g5b5i*b5i6S&*g6S~*bo&;bf!tQUV&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![&*g![!c*b!c!}&*g!}#O*b#O#P1[#P#R*b#R#S&*g#S#T*b#T#o&*g#o4w*b4w5b&*g5b5i*b5i6S&*g6S~*b!a&=Rh%lpUV&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![&*g![!c*b!c!}&*g!}#O*b#O#P1[#P#R*b#R#S&*g#S#T*b#T#f&*g#f#g&>m#g#o&*g#o4w*b4w5b&*g5b5i*b5i6S&*g6S~*bo&>vhUV&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv!Q*b!Q![&*g![!c*b!c!}&*g!}#O*b#O#P1[#P#R*b#R#S&*g#S#T*b#T#i&*g#i#j&9b#j#o&*g#o4w*b4w5b&*g5b5i*b5i6S&*g6S~*b!]&@mY&QR%lp&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!a&AhY&OV%lp&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b!a&BcY&RV%lp&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b~&C^Y%lp%e~&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b![&DXY&SQ%lp&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b![&ESY&TQ%lp&U`%wWOY*bYZ+XZ]*b]^+X^r*brs+psu*bv#O*b#O#P1[#P~*b",
    tokenizers: [0, 1, 2, 3, 4, 5],
    topRules: { "Rel": [0, 3] },
    dynamicPrecedences: { "220": 1 },
    specialized: [{ term: 6, get: value => spec_BasicId[value] || -1 }, { term: 69, get: value => spec_Operator[value] || -1 }],
    tokenPrec: 14002
});

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spaces = 204, newLine = 205, LineComment = 1, BlockComment = 2, Rel = 3, DefinitionStatement = 4, Docstring = 5, BasicId = 6, DocstringLiteral = 8, MultilineDocstringLiteral = 9, MultilineDocstringRawLiteral = 10, Attribute = 11, AttributeParams = 17, BaseLiteral = 18, IntLiteral = 19, FloatLiteral = 20, RelnameLiteral = 21, RelnameStringLiteral = 22, RelnameMultilineStringLiteral = 23, StaticStringLiteral = 24, StaticMultilineStringLiteral = 25, CharLiteral = 26, DateLiteral = 27, DateTimeLiteral = 28, RawStringLiteral = 29, RawStringSequence = 31, LhsId = 33, ParenOpId = 68, Operator = 69, QualifiedName = 70, QualifiedNameId = 71, QualifiedNameElem = 77, FormalParamsBracket = 78, FormalParams = 79, FormalParam = 80, Literal = 81, BooleanLiteral = 82, SpecializeIntLiteral = 83, InterpolationLiteral = 84, Interpolation = 85, InterpolationId = 86, Expression = 87, UnionExpression = 88, JoinExpression = 89, OverrideExpression = 90, RestrictExpression = 91, LogicalExpression = 92, BasicExpression = 93, SpecializeExpression = 94, PartialApplicationExpression = 96, NocommaParam = 97, NocommaExpression = 98, NocommaUnionExpression = 99, NocommaAbstractExpression = 100, Bindings = 101, LogicalParam = 105, ApplicationExpression = 106, BoundedExpression = 143, LogicalAbstractExpression = 150, AbstractExpression = 171, InterpolationMultilineLiteral = 172, FormalParamsParen = 175, ValueTypeStatement = 176, EntityTypeStatement = 177, ConstraintStatement = 178, ModuleStatement = 180, UseStatement = 182, Alias = 185, AliasId = 187;

var parser_terms = /*#__PURE__*/Object.freeze({
  __proto__: null,
  spaces: spaces,
  newLine: newLine,
  LineComment: LineComment,
  BlockComment: BlockComment,
  Rel: Rel,
  DefinitionStatement: DefinitionStatement,
  Docstring: Docstring,
  BasicId: BasicId,
  DocstringLiteral: DocstringLiteral,
  MultilineDocstringLiteral: MultilineDocstringLiteral,
  MultilineDocstringRawLiteral: MultilineDocstringRawLiteral,
  Attribute: Attribute,
  AttributeParams: AttributeParams,
  BaseLiteral: BaseLiteral,
  IntLiteral: IntLiteral,
  FloatLiteral: FloatLiteral,
  RelnameLiteral: RelnameLiteral,
  RelnameStringLiteral: RelnameStringLiteral,
  RelnameMultilineStringLiteral: RelnameMultilineStringLiteral,
  StaticStringLiteral: StaticStringLiteral,
  StaticMultilineStringLiteral: StaticMultilineStringLiteral,
  CharLiteral: CharLiteral,
  DateLiteral: DateLiteral,
  DateTimeLiteral: DateTimeLiteral,
  RawStringLiteral: RawStringLiteral,
  RawStringSequence: RawStringSequence,
  LhsId: LhsId,
  ParenOpId: ParenOpId,
  Operator: Operator,
  QualifiedName: QualifiedName,
  QualifiedNameId: QualifiedNameId,
  QualifiedNameElem: QualifiedNameElem,
  FormalParamsBracket: FormalParamsBracket,
  FormalParams: FormalParams,
  FormalParam: FormalParam,
  Literal: Literal,
  BooleanLiteral: BooleanLiteral,
  SpecializeIntLiteral: SpecializeIntLiteral,
  InterpolationLiteral: InterpolationLiteral,
  Interpolation: Interpolation,
  InterpolationId: InterpolationId,
  Expression: Expression,
  UnionExpression: UnionExpression,
  JoinExpression: JoinExpression,
  OverrideExpression: OverrideExpression,
  RestrictExpression: RestrictExpression,
  LogicalExpression: LogicalExpression,
  BasicExpression: BasicExpression,
  SpecializeExpression: SpecializeExpression,
  PartialApplicationExpression: PartialApplicationExpression,
  NocommaParam: NocommaParam,
  NocommaExpression: NocommaExpression,
  NocommaUnionExpression: NocommaUnionExpression,
  NocommaAbstractExpression: NocommaAbstractExpression,
  Bindings: Bindings,
  LogicalParam: LogicalParam,
  ApplicationExpression: ApplicationExpression,
  BoundedExpression: BoundedExpression,
  LogicalAbstractExpression: LogicalAbstractExpression,
  AbstractExpression: AbstractExpression,
  InterpolationMultilineLiteral: InterpolationMultilineLiteral,
  FormalParamsParen: FormalParamsParen,
  ValueTypeStatement: ValueTypeStatement,
  EntityTypeStatement: EntityTypeStatement,
  ConstraintStatement: ConstraintStatement,
  ModuleStatement: ModuleStatement,
  UseStatement: UseStatement,
  Alias: Alias,
  AliasId: AliasId
});

const relLanguage = language.LRLanguage.define({
    parser: parser.configure({
        props: [
            highlight.styleTags({
                "Keyword AttributeKeyword": highlight.tags.keyword,
                Type: highlight.tags.typeName,
                Emphasis: highlight.tags.emphasis,
                "IntLiteral FloatLiteral": highlight.tags.number,
                BooleanLiteral: highlight.tags.bool,
                CharLiteral: highlight.tags.character,
                "DocstringLiteral MultilineDocstringLiteral MultilineDocstringRawLiteral": highlight.tags.docString,
                "StaticStringLiteral/...": highlight.tags.string,
                "StaticMultilineStringLiteral RawStringSequence InterpolationLiteral InterpolationMultilineLiteral": highlight.tags.string,
                LineComment: highlight.tags.lineComment,
                BlockComment: highlight.tags.blockComment,
                BasicId: highlight.tags.attributeName,
                "LhsId/BasicId LhsId/QualifiedName/QualifiedNameId/BasicId": highlight.tags.definition(highlight.tags.variableName),
                "PartialApplicationExpression/BasicExpression/BasicId": highlight.tags.variableName,
                "ApplicationExpression/BasicExpression/BasicId": highlight.tags.variableName,
                "LogicalParam/LogicalExpression/BasicExpression/BasicId": highlight.tags.attributeName,
                "FormalId/BasicId": highlight.tags.attributeName,
                "InterpolationId AliasId/BasicId": highlight.tags.labelName,
                "QualifiedNameElem RelnameLiteral RelnameStringLiteral RelnameMultilineStringLiteral ValueTypeLiteral": highlight.tags.literal,
                "DateLiteral DateTimeLiteral": highlight.tags.string,
                "Operator OperatorKeyword": highlight.tags.operatorKeyword,
                '( )': highlight.tags.paren,
                '[ ]': highlight.tags.squareBracket,
                '{ }': highlight.tags.brace,
                ':': highlight.tags.derefOperator,
                ', ;': highlight.tags.separator
            }),
            language.foldNodeProp.add({
                MultilineDocstringLiteral(tree) { return { from: tree.from + 3, to: tree.to - 3 }; },
                InterpolationMultilineLiteral(tree) { return { from: tree.from + 3, to: tree.to - 3 }; },
                StaticMultilineStringLiteral(tree) { return { from: tree.from + 3, to: tree.to - 3 }; },
                RawStringSequence(tree) { return { from: tree.from + 1, to: tree.to - 1 }; },
                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; },
                BoundedExpression(tree) { return { from: tree.from + 1, to: tree.to - 1 }; }
            })
        ]
    }),
    languageData: {
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`", '"""'] },
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
    }
});
// Autocomplete
const relCompletion = relLanguage.data.of({
    autocomplete: autocomplete.completeFromList(autocompleteList)
});
function rel() {
    return new language.LanguageSupport(relLanguage, [relCompletion]);
}

exports.rel = rel;
exports.relCompletion = relCompletion;
exports.relLanguage = relLanguage;
exports.relTerms = parser_terms;
