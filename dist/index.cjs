'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var lr = require('@lezer/lr');
var common = require('@lezer/common');
var language = require('@codemirror/language');
var highlight = require('@codemirror/highlight');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_identifier = {__proto__:null,inline:10, if:16, then:20, else:22, end:24, iff:28, from:32, module:36, forall:40, for:44, in:46, implies:50, def:54, output:60, with:66, use:68, ic:72, doc:76, entity:82, true:86, false:86, Int:100, String:104, Any:108, Number:112, Char:116, Missing:120, Floating:124, UnsignedInt:128, SignedInt:132, Rational:136, FixedDecimal:140, RelName:144, Entity:148, AutoNumber:152, Hash:156, FilePos:160, Date:164, DateTime:168, Year:172, Month:176, Week:180, Day:184, Hour:188, Minute:192, Second:196, Millisecond:200, Microsecond:204, Nanosecond:208};
const parser = lr.LRParser.deserialize({
  version: 13,
  states: "1WO]QPOOOOQO'#Et'#EtOOQO'#DW'#DWOOQO'#Eu'#EuOOQO'#D^'#D^OOQO'#En'#EnOOQO'#Ei'#EiQ]QPOOO$bQPO'#C`O]QPO'#CcO]QPO'#CiO$gQPO'#CkO$gQPO'#CmO]QPO'#CoO$gQPO'#CqO]QPO'#CtO$lQPO'#CvO$gQPO'#C|O$gQPO'#DPO$tQPO'#DRO$gQPO'#DUO$yQPO'#D_O(_QPO'#DaO+sQPO'#DcO/XQPO'#DeO2mQPO'#DgO6RQPO'#DiO9gQPO'#DkO<{QPO'#DmO@aQPO'#DoOCuQPO'#DqOGZQPO'#DsOJoQPO'#DuONTQPO'#DwO!#iQPO'#DyO!&}QPO'#D{O!*cQPO'#D}O!-wQPO'#EPO!1]QPO'#ERO!4qQPO'#ETO!8VQPO'#EVO!;kQPO'#EXO!?PQPO'#EZO!BeQPO'#E]O!EyQPO'#E_O!I_QPO'#EaO!LsQPO'#EcO#!XQPO'#EeO#%mQPO'#EgOOQO-E8g-E8gO#)RQPO,58zO#,gQPO'#CeO#,tQPO,58}OOQO,59T,59TOOQO'#Cb'#CbOOQO,59V,59VO]QPO,59XO]QPO,59ZO#-PQPO,59]OOQO,59`,59`O#-UQPO,59bO#0jQPO,59eO#4RQPO,59hO#4WQPO,59kOOQO,59m,59mOOQO,59p,59pOOQO,59y,59yOOQO,59{,59{OOQO,59},59}OOQO,5:P,5:POOQO,5:R,5:ROOQO,5:T,5:TOOQO,5:V,5:VOOQO,5:X,5:XOOQO,5:Z,5:ZOOQO,5:],5:]OOQO,5:_,5:_OOQO,5:a,5:aOOQO,5:c,5:cOOQO,5:e,5:eOOQO,5:g,5:gOOQO,5:i,5:iOOQO,5:k,5:kOOQO,5:m,5:mOOQO,5:o,5:oOOQO,5:q,5:qOOQO,5:s,5:sOOQO,5:u,5:uOOQO,5:w,5:wOOQO,5:y,5:yOOQO,5:{,5:{OOQO,5:},5:}OOQO,5;P,5;POOQO,5;R,5;ROOQO1G.f1G.fO#4`QPO1G.iO]QPO'#EjOOQO1G.i1G.iO]QPO1G.iO#4kQPO1G.sOOQO1G.u1G.uO$gQPO1G.wOOQO'#Cx'#CxOOQO1G.|1G.|OOQO'#C{'#C{OOQO1G/P1G/PO#4pQPO1G/PO$gQPO1G/SOOQO1G/V1G/VO$gQPO1G/VOOQO-E8h-E8hOOQO7+$T7+$TO]QPO7+$TOOQO,5;U,5;UO#8UQPO7+$TOOQO7+$_7+$_OOQO7+$c7+$cOOQO7+$k7+$kOOQO7+$n7+$nO#8ZQPO7+$qO#8`QPO<<GoOOQO<<Go<<GoOOQO<<H]<<H]OOQOAN=ZAN=Z",
  stateData: "#8e~O#aOSPOSQOS~OWXO^YO`ZOb[Od]Of^Oi_Ok`OqaOtbOvcOwPOydO{PO|PO}PO!OPO!PPO!SeO!UfO!WgO!YhO![iO!^jO!`kO!blO!dmO!fnO!hoO!jpO!lqO!nrO!psO!rtO!tuO!vvO!xwO!zxO!|yO#OzO#Q{O#S|O#U}O#W!OO#Y!PO#[!QO#cWO~OT!SO~O#d!WO~On!_O#d!WO~Ow!bO~O#d!WOW!RX^!RX`!RXb!RXd!RXf!RXi!RXk!RXq!RXt!RXv!RXw!RXy!RX{!RX|!RX}!RX!O!RX!P!RX!S!RX!U!RX!W!RX!Y!RX![!RX!^!RX!`!RX!b!RX!d!RX!f!RX!h!RX!j!RX!l!RX!n!RX!p!RX!r!RX!t!RX!v!RX!x!RX!z!RX!|!RX#O!RX#Q!RX#S!RX#U!RX#W!RX#Y!RX#[!RX#_!RX#c!RXY!RXZ!RX[!RX~O#d!WOW!TX^!TX`!TXb!TXd!TXf!TXi!TXk!TXq!TXt!TXv!TXw!TXy!TX{!TX|!TX}!TX!O!TX!P!TX!S!TX!U!TX!W!TX!Y!TX![!TX!^!TX!`!TX!b!TX!d!TX!f!TX!h!TX!j!TX!l!TX!n!TX!p!TX!r!TX!t!TX!v!TX!x!TX!z!TX!|!TX#O!TX#Q!TX#S!TX#U!TX#W!TX#Y!TX#[!TX#_!TX#c!TXY!TXZ!TX[!TX~O#d!WOW!VX^!VX`!VXb!VXd!VXf!VXi!VXk!VXq!VXt!VXv!VXw!VXy!VX{!VX|!VX}!VX!O!VX!P!VX!S!VX!U!VX!W!VX!Y!VX![!VX!^!VX!`!VX!b!VX!d!VX!f!VX!h!VX!j!VX!l!VX!n!VX!p!VX!r!VX!t!VX!v!VX!x!VX!z!VX!|!VX#O!VX#Q!VX#S!VX#U!VX#W!VX#Y!VX#[!VX#_!VX#c!VXY!VXZ!VX[!VX~O#d!WOW!XX^!XX`!XXb!XXd!XXf!XXi!XXk!XXq!XXt!XXv!XXw!XXy!XX{!XX|!XX}!XX!O!XX!P!XX!S!XX!U!XX!W!XX!Y!XX![!XX!^!XX!`!XX!b!XX!d!XX!f!XX!h!XX!j!XX!l!XX!n!XX!p!XX!r!XX!t!XX!v!XX!x!XX!z!XX!|!XX#O!XX#Q!XX#S!XX#U!XX#W!XX#Y!XX#[!XX#_!XX#c!XXY!XXZ!XX[!XX~O#d!WOW!ZX^!ZX`!ZXb!ZXd!ZXf!ZXi!ZXk!ZXq!ZXt!ZXv!ZXw!ZXy!ZX{!ZX|!ZX}!ZX!O!ZX!P!ZX!S!ZX!U!ZX!W!ZX!Y!ZX![!ZX!^!ZX!`!ZX!b!ZX!d!ZX!f!ZX!h!ZX!j!ZX!l!ZX!n!ZX!p!ZX!r!ZX!t!ZX!v!ZX!x!ZX!z!ZX!|!ZX#O!ZX#Q!ZX#S!ZX#U!ZX#W!ZX#Y!ZX#[!ZX#_!ZX#c!ZXY!ZXZ!ZX[!ZX~O#d!WOW!]X^!]X`!]Xb!]Xd!]Xf!]Xi!]Xk!]Xq!]Xt!]Xv!]Xw!]Xy!]X{!]X|!]X}!]X!O!]X!P!]X!S!]X!U!]X!W!]X!Y!]X![!]X!^!]X!`!]X!b!]X!d!]X!f!]X!h!]X!j!]X!l!]X!n!]X!p!]X!r!]X!t!]X!v!]X!x!]X!z!]X!|!]X#O!]X#Q!]X#S!]X#U!]X#W!]X#Y!]X#[!]X#_!]X#c!]XY!]XZ!]X[!]X~O#d!WOW!_X^!_X`!_Xb!_Xd!_Xf!_Xi!_Xk!_Xq!_Xt!_Xv!_Xw!_Xy!_X{!_X|!_X}!_X!O!_X!P!_X!S!_X!U!_X!W!_X!Y!_X![!_X!^!_X!`!_X!b!_X!d!_X!f!_X!h!_X!j!_X!l!_X!n!_X!p!_X!r!_X!t!_X!v!_X!x!_X!z!_X!|!_X#O!_X#Q!_X#S!_X#U!_X#W!_X#Y!_X#[!_X#_!_X#c!_XY!_XZ!_X[!_X~O#d!WOW!aX^!aX`!aXb!aXd!aXf!aXi!aXk!aXq!aXt!aXv!aXw!aXy!aX{!aX|!aX}!aX!O!aX!P!aX!S!aX!U!aX!W!aX!Y!aX![!aX!^!aX!`!aX!b!aX!d!aX!f!aX!h!aX!j!aX!l!aX!n!aX!p!aX!r!aX!t!aX!v!aX!x!aX!z!aX!|!aX#O!aX#Q!aX#S!aX#U!aX#W!aX#Y!aX#[!aX#_!aX#c!aXY!aXZ!aX[!aX~O#d!WOW!cX^!cX`!cXb!cXd!cXf!cXi!cXk!cXq!cXt!cXv!cXw!cXy!cX{!cX|!cX}!cX!O!cX!P!cX!S!cX!U!cX!W!cX!Y!cX![!cX!^!cX!`!cX!b!cX!d!cX!f!cX!h!cX!j!cX!l!cX!n!cX!p!cX!r!cX!t!cX!v!cX!x!cX!z!cX!|!cX#O!cX#Q!cX#S!cX#U!cX#W!cX#Y!cX#[!cX#_!cX#c!cXY!cXZ!cX[!cX~O#d!WOW!eX^!eX`!eXb!eXd!eXf!eXi!eXk!eXq!eXt!eXv!eXw!eXy!eX{!eX|!eX}!eX!O!eX!P!eX!S!eX!U!eX!W!eX!Y!eX![!eX!^!eX!`!eX!b!eX!d!eX!f!eX!h!eX!j!eX!l!eX!n!eX!p!eX!r!eX!t!eX!v!eX!x!eX!z!eX!|!eX#O!eX#Q!eX#S!eX#U!eX#W!eX#Y!eX#[!eX#_!eX#c!eXY!eXZ!eX[!eX~O#d!WOW!gX^!gX`!gXb!gXd!gXf!gXi!gXk!gXq!gXt!gXv!gXw!gXy!gX{!gX|!gX}!gX!O!gX!P!gX!S!gX!U!gX!W!gX!Y!gX![!gX!^!gX!`!gX!b!gX!d!gX!f!gX!h!gX!j!gX!l!gX!n!gX!p!gX!r!gX!t!gX!v!gX!x!gX!z!gX!|!gX#O!gX#Q!gX#S!gX#U!gX#W!gX#Y!gX#[!gX#_!gX#c!gXY!gXZ!gX[!gX~O#d!WOW!iX^!iX`!iXb!iXd!iXf!iXi!iXk!iXq!iXt!iXv!iXw!iXy!iX{!iX|!iX}!iX!O!iX!P!iX!S!iX!U!iX!W!iX!Y!iX![!iX!^!iX!`!iX!b!iX!d!iX!f!iX!h!iX!j!iX!l!iX!n!iX!p!iX!r!iX!t!iX!v!iX!x!iX!z!iX!|!iX#O!iX#Q!iX#S!iX#U!iX#W!iX#Y!iX#[!iX#_!iX#c!iXY!iXZ!iX[!iX~O#d!WOW!kX^!kX`!kXb!kXd!kXf!kXi!kXk!kXq!kXt!kXv!kXw!kXy!kX{!kX|!kX}!kX!O!kX!P!kX!S!kX!U!kX!W!kX!Y!kX![!kX!^!kX!`!kX!b!kX!d!kX!f!kX!h!kX!j!kX!l!kX!n!kX!p!kX!r!kX!t!kX!v!kX!x!kX!z!kX!|!kX#O!kX#Q!kX#S!kX#U!kX#W!kX#Y!kX#[!kX#_!kX#c!kXY!kXZ!kX[!kX~O#d!WOW!mX^!mX`!mXb!mXd!mXf!mXi!mXk!mXq!mXt!mXv!mXw!mXy!mX{!mX|!mX}!mX!O!mX!P!mX!S!mX!U!mX!W!mX!Y!mX![!mX!^!mX!`!mX!b!mX!d!mX!f!mX!h!mX!j!mX!l!mX!n!mX!p!mX!r!mX!t!mX!v!mX!x!mX!z!mX!|!mX#O!mX#Q!mX#S!mX#U!mX#W!mX#Y!mX#[!mX#_!mX#c!mXY!mXZ!mX[!mX~O#d!WOW!oX^!oX`!oXb!oXd!oXf!oXi!oXk!oXq!oXt!oXv!oXw!oXy!oX{!oX|!oX}!oX!O!oX!P!oX!S!oX!U!oX!W!oX!Y!oX![!oX!^!oX!`!oX!b!oX!d!oX!f!oX!h!oX!j!oX!l!oX!n!oX!p!oX!r!oX!t!oX!v!oX!x!oX!z!oX!|!oX#O!oX#Q!oX#S!oX#U!oX#W!oX#Y!oX#[!oX#_!oX#c!oXY!oXZ!oX[!oX~O#d!WOW!qX^!qX`!qXb!qXd!qXf!qXi!qXk!qXq!qXt!qXv!qXw!qXy!qX{!qX|!qX}!qX!O!qX!P!qX!S!qX!U!qX!W!qX!Y!qX![!qX!^!qX!`!qX!b!qX!d!qX!f!qX!h!qX!j!qX!l!qX!n!qX!p!qX!r!qX!t!qX!v!qX!x!qX!z!qX!|!qX#O!qX#Q!qX#S!qX#U!qX#W!qX#Y!qX#[!qX#_!qX#c!qXY!qXZ!qX[!qX~O#d!WOW!sX^!sX`!sXb!sXd!sXf!sXi!sXk!sXq!sXt!sXv!sXw!sXy!sX{!sX|!sX}!sX!O!sX!P!sX!S!sX!U!sX!W!sX!Y!sX![!sX!^!sX!`!sX!b!sX!d!sX!f!sX!h!sX!j!sX!l!sX!n!sX!p!sX!r!sX!t!sX!v!sX!x!sX!z!sX!|!sX#O!sX#Q!sX#S!sX#U!sX#W!sX#Y!sX#[!sX#_!sX#c!sXY!sXZ!sX[!sX~O#d!WOW!uX^!uX`!uXb!uXd!uXf!uXi!uXk!uXq!uXt!uXv!uXw!uXy!uX{!uX|!uX}!uX!O!uX!P!uX!S!uX!U!uX!W!uX!Y!uX![!uX!^!uX!`!uX!b!uX!d!uX!f!uX!h!uX!j!uX!l!uX!n!uX!p!uX!r!uX!t!uX!v!uX!x!uX!z!uX!|!uX#O!uX#Q!uX#S!uX#U!uX#W!uX#Y!uX#[!uX#_!uX#c!uXY!uXZ!uX[!uX~O#d!WOW!wX^!wX`!wXb!wXd!wXf!wXi!wXk!wXq!wXt!wXv!wXw!wXy!wX{!wX|!wX}!wX!O!wX!P!wX!S!wX!U!wX!W!wX!Y!wX![!wX!^!wX!`!wX!b!wX!d!wX!f!wX!h!wX!j!wX!l!wX!n!wX!p!wX!r!wX!t!wX!v!wX!x!wX!z!wX!|!wX#O!wX#Q!wX#S!wX#U!wX#W!wX#Y!wX#[!wX#_!wX#c!wXY!wXZ!wX[!wX~O#d!WOW!yX^!yX`!yXb!yXd!yXf!yXi!yXk!yXq!yXt!yXv!yXw!yXy!yX{!yX|!yX}!yX!O!yX!P!yX!S!yX!U!yX!W!yX!Y!yX![!yX!^!yX!`!yX!b!yX!d!yX!f!yX!h!yX!j!yX!l!yX!n!yX!p!yX!r!yX!t!yX!v!yX!x!yX!z!yX!|!yX#O!yX#Q!yX#S!yX#U!yX#W!yX#Y!yX#[!yX#_!yX#c!yXY!yXZ!yX[!yX~O#d!WOW!{X^!{X`!{Xb!{Xd!{Xf!{Xi!{Xk!{Xq!{Xt!{Xv!{Xw!{Xy!{X{!{X|!{X}!{X!O!{X!P!{X!S!{X!U!{X!W!{X!Y!{X![!{X!^!{X!`!{X!b!{X!d!{X!f!{X!h!{X!j!{X!l!{X!n!{X!p!{X!r!{X!t!{X!v!{X!x!{X!z!{X!|!{X#O!{X#Q!{X#S!{X#U!{X#W!{X#Y!{X#[!{X#_!{X#c!{XY!{XZ!{X[!{X~O#d!WOW!}X^!}X`!}Xb!}Xd!}Xf!}Xi!}Xk!}Xq!}Xt!}Xv!}Xw!}Xy!}X{!}X|!}X}!}X!O!}X!P!}X!S!}X!U!}X!W!}X!Y!}X![!}X!^!}X!`!}X!b!}X!d!}X!f!}X!h!}X!j!}X!l!}X!n!}X!p!}X!r!}X!t!}X!v!}X!x!}X!z!}X!|!}X#O!}X#Q!}X#S!}X#U!}X#W!}X#Y!}X#[!}X#_!}X#c!}XY!}XZ!}X[!}X~O#d!WOW#PX^#PX`#PXb#PXd#PXf#PXi#PXk#PXq#PXt#PXv#PXw#PXy#PX{#PX|#PX}#PX!O#PX!P#PX!S#PX!U#PX!W#PX!Y#PX![#PX!^#PX!`#PX!b#PX!d#PX!f#PX!h#PX!j#PX!l#PX!n#PX!p#PX!r#PX!t#PX!v#PX!x#PX!z#PX!|#PX#O#PX#Q#PX#S#PX#U#PX#W#PX#Y#PX#[#PX#_#PX#c#PXY#PXZ#PX[#PX~O#d!WOW#RX^#RX`#RXb#RXd#RXf#RXi#RXk#RXq#RXt#RXv#RXw#RXy#RX{#RX|#RX}#RX!O#RX!P#RX!S#RX!U#RX!W#RX!Y#RX![#RX!^#RX!`#RX!b#RX!d#RX!f#RX!h#RX!j#RX!l#RX!n#RX!p#RX!r#RX!t#RX!v#RX!x#RX!z#RX!|#RX#O#RX#Q#RX#S#RX#U#RX#W#RX#Y#RX#[#RX#_#RX#c#RXY#RXZ#RX[#RX~O#d!WOW#TX^#TX`#TXb#TXd#TXf#TXi#TXk#TXq#TXt#TXv#TXw#TXy#TX{#TX|#TX}#TX!O#TX!P#TX!S#TX!U#TX!W#TX!Y#TX![#TX!^#TX!`#TX!b#TX!d#TX!f#TX!h#TX!j#TX!l#TX!n#TX!p#TX!r#TX!t#TX!v#TX!x#TX!z#TX!|#TX#O#TX#Q#TX#S#TX#U#TX#W#TX#Y#TX#[#TX#_#TX#c#TXY#TXZ#TX[#TX~O#d!WOW#VX^#VX`#VXb#VXd#VXf#VXi#VXk#VXq#VXt#VXv#VXw#VXy#VX{#VX|#VX}#VX!O#VX!P#VX!S#VX!U#VX!W#VX!Y#VX![#VX!^#VX!`#VX!b#VX!d#VX!f#VX!h#VX!j#VX!l#VX!n#VX!p#VX!r#VX!t#VX!v#VX!x#VX!z#VX!|#VX#O#VX#Q#VX#S#VX#U#VX#W#VX#Y#VX#[#VX#_#VX#c#VXY#VXZ#VX[#VX~O#d!WOW#XX^#XX`#XXb#XXd#XXf#XXi#XXk#XXq#XXt#XXv#XXw#XXy#XX{#XX|#XX}#XX!O#XX!P#XX!S#XX!U#XX!W#XX!Y#XX![#XX!^#XX!`#XX!b#XX!d#XX!f#XX!h#XX!j#XX!l#XX!n#XX!p#XX!r#XX!t#XX!v#XX!x#XX!z#XX!|#XX#O#XX#Q#XX#S#XX#U#XX#W#XX#Y#XX#[#XX#_#XX#c#XXY#XXZ#XX[#XX~O#d!WOW#ZX^#ZX`#ZXb#ZXd#ZXf#ZXi#ZXk#ZXq#ZXt#ZXv#ZXw#ZXy#ZX{#ZX|#ZX}#ZX!O#ZX!P#ZX!S#ZX!U#ZX!W#ZX!Y#ZX![#ZX!^#ZX!`#ZX!b#ZX!d#ZX!f#ZX!h#ZX!j#ZX!l#ZX!n#ZX!p#ZX!r#ZX!t#ZX!v#ZX!x#ZX!z#ZX!|#ZX#O#ZX#Q#ZX#S#ZX#U#ZX#W#ZX#Y#ZX#[#ZX#_#ZX#c#ZXY#ZXZ#ZX[#ZX~O#d!WOWSa^Sa`SabSadSafSaiSakSaqSatSavSawSaySa{Sa|Sa}Sa!OSa!PSa!SSa!USa!WSa!YSa![Sa!^Sa!`Sa!bSa!dSa!fSa!hSa!jSa!lSa!nSa!pSa!rSa!tSa!vSa!xSa!zSa!|Sa#OSa#QSa#SSa#USa#WSa#YSa#[Sa#_Sa#cSaYSaZSa[Sa~OYXXZXX[XX~P]OY#SOZ#UO[#TO~Og#XO~O#e#YOWja^ja`jabjadjafjaijakjaqjatjavjawjayja{ja|ja}ja!Oja!Pja!Sja!Uja!Wja!Yja![ja!^ja!`ja!bja!dja!fja!hja!jja!lja!nja!pja!rja!tja!vja!xja!zja!|ja#Oja#Qja#Sja#Uja#Wja#Yja#[ja#_ja#cjaYjaZja[ja~O#d!WO#e#[OWma^ma`mabmadmafmaimakmaqmatmavmawmayma{ma|ma}ma!Oma!Pma!Sma!Uma!Wma!Yma![ma!^ma!`ma!bma!dma!fma!hma!jma!lma!nma!pma!rma!tma!vma!xma!zma!|ma#Oma#Qma#Sma#Uma#Wma#Yma#[ma#_ma#cmaYmaZma[ma~Or#_O~O#e#`O#f#aO~OY#SOZ#dO[#cO~O[#gO~O#d!WOWmi^mi`mibmidmifmiimikmiqmitmivmiwmiymi{mi|mi}mi!Omi!Pmi!Smi!Umi!Wmi!Ymi![mi!^mi!`mi!bmi!dmi!fmi!hmi!jmi!lmi!nmi!pmi!rmi!tmi!vmi!xmi!zmi!|mi#Omi#Qmi#Smi#Umi#Wmi#Ymi#[mi#_mi#cmiYmiZmi[mi~O[#mO~O#g#nO~O[#oO~O",
  goto: "(w#jPPPP#kP#y#kP&jPPP#kP#kP#kP#kP#kPP#kP#kP&y#kP&|#kPP#kP#kPP#kP#kPPPPP#k'PP'PP'PP'PP'PP'PP'PP'PP'PP'PP'PP'PP'PP'PP'PP'PP'PP'PP'PP'PP'PP'PP'PP'PP'PP'PP'PP'PP'_'mPPP'sPPPPP(Z(iiTOVXY]_!T!Y!Z#S#U#dQ!XZQ!Y[Q![^Q!^`Q!`aQ!abQ!cdQ!deQ!efQ!fgQ!ghQ!hiQ!ijQ!jkQ!klQ!lmQ!mnQ!noQ!opQ!pqQ!qrQ!rsQ!stQ!tuQ!uvQ!vwQ!wxQ!xyQ!yzQ!z{Q!{|Q!|}Q!}!OQ#O!PQ#P!QQ#Q!SQ#]!_Q#h#XQ#i#^Q#j#_R#k#aQ!UXQ#V!YQ#e#SQ#f#UR#l#dR#Z!^R#^!_iROVXY]_!T!Y!Z#S#U#dQVOS!RV!TZ!TX!Y#S#U#dQ#R!UR#b#R`UOVX!T!Y#S#U#dQ!VYQ!Z]Q!]_R#W!ZiQOVXY]_!T!Y!Z#S#U#diSOVXY]_!T!Y!Z#S#U#d",
  nodeNames: "⚠ LineComment BlockComment Rel InlineStatement inline VariableName IfStatement if Body then else end IffStatement iff FromStatement from ModuleStatement module ForallStatement forall ForInStatement for in ImpliesStatement implies DefineStatement def AssignOp OutputDefinitionStatement output AssignOp WithUseStatement with use ConstraintStatement ic DocStringStatement doc MultilineStringLiteral EntityStatement entity ExpressionStatement BooleanLiteral Number StringLiteral RelnameLiteral RelnameStringLiteral TypeStatement IntType Int StringType String AnyType Any NumberType Number CharType Char MissingType Missing FloatingType Floating UnsignedIntType UnsignedInt SignedIntType SignedInt RationalType Rational FixedDecimalType FixedDecimal RelNameType RelName EntityType Entity AutoNumberType AutoNumber HashType Hash FilePosType FilePos DateType Date DateTimeType DateTime YearType Year MonthType Month WeekType Week DayType Day HourType Hour MinuteType Minute SecondType Second MillisecondType Millisecond MicrosecondType Microsecond NanosecondType Nanosecond",
  maxTerm: 117,
  nodeProps: [
    [common.NodeProp.group, -6,39,43,44,45,46,47,"Expression",-28,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,"Type"]
  ],
  skippedNodes: [0,1,2],
  repeatNodeCount: 2,
  tokenData: "2r~RdXY!aYZ!a]^!apq!ars!rwx&O!O!P&m!P!Q'm!Q!R(v!R![)k![!]*v!_!`1`!b!c1e!c!}1j#R#S2R#T#o1j#o#p2h#q#r2m4w5b1j5i6S1j~!fS#a~XY!aYZ!a]^!apq!a~!wU}~OY#ZZr#Zrs#}s#O#Z#O#P#w#P~#Z~#`U}~OY#ZZr#Zrs#rs#O#Z#O#P#w#P~#Z~#wO}~~#zPO~#Z~$SP}~rs$V~$YTOr$Vrs$is#O$V#O#P$z#P~$V~$lPrs$o~$rPrs$u~$zOw~~$}TOr$Vrs%^s#O$V#O#P$z#P~$V~%aTOr$Vrs%ps#O$V#O#P$z#P~$V~%sPrs%v~%{Pw~rs$u~&TU}~OY&OZw&Owx#rx#O&O#O#P&g#P~&O~&jPO~&O~&pP!Q![&s~&xR|~!Q![&s!g!h'R#X#Y'R~'UR{|'_}!O'_!Q!['e~'bP!Q!['e~'jP|~!Q!['e~'pQz{'v!P!Q(k~'yROz'vz{(S{~'v~(VTOz'vz{(S{!P'v!P!Q(f!Q~'v~(kOQ~~(pQP~OY(kZ~(k~({U|~!O!P)_!Q![)k!g!h'R#X#Y'R#c#d)|#l#m*[~)bR!Q![)_!g!h'R#X#Y'R~)pS|~!O!P)_!Q![)k!g!h'R#X#Y'R~*PP!Q!Y*S~*XP|~!Q!Y*S~*_R!Q![*h!c!i*h#T#Z*h~*mR|~!Q![*h!c!i*h#T#Z*h~*yVrs+`!c!}0l!}#O1T#R#S0l#T#o0l4w5b0l5i6S0l~+cTYZ+`]^+`rs+r#O#P,W#Q#R+`~+wT!P~YZ+`]^+`rs+r#O#P,W#Q#R+`~,ZeYZ+`]^+`rs+r!Q!R-l!R!S-l!S!T-l!T!U-l!U!Y.R!w!x.h#O#P,W#Q#R+`#T#U+`#U#V+`#X#Y+`#Y#Z+`#b#c+`#f#g+`#h#i+`#i#j/j#j#k+`#l#m0S~-oUYZ+`]^+`rs+r!Q!Y.R#O#P,W#Q#R+`~.UUYZ+`]^+`rs+r!Q!Y+`#O#P,W#Q#R+`~.kR!Q![.t!c!i.t#T#Z.t~.wR!Q![/Q!c!i/Q#T#Z/Q~/TR!Q![/^!c!i/^#T#Z/^~/aR!Q![/j!c!i/j#T#Z/j~/mR!Q![/v!c!i/v#T#Z/v~/yR!Q![0S!c!i0S#T#Z0S~0VR!Q![0`!c!i0`#T#Z0`~0cR!Q![+`!c!i+`#T#Z+`~0qU!O~!Q![0l!c!}0l#R#S0l#T#o0l4w5b0l5i6S0l~1WP#P#Q1Z~1`O!O~~1eO#e~~1jO#c~~1oU#d~!Q![1j!c!}1j#R#S1j#T#o1j4w5b1j5i6S1j~2UU!Q![1j!c!}1j#R#S1j#T#o1j4w5b1j5i6S1j~2mO#f~~2rO#g~",
  tokenizers: [0],
  topRules: {"Rel":[0,3]},
  specialized: [{term: 112, get: value => spec_identifier[value] || -1}],
  tokenPrec: 0
});

// import {completeFromList} from "@codemirror/autocomplete"
const relLanguage = language.LRLanguage.define({
    parser: parser.configure({
        props: [
            // indentNodeProp.add({
            //   Application: delimitedIndent({closing: ")", align: false})
            // }),
            // foldNodeProp.add({
            //   Application: foldInside
            // }),
            highlight.styleTags({
                'use forall for in iff if then else end where with select implies': highlight.tags.controlKeyword,
                'not and or xor': highlight.tags.operatorKeyword,
                'as from output inline ic doc entity': highlight.tags.keyword,
                'def': highlight.tags.definitionKeyword,
                'module': highlight.tags.moduleKeyword,
                'Any String Int Number Char Missing Floating UnsignedInt SignedInt Rational FixedDecimal RelName Entity AutoNumber Hash FilePos Date DateTime Year Month Week Day Hour Minute Second Millisecond Microsecond Nanosecond Boolean': highlight.tags.typeName,
                Number: highlight.tags.number,
                BooleanLiteral: highlight.tags.bool,
                StringLiteral: highlight.tags.string,
                // DateLiteral: t.string,
                // DateTimeLiteral: t.string,
                AssignOp: highlight.tags.definitionOperator,
                LineComment: highlight.tags.lineComment,
                BlockComment: highlight.tags.blockComment,
                MultilineStringLiteral: highlight.tags.blockComment,
                VariableName: highlight.tags.definition(highlight.tags.variableName),
                Atom: highlight.tags.atom,
                RelnameLiteral: highlight.tags.atom,
                RelnameStringLiteral: highlight.tags.atom,
                DefineStatement: highlight.tags.atom,
                '( )': highlight.tags.paren,
                '[ ]': highlight.tags.squareBracket,
                '{ }': highlight.tags.brace,
                '.': highlight.tags.derefOperator,
                ', ;': highlight.tags.separator,
            })
        ]
    }),
    languageData: {
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
        // indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
        wordChars: "$"
    }
});
// Autocomplete
// export const relCompletion = relLanguage.data.of({
//   autocomplete: completeFromList([
//     { label: "Any", type: "type" },
//     { label: "AutoNumber", type: "type" },
//     { label: "Boolean", type: "type" },
//     { label: "Char", type: "type" },
//     { label: "Day", type: "type" },
//     { label: "Date", type: "type" },
//     { label: "DateTime", type: "type" },
//     { label: "Year", type: "type" },
//     { label: "Month", type: "type" },
//     { label: "Week", type: "type" },
//     { label: "Hour", type: "type" },
//     { label: "Minute", type: "type" },
//     { label: "Second", type: "type" },
//     { label: "Millisecond", type: "type" },
//     { label: "Microsecond", type: "type" },
//     { label: "Nanosecond", type: "type" },
//     { label: "Entity", type: "type" },
//     { label: "Int", type: "type" },
//     { label: "Number", type: "type" },
//     { label: "Missing", type: "type" },
//     { label: "Floating", type: "type" },
//     { label: "UnsignedInt", type: "type" },
//     { label: "SignedInt", type: "type" },
//     { label: "Rational", type: "type" },
//     { label: "FixedDecimal", type: "type" },
//     { label: "Hash", type: "type" },
//     { label: "FilePos", type: "type" },
//     { label: "String", type: "type" },
//     { label: "def", type: "keyword" },
//     { label: "output", type: "keyword" },
//     { label: "from", type: "keyword" },
//     { label: "if", type: "keyword" },
//     { label: "iff", type: "keyword" },
//     { label: "then", type: "keyword" },
//     { label: "else", type: "keyword" },
//     { label: "end", type: "keyword" },
//     { label: "exists", type: "keyword" },
//     { label: "where", type: "keyword" },
//     { label: "with", type: "keyword" },
//     { label: "select", type: "keyword" },
//     { label: "implies", type: "keyword" },
//     { label: "use", type: "keyword" },
//     { label: "forall", type: "keyword" },
//     { label: "in", type: "keyword" },
//     { label: "ic", type: "keyword" },
//     { label: "not", type: "keyword" },
//     { label: "and", type: "keyword" },
//     { label: "or", type: "keyword" },
//     { label: "xor", type: "keyword" },
//     { label: "union", type: "keyword" },
//   ])
// })
function rel() {
    // return new LanguageSupport(relLanguage, [relCompletion])
    return new language.LanguageSupport(relLanguage);
}

exports.rel = rel;
exports.relLanguage = relLanguage;
