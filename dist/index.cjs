'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var lr = require('@lezer/lr');
var language = require('@codemirror/language');
var highlight = require('@lezer/highlight');
var autocomplete = require('@codemirror/autocomplete');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_identifier = {__proto__:null,inline:12, in:18, where:20, if:24, then:28, else:30, end:32, iff:36, not:40, xor:44, and:48, or:50, from:54, module:60, forall:64, foreach:68, for:72, implies:76, def:80, abort:84, export:88, config:92, delete:96, insert:100, output:104, with:108, use:110, ic:114, raw:120, doc:126, entity:132, type:136, value:140, true:146, false:146, Int:168, String:172, Any:176, Number:180, Char:184, Missing:188, Floating:192, UnsignedInt:196, SignedInt:200, Rational:204, FixedDecimal:208, RelName:212, Entity:216, AutoNumber:220, Hash:224, FilePos:228, Date:232, DateTime:236, Year:240, Month:244, Week:248, Day:252, Hour:256, Minute:260, Second:264, Millisecond:268, Microsecond:272, Nanosecond:276};
const parser = lr.LRParser.deserialize({
  version: 14,
  states: "8fO`QPOOO%ZOQO'#DkO%cOQO'#DnO%kOQO'#D{OOQO'#Fr'#FrO%sQPO'#FrOOQO'#Du'#DuOOQO'#Fu'#FuOOQO'#EQ'#EQOOQO'#Fd'#FdOOQO'#F]'#F]Q`QPOOO)}QPO'#CaO*SQPO'#CdO`QPO'#CgO`QPO'#CmO`QPO'#CoO`QPO'#CqO`QPO'#CsO*SQPO'#CvO*SQPO'#CyO`QPO'#C{O*XQPO'#C}O*SQPO'#DPO`QPO'#DRO*^QPO'#DTO*SQPO'#DcO*SQPO'#DfO*uQPO'#DhO*}QPO'#DoO+VQPO'#DsO+[QPO'#ERO/fQPO'#ETO3pQPO'#EVO7zQPO'#EXO<UQPO'#EZO@`QPO'#E]ODjQPO'#E_OHtQPO'#EaOMOQPO'#EcO!#YQPO'#EeO!'dQPO'#EgO!+nQPO'#EiO!/xQPO'#EkO!4SQPO'#EmO!8^QPO'#EoO!<hQPO'#EqO!@rQPO'#EsO!D|QPO'#EuO!IWQPO'#EwO!MbQPO'#EyO##lQPO'#E{O#'vQPO'#E}O#,QQPO'#FPO#0[QPO'#FRO#4fQPO'#FTO#8pQPO'#FVO#<zQPO'#FXO#AUQPO'#FZOOOO'#F`'#F`O#E`OQO,5:VOOQO,5:V,5:VO#EhOQO,5:YOOQO,5:Y,5:YO#EpOQO,5:gOOQO,5:g,5:gOOQO'#Cc'#CcO#ExQPO,5:kOOQO-E9Z-E9ZO#E}QPO,58{O#JXQPO,59OO#NcQPO'#CiO#NpQPO,59ROOQO,59X,59XOOQO,59Z,59ZOOQO,59],59]OOQO,59_,59_O#N{QPO'#CxOOQO,59b,59bO`QPO,59eO`QPO,59gO*SQPO,59iO$ QQPO,59kOOQO,59m,59mO$ VQPO,59oO`QPO,59qO`QPO,59sO`QPO,59uO`QPO,59wO`QPO,59yO`QPO,59{O$%dQPO,59}O$%iQSO,5:QO$%qQPO,5:SO$%vQPO,5:WOOQO,5:Z,5:ZO*SQPO,5:]O*SQPO,5:_OOQO,5:m,5:mOOQO,5:o,5:oOOQO,5:q,5:qOOQO,5:s,5:sOOQO,5:u,5:uOOQO,5:w,5:wOOQO,5:y,5:yOOQO,5:{,5:{OOQO,5:},5:}OOQO,5;P,5;POOQO,5;R,5;ROOQO,5;T,5;TOOQO,5;V,5;VOOQO,5;X,5;XOOQO,5;Z,5;ZOOQO,5;],5;]OOQO,5;_,5;_OOQO,5;a,5;aOOQO,5;c,5;cOOQO,5;e,5;eOOQO,5;g,5;gOOQO,5;i,5;iOOQO,5;k,5;kOOQO,5;m,5;mOOQO,5;o,5;oOOQO,5;q,5;qOOQO,5;s,5;sOOQO,5;u,5;uOOOO-E9^-E9^OOQO1G/q1G/qOOQO1G/t1G/tOOQO1G0R1G0RO*SQPO1G0VOOQO1G.g1G.gO`QPO1G.jO$%{QPO1G.mO`QPO'#F^OOQO1G.m1G.mO`QPO1G.mO*SQPO'#F_O$&WQPO,59dO$*hQPO1G/POOQO1G/R1G/RO$*mQPO1G/TO*SQPO1G/VO*SQPO1G/ZO*SQPO1G/ZOOQO1G/]1G/]OOQO1G/_1G/_OOQO1G/a1G/aOOQO1G/c1G/cOOQO1G/e1G/eOOQO1G/g1G/gO*SQPO1G/iOOQO1G/l1G/lO*SQPO1G/lOOQO1G/n1G/nOOQO1G/r1G/rOOQO1G/w1G/wOOQO1G/y1G/yO$*rQPO7+%qOOQO7+$U7+$UOOQO-E9[-E9[OOQO7+$X7+$XO`QPO7+$XOOQO,5;x,5;xO$*wQPO7+$XOOQO,5;y,5;yOOQO-E9]-E9]OOQO7+$k7+$kOOQO7+$o7+$oOOQO7+$q7+$qO$*|QPO7+$uO$+RQPO7+$uOOQO7+%T7+%TO$+WQPO7+%WOOQO<<I]<<I]O$+]QPO<<GsOOQO<<Gs<<GsOOQO<<Ha<<HaOOQO<<Hr<<HrOOQOAN=_AN=_",
  stateData: "$+n~O$VOSPOSQOSROS~OX]O[^Ob_Od`OfaOhbOibOkcOndOpeOrfOtgOvhOxiO!WjO!ZkO!]lO!dmO!hnO!jSO!kSO!lTO!mSO!nSO!pSO!qSO!rSO!voO!xpO!zqO!|rO#OsO#QtO#SuO#UvO#WwO#YxO#[yO#^zO#`{O#b|O#d}O#f!OO#h!PO#j!QO#l!RO#n!SO#p!TO#r!UO#t!VO#v!WO#x!XO#z!YO#|!ZO$O![O$X[O$cPO$eQO$hRO~O$c!_O$d!]O~O$d!]O$e!aO~O$d!]O$g!cO~O$Y!dOX$fX[$fXb$fXd$fXf$fXh$fXi$fXk$fXn$fXp$fXr$fXt$fXv$fXx$fX!W$fX!Z$fX!]$fX!d$fX!h$fX!j$fX!k$fX!l$fX!m$fX!n$fX!p$fX!q$fX!r$fX!v$fX!x$fX!z$fX!|$fX#O$fX#Q$fX#S$fX#U$fX#W$fX#Y$fX#[$fX#^$fX#`$fX#b$fX#d$fX#f$fX#h$fX#j$fX#l$fX#n$fX#p$fX#r$fX#t$fX#v$fX#x$fX#z$fX#|$fX$O$fX$T$fX$X$fX$c$fX$e$fX$h$fX^$fX_$fX`$fX~OU!gO~O$Y!dO~O$]!sO~Oz!wO|!xO!O!yO!Q!zO!S!{O!U!|O$Y!dO~O!^#PO!a#QO~O!f#SO$Y!dO~O!f#TO~O$Y!dOX!uX[!uXb!uXd!uXf!uXh!uXi!uXk!uXn!uXp!uXr!uXt!uXv!uXx!uX!W!uX!Z!uX!]!uX!d!uX!h!uX!j!uX!k!uX!l!uX!m!uX!n!uX!p!uX!q!uX!r!uX!v!uX!x!uX!z!uX!|!uX#O!uX#Q!uX#S!uX#U!uX#W!uX#Y!uX#[!uX#^!uX#`!uX#b!uX#d!uX#f!uX#h!uX#j!uX#l!uX#n!uX#p!uX#r!uX#t!uX#v!uX#x!uX#z!uX#|!uX$O!uX$T!uX$X!uX$c!uX$e!uX$h!uX^!uX_!uX`!uX~O$Y!dOX!wX[!wXb!wXd!wXf!wXh!wXi!wXk!wXn!wXp!wXr!wXt!wXv!wXx!wX!W!wX!Z!wX!]!wX!d!wX!h!wX!j!wX!k!wX!l!wX!m!wX!n!wX!p!wX!q!wX!r!wX!v!wX!x!wX!z!wX!|!wX#O!wX#Q!wX#S!wX#U!wX#W!wX#Y!wX#[!wX#^!wX#`!wX#b!wX#d!wX#f!wX#h!wX#j!wX#l!wX#n!wX#p!wX#r!wX#t!wX#v!wX#x!wX#z!wX#|!wX$O!wX$T!wX$X!wX$c!wX$e!wX$h!wX^!wX_!wX`!wX~O$Y!dOX!yX[!yXb!yXd!yXf!yXh!yXi!yXk!yXn!yXp!yXr!yXt!yXv!yXx!yX!W!yX!Z!yX!]!yX!d!yX!h!yX!j!yX!k!yX!l!yX!m!yX!n!yX!p!yX!q!yX!r!yX!v!yX!x!yX!z!yX!|!yX#O!yX#Q!yX#S!yX#U!yX#W!yX#Y!yX#[!yX#^!yX#`!yX#b!yX#d!yX#f!yX#h!yX#j!yX#l!yX#n!yX#p!yX#r!yX#t!yX#v!yX#x!yX#z!yX#|!yX$O!yX$T!yX$X!yX$c!yX$e!yX$h!yX^!yX_!yX`!yX~O$Y!dOX!{X[!{Xb!{Xd!{Xf!{Xh!{Xi!{Xk!{Xn!{Xp!{Xr!{Xt!{Xv!{Xx!{X!W!{X!Z!{X!]!{X!d!{X!h!{X!j!{X!k!{X!l!{X!m!{X!n!{X!p!{X!q!{X!r!{X!v!{X!x!{X!z!{X!|!{X#O!{X#Q!{X#S!{X#U!{X#W!{X#Y!{X#[!{X#^!{X#`!{X#b!{X#d!{X#f!{X#h!{X#j!{X#l!{X#n!{X#p!{X#r!{X#t!{X#v!{X#x!{X#z!{X#|!{X$O!{X$T!{X$X!{X$c!{X$e!{X$h!{X^!{X_!{X`!{X~O$Y!dOX!}X[!}Xb!}Xd!}Xf!}Xh!}Xi!}Xk!}Xn!}Xp!}Xr!}Xt!}Xv!}Xx!}X!W!}X!Z!}X!]!}X!d!}X!h!}X!j!}X!k!}X!l!}X!m!}X!n!}X!p!}X!q!}X!r!}X!v!}X!x!}X!z!}X!|!}X#O!}X#Q!}X#S!}X#U!}X#W!}X#Y!}X#[!}X#^!}X#`!}X#b!}X#d!}X#f!}X#h!}X#j!}X#l!}X#n!}X#p!}X#r!}X#t!}X#v!}X#x!}X#z!}X#|!}X$O!}X$T!}X$X!}X$c!}X$e!}X$h!}X^!}X_!}X`!}X~O$Y!dOX#PX[#PXb#PXd#PXf#PXh#PXi#PXk#PXn#PXp#PXr#PXt#PXv#PXx#PX!W#PX!Z#PX!]#PX!d#PX!h#PX!j#PX!k#PX!l#PX!m#PX!n#PX!p#PX!q#PX!r#PX!v#PX!x#PX!z#PX!|#PX#O#PX#Q#PX#S#PX#U#PX#W#PX#Y#PX#[#PX#^#PX#`#PX#b#PX#d#PX#f#PX#h#PX#j#PX#l#PX#n#PX#p#PX#r#PX#t#PX#v#PX#x#PX#z#PX#|#PX$O#PX$T#PX$X#PX$c#PX$e#PX$h#PX^#PX_#PX`#PX~O$Y!dOX#RX[#RXb#RXd#RXf#RXh#RXi#RXk#RXn#RXp#RXr#RXt#RXv#RXx#RX!W#RX!Z#RX!]#RX!d#RX!h#RX!j#RX!k#RX!l#RX!m#RX!n#RX!p#RX!q#RX!r#RX!v#RX!x#RX!z#RX!|#RX#O#RX#Q#RX#S#RX#U#RX#W#RX#Y#RX#[#RX#^#RX#`#RX#b#RX#d#RX#f#RX#h#RX#j#RX#l#RX#n#RX#p#RX#r#RX#t#RX#v#RX#x#RX#z#RX#|#RX$O#RX$T#RX$X#RX$c#RX$e#RX$h#RX^#RX_#RX`#RX~O$Y!dOX#TX[#TXb#TXd#TXf#TXh#TXi#TXk#TXn#TXp#TXr#TXt#TXv#TXx#TX!W#TX!Z#TX!]#TX!d#TX!h#TX!j#TX!k#TX!l#TX!m#TX!n#TX!p#TX!q#TX!r#TX!v#TX!x#TX!z#TX!|#TX#O#TX#Q#TX#S#TX#U#TX#W#TX#Y#TX#[#TX#^#TX#`#TX#b#TX#d#TX#f#TX#h#TX#j#TX#l#TX#n#TX#p#TX#r#TX#t#TX#v#TX#x#TX#z#TX#|#TX$O#TX$T#TX$X#TX$c#TX$e#TX$h#TX^#TX_#TX`#TX~O$Y!dOX#VX[#VXb#VXd#VXf#VXh#VXi#VXk#VXn#VXp#VXr#VXt#VXv#VXx#VX!W#VX!Z#VX!]#VX!d#VX!h#VX!j#VX!k#VX!l#VX!m#VX!n#VX!p#VX!q#VX!r#VX!v#VX!x#VX!z#VX!|#VX#O#VX#Q#VX#S#VX#U#VX#W#VX#Y#VX#[#VX#^#VX#`#VX#b#VX#d#VX#f#VX#h#VX#j#VX#l#VX#n#VX#p#VX#r#VX#t#VX#v#VX#x#VX#z#VX#|#VX$O#VX$T#VX$X#VX$c#VX$e#VX$h#VX^#VX_#VX`#VX~O$Y!dOX#XX[#XXb#XXd#XXf#XXh#XXi#XXk#XXn#XXp#XXr#XXt#XXv#XXx#XX!W#XX!Z#XX!]#XX!d#XX!h#XX!j#XX!k#XX!l#XX!m#XX!n#XX!p#XX!q#XX!r#XX!v#XX!x#XX!z#XX!|#XX#O#XX#Q#XX#S#XX#U#XX#W#XX#Y#XX#[#XX#^#XX#`#XX#b#XX#d#XX#f#XX#h#XX#j#XX#l#XX#n#XX#p#XX#r#XX#t#XX#v#XX#x#XX#z#XX#|#XX$O#XX$T#XX$X#XX$c#XX$e#XX$h#XX^#XX_#XX`#XX~O$Y!dOX#ZX[#ZXb#ZXd#ZXf#ZXh#ZXi#ZXk#ZXn#ZXp#ZXr#ZXt#ZXv#ZXx#ZX!W#ZX!Z#ZX!]#ZX!d#ZX!h#ZX!j#ZX!k#ZX!l#ZX!m#ZX!n#ZX!p#ZX!q#ZX!r#ZX!v#ZX!x#ZX!z#ZX!|#ZX#O#ZX#Q#ZX#S#ZX#U#ZX#W#ZX#Y#ZX#[#ZX#^#ZX#`#ZX#b#ZX#d#ZX#f#ZX#h#ZX#j#ZX#l#ZX#n#ZX#p#ZX#r#ZX#t#ZX#v#ZX#x#ZX#z#ZX#|#ZX$O#ZX$T#ZX$X#ZX$c#ZX$e#ZX$h#ZX^#ZX_#ZX`#ZX~O$Y!dOX#]X[#]Xb#]Xd#]Xf#]Xh#]Xi#]Xk#]Xn#]Xp#]Xr#]Xt#]Xv#]Xx#]X!W#]X!Z#]X!]#]X!d#]X!h#]X!j#]X!k#]X!l#]X!m#]X!n#]X!p#]X!q#]X!r#]X!v#]X!x#]X!z#]X!|#]X#O#]X#Q#]X#S#]X#U#]X#W#]X#Y#]X#[#]X#^#]X#`#]X#b#]X#d#]X#f#]X#h#]X#j#]X#l#]X#n#]X#p#]X#r#]X#t#]X#v#]X#x#]X#z#]X#|#]X$O#]X$T#]X$X#]X$c#]X$e#]X$h#]X^#]X_#]X`#]X~O$Y!dOX#_X[#_Xb#_Xd#_Xf#_Xh#_Xi#_Xk#_Xn#_Xp#_Xr#_Xt#_Xv#_Xx#_X!W#_X!Z#_X!]#_X!d#_X!h#_X!j#_X!k#_X!l#_X!m#_X!n#_X!p#_X!q#_X!r#_X!v#_X!x#_X!z#_X!|#_X#O#_X#Q#_X#S#_X#U#_X#W#_X#Y#_X#[#_X#^#_X#`#_X#b#_X#d#_X#f#_X#h#_X#j#_X#l#_X#n#_X#p#_X#r#_X#t#_X#v#_X#x#_X#z#_X#|#_X$O#_X$T#_X$X#_X$c#_X$e#_X$h#_X^#_X_#_X`#_X~O$Y!dOX#aX[#aXb#aXd#aXf#aXh#aXi#aXk#aXn#aXp#aXr#aXt#aXv#aXx#aX!W#aX!Z#aX!]#aX!d#aX!h#aX!j#aX!k#aX!l#aX!m#aX!n#aX!p#aX!q#aX!r#aX!v#aX!x#aX!z#aX!|#aX#O#aX#Q#aX#S#aX#U#aX#W#aX#Y#aX#[#aX#^#aX#`#aX#b#aX#d#aX#f#aX#h#aX#j#aX#l#aX#n#aX#p#aX#r#aX#t#aX#v#aX#x#aX#z#aX#|#aX$O#aX$T#aX$X#aX$c#aX$e#aX$h#aX^#aX_#aX`#aX~O$Y!dOX#cX[#cXb#cXd#cXf#cXh#cXi#cXk#cXn#cXp#cXr#cXt#cXv#cXx#cX!W#cX!Z#cX!]#cX!d#cX!h#cX!j#cX!k#cX!l#cX!m#cX!n#cX!p#cX!q#cX!r#cX!v#cX!x#cX!z#cX!|#cX#O#cX#Q#cX#S#cX#U#cX#W#cX#Y#cX#[#cX#^#cX#`#cX#b#cX#d#cX#f#cX#h#cX#j#cX#l#cX#n#cX#p#cX#r#cX#t#cX#v#cX#x#cX#z#cX#|#cX$O#cX$T#cX$X#cX$c#cX$e#cX$h#cX^#cX_#cX`#cX~O$Y!dOX#eX[#eXb#eXd#eXf#eXh#eXi#eXk#eXn#eXp#eXr#eXt#eXv#eXx#eX!W#eX!Z#eX!]#eX!d#eX!h#eX!j#eX!k#eX!l#eX!m#eX!n#eX!p#eX!q#eX!r#eX!v#eX!x#eX!z#eX!|#eX#O#eX#Q#eX#S#eX#U#eX#W#eX#Y#eX#[#eX#^#eX#`#eX#b#eX#d#eX#f#eX#h#eX#j#eX#l#eX#n#eX#p#eX#r#eX#t#eX#v#eX#x#eX#z#eX#|#eX$O#eX$T#eX$X#eX$c#eX$e#eX$h#eX^#eX_#eX`#eX~O$Y!dOX#gX[#gXb#gXd#gXf#gXh#gXi#gXk#gXn#gXp#gXr#gXt#gXv#gXx#gX!W#gX!Z#gX!]#gX!d#gX!h#gX!j#gX!k#gX!l#gX!m#gX!n#gX!p#gX!q#gX!r#gX!v#gX!x#gX!z#gX!|#gX#O#gX#Q#gX#S#gX#U#gX#W#gX#Y#gX#[#gX#^#gX#`#gX#b#gX#d#gX#f#gX#h#gX#j#gX#l#gX#n#gX#p#gX#r#gX#t#gX#v#gX#x#gX#z#gX#|#gX$O#gX$T#gX$X#gX$c#gX$e#gX$h#gX^#gX_#gX`#gX~O$Y!dOX#iX[#iXb#iXd#iXf#iXh#iXi#iXk#iXn#iXp#iXr#iXt#iXv#iXx#iX!W#iX!Z#iX!]#iX!d#iX!h#iX!j#iX!k#iX!l#iX!m#iX!n#iX!p#iX!q#iX!r#iX!v#iX!x#iX!z#iX!|#iX#O#iX#Q#iX#S#iX#U#iX#W#iX#Y#iX#[#iX#^#iX#`#iX#b#iX#d#iX#f#iX#h#iX#j#iX#l#iX#n#iX#p#iX#r#iX#t#iX#v#iX#x#iX#z#iX#|#iX$O#iX$T#iX$X#iX$c#iX$e#iX$h#iX^#iX_#iX`#iX~O$Y!dOX#kX[#kXb#kXd#kXf#kXh#kXi#kXk#kXn#kXp#kXr#kXt#kXv#kXx#kX!W#kX!Z#kX!]#kX!d#kX!h#kX!j#kX!k#kX!l#kX!m#kX!n#kX!p#kX!q#kX!r#kX!v#kX!x#kX!z#kX!|#kX#O#kX#Q#kX#S#kX#U#kX#W#kX#Y#kX#[#kX#^#kX#`#kX#b#kX#d#kX#f#kX#h#kX#j#kX#l#kX#n#kX#p#kX#r#kX#t#kX#v#kX#x#kX#z#kX#|#kX$O#kX$T#kX$X#kX$c#kX$e#kX$h#kX^#kX_#kX`#kX~O$Y!dOX#mX[#mXb#mXd#mXf#mXh#mXi#mXk#mXn#mXp#mXr#mXt#mXv#mXx#mX!W#mX!Z#mX!]#mX!d#mX!h#mX!j#mX!k#mX!l#mX!m#mX!n#mX!p#mX!q#mX!r#mX!v#mX!x#mX!z#mX!|#mX#O#mX#Q#mX#S#mX#U#mX#W#mX#Y#mX#[#mX#^#mX#`#mX#b#mX#d#mX#f#mX#h#mX#j#mX#l#mX#n#mX#p#mX#r#mX#t#mX#v#mX#x#mX#z#mX#|#mX$O#mX$T#mX$X#mX$c#mX$e#mX$h#mX^#mX_#mX`#mX~O$Y!dOX#oX[#oXb#oXd#oXf#oXh#oXi#oXk#oXn#oXp#oXr#oXt#oXv#oXx#oX!W#oX!Z#oX!]#oX!d#oX!h#oX!j#oX!k#oX!l#oX!m#oX!n#oX!p#oX!q#oX!r#oX!v#oX!x#oX!z#oX!|#oX#O#oX#Q#oX#S#oX#U#oX#W#oX#Y#oX#[#oX#^#oX#`#oX#b#oX#d#oX#f#oX#h#oX#j#oX#l#oX#n#oX#p#oX#r#oX#t#oX#v#oX#x#oX#z#oX#|#oX$O#oX$T#oX$X#oX$c#oX$e#oX$h#oX^#oX_#oX`#oX~O$Y!dOX#qX[#qXb#qXd#qXf#qXh#qXi#qXk#qXn#qXp#qXr#qXt#qXv#qXx#qX!W#qX!Z#qX!]#qX!d#qX!h#qX!j#qX!k#qX!l#qX!m#qX!n#qX!p#qX!q#qX!r#qX!v#qX!x#qX!z#qX!|#qX#O#qX#Q#qX#S#qX#U#qX#W#qX#Y#qX#[#qX#^#qX#`#qX#b#qX#d#qX#f#qX#h#qX#j#qX#l#qX#n#qX#p#qX#r#qX#t#qX#v#qX#x#qX#z#qX#|#qX$O#qX$T#qX$X#qX$c#qX$e#qX$h#qX^#qX_#qX`#qX~O$Y!dOX#sX[#sXb#sXd#sXf#sXh#sXi#sXk#sXn#sXp#sXr#sXt#sXv#sXx#sX!W#sX!Z#sX!]#sX!d#sX!h#sX!j#sX!k#sX!l#sX!m#sX!n#sX!p#sX!q#sX!r#sX!v#sX!x#sX!z#sX!|#sX#O#sX#Q#sX#S#sX#U#sX#W#sX#Y#sX#[#sX#^#sX#`#sX#b#sX#d#sX#f#sX#h#sX#j#sX#l#sX#n#sX#p#sX#r#sX#t#sX#v#sX#x#sX#z#sX#|#sX$O#sX$T#sX$X#sX$c#sX$e#sX$h#sX^#sX_#sX`#sX~O$Y!dOX#uX[#uXb#uXd#uXf#uXh#uXi#uXk#uXn#uXp#uXr#uXt#uXv#uXx#uX!W#uX!Z#uX!]#uX!d#uX!h#uX!j#uX!k#uX!l#uX!m#uX!n#uX!p#uX!q#uX!r#uX!v#uX!x#uX!z#uX!|#uX#O#uX#Q#uX#S#uX#U#uX#W#uX#Y#uX#[#uX#^#uX#`#uX#b#uX#d#uX#f#uX#h#uX#j#uX#l#uX#n#uX#p#uX#r#uX#t#uX#v#uX#x#uX#z#uX#|#uX$O#uX$T#uX$X#uX$c#uX$e#uX$h#uX^#uX_#uX`#uX~O$Y!dOX#wX[#wXb#wXd#wXf#wXh#wXi#wXk#wXn#wXp#wXr#wXt#wXv#wXx#wX!W#wX!Z#wX!]#wX!d#wX!h#wX!j#wX!k#wX!l#wX!m#wX!n#wX!p#wX!q#wX!r#wX!v#wX!x#wX!z#wX!|#wX#O#wX#Q#wX#S#wX#U#wX#W#wX#Y#wX#[#wX#^#wX#`#wX#b#wX#d#wX#f#wX#h#wX#j#wX#l#wX#n#wX#p#wX#r#wX#t#wX#v#wX#x#wX#z#wX#|#wX$O#wX$T#wX$X#wX$c#wX$e#wX$h#wX^#wX_#wX`#wX~O$Y!dOX#yX[#yXb#yXd#yXf#yXh#yXi#yXk#yXn#yXp#yXr#yXt#yXv#yXx#yX!W#yX!Z#yX!]#yX!d#yX!h#yX!j#yX!k#yX!l#yX!m#yX!n#yX!p#yX!q#yX!r#yX!v#yX!x#yX!z#yX!|#yX#O#yX#Q#yX#S#yX#U#yX#W#yX#Y#yX#[#yX#^#yX#`#yX#b#yX#d#yX#f#yX#h#yX#j#yX#l#yX#n#yX#p#yX#r#yX#t#yX#v#yX#x#yX#z#yX#|#yX$O#yX$T#yX$X#yX$c#yX$e#yX$h#yX^#yX_#yX`#yX~O$Y!dOX#{X[#{Xb#{Xd#{Xf#{Xh#{Xi#{Xk#{Xn#{Xp#{Xr#{Xt#{Xv#{Xx#{X!W#{X!Z#{X!]#{X!d#{X!h#{X!j#{X!k#{X!l#{X!m#{X!n#{X!p#{X!q#{X!r#{X!v#{X!x#{X!z#{X!|#{X#O#{X#Q#{X#S#{X#U#{X#W#{X#Y#{X#[#{X#^#{X#`#{X#b#{X#d#{X#f#{X#h#{X#j#{X#l#{X#n#{X#p#{X#r#{X#t#{X#v#{X#x#{X#z#{X#|#{X$O#{X$T#{X$X#{X$c#{X$e#{X$h#{X^#{X_#{X`#{X~O$Y!dOX#}X[#}Xb#}Xd#}Xf#}Xh#}Xi#}Xk#}Xn#}Xp#}Xr#}Xt#}Xv#}Xx#}X!W#}X!Z#}X!]#}X!d#}X!h#}X!j#}X!k#}X!l#}X!m#}X!n#}X!p#}X!q#}X!r#}X!v#}X!x#}X!z#}X!|#}X#O#}X#Q#}X#S#}X#U#}X#W#}X#Y#}X#[#}X#^#}X#`#}X#b#}X#d#}X#f#}X#h#}X#j#}X#l#}X#n#}X#p#}X#r#}X#t#}X#v#}X#x#}X#z#}X#|#}X$O#}X$T#}X$X#}X$c#}X$e#}X$h#}X^#}X_#}X`#}X~O$c#sO$d!]O~O$d!]O$e#tO~O$d!]O$g#uO~O$^#vO~O$Y!dOXTa[TabTadTafTahTaiTakTanTapTarTatTavTaxTa!WTa!ZTa!]Ta!dTa!hTa!jTa!kTa!lTa!mTa!nTa!pTa!qTa!rTa!vTa!xTa!zTa!|Ta#OTa#QTa#STa#UTa#WTa#YTa#[Ta#^Ta#`Ta#bTa#dTa#fTa#hTa#jTa#lTa#nTa#pTa#rTa#tTa#vTa#xTa#zTa#|Ta$OTa$TTa$XTa$cTa$eTa$hTa^Ta_Ta`Ta~OY#xOXWa[WabWadWafWahWaiWakWanWapWarWatWavWaxWa!WWa!ZWa!]Wa!dWa!hWa!jWa!kWa!lWa!mWa!nWa!pWa!qWa!rWa!vWa!xWa!zWa!|Wa#OWa#QWa#SWa#UWa#WWa#YWa#[Wa#^Wa#`Wa#bWa#dWa#fWa#hWa#jWa#lWa#nWa#pWa#rWa#tWa#vWa#xWa#zWa#|Wa$OWa$TWa$XWa$cWa$eWa$hWa^Wa_Wa`Wa~O^]X_]X`]X~P`O^#zO_#|O`#{O~O$Z#}O~OX$SO~O$]$UO$^$TOXwa[wabwadwafwahwaiwakwanwapwarwatwavwaxwa!Wwa!Zwa!]wa!dwa!hwa!jwa!kwa!lwa!mwa!nwa!pwa!qwa!rwa!vwa!xwa!zwa!|wa#Owa#Qwa#Swa#Uwa#Wwa#Ywa#[wa#^wa#`wa#bwa#dwa#fwa#hwa#jwa#lwa#nwa#pwa#rwa#twa#vwa#xwa#zwa#|wa$Owa$Twa$Xwa$cwa$ewa$hwa^wa_wa`wa~O!X$]O~O$`$^O$a$_O~O$cPO~O$eQO~O^#zO_$hO`$gO~O$Z#}OXla[labladlaflahlailaklanlaplarlatlavlaxla!Wla!Zla!]la!dla!hla!jla!kla!lla!mla!nla!pla!qla!rla!vla!xla!zla!|la#Ola#Qla#Sla#Ula#Wla#Yla#[la#^la#`la#bla#dla#fla#hla#jla#lla#nla#pla#rla#tla#vla#xla#zla#|la$Ola$Tla$Xla$cla$ela$hla^la_la`la$[la$_la~O`$mO~O$[$nO~O$_$tO~O`$vO~O$_$wO~O$[$wO~O$b$xO~O`$yO~OQP$d!n$g!m!j!l!r$Y!l~",
  goto: ".O$jPPPPP$kP%T$kPP$kP(PPPP$kP$kP$kP$kPP$kP(`$kP$kP$kP$kP$kP$kP$kP$kP$kP$kP$kP$kP$kPP$kP$kPP(r$kP)_$kP$kP$kP$kPPPPP)zPPP$k$k*dP*dP*dP*dP*dP*dP*dP*dP*dP*dP*dP*dP*dP*dP*dP*dP*dP*dP*dP*dP*dP*dP*dP*dP*dP*dP*dP*dP*|+[+b+hPPP+vPPPPPPPPPPPPP,|PP-f}XOZ^_`abeh!i!q!r!w!x!y!z!{!|#x#z#|$hQ!eTQ!h][!oc!s#v$T$U$]Q!qdQ!tgQ!viQ!}jQ#OkQ#RmQ#UoQ#VpQ#WqQ#XrQ#YsQ#ZtQ#[uQ#]vQ#^wQ#_xQ#`yQ#azQ#b{Q#c|Q#d}Q#e!OQ#f!PQ#g!QQ#h!RQ#i!SQ#j!TQ#k!UQ#l!VQ#m!WQ#n!XQ#o!YQ#p!ZQ#q![Q#w!gQ$b#SQ$c#TQ$k#}Q$o$SR$s$_Q!j^Q$P!qQ$i#zQ$j#|R$u$hQ!pcQ$R!sQ$d#vQ$p$TQ$q$UR$r$]|SOZ^_`abeh!i!q!r!w!x!y!z!{!|#x#z#|$hR$`#P|SOZ^_`abeh!i!q!r!w!x!y!z!{!|#x#z#|$hR$a#Q}SOZ^_`abeh!i!q!r!w!x!y!z!{!|#x#z#|$h}VOZ^_`abeh!i!q!r!w!x!y!z!{!|#x#z#|$hQZOS!fZ!iZ!i^!q#z#|$hQ#y!jR$f#yQ$O!oR$l$OQ!^PQ!`QQ!bRV#r!^!`!b`YOZ^!i!q#z#|$hQ!k_Q!l`Q!maQ!nbQ!reQ!uhQ$Q!rQ$V!wQ$W!xQ$X!yQ$Y!zQ$Z!{Q$[!|R$e#x}UOZ^_`abeh!i!q!r!w!x!y!z!{!|#x#z#|$h}WOZ^_`abeh!i!q!r!w!x!y!z!{!|#x#z#|$h",
  nodeNames: "⚠ LineComment BlockComment StringLiteral Rel InlineStatement inline VariableName InStatement in where IfStatement if Body then else end IffStatement iff NotStatement not XorStatement xor AndOrStatement and or FromStatement from MultipleVariables ModuleStatement module ForallStatement forall ForEachStatement foreach ForInStatement for ImpliesStatement implies DefineStatement def ImportDefinitionStatement abort ExportDefinitionStatement export ConfigDefinitionStatement config DeleteDefinitionStatement delete InsertDefinitionStatement insert OutputDefinitionStatement output WithUseStatement with use ConstraintStatement ic RawStringLiteral LineStarter raw MultilineRawStringLiteral DocStringLiteral doc MultilineStringLiteral EntityStatement entity EntityTypeStatement type ValueTypeStatement value ExpressionStatement Number BooleanLiteral Operator DateLiteral DatetimeLiteral MultilineBlockComment RelnameLiteral RelnameStringLiteral ValueTypeLiteral ArtityStatement TypeStatement IntType Int StringType String AnyType Any NumberType Number CharType Char MissingType Missing FloatingType Floating UnsignedIntType UnsignedInt SignedIntType SignedInt RationalType Rational FixedDecimalType FixedDecimal RelNameType RelName EntityType Entity AutoNumberType AutoNumber HashType Hash FilePosType FilePos DateType Date DateTimeType DateTime YearType Year MonthType Month WeekType Week DayType Day HourType Hour MinuteType Minute SecondType Second MillisecondType Millisecond MicrosecondType Microsecond NanosecondType Nanosecond",
  maxTerm: 163,
  nodeProps: [
    ["group", -11,61,64,72,73,74,75,76,77,78,79,80,"Expression",-28,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133,135,137,"Type"]
  ],
  skippedNodes: [0,1,2,3],
  repeatNodeCount: 4,
  tokenData: "$$_~R#_OX(QXY*qYZ+hZ](Q]^*q^p(Qpq*qqr+{rs-mst(Qtu7muv,vvw(Qwx8dxy@hyzA_z{,v{|BU|}C|}!O,v!O!PDs!P!QJy!Q!R!)P!R![!Ha![!]!Ip!]!^(Q!^!_#;{!_!`#>P!`!a#>x!a!b(Q!b!c#?u!c!}#@l!}#O#BX#O#P(Q#P#Q#CO#Q#R#Cu#R#S#Hb#S#T(Q#T#U#I{#U#c#@l#c#d$ O#d#o#@l#o#p$!q#p#q(Q#q#r$#h#r$r(Q$r$s,v$s%o(Q%o%p,v%p&a(Q&a&b,v&b4w(Q4w5b#@l5b5i(Q5i6S#@l6S%#t(Q%#t%#u,v%#u%#v(Q%#v%#w,v%#w%%U(Q%%U%%V,v%%V%%W(Q%%W%%X,v%%X%%Y(Q%%Y%%Z,v%%Z%%[(Q%%[%%],v%%]%&b(Q%&b%&c,v%&c%'R(Q%'R%'S,v%'S%'T,v%'T%'U,v%'U%'V,v%'V%'h(Q%'h%'i,v%'i%'t(Q%'t%'u,v%'u%(^(Q%(^%(_,v%(_%(`,v%(`%(a,v%(a%(b(Q%(b%(c,v%(c%(d,v%(d%(x(Q%(x%(y,v%(y%(z,v%(z%({,v%({%(|,v%(|%)Q(Q%)Q%)R,v%)R%)S,v%)S%)U(Q%)U%)V,v%)V%)W,v%)W%)c(Q%)c%)d,v%)d%)e,v%)e%)f,v%)f%)g(Q%)g%)h,v%)h%)i(Q%)i%)j,v%)j%*](Q%*]%*^,v%*^~(QQ(VY$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws~(QQ(zS$dQXY(uYZ(u]^(upq(uQ)ZTOY)jYZ*]Zr)jrs*bs~)jQ)mYOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws~(QQ*bO$dQQ*eSOY)jYZ*]Zr)js~)jV*xY$VT$dQOX(QXY*qYZ+hZ](Q]^*q^p(Qpq*qqr(Qrs)Ws~(QV+oS$VT$dQXY+hYZ+h]^+hpq+hR,Q[$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!_(Q!_!`,v!`~(QR,}Y$dQ!lPOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws~(Q~-rVR~OY.XYZ5fZr.Xrs5ms#O.X#O#P6x#P~.X~.`[$c~R~OX/UXY/UYZ(uZ]/U]^/U^p/Upq/Uqr/Urs0Rs#O/U#O#P0g#P~/U~/][$dQR~OX/UXY/UYZ(uZ]/U]^/U^p/Upq/Uqr/Urs0Rs#O/U#O#P0g#P~/U~0WTR~OY)jYZ*]Zr)jrs*bs~)j~0lY$dQOX/UXY/UYZ1[Z]/U]^/U^p/Upq/Uqr/Urs2{s~/U~1c[$dQR~OX2XXY1[YZ(uZ]2X]^1[^p2Xpq1[qr2Xrs2ps#O2X#O#P2u#P~2X~2^UR~OY2XZr2Xrs2ps#O2X#O#P2u#P~2X~2uOR~~2xPO~2X~3QVR~OY3gYZ*]Zr3grs4bs#O3g#O#P4s#P~3g~3l[R~OX/UXY/UYZ(uZ]/U]^/U^p/Upq/Uqr/Urs0Rs#O/U#O#P0g#P~/U~4gSR~OY)jYZ*]Zr)js~)j~4vYOX/UXY/UYZ1[Z]/U]^/U^p/Upq/Uqr/Urs2{s~/U~5mO$c~$dQ~5rTR~OY)jYZ*]Zr)jrs6Rs~)j~6WR$e~Or6ars6fs~6a~6fO$c~~6iPrs6l~6oROr6ars6fs~6a~6}Y$c~OX/UXY/UYZ1[Z]/U]^/U^p/Upq/Uqr/Urs2{s~/UR7tY!]P$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws~(Q~8k^$dQR~OX8dXY8dYZ(uZ]8d]^8d^p8dpq8dqr8drs9gsw8dwx;Yx#O8d#O#P<P#P~8d~9lXR~OY:XYZ*]Zr:Xrs>`sw:Xwx?Qx#O:X#O#P?u#P~:X~:^^R~OX8dXY8dYZ(uZ]8d]^8d^p8dpq8dqr8drs9gsw8dwx;Yx#O8d#O#P<P#P~8d~;aY$dQR~OX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws~(Q~<UY$dQOX8dXY8dYZ<tZ]8d]^8d^p8dpq8dqr8drs9gs~8d~<{[$dQR~OX=qXY<tYZ(uZ]=q]^<t^p=qpq<tqw=qwx2px#O=q#O#P>Y#P~=q~=vUR~OY=qZw=qwx2px#O=q#O#P>Y#P~=q~>]PO~=q~>eXR~OY:XYZ*]Zr:Xrs=qsw:Xwx?Qx#O:X#O#P?u#P~:X~?VYR~OX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws~(Q~?xYOX8dXY8dYZ<tZ]8d]^8d^p8dpq8dqr8drs9gs~8dR@oY$^P$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws~(QRAfY$_P$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws~(QRB][$dQ!lPOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws{(Q{|CR|~(QRCW[$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!`(Q!`!a,v!a~(QRDTY$ZP$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws~(QRDz^$dQ!lPOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!O(Q!O!PEv!P!Q(Q!Q![Fq![~(QRE{[$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!O(Q!O!P,v!P~(QRFx`$dQ!jPOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![Fq![!g(Q!g!hGz!h#X(Q#X#YGz#Y~(QRHP`$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws{(Q{|IR|}(Q}!OIR!O!Q(Q!Q![I|![~(QRIW[$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![I|![~(QRJT[$dQ!jPOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![I|![~(Q~KQ^$dQ!lPOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Wsz(Qz{K|{!P(Q!P!Q!&`!Q~(Q~LV[$h~$dQ$gQOXL{XYL{YZMvZ]L{]^L{^pL{pqL{qrL{rs! `szL{z{!!q{~L{VMQ[$dQOXL{XYL{YZMvZ]L{]^L{^pL{pqL{qrL{rs! `szL{z{!!q{~L{VM{Y$dQOXNkXYMvYZMvZ]Nk]^Mv^pNkpqMvqzNkz{Nw{~NkTNnROzNkz{Nw{~NkTNzTOzNkz{Nw{!PNk!P!Q! Z!Q~NkT! `OQTV! cVOY! xYZ!$iZr! xrs!$wsz! xz{!%a{~! xV! {[OXL{XYL{YZMvZ]L{]^L{^pL{pqL{qrL{rs! `szL{z{!!q{~L{V!!v^$dQOXL{XYL{YZMvZ]L{]^L{^pL{pqL{qrL{rs! `szL{z{!!q{!PL{!P!Q!#r!Q~L{V!#yYQT$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws~(QV!$nR$dQOzNkz{Nw{~NkV!$zVOY! xYZ!$iZr! xrsNksz! xz{!%a{~! xV!%d^OXL{XYL{YZMvZ]L{]^L{^pL{pqL{qrL{rs! `szL{z{!!q{!PL{!P!Q!#r!Q~L{V!&gYPT$dQOX!&`XY!&`YZ(uZ]!&`]^!&`^p!&`pq!&`qr!&`rs!'Vs~!&`V!'[TPTOY!'kYZ*]Zr!'krs!(`s~!'kV!'pYPTOX!&`XY!&`YZ(uZ]!&`]^!&`^p!&`pq!&`qr!&`rs!'Vs~!&`V!(eTPTOY!'kYZ*]Zr!'krs!(ts~!'kT!(yQPTOY!(tZ~!(tR!)Wf$dQ!jPOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!O(Q!O!P!*l!P!Q(Q!Q![!+s![!g(Q!g!hGz!h#X(Q#X#YGz#Y#c(Q#c#d!DX#d#l(Q#l#m!FP#m~(QR!*q`$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![!*l![!g(Q!g!hGz!h#X(Q#X#YGz#Y~(QR!+zb$dQ!jPOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!O(Q!O!P!*l!P!Q(Q!Q![!-S![!g(Q!g!hGz!h#X(Q#X#YGz#Y~(QR!-Zb$dQ!jPOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!O(Q!O!P!*l!P!Q(Q!Q![!.c![!g(Q!g!hGz!h#X(Q#X#YGz#Y~(QR!.jc$dQ!jPOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws}(Q}!O!/u!O!P!*l!P!Q(Q!Q![!Bx![!g(Q!g!hGz!h#X(Q#X#YGz#Y~(QR!/z[$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![!0p![~(QR!0u[$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![!1k![~(QR!1p[$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws}(Q}!O!2f!O~(QR!2k[$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![!3a![~(QR!3f[$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![!4[![~(QR!4c[$dQ!mPOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!v(Q!v!w!5X!w~(QR!5^[$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![!6S![~(QR!6X[$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![!6}![~(QR!7S[$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws![(Q![!]!7x!]~(QR!7}[$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![!8s![~(QR!8x[$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![!9n![~(QR!9s[$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws![(Q![!]!:i!]~(QR!:n[$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![!;d![~(QR!;i[$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![!<_![~(QR!<db$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws{(Q{|!=l|}(Q}!O!=l!O!Q(Q!Q![!>g![!|(Q!|!}!BR!}~(QR!=q[$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![!>g![~(QR!>l[$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![!?b![~(QR!?g[$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws![(Q![!]!@]!]~(QR!@b[$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![!AW![~(QR!A][$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![!BR![~(QR!BYY$dQ!nPOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws~(QR!CPb$dQ!jPOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!O(Q!O!P!*l!P!Q(Q!Q![!Bx![!g(Q!g!hGz!h#X(Q#X#YGz#Y~(QR!D^[$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q!Y!ES!Y~(QR!EZ[$dQ!jPOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q!Y!ES!Y~(QR!FU`$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![!GW![!c(Q!c!i!GW!i#T(Q#T#Z!GW#Z~(QR!G_`$dQ!jPOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![!GW![!c(Q!c!i!GW!i#T(Q#T#Z!GW#Z~(QR!Hhb$dQ!jPOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!O(Q!O!P!*l!P!Q(Q!Q![!+s![!g(Q!g!hGz!h#X(Q#X#YGz#Y~(QR!Iug$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs!K^s!`(Q!`!a,v!a!c(Q!c!}#8n!}#O#:Z#O#R(Q#R#S#8n#S#T(Q#T#o#8n#o4w(Q4w5b#8n5b5i(Q5i6S#8n6S~(QR!KaZOY)jYZ!LSZ])j]^##t^r)jrs#'Ws#O)j#O#P#(O#P#Q)j#Q#R##t#R~)jR!LXT$dQYZ!Lh]^!Lhrs!Lz#O#P!M`#Q#R!LhP!LkTYZ!Lh]^!Lhrs!Lz#O#P!M`#Q#R!LhP!MPT!qPYZ!Lh]^!Lhrs!Lz#O#P!M`#Q#R!LhP!MceYZ!Lh]^!Lhrs!Lz!Q!R!Nt!R!S!Nt!S!T!Nt!T!U!Nt!U!Y# Z!w!x# p#O#P!M`#Q#R!Lh#T#U!Lh#U#V!Lh#X#Y!Lh#Y#Z!Lh#b#c!Lh#f#g!Lh#h#i!Lh#i#j#!r#j#k!Lh#l#m##[P!NwUYZ!Lh]^!Lhrs!Lz!Q!Y# Z#O#P!M`#Q#R!LhP# ^UYZ!Lh]^!Lhrs!Lz!Q!Y!Lh#O#P!M`#Q#R!LhP# sR!Q![# |!c!i# |#T#Z# |P#!PR!Q![#!Y!c!i#!Y#T#Z#!YP#!]R!Q![#!f!c!i#!f#T#Z#!fP#!iR!Q![#!r!c!i#!r#T#Z#!rP#!uR!Q![##O!c!i##O#T#Z##OP##RR!Q![##[!c!i##[#T#Z##[P##_R!Q![##h!c!i##h#T#Z##hP##kR!Q![!Lh!c!i!Lh#T#Z!LhR##w^OX(QXY(QYZ#$sZ](Q]^#%_^p(Qpq(Qqr(Qrs#&`s#O(Q#O#P#,w#P#Q(Q#Q#R#%_#R~(QR#$xV$dQXY(uYZ#$s]^#$spq(urs!Lz#O#P!M`#Q#R!LhR#%d^$dQOX(QXY(QYZ#$sZ](Q]^#%_^p(Qpq(Qqr(Qrs#&`s#O(Q#O#P#,w#P#Q(Q#Q#R#%_#R~(QR#&eZ!qPOY)jYZ!LSZ])j]^##t^r)jrs#'Ws#O)j#O#P#(O#P#Q)j#Q#R##t#R~)jR#']Z!qPOY)jYZ!LSZ])j]^##t^r)jrs!Lzs#O)j#O#P#(O#P#Q)j#Q#R##t#R~)jR#(RvOX(QXY(QYZ#$sZ](Q]^#%_^p(Qpq(Qqr(Qrs#&`s!Q(Q!Q!R#*i!R!S#*i!S!T#*i!T!U#*i!U!Y#+p!Y!w(Q!w!x#/d!x#O(Q#O#P#,w#P#Q(Q#Q#R#%_#R#T(Q#T#U#%_#U#V#%_#V#X(Q#X#Y#%_#Y#Z#%_#Z#b(Q#b#c#%_#c#f(Q#f#g#%_#g#h(Q#h#i#%_#i#j#4Q#j#k#%_#k#l(Q#l#m#6`#m~(QR#*n`$dQOX(QXY(QYZ#$sZ](Q]^#%_^p(Qpq(Qqr(Qrs#&`s!Q(Q!Q!Y#+p!Y#O(Q#O#P#,w#P#Q(Q#Q#R#%_#R~(QR#+u`$dQOX(QXY(QYZ#$sZ](Q]^#%_^p(Qpq(Qqr(Qrs#&`s!Q(Q!Q!Y#%_!Y#O(Q#O#P#,w#P#Q(Q#Q#R#%_#R~(QR#,|v$dQOX(QXY(QYZ#$sZ](Q]^#%_^p(Qpq(Qqr(Qrs#&`s!Q(Q!Q!R#*i!R!S#*i!S!T#*i!T!U#*i!U!Y#+p!Y!w(Q!w!x#/d!x#O(Q#O#P#,w#P#Q(Q#Q#R#%_#R#T(Q#T#U#%_#U#V#%_#V#X(Q#X#Y#%_#Y#Z#%_#Z#b(Q#b#c#%_#c#f(Q#f#g#%_#g#h(Q#h#i#%_#i#j#4Q#j#k#%_#k#l(Q#l#m#6`#m~(QR#/i`$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![#0k![!c(Q!c!i#0k!i#T(Q#T#Z#0k#Z~(QR#0p`$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![#1r![!c(Q!c!i#1r!i#T(Q#T#Z#1r#Z~(QR#1w`$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![#2y![!c(Q!c!i#2y!i#T(Q#T#Z#2y#Z~(QR#3O`$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![#4Q![!c(Q!c!i#4Q!i#T(Q#T#Z#4Q#Z~(QR#4V`$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![#5X![!c(Q!c!i#5X!i#T(Q#T#Z#5X#Z~(QR#5^`$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![#6`![!c(Q!c!i#6`!i#T(Q#T#Z#6`#Z~(QR#6e`$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![#7g![!c(Q!c!i#7g!i#T(Q#T#Z#7g#Z~(QR#7l`$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![#%_![!c(Q!c!i#%_!i#T(Q#T#Z#%_#Z~(QR#8uf!pP$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![#8n![!c(Q!c!}#8n!}#R(Q#R#S#8n#S#T(Q#T#o#8n#o4w(Q4w5b#8n5b5i(Q5i6S#8n6S~(QR#:`[$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws#P(Q#P#Q#;U#Q~(QR#;]Y!pP$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws~(QR#<S`$dQ!lPOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws{(Q{|#=U|![(Q![!],v!]!_(Q!_!`,v!`~(QR#=Z[$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws{(Q{|,v|~(QV#>YY$`S$dQ!lPOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws~(QR#?P[$dQ!lPOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!_(Q!_!`,v!`~(QR#?|Y$XP$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws~(QR#@sf$dQ$YPOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![#@l![!c(Q!c!}#@l!}#R(Q#R#S#@l#S#T(Q#T#o#@l#o4w(Q4w5b#@l5b5i(Q5i6S#@l6S~(QR#B`Y$]P$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws~(QR#CVY$[P$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws~(QR#C|d$dQ!lPOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!c(Q!c!}#E[!}#R(Q#R#S#Fw#S#T(Q#T#o#E[#o4w(Q4w5b#E[5b5i(Q5i6S#E[6S~(QR#Ecf$dQ!rPOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![#E[![!c(Q!c!}#E[!}#R(Q#R#S#E[#S#T(Q#T#o#E[#o4w(Q4w5b#E[5b5i(Q5i6S#E[6S~(QR#F|f$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![#E[![!c(Q!c!}#E[!}#R(Q#R#S#E[#S#T(Q#T#o#E[#o4w(Q4w5b#E[5b5i(Q5i6S#E[6S~(QR#Hgf$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![#@l![!c(Q!c!}#@l!}#R(Q#R#S#@l#S#T(Q#T#o#@l#o4w(Q4w5b#@l5b5i(Q5i6S#@l6S~(QR#JSh$dQ$YPOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![#@l![!c(Q!c!}#@l!}#R(Q#R#S#@l#S#T(Q#T#b#@l#b#c#Kn#c#o#@l#o4w(Q4w5b#@l5b5i(Q5i6S#@l6S~(QR#Kuh$dQ$YPOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![#@l![!c(Q!c!}#@l!}#R(Q#R#S#@l#S#T(Q#T#W#@l#W#X#Ma#X#o#@l#o4w(Q4w5b#@l5b5i(Q5i6S#@l6S~(QR#Mjf$dQ!lP$YPOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![#@l![!c(Q!c!}#@l!}#R(Q#R#S#@l#S#T(Q#T#o#@l#o4w(Q4w5b#@l5b5i(Q5i6S#@l6S~(QR$ Vh$dQ$YPOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws!Q(Q!Q![#@l![!c(Q!c!}#@l!}#R(Q#R#S#@l#S#T(Q#T#f#@l#f#g#Ma#g#o#@l#o4w(Q4w5b#@l5b5i(Q5i6S#@l6S~(QU$!xY$aS$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws~(QR$#oY$bP$dQOX(QXY(QYZ(uZ](Q]^(Q^p(Qpq(Qqr(Qrs)Ws~(Q",
  tokenizers: [0, 1, 2],
  topRules: {"Rel":[0,4]},
  specialized: [{term: 148, get: value => spec_identifier[value] || -1}],
  tokenPrec: 6826
});

const autocompleteList = [
    { label: "Any", type: "type" },
    { label: "AutoNumber", type: "type" },
    { label: "Boolean", type: "type" },
    { label: "Char", type: "type" },
    { label: "Day", type: "type" },
    { label: "Date", type: "type" },
    { label: "DateTime", type: "type" },
    { label: "Year", type: "type" },
    { label: "Month", type: "type" },
    { label: "Week", type: "type" },
    { label: "Hour", type: "type" },
    { label: "Minute", type: "type" },
    { label: "Second", type: "type" },
    { label: "Millisecond", type: "type" },
    { label: "Microsecond", type: "type" },
    { label: "Nanosecond", type: "type" },
    { label: "Entity", type: "type" },
    { label: "Int", type: "type" },
    { label: "Number", type: "type" },
    { label: "Missing", type: "type" },
    { label: "Floating", type: "type" },
    { label: "UnsignedInt", type: "type" },
    { label: "SignedInt", type: "type" },
    { label: "Rational", type: "type" },
    { label: "FixedDecimal", type: "type" },
    { label: "Hash", type: "type" },
    { label: "FilePos", type: "type" },
    { label: "String", type: "type" },
    { label: "def", type: "keyword" },
    { label: "output", type: "interface" },
    { label: "insert", type: "interface" },
    { label: "delete", type: "interface" },
    { label: "export", type: "interface" },
    { label: "from", type: "keyword" },
    { label: "if", type: "keyword" },
    { label: "iff", type: "keyword" },
    { label: "then", type: "keyword" },
    { label: "else", type: "keyword" },
    { label: "end", type: "keyword" },
    { label: "exists", type: "keyword" },
    { label: "where", type: "keyword" },
    { label: "with", type: "keyword" },
    { label: "select", type: "keyword" },
    { label: "implies", type: "keyword" },
    { label: "use", type: "keyword" },
    { label: "forall", type: "keyword" },
    { label: "in", type: "keyword" },
    { label: "ic", type: "keyword" },
    { label: "not", type: "keyword" },
    { label: "and", type: "keyword" },
    { label: "or", type: "keyword" },
    { label: "xor", type: "keyword" },
    { label: "union", type: "keyword" },
    { label: "_flatten", type: "function" },
    { label: "abelian_group", type: "function" },
    { label: "abs", type: "function" },
    { label: "absorption_laws", type: "function" },
    { label: "acos", type: "function" },
    { label: "acosh", type: "function" },
    { label: "acot", type: "function" },
    { label: "add", type: "function" },
    { label: "antisymmetric", type: "function" },
    { label: "approximate_abelian_group", type: "function" },
    { label: "approximate_commutative_monoid", type: "function" },
    { label: "approximate_group", type: "function" },
    { label: "approximate_monoid", type: "function" },
    { label: "approximate_ring", type: "function" },
    { label: "approximate_semiring", type: "function" },
    { label: "approximately_associative", type: "function" },
    { label: "approximately_commutative", type: "function" },
    { label: "approximately_distributive", type: "function" },
    { label: "approximately_has_inverse", type: "function" },
    { label: "approximately_left_distributive", type: "function" },
    { label: "approximately_right_distributive", type: "function" },
    { label: "approximately_zero_annihilation", type: "function" },
    { label: "argmax", type: "function" },
    { label: "argmin", type: "function" },
    { label: "arity", type: "function" },
    { label: "asin", type: "function" },
    { label: "asinh", type: "function" },
    { label: "associative", type: "function" },
    { label: "atan", type: "function" },
    { label: "atanh", type: "function" },
    { label: "auto_number", type: "function" },
    { label: "binary_operator", type: "function" },
    { label: "binary_relation", type: "function" },
    { label: "binary_relation_substitution_laws", type: "function" },
    { label: "bitwise_and", type: "function" },
    { label: "bitwise_left_shift", type: "function" },
    { label: "bitwise_not", type: "function" },
    { label: "bitwise_or", type: "function" },
    { label: "bitwise_right_shift", type: "function" },
    { label: "bitwise_unsigned_right_shift", type: "function" },
    { label: "bitwise_xor", type: "function" },
    { label: "boolean_and", type: "function" },
    { label: "boolean_false", type: "function" },
    { label: "boolean_not", type: "function" },
    { label: "boolean_or", type: "function" },
    { label: "boolean_true", type: "function" },
    { label: "bottom", type: "function" },
    { label: "bounded_lattice", type: "function" },
    { label: "bounded_semilattice", type: "function" },
    { label: "byte", type: "function" },
    { label: "capture_group_by_index", type: "function" },
    { label: "capture_group_by_name", type: "function" },
    { label: "cart", type: "function" },
    { label: "cbrt", type: "function" },
    { label: "ceil", type: "function" },
    { label: "char", type: "function" },
    { label: "clamp", type: "function" },
    { label: "commutative", type: "function" },
    { label: "commutative_monoid", type: "function" },
    { label: "comparable", type: "function" },
    { label: "complement", type: "function" },
    { label: "concat", type: "function" },
    { label: "cos", type: "function" },
    { label: "cosh", type: "function" },
    { label: "cot", type: "function" },
    { label: "count", type: "function" },
    { label: "date_add", type: "function" },
    { label: "date_day", type: "function" },
    { label: "date_dayname", type: "function" },
    { label: "date_dayofquarter", type: "function" },
    { label: "date_dayofweek", type: "function" },
    { label: "date_dayofweekofmonth", type: "function" },
    { label: "date_dayofyear", type: "function" },
    { label: "date_daysinmonth", type: "function" },
    { label: "date_isleapyear", type: "function" },
    { label: "date_month", type: "function" },
    { label: "date_monthname", type: "function" },
    { label: "date_quarterofyear", type: "function" },
    { label: "date_subtract", type: "function" },
    { label: "date_week", type: "function" },
    { label: "date_year", type: "function" },
    { label: "dates_period_days", type: "function" },
    { label: "datetime_add", type: "function" },
    { label: "datetime_day", type: "function" },
    { label: "datetime_day_", type: "function" },
    { label: "datetime_dayname", type: "function" },
    { label: "datetime_dayofquarter", type: "function" },
    { label: "datetime_dayofweek", type: "function" },
    { label: "datetime_dayofweekofmonth", type: "function" },
    { label: "datetime_dayofyear", type: "function" },
    { label: "datetime_daysinmonth", type: "function" },
    { label: "datetime_hour", type: "function" },
    { label: "datetime_hour_", type: "function" },
    { label: "datetime_isleapyear", type: "function" },
    { label: "datetime_minute", type: "function" },
    { label: "datetime_minute_", type: "function" },
    { label: "datetime_month", type: "function" },
    { label: "datetime_month_", type: "function" },
    { label: "datetime_monthname", type: "function" },
    { label: "datetime_now", type: "function" },
    { label: "datetime_quarterofyear", type: "function" },
    { label: "datetime_second", type: "function" },
    { label: "datetime_subtract", type: "function" },
    { label: "datetime_to_nanoseconds", type: "function" },
    { label: "datetime_week", type: "function" },
    { label: "datetime_week_", type: "function" },
    { label: "datetime_year", type: "function" },
    { label: "datetime_year_", type: "function" },
    { label: "datetimes_period_milliseconds", type: "function" },
    { label: "decimal", type: "function" },
    { label: "decimal_bit_length", type: "function" },
    { label: "decimal_int_convert", type: "function" },
    { label: "decimal_precision", type: "function" },
    { label: "decode_base", type: "function" },
    { label: "default_value", type: "function" },
    { label: "deg", type: "function" },
    { label: "denominator", type: "function" },
    { label: "describe", type: "function" },
    { label: "diff", type: "function" },
    { label: "disjoint", type: "function" },
    { label: "distributive", type: "function" },
    { label: "divide", type: "function" },
    { label: "docstring", type: "function" },
    { label: "domain", type: "function" },
    { label: "dot_join", type: "function" },
    { label: "double_metaphone", type: "function" },
    { label: "empty", type: "function" },
    { label: "encode_base", type: "function" },
    { label: "epoch_milliseconds", type: "function" },
    { label: "eq", type: "function" },
    { label: "equal", type: "function" },
    { label: "equivalence_relation", type: "function" },
    { label: "erf", type: "function" },
    { label: "erfinv", type: "function" },
    { label: "escape_regex_metachars", type: "function" },
    { label: "export_csv", type: "function" },
    { label: "export_json", type: "function" },
    { label: "factorial", type: "function" },
    { label: "filepos", type: "function" },
    { label: "filepos_value", type: "function" },
    { label: "first", type: "function" },
    { label: "float", type: "function" },
    { label: "float_int_convert", type: "function" },
    { label: "floor", type: "function" },
    { label: "floor_divide", type: "function" },
    { label: "floor_to_int", type: "function" },
    { label: "format_date", type: "function" },
    { label: "format_datetime", type: "function" },
    { label: "formula_card_est", type: "function" },
    { label: "frequency", type: "function" },
    { label: "function", type: "function" },
    { label: "geometric_mean", type: "function" },
    { label: "glm_generic", type: "function" },
    { label: "glm_linear_regression", type: "function" },
    { label: "glm_logistic_regression", type: "function" },
    { label: "glm_predict", type: "function" },
    { label: "glm_probit_regression", type: "function" },
    { label: "graphviz", type: "function" },
    { label: "group", type: "function" },
    { label: "gt", type: "function" },
    { label: "gt_eq", type: "function" },
    { label: "harmonic_mean", type: "function" },
    { label: "has_identity", type: "function" },
    { label: "has_left_identity", type: "function" },
    { label: "has_left_zero", type: "function" },
    { label: "has_maximal_element", type: "function" },
    { label: "has_minimal_element", type: "function" },
    { label: "has_right_identity", type: "function" },
    { label: "has_right_zero", type: "function" },
    { label: "hash", type: "function" },
    { label: "hash_value_uint", type: "function" },
    { label: "haversine", type: "function" },
    { label: "help", type: "function" },
    { label: "html", type: "function" },
    { label: "ic", type: "function" },
    { label: "idempotent", type: "function" },
    { label: "identity", type: "function" },
    { label: "int", type: "function" },
    { label: "int_float_convert", type: "function" },
    { label: "int_spread_by_even", type: "function" },
    { label: "int_spread_by_ratio", type: "function" },
    { label: "intersect", type: "function" },
    { label: "irreflexive", type: "function" },
    { label: "is_", type: "function" },
    { label: "jacobian", type: "function" },
    { label: "join_bounded_lattice", type: "function" },
    { label: "last", type: "function" },
    { label: "lattice", type: "function" },
    { label: "left_distributive", type: "function" },
    { label: "left_identity", type: "function" },
    { label: "left_override", type: "function" },
    { label: "left_zero", type: "function" },
    { label: "levenshtein", type: "function" },
    { label: "like_match", type: "function" },
    { label: "linear_regression", type: "function" },
    { label: "linear_regression_objective", type: "function" },
    { label: "linear_regression_predict", type: "function" },
    { label: "lined_csv", type: "function" },
    { label: "load_csv", type: "function" },
    { label: "load_csv_row_wise", type: "function" },
    { label: "load_json", type: "function" },
    { label: "log", type: "function" },
    { label: "log_card_est", type: "function" },
    { label: "lowercase", type: "function" },
    { label: "lr_random_initial_point", type: "function" },
    { label: "lt", type: "function" },
    { label: "lt_eq", type: "function" },
    { label: "mae", type: "function" },
    { label: "markdown", type: "function" },
    { label: "max", type: "function" },
    { label: "max_k", type: "function" },
    { label: "maximal_element", type: "function" },
    { label: "maximum", type: "function" },
    { label: "mean", type: "function" },
    { label: "mean_normalization", type: "function" },
    { label: "median", type: "function" },
    { label: "meet_bounded_lattice", type: "function" },
    { label: "metaphone", type: "function" },
    { label: "min", type: "function" },
    { label: "min_k", type: "function" },
    { label: "min_max_normalization", type: "function" },
    { label: "minimal_element", type: "function" },
    { label: "minimize_initial_point", type: "function" },
    { label: "minimum", type: "function" },
    { label: "missing", type: "function" },
    { label: "mlpack_adaboost", type: "function" },
    { label: "mlpack_adaboost_predict", type: "function" },
    { label: "mlpack_approx_kfn", type: "function" },
    { label: "mlpack_approx_kfn_build", type: "function" },
    { label: "mlpack_dbscan", type: "function" },
    { label: "mlpack_decision_tree", type: "function" },
    { label: "mlpack_decision_tree_predict", type: "function" },
    { label: "mlpack_det", type: "function" },
    { label: "mlpack_det_build", type: "function" },
    { label: "mlpack_emst", type: "function" },
    { label: "mlpack_fastmks", type: "function" },
    { label: "mlpack_fastmks_build", type: "function" },
    { label: "mlpack_gmm_generate", type: "function" },
    { label: "mlpack_gmm_probability", type: "function" },
    { label: "mlpack_gmm_train", type: "function" },
    { label: "mlpack_hoeffding_tree", type: "function" },
    { label: "mlpack_hoeffding_tree_predict", type: "function" },
    { label: "mlpack_kernel_pca", type: "function" },
    { label: "mlpack_kfn", type: "function" },
    { label: "mlpack_kfn_build", type: "function" },
    { label: "mlpack_kmeans", type: "function" },
    { label: "mlpack_kmeans_centroids", type: "function" },
    { label: "mlpack_knn", type: "function" },
    { label: "mlpack_knn_build", type: "function" },
    { label: "mlpack_krann", type: "function" },
    { label: "mlpack_krann_build", type: "function" },
    { label: "mlpack_lars", type: "function" },
    { label: "mlpack_lars_predict", type: "function" },
    { label: "mlpack_linear_regression", type: "function" },
    { label: "mlpack_linear_regression_predict", type: "function" },
    { label: "mlpack_linear_svm", type: "function" },
    { label: "mlpack_linear_svm_predict", type: "function" },
    { label: "mlpack_logistic_regression", type: "function" },
    { label: "mlpack_logistic_regression_predict", type: "function" },
    { label: "mlpack_lsh", type: "function" },
    { label: "mlpack_lsh_build", type: "function" },
    { label: "mlpack_mean_shift", type: "function" },
    { label: "mlpack_nbc", type: "function" },
    { label: "mlpack_nbc_predict", type: "function" },
    { label: "mlpack_nmf", type: "function" },
    { label: "mlpack_pca", type: "function" },
    { label: "mlpack_perceptron", type: "function" },
    { label: "mlpack_perceptron_predict", type: "function" },
    { label: "mlpack_preprocess_split", type: "function" },
    { label: "mlpack_radical", type: "function" },
    { label: "mlpack_random_forest", type: "function" },
    { label: "mlpack_random_forest_predict", type: "function" },
    { label: "mlpack_softmax_regression", type: "function" },
    { label: "mlpack_softmax_regression_predict", type: "function" },
    { label: "mode", type: "function" },
    { label: "modulo", type: "function" },
    { label: "monoid", type: "function" },
    { label: "mse", type: "function" },
    { label: "multiply", type: "function" },
    { label: "murmurhash", type: "function" },
    { label: "nanoseconds_to_datetime", type: "function" },
    { label: "natural_exp", type: "function" },
    { label: "natural_log", type: "function" },
    { label: "neq", type: "function" },
    { label: "not", type: "function" },
    { label: "nullary_relation", type: "function" },
    { label: "num_bytes", type: "function" },
    { label: "num_chars", type: "function" },
    { label: "numerator", type: "function" },
    { label: "pack", type: "function" },
    { label: "parse_date", type: "function" },
    { label: "parse_datetime", type: "function" },
    { label: "parse_decimal", type: "function" },
    { label: "parse_float", type: "function" },
    { label: "parse_int", type: "function" },
    { label: "parse_json", type: "function" },
    { label: "parse_uuid", type: "function" },
    { label: "partial_order", type: "function" },
    { label: "partial_order_and_bounded_lattice", type: "function" },
    { label: "partial_order_and_join_bounded_lattice", type: "function" },
    { label: "partial_order_and_lattice", type: "function" },
    { label: "partial_order_and_meet_bounded_lattice", type: "function" },
    { label: "pattern_match", type: "function" },
    { label: "percentile", type: "function" },
    { label: "percentile_nearest", type: "function" },
    { label: "period_add", type: "function" },
    { label: "period_day_to_int", type: "function" },
    { label: "period_max", type: "function" },
    { label: "period_min", type: "function" },
    { label: "pi_float", type: "function" },
    { label: "pivot", type: "function" },
    { label: "pop_standard_deviation", type: "function" },
    { label: "pop_variance", type: "function" },
    { label: "pop_zscore_normalization", type: "function" },
    { label: "power", type: "function" },
    { label: "prefix_join", type: "function" },
    { label: "preorder", type: "function" },
    { label: "product", type: "function" },
    { label: "proper_subset", type: "function" },
    { label: "proper_superset", type: "function" },
    { label: "rad", type: "function" },
    { label: "random_mersenne_twister", type: "function" },
    { label: "random_threefry_float", type: "function" },
    { label: "random_threefry_uint", type: "function" },
    { label: "random_uint", type: "function" },
    { label: "range", type: "function" },
    { label: "rational", type: "function" },
    { label: "rational_convert", type: "function" },
    { label: "reflexive", type: "function" },
    { label: "regex_compile", type: "function" },
    { label: "regex_match", type: "function" },
    { label: "regex_match_all", type: "function" },
    { label: "rel", type: "function" },
    { label: "relname_string", type: "function" },
    { label: "remainder", type: "function" },
    { label: "reverse_sort", type: "function" },
    { label: "right_distributive", type: "function" },
    { label: "right_identity", type: "function" },
    { label: "right_override", type: "function" },
    { label: "right_zero", type: "function" },
    { label: "ring", type: "function" },
    { label: "rmse", type: "function" },
    { label: "round", type: "function" },
    { label: "sample_standard_deviation", type: "function" },
    { label: "sample_variance", type: "function" },
    { label: "sample_zscore_normalization", type: "function" },
    { label: "second", type: "function" },
    { label: "semilattice", type: "function" },
    { label: "semiring", type: "function" },
    { label: "sign", type: "function" },
    { label: "sin", type: "function" },
    { label: "sinh", type: "function" },
    { label: "sort", type: "function" },
    { label: "soundex", type: "function" },
    { label: "spread", type: "function" },
    { label: "sqrt", type: "function" },
    { label: "squared", type: "function" },
    { label: "squared_deviation", type: "function" },
    { label: "strict_partial_order", type: "function" },
    { label: "strict_total_order", type: "function" },
    { label: "string", type: "function" },
    { label: "string_join", type: "function" },
    { label: "string_length", type: "function" },
    { label: "string_replace", type: "function" },
    { label: "string_replace_multiple", type: "function" },
    { label: "string_split", type: "function" },
    { label: "string_trim", type: "function" },
    { label: "subset", type: "function" },
    { label: "substring", type: "function" },
    { label: "substring_bytes", type: "function" },
    { label: "subtract", type: "function" },
    { label: "suffix_join", type: "function" },
    { label: "sum", type: "function" },
    { label: "sum_int", type: "function" },
    { label: "superset", type: "function" },
    { label: "svg", type: "function" },
    { label: "symmetric", type: "function" },
    { label: "table", type: "function" },
    { label: "tan", type: "function" },
    { label: "tanh", type: "function" },
    { label: "ternary_relation", type: "function" },
    { label: "top", type: "function" },
    { label: "total", type: "function" },
    { label: "total_order", type: "function" },
    { label: "transitive", type: "function" },
    { label: "transpose", type: "function" },
    { label: "trunc", type: "function" },
    { label: "trunc_divide", type: "function" },
    { label: "trunc_to_int", type: "function" },
    { label: "uint", type: "function" },
    { label: "unary_operator", type: "function" },
    { label: "unary_relation", type: "function" },
    { label: "unary_relation_substitution_laws", type: "function" },
    { label: "union", type: "function" },
    { label: "unit_normalization", type: "function" },
    { label: "unix_epoch", type: "function" },
    { label: "unpack", type: "function" },
    { label: "uppercase", type: "function" },
    { label: "uuid_string", type: "function" },
    { label: "vega", type: "function" },
    { label: "vegalite", type: "function" },
    { label: "vegalite_utils", type: "function" },
    { label: "view_json", type: "function" },
    { label: "weighted_mean", type: "function" },
    { label: "xgboost_classifier", type: "function" },
    { label: "xgboost_classifier_predict", type: "function" },
    { label: "xgboost_classifier_probabilities", type: "function" },
    { label: "xgboost_feature_importances", type: "function" },
    { label: "xgboost_regressor", type: "function" },
    { label: "xgboost_regressor_predict", type: "function" },
    { label: "zero_annihilation", type: "function" },
    { label: "zero_of_operator", type: "function" },
    { label: "zip", type: "function" },
    { label: "registered", type: "variable", info: "Registered Sign / Registered Trade Mark Sign", apply: "®" },
    { label: "degree", type: "variable", info: "Degree Sign", apply: "°" },
    { label: "pm", type: "variable", info: "Plus-Minus Sign / Plus-Or-Minus Sign", apply: "±" },
    { label: "\\^2", info: "Superscript Two / Superscript Digit Two", apply: "²" },
    { label: "\\^3", info: "Superscript Three / Superscript Digit Three", apply: "³" },
    { label: "\\^1", info: "Superscript One / Superscript Digit One", apply: "¹" },
    { label: "\\1/4", type: "variable", info: "Vulgar Fraction One Quarter / Fraction One Quarter", apply: "¼" },
    { label: "\\1/2", type: "variable", info: "Vulgar Fraction One Half / Fraction One Half", apply: "½" },
    { label: "\\3/4", type: "variable", info: "Vulgar Fraction Three Quarters / Fraction Three Quarters", apply: "¾" },
    { label: "\\questiondown", type: "variable", info: "Inverted Question Mark", apply: "¿" },
    { label: "\\times", type: "variable", info: "Multiplication Sign", apply: "×" },
    { label: "\\div", type: "variable", info: "Division Sign", apply: "÷" },
    { label: "\\Alpha", type: "variable", info: "Greek Capital Letter Alpha", apply: "Α" },
    { label: "\\Beta", type: "variable", info: "Greek Capital Letter Beta", apply: "Β" },
    { label: "\\Gamma", type: "variable", info: "Greek Capital Letter Gamma", apply: "Γ" },
    { label: "\\Delta", type: "variable", info: "Greek Capital Letter Delta", apply: "Δ" },
    { label: "\\Epsilon", type: "variable", info: "Greek Capital Letter Epsilon", apply: "Ε" },
    { label: "\\Zeta", type: "variable", info: "Greek Capital Letter Zeta", apply: "Ζ" },
    { label: "\\Eta", type: "variable", info: "Greek Capital Letter Eta", apply: "Η" },
    { label: "\\Theta", type: "variable", info: "Greek Capital Letter Theta", apply: "Θ" },
    { label: "\\Iota", type: "variable", info: "Greek Capital Letter Iota", apply: "Ι" },
    { label: "\\Kappa", type: "variable", info: "Greek Capital Letter Kappa", apply: "Κ" },
    { label: "\\Lambda", type: "variable", info: "Greek Capital Letter Lamda / Greek Capital Letter Lambda", apply: "Λ" },
    { label: "\\upMu", type: "variable", info: "Greek Capital Letter Mu", apply: "Μ" },
    { label: "\\upNu", type: "variable", info: "Greek Capital Letter Nu", apply: "Ν" },
    { label: "\\Xi", type: "variable", info: "Greek Capital Letter Xi", apply: "Ξ" },
    { label: "\\upOmicron", type: "variable", info: "Greek Capital Letter Omicron", apply: "Ο" },
    { label: "\\Pi", type: "variable", info: "Greek Capital Letter Pi", apply: "Π" },
    { label: "\\Rho", type: "variable", info: "Greek Capital Letter Rho", apply: "Ρ" },
    { label: "\\Sigma", type: "variable", info: "Greek Capital Letter Sigma", apply: "Σ" },
    { label: "\\Tau", type: "variable", info: "Greek Capital Letter Tau", apply: "Τ" },
    { label: "\\Upsilon", type: "variable", info: "Greek Capital Letter Upsilon", apply: "Υ" },
    { label: "\\Phi", type: "variable", info: "Greek Capital Letter Phi", apply: "Φ" },
    { label: "\\Chi", type: "variable", info: "Greek Capital Letter Chi", apply: "Χ" },
    { label: "\\Psi", type: "variable", info: "Greek Capital Letter Psi", apply: "Ψ" },
    { label: "\\Omega", type: "variable", info: "Greek Capital Letter Omega", apply: "Ω" },
    { label: "\\alpha", type: "variable", info: "Greek Small Letter Alpha", apply: "α" },
    { label: "\\beta", type: "variable", info: "Greek Small Letter Beta", apply: "β" },
    { label: "\\gamma", type: "variable", info: "Greek Small Letter Gamma", apply: "γ" },
    { label: "\\delta", type: "variable", info: "Greek Small Letter Delta", apply: "δ" },
    { label: "\\varepsilon", type: "variable", info: "Greek Small Letter Epsilon", apply: "ε" },
    { label: "\\zeta", type: "variable", info: "Greek Small Letter Zeta", apply: "ζ" },
    { label: "\\eta", type: "variable", info: "Greek Small Letter Eta", apply: "η" },
    { label: "\\theta", type: "variable", info: "Greek Small Letter Theta", apply: "θ" },
    { label: "\\iota", type: "variable", info: "Greek Small Letter Iota", apply: "ι" },
    { label: "\\kappa", type: "variable", info: "Greek Small Letter Kappa", apply: "κ" },
    { label: "\\lambda", type: "variable", info: "Greek Small Letter Lamda / Greek Small Letter Lambda", apply: "λ" },
    { label: "\\mu", type: "variable", info: "Greek Small Letter Mu", apply: "μ" },
    { label: "\\nu", type: "variable", info: "Greek Small Letter Nu", apply: "ν" },
    { label: "\\xi", type: "variable", info: "Greek Small Letter Xi", apply: "ξ" },
    { label: "\\upomicron", type: "variable", info: "Greek Small Letter Omicron", apply: "ο" },
    { label: "\\pi", type: "variable", info: "Greek Small Letter Pi", apply: "π" },
    { label: "\\rho", type: "variable", info: "Greek Small Letter Rho", apply: "ρ" },
    { label: "\\varsigma", type: "variable", info: "Greek Small Letter Final Sigma", apply: "ς" },
    { label: "\\sigma", type: "variable", info: "Greek Small Letter Sigma", apply: "σ" },
    { label: "\\tau", type: "variable", info: "Greek Small Letter Tau", apply: "τ" },
    { label: "\\upsilon", type: "variable", info: "Greek Small Letter Upsilon", apply: "υ" },
    { label: "\\varphi", type: "variable", info: "Greek Small Letter Phi", apply: "φ" },
    { label: "\\chi", type: "variable", info: "Greek Small Letter Chi", apply: "χ" },
    { label: "\\psi", type: "variable", info: "Greek Small Letter Psi", apply: "ψ" },
    { label: "\\omega", type: "variable", info: "Greek Small Letter Omega", apply: "ω" },
    { label: "\\upvarbeta", type: "variable", info: "Greek Beta Symbol / Greek Small Letter Curled Beta", apply: "ϐ" },
    { label: "\\vartheta", type: "variable", info: "Greek Theta Symbol / Greek Small Letter Script Theta", apply: "ϑ" },
    { label: "\\phi", type: "variable", info: "Greek Phi Symbol / Greek Small Letter Script Phi", apply: "ϕ" },
    { label: "\\varpi", type: "variable", info: "Greek Pi Symbol / Greek Small Letter Omega Pi", apply: "ϖ" },
    { label: "\\upoldKoppa", type: "variable", info: "Greek Letter Archaic Koppa", apply: "Ϙ" },
    { label: "\\upoldkoppa", type: "variable", info: "Greek Small Letter Archaic Koppa", apply: "ϙ" },
    { label: "\\Stigma", type: "variable", info: "Greek Letter Stigma / Greek Capital Letter Stigma", apply: "Ϛ" },
    { label: "\\upstigma", type: "variable", info: "Greek Small Letter Stigma", apply: "ϛ" },
    { label: "\\Digamma", type: "variable", info: "Greek Letter Digamma / Greek Capital Letter Digamma", apply: "Ϝ" },
    { label: "\\digamma", type: "variable", info: "Greek Small Letter Digamma", apply: "ϝ" },
    { label: "\\Koppa", type: "variable", info: "Greek Letter Koppa / Greek Capital Letter Koppa", apply: "Ϟ" },
    { label: "\\upkoppa", type: "variable", info: "Greek Small Letter Koppa", apply: "ϟ" },
    { label: "\\Sampi", type: "variable", info: "Greek Letter Sampi / Greek Capital Letter Sampi", apply: "Ϡ" },
    { label: "\\upsampi", type: "variable", info: "Greek Small Letter Sampi", apply: "ϡ" },
    { label: "\\varkappa", type: "variable", info: "Greek Kappa Symbol / Greek Small Letter Script Kappa", apply: "ϰ" },
    { label: "\\varrho", type: "variable", info: "Greek Rho Symbol / Greek Small Letter Tailed Rho", apply: "ϱ" },
    { label: "\\varTheta", type: "variable", info: "Greek Capital Theta Symbol", apply: "ϴ" },
    { label: "\\epsilon", type: "variable", info: "Greek Lunate Epsilon Symbol", apply: "ϵ" },
    { label: "\\backepsilon", type: "variable", info: "Greek Reversed Lunate Epsilon Symbol", apply: "϶" },
    { label: "\\^0", info: "Superscript Zero / Superscript Digit Zero", apply: "⁰" },
    { label: "\\^i", info: "Superscript Latin Small Letter I", apply: "ⁱ" },
    { label: "\\^4", info: "Superscript Four / Superscript Digit Four", apply: "⁴" },
    { label: "\\^5", info: "Superscript Five / Superscript Digit Five", apply: "⁵" },
    { label: "\\^6", info: "Superscript Six / Superscript Digit Six", apply: "⁶" },
    { label: "\\^7", info: "Superscript Seven / Superscript Digit Seven", apply: "⁷" },
    { label: "\\^8", info: "Superscript Eight / Superscript Digit Eight", apply: "⁸" },
    { label: "\\^9", info: "Superscript Nine / Superscript Digit Nine", apply: "⁹" },
    { label: "\\^+", info: "Superscript Plus Sign", apply: "⁺" },
    { label: "\\^-", info: "Superscript Minus / Superscript Hyphen-Minus", apply: "⁻" },
    { label: "\\^=", info: "Superscript Equals Sign", apply: "⁼" },
    { label: "\\^(", info: "Superscript Left Parenthesis / Superscript Opening Parenthesis", apply: "⁽" },
    { label: "\\^)", info: "Superscript Right Parenthesis / Superscript Closing Parenthesis", apply: "⁾" },
    { label: "\\^n", info: "Superscript Latin Small Letter N", apply: "ⁿ" },
    { label: "\\_0", type: "variable", info: "Subscript Zero / Subscript Digit Zero", apply: "₀" },
    { label: "\\_1", type: "variable", info: "Subscript One / Subscript Digit One", apply: "₁" },
    { label: "\\_2", type: "variable", info: "Subscript Two / Subscript Digit Two", apply: "₂" },
    { label: "\\_3", type: "variable", info: "Subscript Three / Subscript Digit Three", apply: "₃" },
    { label: "\\_4", type: "variable", info: "Subscript Four / Subscript Digit Four", apply: "₄" },
    { label: "\\_5", type: "variable", info: "Subscript Five / Subscript Digit Five", apply: "₅" },
    { label: "\\_6", type: "variable", info: "Subscript Six / Subscript Digit Six", apply: "₆" },
    { label: "\\_7", type: "variable", info: "Subscript Seven / Subscript Digit Seven", apply: "₇" },
    { label: "\\_8", type: "variable", info: "Subscript Eight / Subscript Digit Eight", apply: "₈" },
    { label: "\\_9", type: "variable", info: "Subscript Nine / Subscript Digit Nine", apply: "₉" },
    { label: "\\forall", type: "variable", info: "For All", apply: "∀" },
    { label: "\\complement", type: "variable", info: "Complement", apply: "∁" },
    { label: "\\partial", type: "variable", info: "Partial Differential", apply: "∂" },
    { label: "\\exists", type: "variable", info: "There Exists", apply: "∃" },
    { label: "\\nexists", type: "variable", info: "There Does Not Exist", apply: "∄" },
    { label: "\\emptyset", type: "variable", info: "Empty Set", apply: "∅" },
    { label: "\\increment", type: "variable", info: "Increment", apply: "∆" },
    { label: "\\nabla", type: "variable", info: "Nabla", apply: "∇" },
    { label: "\\in", type: "variable", info: "Element Of", apply: "∈" },
    { label: "\\notin", type: "variable", info: "Not An Element Of", apply: "∉" },
    { label: "\\sqrt", type: "variable", info: "Square Root", apply: "√" },
    { label: "\\cbrt", type: "variable", info: "Cube Root", apply: "∛" },
    { label: "\\fourthroot", type: "variable", info: "Fourth Root", apply: "∜" },
    { label: "\\propto", type: "variable", info: "Proportional To", apply: "∝" },
    { label: "\\infty", type: "variable", info: "Infinity", apply: "∞" },
    { label: "\\cap", type: "variable", info: "Intersection", apply: "∩" },
    { label: "\\cup", type: "variable", info: "Union", apply: "∪" },
    { label: "\\therefore", type: "variable", info: "Therefore", apply: "∴" },
    { label: "\\because", type: "variable", info: "Because", apply: "∵" },
    { label: "\\leq", type: "variable", info: "Less-Than Or Equal To / Less Than Or Equal To", apply: "≤" },
    { label: "\\geq", type: "variable", info: "Greater-Than Or Equal To / Greater Than Or Equal To", apply: "≥" },
    { label: "\\subset", type: "variable", info: "Subset Of", apply: "⊂" },
    { label: "\\supset", type: "variable", info: "Superset Of", apply: "⊃" },
    { label: "\\nsubset", type: "variable", info: "Not A Subset Of", apply: "⊄" },
    { label: "\\nsupset", type: "variable", info: "Not A Superset Of", apply: "⊅" },
    { label: "\\subseteq", type: "variable", info: "Subset Of Or Equal To", apply: "⊆" },
    { label: "\\supseteq", type: "variable", info: "Superset Of Or Equal To", apply: "⊇" },
    { label: "\\nsubseteq", type: "variable", info: "Neither A Subset Of Nor Equal To", apply: "⊈" },
    { label: "\\nsupseteq", type: "variable", info: "Neither A Superset Of Nor Equal To", apply: "⊉" },
    { label: "\\bowtie", type: "variable", info: "Bowtie", apply: "⋈" },
    { label: "\\ltimes", type: "variable", info: "Left Normal Factor Semidirect Product", apply: "⋉" },
    { label: "\\rtimes", type: "variable", info: "Right Normal Factor Semidirect Product", apply: "⋊" },
    { label: "\\vdots", type: "variable", info: "Vertical Ellipsis", apply: "⋮" },
    { label: "\\cdots", type: "variable", info: "Midline Horizontal Ellipsis", apply: "⋯" },
    { label: "\\adots", type: "variable", info: "Up Right Diagonal Ellipsis", apply: "⋰" },
    { label: "\\ddots", type: "variable", info: "Down Right Diagonal Ellipsis", apply: "⋱" }
];

const relLanguage = language.LRLanguage.define({
    parser: parser.configure({
        props: [
            // indentNodeProp.add({
            //   Application: delimitedIndent({closing: ")", align: false})
            // }),
            // foldNodeProp.add({
            //   Application: foldInside
            // }),
            highlight.styleTags({
                'use forall for in iff if then else end where with select implies': highlight.tags.controlKeyword,
                'not and or xor': highlight.tags.operatorKeyword,
                'as from inline ic doc raw entity type value': highlight.tags.keyword,
                'output insert delete abort export': highlight.tags.emphasis,
                'def': highlight.tags.definitionKeyword,
                'module': highlight.tags.moduleKeyword,
                'Any String Int Number Char Missing Float Floating UnsignedInt SignedInt Rational FixedDecimal RelName Entity AutoNumber Hash FilePos Date DateTime Year Month Week Day Hour Minute Second Millisecond Microsecond Nanosecond Boolean': highlight.tags.typeName,
                Number: highlight.tags.number,
                BooleanLiteral: highlight.tags.bool,
                StringLiteral: highlight.tags.string,
                MultilineStringLiteral: highlight.tags.string,
                MultilineRawStringLiteral: highlight.tags.string,
                AssignOp: highlight.tags.definitionOperator,
                LineComment: highlight.tags.lineComment,
                BlockComment: highlight.tags.blockComment,
                MultilineBlockComment: highlight.tags.blockComment,
                VariableName: highlight.tags.definition(highlight.tags.variableName),
                Atom: highlight.tags.atom,
                RelnameLiteral: highlight.tags.literal,
                RelnameStringLiteral: highlight.tags.literal,
                ValueTypeLiteral: highlight.tags.literal,
                DefineStatement: highlight.tags.atom,
                DateLiteral: highlight.tags.string,
                DateTimeLiteral: highlight.tags.string,
                Operator: highlight.tags.operatorKeyword,
                '( )': highlight.tags.paren,
                '[ ]': highlight.tags.squareBracket,
                '{ }': highlight.tags.brace,
                ':': highlight.tags.derefOperator,
                ', ;': highlight.tags.separator
            })
        ]
    }),
    languageData: {
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`", '"""'] },
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
        // indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
        wordChars: "$"
    }
});
// Autocomplete
const relCompletion = relLanguage.data.of({
    autocomplete: autocomplete.completeFromList(autocompleteList)
});
function rel() {
    return new language.LanguageSupport(relLanguage, [relCompletion]);
}

exports.rel = rel;
exports.relCompletion = relCompletion;
exports.relLanguage = relLanguage;
